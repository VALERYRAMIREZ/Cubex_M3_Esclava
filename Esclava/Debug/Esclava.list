
Esclava.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f18  08005f18  000202bc  2**0
                  CONTENTS
  4 .ARM          00000000  08005f18  08005f18  000202bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f18  08005f18  000202bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  08005f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200002bc  080061dc  000202bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  080061dc  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ac2  00000000  00000000  000202e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003842  00000000  00000000  00036da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008b9e  00000000  00000000  0003a5e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ab0  00000000  00000000  00043188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001030  00000000  00000000  00043c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015eb2  00000000  00000000  00044c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000eccd  00000000  00000000  0005ab1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00070ce2  00000000  00000000  000697e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000da4c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026f4  00000000  00000000  000da544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002bc 	.word	0x200002bc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ae0 	.word	0x08005ae0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002c0 	.word	0x200002c0
 800014c:	08005ae0 	.word	0x08005ae0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <MX_ADC1_Init+0x48>)
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_ADC1_Init+0x4c>)
{
 80005ec:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	2400      	movs	r4, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005f0:	2501      	movs	r5, #1
  hadc1.Instance = ADC1;
 80005f2:	6003      	str	r3, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
{
 80005f8:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80005fe:	9403      	str	r4, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000600:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000602:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000604:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000606:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000608:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800060a:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060c:	f001 fdea 	bl	80021e4 <HAL_ADC_Init>
 8000610:	b108      	cbz	r0, 8000616 <MX_ADC1_Init+0x2e>
  {
    Error_Handler();
 8000612:	f000 fda9 	bl	8001168 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000616:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	a901      	add	r1, sp, #4
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_ADC1_Init+0x48>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061c:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000620:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000622:	f001 fc4f 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 8000626:	b108      	cbz	r0, 800062c <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 8000628:	f000 fd9e 	bl	8001168 <Error_Handler>
  }

}
 800062c:	b005      	add	sp, #20
 800062e:	bd30      	pop	{r4, r5, pc}
 8000630:	200002e4 	.word	0x200002e4
 8000634:	40012400 	.word	0x40012400

08000638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000638:	b530      	push	{r4, r5, lr}
 800063a:	4605      	mov	r5, r0
 800063c:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	2210      	movs	r2, #16
 8000640:	2100      	movs	r1, #0
 8000642:	a802      	add	r0, sp, #8
 8000644:	f004 fc62 	bl	8004f0c <memset>
  if(adcHandle->Instance==ADC1)
 8000648:	682a      	ldr	r2, [r5, #0]
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <HAL_ADC_MspInit+0x98>)
 800064c:	429a      	cmp	r2, r3
 800064e:	d13d      	bne.n	80006cc <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000650:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000654:	699a      	ldr	r2, [r3, #24]
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = FASE1_SENSOR_Pin|FASE2_SENSOR_Pin|FASE3_SENSOR_Pin|FASE4_SENSOR_Pin 
                          |FASE5_SENSOR_Pin|FASE6_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800065c:	619a      	str	r2, [r3, #24]
 800065e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	481c      	ldr	r0, [pc, #112]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000666:	9200      	str	r2, [sp, #0]
 8000668:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800066c:	4c1a      	ldr	r4, [pc, #104]	; (80006d8 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	f042 0204 	orr.w	r2, r2, #4
 8000672:	619a      	str	r2, [r3, #24]
 8000674:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000676:	223f      	movs	r2, #63	; 0x3f
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000680:	2303      	movs	r3, #3
 8000682:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f002 f8f3 	bl	8002870 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800068a:	2080      	movs	r0, #128	; 0x80
 800068c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000690:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000692:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000696:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069a:	4910      	ldr	r1, [pc, #64]	; (80006dc <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800069c:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069e:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006a2:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80006a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006aa:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80006ac:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006ae:	f001 ff1d 	bl	80024ec <HAL_DMA_Init>
 80006b2:	b108      	cbz	r0, 80006b8 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80006b4:	f000 fd58 	bl	8001168 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ba:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006bc:	2012      	movs	r0, #18
 80006be:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006c0:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006c2:	f001 fe8b 	bl	80023dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006c6:	2012      	movs	r0, #18
 80006c8:	f001 fecc 	bl	8002464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006cc:	b007      	add	sp, #28
 80006ce:	bd30      	pop	{r4, r5, pc}
 80006d0:	40012400 	.word	0x40012400
 80006d4:	40010800 	.word	0x40010800
 80006d8:	20000314 	.word	0x20000314
 80006dc:	40020008 	.word	0x40020008

080006e0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_DMA_Init+0x3c>)
{
 80006e2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e4:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006e6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e8:	f042 0201 	orr.w	r2, r2, #1
 80006ec:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f0:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006f2:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006fc:	f001 fe6e 	bl	80023dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000700:	200b      	movs	r0, #11
 8000702:	f001 feaf 	bl	8002464 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2011      	movs	r0, #17
 800070a:	4611      	mov	r1, r2
 800070c:	f001 fe66 	bl	80023dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000710:	2011      	movs	r0, #17

}
 8000712:	b003      	add	sp, #12
 8000714:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000718:	f001 bea4 	b.w	8002464 <HAL_NVIC_EnableIRQ>
 800071c:	40021000 	.word	0x40021000

08000720 <Fases_Sec>:
*
* @param vector: puntero *encend
* @retval None */

void Fases_Sec(volatile _Bool *encend)
{
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	4604      	mov	r4, r0
/********************************* FASE 1*************************************/
	HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,encend[0]);
 8000724:	4d35      	ldr	r5, [pc, #212]	; (80007fc <Fases_Sec+0xdc>)
	HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,encend[1]);
 8000726:	4e36      	ldr	r6, [pc, #216]	; (8000800 <Fases_Sec+0xe0>)
	HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,encend[0]);
 8000728:	7802      	ldrb	r2, [r0, #0]
 800072a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800072e:	4628      	mov	r0, r5
 8000730:	f002 f9fa 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,encend[1]);
 8000734:	7862      	ldrb	r2, [r4, #1]
 8000736:	4630      	mov	r0, r6
 8000738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073c:	f002 f9f4 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,FASE1_ROJO_Pin,encend[2]);
 8000740:	78a2      	ldrb	r2, [r4, #2]
 8000742:	4630      	mov	r0, r6
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	f002 f9ee 	bl	8002b28 <HAL_GPIO_WritePin>

/********************************* FASE 2*************************************/
	HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin,encend[3]);
 800074c:	78e2      	ldrb	r2, [r4, #3]
 800074e:	4630      	mov	r0, r6
 8000750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000754:	f002 f9e8 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,FASE2_AMA_Pin,encend[4]);
 8000758:	7922      	ldrb	r2, [r4, #4]
 800075a:	4630      	mov	r0, r6
 800075c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000760:	f002 f9e2 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,encend[5]);
 8000764:	7962      	ldrb	r2, [r4, #5]
 8000766:	4630      	mov	r0, r6
 8000768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076c:	f002 f9dc 	bl	8002b28 <HAL_GPIO_WritePin>

/********************************* FASE 3*************************************/
	HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin,encend[6]);
 8000770:	79a2      	ldrb	r2, [r4, #6]
 8000772:	4628      	mov	r0, r5
 8000774:	2104      	movs	r1, #4
 8000776:	f002 f9d7 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin,encend[7]);
 800077a:	79e2      	ldrb	r2, [r4, #7]
 800077c:	4628      	mov	r0, r5
 800077e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000782:	f002 f9d1 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,encend[8]);
 8000786:	7a22      	ldrb	r2, [r4, #8]
 8000788:	4630      	mov	r0, r6
 800078a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078e:	f002 f9cb 	bl	8002b28 <HAL_GPIO_WritePin>

/********************************* FASE 4*************************************/
	HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin,encend[9]);
 8000792:	7a62      	ldrb	r2, [r4, #9]
 8000794:	4628      	mov	r0, r5
 8000796:	2108      	movs	r1, #8
 8000798:	f002 f9c6 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin,encend[10]);
 800079c:	7aa2      	ldrb	r2, [r4, #10]
 800079e:	4628      	mov	r0, r5
 80007a0:	2110      	movs	r1, #16
 80007a2:	f002 f9c1 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin,encend[11]);
 80007a6:	7ae2      	ldrb	r2, [r4, #11]
 80007a8:	4628      	mov	r0, r5
 80007aa:	2120      	movs	r1, #32
 80007ac:	f002 f9bc 	bl	8002b28 <HAL_GPIO_WritePin>

/********************************* FASE 5*************************************/
	HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin,encend[12]);
 80007b0:	7b22      	ldrb	r2, [r4, #12]
 80007b2:	4628      	mov	r0, r5
 80007b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b8:	f002 f9b6 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,FASE5_AMA_Pin,encend[13]);
 80007bc:	7b62      	ldrb	r2, [r4, #13]
 80007be:	4628      	mov	r0, r5
 80007c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c4:	f002 f9b0 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,FASE5_ROJO_Pin,encend[14]);
 80007c8:	7ba2      	ldrb	r2, [r4, #14]
 80007ca:	4628      	mov	r0, r5
 80007cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d0:	f002 f9aa 	bl	8002b28 <HAL_GPIO_WritePin>

/********************************* FASE 6*************************************/
	HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin,encend[15]);
 80007d4:	7be2      	ldrb	r2, [r4, #15]
 80007d6:	4628      	mov	r0, r5
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	f002 f9a4 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin,encend[16]);
 80007e0:	7c22      	ldrb	r2, [r4, #16]
 80007e2:	4628      	mov	r0, r5
 80007e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e8:	f002 f99e 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,encend[17]);
 80007ec:	7c62      	ldrb	r2, [r4, #17]
 80007ee:	4630      	mov	r0, r6

}
 80007f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,encend[17]);
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	f002 b997 	b.w	8002b28 <HAL_GPIO_WritePin>
 80007fa:	bf00      	nop
 80007fc:	40010c00 	.word	0x40010c00
 8000800:	40010800 	.word	0x40010800

08000804 <Corrige_Med16>:
* manera con la variable "tamano".
* @param vector: puntero *arreglo, variable tamano.
* @retval None */

void Corrige_Med16(uint32_t *arreglo, uint32_t tamano)/* Función para        */
 {									/* eliminar los 16 bits altos de la      */
 8000804:	1f03      	subs	r3, r0, #4
 8000806:	3034      	adds	r0, #52	; 0x34
	for(uint8_t indice = 0; indice <= BUFFER_ADC; indice++)/* medición del   */
	{								/* ADC. 								 */
		arreglo[indice] &= 0x0000ffff;/* Borra los 16 bits más altos del
 8000808:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800080c:	b292      	uxth	r2, r2
	for(uint8_t indice = 0; indice <= BUFFER_ADC; indice++)/* medición del   */
 800080e:	4283      	cmp	r3, r0
		arreglo[indice] &= 0x0000ffff;/* Borra los 16 bits más altos del
 8000810:	601a      	str	r2, [r3, #0]
	for(uint8_t indice = 0; indice <= BUFFER_ADC; indice++)/* medición del   */
 8000812:	d1f9      	bne.n	8000808 <Corrige_Med16+0x4>
									 * registro ya que tienen el dato
									 * repetido.							 */
	}
 }
 8000814:	4770      	bx	lr

08000816 <Valor_Max>:
* @retval: max */

uint16_t Valor_Max(uint32_t *arreglo, uint8_t tamano)/* Función para calcular el valor máximo*/
{									 /* de cualquier arreglo.                */
	uint16_t max = 0;
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000816:	2300      	movs	r3, #0
	uint16_t max = 0;
 8000818:	461a      	mov	r2, r3
{									 /* de cualquier arreglo.                */
 800081a:	b510      	push	{r4, lr}
	for(uint8_t cont = 0; cont < tamano; cont++)
 800081c:	b2dc      	uxtb	r4, r3
 800081e:	42a1      	cmp	r1, r4
 8000820:	d801      	bhi.n	8000826 <Valor_Max+0x10>
		{
			max = arreglo[cont];
		}
	}
	return max;
}
 8000822:	4610      	mov	r0, r2
 8000824:	bd10      	pop	{r4, pc}
		if(max < arreglo[cont])
 8000826:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800082a:	3301      	adds	r3, #1
 800082c:	42a2      	cmp	r2, r4
			max = arreglo[cont];
 800082e:	bf38      	it	cc
 8000830:	b2a2      	uxthcc	r2, r4
 8000832:	e7f3      	b.n	800081c <Valor_Max+0x6>

08000834 <Valor_Min>:
* @retval: min */

uint32_t Valor_Min(uint32_t *arreglo, uint8_t tamano)/* Función para calcular*/
{									 /* el valor mínimo de cualquier arreglo.*/
	uint32_t min = arreglo[0];
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000834:	2300      	movs	r3, #0
{									 /* el valor mínimo de cualquier arreglo.*/
 8000836:	b510      	push	{r4, lr}
	uint32_t min = arreglo[0];
 8000838:	6802      	ldr	r2, [r0, #0]
	for(uint8_t cont = 0; cont < tamano; cont++)
 800083a:	b2dc      	uxtb	r4, r3
 800083c:	42a1      	cmp	r1, r4
 800083e:	d801      	bhi.n	8000844 <Valor_Min+0x10>
		{
			min = arreglo[cont];
		}
	}
	return min;
}
 8000840:	4610      	mov	r0, r2
 8000842:	bd10      	pop	{r4, pc}
 8000844:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8000848:	3301      	adds	r3, #1
 800084a:	42a2      	cmp	r2, r4
 800084c:	bf28      	it	cs
 800084e:	4622      	movcs	r2, r4
 8000850:	e7f3      	b.n	800083a <Valor_Min+0x6>

08000852 <Valor_Prom>:
* @retval: promedio/tamano */

uint32_t Valor_Prom(uint32_t *arreglo, uint8_t tamano)/* Función para		 */
{									/* calcular el valor promedio de cualquier arreglo.		 */
	uint32_t promedio = 0;
	for(uint8_t cont = 1; cont < tamano; cont++)
 8000852:	2300      	movs	r3, #0
	uint32_t promedio = 0;
 8000854:	461a      	mov	r2, r3
{									/* calcular el valor promedio de cualquier arreglo.		 */
 8000856:	b510      	push	{r4, lr}
 8000858:	3301      	adds	r3, #1
	for(uint8_t cont = 1; cont < tamano; cont++)
 800085a:	b2dc      	uxtb	r4, r3
 800085c:	42a1      	cmp	r1, r4
 800085e:	d802      	bhi.n	8000866 <Valor_Prom+0x14>
	{
		promedio += arreglo[cont];
	}
	return promedio/tamano;
}
 8000860:	fbb2 f0f1 	udiv	r0, r2, r1
 8000864:	bd10      	pop	{r4, pc}
		promedio += arreglo[cont];
 8000866:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800086a:	4422      	add	r2, r4
 800086c:	e7f4      	b.n	8000858 <Valor_Prom+0x6>
	...

08000870 <Verif_Ten>:
* @retval HAL_ERROR o HAL_OK según sea el caso. */

uint32_t Verif_Ten(uint32_t *arreglo, uint8_t tamano, _Bool medic)/* Función  */
{   								/* para verificar si la señal medida está*/
									/* dentro de los parámetros correctos.   */
	switch(medic)
 8000870:	2a01      	cmp	r2, #1
{   								/* para verificar si la señal medida está*/
 8000872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000874:	4605      	mov	r5, r0
 8000876:	4614      	mov	r4, r2
	switch(medic)
 8000878:	d017      	beq.n	80008aa <Verif_Ten+0x3a>
	{
	case 0:							/* En caso de que la fase esté apagada,  */
	{								/* se debe verificar que la corriente sea*/
		if (((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||/* cero.         */
 800087a:	f7ff ffea 	bl	8000852 <Valor_Prom>
 800087e:	f7ff fdb1 	bl	80003e4 <__aeabi_ui2d>
 8000882:	a31f      	add	r3, pc, #124	; (adr r3, 8000900 <Verif_Ten+0x90>)
 8000884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000888:	4604      	mov	r4, r0
 800088a:	460d      	mov	r5, r1
 800088c:	f7ff fea2 	bl	80005d4 <__aeabi_dcmpgt>
 8000890:	bb88      	cbnz	r0, 80008f6 <Verif_Ten+0x86>
 8000892:	a31d      	add	r3, pc, #116	; (adr r3, 8000908 <Verif_Ten+0x98>)
 8000894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000898:	4620      	mov	r0, r4
 800089a:	4629      	mov	r1, r5
 800089c:	f7ff fe7c 	bl	8000598 <__aeabi_dcmplt>
 80008a0:	1c04      	adds	r4, r0, #0
 80008a2:	bf18      	it	ne
 80008a4:	2401      	movne	r4, #1
			return HAL_OK;
		}
	}
	break;
	}
}
 80008a6:	4620      	mov	r0, r4
 80008a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((Valor_Max(arreglo, tamano)) > VIMAX ||/* esté entre los valores */
 80008aa:	f7ff ffb4 	bl	8000816 <Valor_Max>
 80008ae:	f640 03b6 	movw	r3, #2230	; 0x8b6
 80008b2:	4298      	cmp	r0, r3
 80008b4:	d8f7      	bhi.n	80008a6 <Verif_Ten+0x36>
			((Valor_Min(arreglo, tamano)) < VIMIN) ||/* permitidos.			 */
 80008b6:	4628      	mov	r0, r5
 80008b8:	f7ff ffbc 	bl	8000834 <Valor_Min>
		if ((Valor_Max(arreglo, tamano)) > VIMAX ||/* esté entre los valores */
 80008bc:	f240 7343 	movw	r3, #1859	; 0x743
 80008c0:	4298      	cmp	r0, r3
 80008c2:	d9f0      	bls.n	80008a6 <Verif_Ten+0x36>
			((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||
 80008c4:	4628      	mov	r0, r5
 80008c6:	f7ff ffc4 	bl	8000852 <Valor_Prom>
 80008ca:	f7ff fd8b 	bl	80003e4 <__aeabi_ui2d>
			((Valor_Min(arreglo, tamano)) < VIMIN) ||/* permitidos.			 */
 80008ce:	a30c      	add	r3, pc, #48	; (adr r3, 8000900 <Verif_Ten+0x90>)
 80008d0:	e9d3 2300 	ldrd	r2, r3, [r3]
			((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||
 80008d4:	4606      	mov	r6, r0
 80008d6:	460f      	mov	r7, r1
			((Valor_Min(arreglo, tamano)) < VIMIN) ||/* permitidos.			 */
 80008d8:	f7ff fe7c 	bl	80005d4 <__aeabi_dcmpgt>
 80008dc:	2800      	cmp	r0, #0
 80008de:	d1e2      	bne.n	80008a6 <Verif_Ten+0x36>
			((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||
 80008e0:	a309      	add	r3, pc, #36	; (adr r3, 8000908 <Verif_Ten+0x98>)
 80008e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008e6:	4630      	mov	r0, r6
 80008e8:	4639      	mov	r1, r7
 80008ea:	f7ff fe55 	bl	8000598 <__aeabi_dcmplt>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf08      	it	eq
 80008f2:	2400      	moveq	r4, #0
 80008f4:	e7d7      	b.n	80008a6 <Verif_Ten+0x36>
			return HAL_ERROR;
 80008f6:	2401      	movs	r4, #1
 80008f8:	e7d5      	b.n	80008a6 <Verif_Ten+0x36>
 80008fa:	bf00      	nop
 80008fc:	f3af 8000 	nop.w
 8000900:	9999999a 	.word	0x9999999a
 8000904:	40a19999 	.word	0x40a19999
 8000908:	cccccccd 	.word	0xcccccccd
 800090c:	409ccccc 	.word	0x409ccccc

08000910 <Verif_Temp>:
* @retval: HAL_ERROR o HAL_OK según sea el caso */

uint32_t Verif_Temp(uint32_t *arreglo, uint8_t tamano)/* Función para		 */
{									/* verificar si la temperatura medida	 */
	uint32_t promTemp = 0;			/* está entre los parámetros correctos.  */
	for(uint8_t cTemp = 1; cTemp <= tamano; cTemp++)
 8000910:	2201      	movs	r2, #1
	uint32_t promTemp = 0;			/* está entre los parámetros correctos.  */
 8000912:	2300      	movs	r3, #0
{									/* verificar si la temperatura medida	 */
 8000914:	b510      	push	{r4, lr}
	for(uint8_t cTemp = 1; cTemp <= tamano; cTemp++)
 8000916:	428a      	cmp	r2, r1
 8000918:	d907      	bls.n	800092a <Verif_Temp+0x1a>
	{
		promTemp += arreglo[cTemp];
	}
	promTemp /= tamano;
 800091a:	fbb3 f0f1 	udiv	r0, r3, r1
	return(((promTemp > TMIN) && (promTemp < TMAX)) ?	HAL_OK: HAL_ERROR);
 800091e:	3801      	subs	r0, #1
}
 8000920:	2844      	cmp	r0, #68	; 0x44
 8000922:	bf94      	ite	ls
 8000924:	2000      	movls	r0, #0
 8000926:	2001      	movhi	r0, #1
 8000928:	bd10      	pop	{r4, pc}
		promTemp += arreglo[cTemp];
 800092a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
	for(uint8_t cTemp = 1; cTemp <= tamano; cTemp++)
 800092e:	3201      	adds	r2, #1
		promTemp += arreglo[cTemp];
 8000930:	4423      	add	r3, r4
	for(uint8_t cTemp = 1; cTemp <= tamano; cTemp++)
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	e7ef      	b.n	8000916 <Verif_Temp+0x6>

08000936 <Verif_Tiempo>:
*
* @param vector: puntero *hActual, variable *hInicio.
* @retval: HAL_OK, HAL_TIMEOUT o HAL_BUSY según sea el caso */

uint32_t Verif_Tiempo(RTC_TimeTypeDef *hActual, RTC_TimeTypeDef *hInicio)
{
 8000936:	b510      	push	{r4, lr}
	if((hActual->Hours == hInicio->Hours) && (hActual->Minutes == hInicio->Minutes)
 8000938:	780b      	ldrb	r3, [r1, #0]
 800093a:	7802      	ldrb	r2, [r0, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d107      	bne.n	8000950 <Verif_Tiempo+0x1a>
 8000940:	7844      	ldrb	r4, [r0, #1]
 8000942:	784a      	ldrb	r2, [r1, #1]
 8000944:	4294      	cmp	r4, r2
 8000946:	d103      	bne.n	8000950 <Verif_Tiempo+0x1a>
			&& (hActual->Seconds == hInicio->Seconds))
 8000948:	7880      	ldrb	r0, [r0, #2]
 800094a:	788a      	ldrb	r2, [r1, #2]
 800094c:	4290      	cmp	r0, r2
 800094e:	d00a      	beq.n	8000966 <Verif_Tiempo+0x30>
	{								/* Con este comando inicia el conteo para*/
		return HAL_OK;				/* el programa específico de fase.	     */
	}
	else if((hInicio->Hours == 24) && (hInicio->Minutes == 60) &&
 8000950:	2b18      	cmp	r3, #24
 8000952:	d10a      	bne.n	800096a <Verif_Tiempo+0x34>
 8000954:	784b      	ldrb	r3, [r1, #1]
 8000956:	2b3c      	cmp	r3, #60	; 0x3c
 8000958:	d107      	bne.n	800096a <Verif_Tiempo+0x34>
 800095a:	788b      	ldrb	r3, [r1, #2]
 800095c:	2b3c      	cmp	r3, #60	; 0x3c
			(hInicio->Seconds == 60))/* Si se envía este comando entonces se */
	{								/* debe apagar la fase respectiva.		 */
		return HAL_TIMEOUT;
 800095e:	bf14      	ite	ne
 8000960:	2002      	movne	r0, #2
 8000962:	2003      	moveq	r0, #3
	}
	else							/* A implementar el uso externo con este */
	{								/* comando.								 */
		return HAL_BUSY;
	}
}
 8000964:	bd10      	pop	{r4, pc}
		return HAL_OK;				/* el programa específico de fase.	     */
 8000966:	2000      	movs	r0, #0
 8000968:	e7fc      	b.n	8000964 <Verif_Tiempo+0x2e>
		return HAL_BUSY;
 800096a:	2002      	movs	r0, #2
 800096c:	e7fa      	b.n	8000964 <Verif_Tiempo+0x2e>
	...

08000970 <Fases_Auto>:
{
 8000970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000974:	460f      	mov	r7, r1
 8000976:	4604      	mov	r4, r0
	if(Verif_Tiempo(aHora, &iHora->tFase1) == HAL_OK)
 8000978:	1cd1      	adds	r1, r2, #3
 800097a:	4638      	mov	r0, r7
{
 800097c:	4690      	mov	r8, r2
	if(Verif_Tiempo(aHora, &iHora->tFase1) == HAL_OK)
 800097e:	f7ff ffda 	bl	8000936 <Verif_Tiempo>
 8000982:	4dce      	ldr	r5, [pc, #824]	; (8000cbc <Fases_Auto+0x34c>)
 8000984:	2800      	cmp	r0, #0
 8000986:	f040 815d 	bne.w	8000c44 <Fases_Auto+0x2d4>
		c1Fase = 0;
 800098a:	4bcd      	ldr	r3, [pc, #820]	; (8000cc0 <Fases_Auto+0x350>)
 800098c:	7018      	strb	r0, [r3, #0]
		bFases[0] = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	702b      	strb	r3, [r5, #0]
	if(bFases[0] == 1)
 8000992:	f895 b000 	ldrb.w	fp, [r5]
 8000996:	f1bb 0f01 	cmp.w	fp, #1
 800099a:	d12b      	bne.n	80009f4 <Fases_Auto+0x84>
		switch(f1Actual)
 800099c:	f8df a344 	ldr.w	sl, [pc, #836]	; 8000ce4 <Fases_Auto+0x374>
 80009a0:	4ec7      	ldr	r6, [pc, #796]	; (8000cc0 <Fases_Auto+0x350>)
 80009a2:	f89a 9000 	ldrb.w	r9, [sl]
 80009a6:	fa5f f989 	uxtb.w	r9, r9
 80009aa:	f1b9 0f02 	cmp.w	r9, #2
 80009ae:	f000 8152 	beq.w	8000c56 <Fases_Auto+0x2e6>
 80009b2:	f1b9 0f03 	cmp.w	r9, #3
 80009b6:	f000 8161 	beq.w	8000c7c <Fases_Auto+0x30c>
 80009ba:	f1b9 0f01 	cmp.w	r9, #1
 80009be:	f040 8171 	bne.w	8000ca4 <Fases_Auto+0x334>
			HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c8:	48be      	ldr	r0, [pc, #760]	; (8000cc4 <Fases_Auto+0x354>)
 80009ca:	f002 f8ad 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c1Fase == tiempos[0])
 80009ce:	7833      	ldrb	r3, [r6, #0]
 80009d0:	7822      	ldrb	r2, [r4, #0]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d10a      	bne.n	80009ec <Fases_Auto+0x7c>
				HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,GPIO_PIN_SET);
 80009d6:	464a      	mov	r2, r9
 80009d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009dc:	48b9      	ldr	r0, [pc, #740]	; (8000cc4 <Fases_Auto+0x354>)
 80009de:	f002 f8a3 	bl	8002b28 <HAL_GPIO_WritePin>
				f1Actual = 2;
 80009e2:	2302      	movs	r3, #2
				f1Actual = 3;
 80009e4:	f88a 3000 	strb.w	r3, [sl]
				c1Fase = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	7033      	strb	r3, [r6, #0]
		c1Fase++;
 80009ec:	7833      	ldrb	r3, [r6, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	7033      	strb	r3, [r6, #0]
	if(Verif_Tiempo(aHora, &iHora->tFase2) == HAL_OK)
 80009f4:	f108 0106 	add.w	r1, r8, #6
 80009f8:	4638      	mov	r0, r7
 80009fa:	f7ff ff9c 	bl	8000936 <Verif_Tiempo>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	f040 8153 	bne.w	8000caa <Fases_Auto+0x33a>
		c2Fase = 0;
 8000a04:	4bb0      	ldr	r3, [pc, #704]	; (8000cc8 <Fases_Auto+0x358>)
 8000a06:	7018      	strb	r0, [r3, #0]
		bFases[1] = 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	706b      	strb	r3, [r5, #1]
	if(bFases[1] == 1)
 8000a0c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8000a10:	f1bb 0f01 	cmp.w	fp, #1
 8000a14:	d12b      	bne.n	8000a6e <Fases_Auto+0xfe>
		switch(f2Actual)
 8000a16:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8000ce8 <Fases_Auto+0x378>
 8000a1a:	4eab      	ldr	r6, [pc, #684]	; (8000cc8 <Fases_Auto+0x358>)
 8000a1c:	f89a 9000 	ldrb.w	r9, [sl]
 8000a20:	fa5f f989 	uxtb.w	r9, r9
 8000a24:	f1b9 0f02 	cmp.w	r9, #2
 8000a28:	f000 8166 	beq.w	8000cf8 <Fases_Auto+0x388>
 8000a2c:	f1b9 0f03 	cmp.w	r9, #3
 8000a30:	f000 8175 	beq.w	8000d1e <Fases_Auto+0x3ae>
 8000a34:	f1b9 0f01 	cmp.w	r9, #1
 8000a38:	f040 8185 	bne.w	8000d46 <Fases_Auto+0x3d6>
			HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin,GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a42:	48a2      	ldr	r0, [pc, #648]	; (8000ccc <Fases_Auto+0x35c>)
 8000a44:	f002 f870 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c2Fase == tiempos[3])
 8000a48:	7833      	ldrb	r3, [r6, #0]
 8000a4a:	78e2      	ldrb	r2, [r4, #3]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d10a      	bne.n	8000a66 <Fases_Auto+0xf6>
				HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin,GPIO_PIN_SET);
 8000a50:	464a      	mov	r2, r9
 8000a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a56:	489d      	ldr	r0, [pc, #628]	; (8000ccc <Fases_Auto+0x35c>)
 8000a58:	f002 f866 	bl	8002b28 <HAL_GPIO_WritePin>
				f2Actual = 2;
 8000a5c:	2302      	movs	r3, #2
				f2Actual = 3;
 8000a5e:	f88a 3000 	strb.w	r3, [sl]
				c2Fase = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	7033      	strb	r3, [r6, #0]
		c2Fase++;
 8000a66:	7833      	ldrb	r3, [r6, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	7033      	strb	r3, [r6, #0]
	if(Verif_Tiempo(aHora, &iHora->tFase3) == HAL_OK)
 8000a6e:	f108 0109 	add.w	r1, r8, #9
 8000a72:	4638      	mov	r0, r7
 8000a74:	f7ff ff5f 	bl	8000936 <Verif_Tiempo>
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	f040 8167 	bne.w	8000d4c <Fases_Auto+0x3dc>
		bFases[2] = 1;
 8000a7e:	2301      	movs	r3, #1
		c3Fase = 0;
 8000a80:	4a93      	ldr	r2, [pc, #588]	; (8000cd0 <Fases_Auto+0x360>)
		bFases[2] = 1;
 8000a82:	70ab      	strb	r3, [r5, #2]
		c3Fase = 0;
 8000a84:	7010      	strb	r0, [r2, #0]
	if(bFases[2] == 1)
 8000a86:	f895 b002 	ldrb.w	fp, [r5, #2]
 8000a8a:	f1bb 0f01 	cmp.w	fp, #1
 8000a8e:	d129      	bne.n	8000ae4 <Fases_Auto+0x174>
		switch(f3Actual)
 8000a90:	f8df a258 	ldr.w	sl, [pc, #600]	; 8000cec <Fases_Auto+0x37c>
 8000a94:	4e8e      	ldr	r6, [pc, #568]	; (8000cd0 <Fases_Auto+0x360>)
 8000a96:	f89a 9000 	ldrb.w	r9, [sl]
 8000a9a:	fa5f f989 	uxtb.w	r9, r9
 8000a9e:	f1b9 0f02 	cmp.w	r9, #2
 8000aa2:	f000 815b 	beq.w	8000d5c <Fases_Auto+0x3ec>
 8000aa6:	f1b9 0f03 	cmp.w	r9, #3
 8000aaa:	f000 816a 	beq.w	8000d82 <Fases_Auto+0x412>
 8000aae:	f1b9 0f01 	cmp.w	r9, #1
 8000ab2:	f040 817a 	bne.w	8000daa <Fases_Auto+0x43a>
			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin,GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2104      	movs	r1, #4
 8000aba:	4882      	ldr	r0, [pc, #520]	; (8000cc4 <Fases_Auto+0x354>)
 8000abc:	f002 f834 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c3Fase == tiempos[6])
 8000ac0:	7833      	ldrb	r3, [r6, #0]
 8000ac2:	79a2      	ldrb	r2, [r4, #6]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d109      	bne.n	8000adc <Fases_Auto+0x16c>
				HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin,GPIO_PIN_SET);
 8000ac8:	464a      	mov	r2, r9
 8000aca:	2104      	movs	r1, #4
 8000acc:	487d      	ldr	r0, [pc, #500]	; (8000cc4 <Fases_Auto+0x354>)
 8000ace:	f002 f82b 	bl	8002b28 <HAL_GPIO_WritePin>
				f3Actual = 2;
 8000ad2:	2302      	movs	r3, #2
				f3Actual = 3;
 8000ad4:	f88a 3000 	strb.w	r3, [sl]
				c3Fase = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	7033      	strb	r3, [r6, #0]
		c3Fase++;
 8000adc:	7833      	ldrb	r3, [r6, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	7033      	strb	r3, [r6, #0]
	if(Verif_Tiempo(aHora, &iHora->tFase4) == HAL_OK)
 8000ae4:	f108 010c 	add.w	r1, r8, #12
 8000ae8:	4638      	mov	r0, r7
 8000aea:	f7ff ff24 	bl	8000936 <Verif_Tiempo>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	f040 815e 	bne.w	8000db0 <Fases_Auto+0x440>
		c4Fase = 0;
 8000af4:	4b77      	ldr	r3, [pc, #476]	; (8000cd4 <Fases_Auto+0x364>)
 8000af6:	7018      	strb	r0, [r3, #0]
		bFases[3] = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	70eb      	strb	r3, [r5, #3]
	if(bFases[3] == 1)
 8000afc:	f895 b003 	ldrb.w	fp, [r5, #3]
 8000b00:	f1bb 0f01 	cmp.w	fp, #1
 8000b04:	d129      	bne.n	8000b5a <Fases_Auto+0x1ea>
		switch(f4Actual)
 8000b06:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8000cf0 <Fases_Auto+0x380>
 8000b0a:	4e72      	ldr	r6, [pc, #456]	; (8000cd4 <Fases_Auto+0x364>)
 8000b0c:	f89a 9000 	ldrb.w	r9, [sl]
 8000b10:	fa5f f989 	uxtb.w	r9, r9
 8000b14:	f1b9 0f02 	cmp.w	r9, #2
 8000b18:	f000 8153 	beq.w	8000dc2 <Fases_Auto+0x452>
 8000b1c:	f1b9 0f03 	cmp.w	r9, #3
 8000b20:	f000 8160 	beq.w	8000de4 <Fases_Auto+0x474>
 8000b24:	f1b9 0f01 	cmp.w	r9, #1
 8000b28:	f040 816e 	bne.w	8000e08 <Fases_Auto+0x498>
			HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin,GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2108      	movs	r1, #8
 8000b30:	4864      	ldr	r0, [pc, #400]	; (8000cc4 <Fases_Auto+0x354>)
 8000b32:	f001 fff9 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c4Fase == tiempos[9])
 8000b36:	7833      	ldrb	r3, [r6, #0]
 8000b38:	7a62      	ldrb	r2, [r4, #9]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d109      	bne.n	8000b52 <Fases_Auto+0x1e2>
				HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin,GPIO_PIN_SET);
 8000b3e:	464a      	mov	r2, r9
 8000b40:	2108      	movs	r1, #8
 8000b42:	4860      	ldr	r0, [pc, #384]	; (8000cc4 <Fases_Auto+0x354>)
 8000b44:	f001 fff0 	bl	8002b28 <HAL_GPIO_WritePin>
				f4Actual = 2;
 8000b48:	2302      	movs	r3, #2
				f4Actual = 3;
 8000b4a:	f88a 3000 	strb.w	r3, [sl]
				c4Fase = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	7033      	strb	r3, [r6, #0]
		c4Fase++;
 8000b52:	7833      	ldrb	r3, [r6, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	7033      	strb	r3, [r6, #0]
	if(Verif_Tiempo(aHora, &iHora->tFase5) == HAL_OK)
 8000b5a:	f108 010f 	add.w	r1, r8, #15
 8000b5e:	4638      	mov	r0, r7
 8000b60:	f7ff fee9 	bl	8000936 <Verif_Tiempo>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	f040 8152 	bne.w	8000e0e <Fases_Auto+0x49e>
		c5Fase = 0;
 8000b6a:	4b5b      	ldr	r3, [pc, #364]	; (8000cd8 <Fases_Auto+0x368>)
 8000b6c:	7018      	strb	r0, [r3, #0]
		bFases[4] = 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	712b      	strb	r3, [r5, #4]
	if(bFases[4] == 1)
 8000b72:	f895 b004 	ldrb.w	fp, [r5, #4]
 8000b76:	f1bb 0f01 	cmp.w	fp, #1
 8000b7a:	d12b      	bne.n	8000bd4 <Fases_Auto+0x264>
		switch(f5Actual)
 8000b7c:	f8df a174 	ldr.w	sl, [pc, #372]	; 8000cf4 <Fases_Auto+0x384>
 8000b80:	4e55      	ldr	r6, [pc, #340]	; (8000cd8 <Fases_Auto+0x368>)
 8000b82:	f89a 9000 	ldrb.w	r9, [sl]
 8000b86:	fa5f f989 	uxtb.w	r9, r9
 8000b8a:	f1b9 0f02 	cmp.w	r9, #2
 8000b8e:	f000 8147 	beq.w	8000e20 <Fases_Auto+0x4b0>
 8000b92:	f1b9 0f03 	cmp.w	r9, #3
 8000b96:	f000 8156 	beq.w	8000e46 <Fases_Auto+0x4d6>
 8000b9a:	f1b9 0f01 	cmp.w	r9, #1
 8000b9e:	f040 8166 	bne.w	8000e6e <Fases_Auto+0x4fe>
			HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin,GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba8:	4846      	ldr	r0, [pc, #280]	; (8000cc4 <Fases_Auto+0x354>)
 8000baa:	f001 ffbd 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c5Fase == tiempos[12])
 8000bae:	7833      	ldrb	r3, [r6, #0]
 8000bb0:	7b22      	ldrb	r2, [r4, #12]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d10a      	bne.n	8000bcc <Fases_Auto+0x25c>
				HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin,GPIO_PIN_SET);
 8000bb6:	464a      	mov	r2, r9
 8000bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bbc:	4841      	ldr	r0, [pc, #260]	; (8000cc4 <Fases_Auto+0x354>)
 8000bbe:	f001 ffb3 	bl	8002b28 <HAL_GPIO_WritePin>
				f5Actual = 2;
 8000bc2:	2302      	movs	r3, #2
				f5Actual = 3;
 8000bc4:	f88a 3000 	strb.w	r3, [sl]
				c5Fase = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	7033      	strb	r3, [r6, #0]
		c5Fase++;
 8000bcc:	7833      	ldrb	r3, [r6, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	7033      	strb	r3, [r6, #0]
	if(Verif_Tiempo(aHora, &iHora->tFase6) == HAL_OK)
 8000bd4:	f108 0112 	add.w	r1, r8, #18
 8000bd8:	4638      	mov	r0, r7
 8000bda:	f7ff feac 	bl	8000936 <Verif_Tiempo>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	f040 8148 	bne.w	8000e74 <Fases_Auto+0x504>
		c6Fase = 0;
 8000be4:	4b3d      	ldr	r3, [pc, #244]	; (8000cdc <Fases_Auto+0x36c>)
 8000be6:	7018      	strb	r0, [r3, #0]
		bFases[5] = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	716b      	strb	r3, [r5, #5]
	if(bFases[5] == 1)
 8000bec:	f895 8005 	ldrb.w	r8, [r5, #5]
 8000bf0:	f1b8 0f01 	cmp.w	r8, #1
 8000bf4:	d124      	bne.n	8000c40 <Fases_Auto+0x2d0>
		switch(f6Actual)
 8000bf6:	4f3a      	ldr	r7, [pc, #232]	; (8000ce0 <Fases_Auto+0x370>)
 8000bf8:	4d38      	ldr	r5, [pc, #224]	; (8000cdc <Fases_Auto+0x36c>)
 8000bfa:	783e      	ldrb	r6, [r7, #0]
 8000bfc:	b2f6      	uxtb	r6, r6
 8000bfe:	2e02      	cmp	r6, #2
 8000c00:	f000 8141 	beq.w	8000e86 <Fases_Auto+0x516>
 8000c04:	2e03      	cmp	r6, #3
 8000c06:	f000 8151 	beq.w	8000eac <Fases_Auto+0x53c>
 8000c0a:	2e01      	cmp	r6, #1
 8000c0c:	f040 8160 	bne.w	8000ed0 <Fases_Auto+0x560>
			HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin,GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c16:	482b      	ldr	r0, [pc, #172]	; (8000cc4 <Fases_Auto+0x354>)
 8000c18:	f001 ff86 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c6Fase == tiempos[15])
 8000c1c:	782b      	ldrb	r3, [r5, #0]
 8000c1e:	7be2      	ldrb	r2, [r4, #15]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d109      	bne.n	8000c38 <Fases_Auto+0x2c8>
				HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin,GPIO_PIN_SET);
 8000c24:	4632      	mov	r2, r6
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	4826      	ldr	r0, [pc, #152]	; (8000cc4 <Fases_Auto+0x354>)
 8000c2c:	f001 ff7c 	bl	8002b28 <HAL_GPIO_WritePin>
				f6Actual = 2;
 8000c30:	2302      	movs	r3, #2
				f6Actual = 3;
 8000c32:	703b      	strb	r3, [r7, #0]
				c6Fase = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	702b      	strb	r3, [r5, #0]
		c6Fase++;
 8000c38:	782b      	ldrb	r3, [r5, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	702b      	strb	r3, [r5, #0]
}
 8000c40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if(Verif_Tiempo(aHora, &iHora->tFase1) == HAL_TIMEOUT)
 8000c44:	2803      	cmp	r0, #3
 8000c46:	f47f aea4 	bne.w	8000992 <Fases_Auto+0x22>
		bFases[0] = 0;
 8000c4a:	2300      	movs	r3, #0
		Apaga_Fase(1);
 8000c4c:	2001      	movs	r0, #1
		bFases[0] = 0;
 8000c4e:	702b      	strb	r3, [r5, #0]
		Apaga_Fase(1);
 8000c50:	f000 f9d0 	bl	8000ff4 <Apaga_Fase>
 8000c54:	e69d      	b.n	8000992 <Fases_Auto+0x22>
			HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5c:	481b      	ldr	r0, [pc, #108]	; (8000ccc <Fases_Auto+0x35c>)
 8000c5e:	f001 ff63 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c1Fase == tiempos[1])
 8000c62:	7833      	ldrb	r3, [r6, #0]
 8000c64:	7862      	ldrb	r2, [r4, #1]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	f47f aec0 	bne.w	80009ec <Fases_Auto+0x7c>
				HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,GPIO_PIN_SET);
 8000c6c:	465a      	mov	r2, fp
 8000c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c72:	4816      	ldr	r0, [pc, #88]	; (8000ccc <Fases_Auto+0x35c>)
 8000c74:	f001 ff58 	bl	8002b28 <HAL_GPIO_WritePin>
				f1Actual = 3;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e6b3      	b.n	80009e4 <Fases_Auto+0x74>
			HAL_GPIO_WritePin(GPIOA,FASE1_ROJO_Pin,GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c82:	4812      	ldr	r0, [pc, #72]	; (8000ccc <Fases_Auto+0x35c>)
 8000c84:	f001 ff50 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c1Fase == tiempos[2])
 8000c88:	7833      	ldrb	r3, [r6, #0]
 8000c8a:	78a2      	ldrb	r2, [r4, #2]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f47f aead 	bne.w	80009ec <Fases_Auto+0x7c>
				HAL_GPIO_WritePin(GPIOA,FASE1_ROJO_Pin,GPIO_PIN_SET);
 8000c92:	465a      	mov	r2, fp
 8000c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <Fases_Auto+0x35c>)
 8000c9a:	f001 ff45 	bl	8002b28 <HAL_GPIO_WritePin>
				f1Actual = 1;
 8000c9e:	f88a b000 	strb.w	fp, [sl]
 8000ca2:	e6a1      	b.n	80009e8 <Fases_Auto+0x78>
			Error_Handler();
 8000ca4:	f000 fa60 	bl	8001168 <Error_Handler>
		break;
 8000ca8:	e6a0      	b.n	80009ec <Fases_Auto+0x7c>
	else if(Verif_Tiempo(aHora, &iHora->tFase2) == HAL_TIMEOUT)
 8000caa:	2803      	cmp	r0, #3
 8000cac:	f47f aeae 	bne.w	8000a0c <Fases_Auto+0x9c>
		bFases[1] = 0;
 8000cb0:	2300      	movs	r3, #0
		Apaga_Fase(2);
 8000cb2:	2002      	movs	r0, #2
		bFases[1] = 0;
 8000cb4:	706b      	strb	r3, [r5, #1]
		Apaga_Fase(2);
 8000cb6:	f000 f99d 	bl	8000ff4 <Apaga_Fase>
 8000cba:	e6a7      	b.n	8000a0c <Fases_Auto+0x9c>
 8000cbc:	2000035b 	.word	0x2000035b
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	20000001 	.word	0x20000001
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	20000002 	.word	0x20000002
 8000cd4:	20000003 	.word	0x20000003
 8000cd8:	20000004 	.word	0x20000004
 8000cdc:	20000005 	.word	0x20000005
 8000ce0:	2000000b 	.word	0x2000000b
 8000ce4:	20000006 	.word	0x20000006
 8000ce8:	20000007 	.word	0x20000007
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000009 	.word	0x20000009
 8000cf4:	2000000a 	.word	0x2000000a
			HAL_GPIO_WritePin(GPIOA,FASE2_AMA_Pin,GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cfe:	4876      	ldr	r0, [pc, #472]	; (8000ed8 <Fases_Auto+0x568>)
 8000d00:	f001 ff12 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c2Fase == tiempos[4])
 8000d04:	7833      	ldrb	r3, [r6, #0]
 8000d06:	7922      	ldrb	r2, [r4, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	f47f aeac 	bne.w	8000a66 <Fases_Auto+0xf6>
				HAL_GPIO_WritePin(GPIOA,FASE2_AMA_Pin,GPIO_PIN_SET);
 8000d0e:	465a      	mov	r2, fp
 8000d10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d14:	4870      	ldr	r0, [pc, #448]	; (8000ed8 <Fases_Auto+0x568>)
 8000d16:	f001 ff07 	bl	8002b28 <HAL_GPIO_WritePin>
				f2Actual = 3;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e69f      	b.n	8000a5e <Fases_Auto+0xee>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d24:	486c      	ldr	r0, [pc, #432]	; (8000ed8 <Fases_Auto+0x568>)
 8000d26:	f001 feff 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c2Fase == tiempos[5])
 8000d2a:	7833      	ldrb	r3, [r6, #0]
 8000d2c:	7962      	ldrb	r2, [r4, #5]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f47f ae99 	bne.w	8000a66 <Fases_Auto+0xf6>
				HAL_GPIO_WritePin(GPIOA,FASE2_ROJO_Pin,GPIO_PIN_SET);
 8000d34:	465a      	mov	r2, fp
 8000d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3a:	4867      	ldr	r0, [pc, #412]	; (8000ed8 <Fases_Auto+0x568>)
 8000d3c:	f001 fef4 	bl	8002b28 <HAL_GPIO_WritePin>
				f2Actual = 1;
 8000d40:	f88a b000 	strb.w	fp, [sl]
 8000d44:	e68d      	b.n	8000a62 <Fases_Auto+0xf2>
			Error_Handler();
 8000d46:	f000 fa0f 	bl	8001168 <Error_Handler>
		break;
 8000d4a:	e68c      	b.n	8000a66 <Fases_Auto+0xf6>
	else if(Verif_Tiempo(aHora, &iHora->tFase3) == HAL_TIMEOUT)
 8000d4c:	2803      	cmp	r0, #3
 8000d4e:	f47f ae9a 	bne.w	8000a86 <Fases_Auto+0x116>
		bFases[2] = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	70ab      	strb	r3, [r5, #2]
		Apaga_Fase(3);
 8000d56:	f000 f94d 	bl	8000ff4 <Apaga_Fase>
 8000d5a:	e694      	b.n	8000a86 <Fases_Auto+0x116>
			HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin,GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d62:	485e      	ldr	r0, [pc, #376]	; (8000edc <Fases_Auto+0x56c>)
 8000d64:	f001 fee0 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c3Fase == tiempos[7])
 8000d68:	7833      	ldrb	r3, [r6, #0]
 8000d6a:	79e2      	ldrb	r2, [r4, #7]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	f47f aeb5 	bne.w	8000adc <Fases_Auto+0x16c>
				HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin,GPIO_PIN_SET);
 8000d72:	465a      	mov	r2, fp
 8000d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d78:	4858      	ldr	r0, [pc, #352]	; (8000edc <Fases_Auto+0x56c>)
 8000d7a:	f001 fed5 	bl	8002b28 <HAL_GPIO_WritePin>
				f3Actual = 3;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e6a8      	b.n	8000ad4 <Fases_Auto+0x164>
			HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d88:	4853      	ldr	r0, [pc, #332]	; (8000ed8 <Fases_Auto+0x568>)
 8000d8a:	f001 fecd 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c3Fase == tiempos[8])
 8000d8e:	7833      	ldrb	r3, [r6, #0]
 8000d90:	7a22      	ldrb	r2, [r4, #8]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	f47f aea2 	bne.w	8000adc <Fases_Auto+0x16c>
				HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,GPIO_PIN_SET);
 8000d98:	465a      	mov	r2, fp
 8000d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9e:	484e      	ldr	r0, [pc, #312]	; (8000ed8 <Fases_Auto+0x568>)
 8000da0:	f001 fec2 	bl	8002b28 <HAL_GPIO_WritePin>
				f3Actual = 1;
 8000da4:	f88a b000 	strb.w	fp, [sl]
 8000da8:	e696      	b.n	8000ad8 <Fases_Auto+0x168>
			Error_Handler();
 8000daa:	f000 f9dd 	bl	8001168 <Error_Handler>
		break;
 8000dae:	e695      	b.n	8000adc <Fases_Auto+0x16c>
	else if(Verif_Tiempo(aHora, &iHora->tFase4) == HAL_TIMEOUT)
 8000db0:	2803      	cmp	r0, #3
 8000db2:	f47f aea3 	bne.w	8000afc <Fases_Auto+0x18c>
		bFases[3] = 0;
 8000db6:	2300      	movs	r3, #0
		Apaga_Fase(4);
 8000db8:	2004      	movs	r0, #4
		bFases[3] = 0;
 8000dba:	70eb      	strb	r3, [r5, #3]
		Apaga_Fase(4);
 8000dbc:	f000 f91a 	bl	8000ff4 <Apaga_Fase>
 8000dc0:	e69c      	b.n	8000afc <Fases_Auto+0x18c>
			HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin,GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4845      	ldr	r0, [pc, #276]	; (8000edc <Fases_Auto+0x56c>)
 8000dc8:	f001 feae 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c4Fase == tiempos[10])
 8000dcc:	7833      	ldrb	r3, [r6, #0]
 8000dce:	7aa2      	ldrb	r2, [r4, #10]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f47f aebe 	bne.w	8000b52 <Fases_Auto+0x1e2>
				HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin,GPIO_PIN_SET);
 8000dd6:	465a      	mov	r2, fp
 8000dd8:	2110      	movs	r1, #16
 8000dda:	4840      	ldr	r0, [pc, #256]	; (8000edc <Fases_Auto+0x56c>)
 8000ddc:	f001 fea4 	bl	8002b28 <HAL_GPIO_WritePin>
				f4Actual = 3;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e6b2      	b.n	8000b4a <Fases_Auto+0x1da>
			HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin,GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2120      	movs	r1, #32
 8000de8:	483c      	ldr	r0, [pc, #240]	; (8000edc <Fases_Auto+0x56c>)
 8000dea:	f001 fe9d 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c4Fase == tiempos[11])
 8000dee:	7833      	ldrb	r3, [r6, #0]
 8000df0:	7ae2      	ldrb	r2, [r4, #11]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	f47f aead 	bne.w	8000b52 <Fases_Auto+0x1e2>
				HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin,GPIO_PIN_SET);
 8000df8:	465a      	mov	r2, fp
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	4837      	ldr	r0, [pc, #220]	; (8000edc <Fases_Auto+0x56c>)
 8000dfe:	f001 fe93 	bl	8002b28 <HAL_GPIO_WritePin>
				f4Actual = 1;
 8000e02:	f88a b000 	strb.w	fp, [sl]
 8000e06:	e6a2      	b.n	8000b4e <Fases_Auto+0x1de>
			Error_Handler();
 8000e08:	f000 f9ae 	bl	8001168 <Error_Handler>
		break;
 8000e0c:	e6a1      	b.n	8000b52 <Fases_Auto+0x1e2>
	else if(Verif_Tiempo(aHora, &iHora->tFase5) == HAL_TIMEOUT)
 8000e0e:	2803      	cmp	r0, #3
 8000e10:	f47f aeaf 	bne.w	8000b72 <Fases_Auto+0x202>
		bFases[4] = 0;
 8000e14:	2300      	movs	r3, #0
		Apaga_Fase(5);
 8000e16:	2005      	movs	r0, #5
		bFases[4] = 0;
 8000e18:	712b      	strb	r3, [r5, #4]
		Apaga_Fase(5);
 8000e1a:	f000 f8eb 	bl	8000ff4 <Apaga_Fase>
 8000e1e:	e6a8      	b.n	8000b72 <Fases_Auto+0x202>
			HAL_GPIO_WritePin(GPIOB,FASE5_AMA_Pin,GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e26:	482d      	ldr	r0, [pc, #180]	; (8000edc <Fases_Auto+0x56c>)
 8000e28:	f001 fe7e 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c5Fase == tiempos[13])
 8000e2c:	7833      	ldrb	r3, [r6, #0]
 8000e2e:	7b62      	ldrb	r2, [r4, #13]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f47f aecb 	bne.w	8000bcc <Fases_Auto+0x25c>
				HAL_GPIO_WritePin(GPIOB,FASE5_AMA_Pin,GPIO_PIN_SET);
 8000e36:	465a      	mov	r2, fp
 8000e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Fases_Auto+0x56c>)
 8000e3e:	f001 fe73 	bl	8002b28 <HAL_GPIO_WritePin>
				f5Actual = 3;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e6be      	b.n	8000bc4 <Fases_Auto+0x254>
			HAL_GPIO_WritePin(GPIOB,FASE5_ROJO_Pin,GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4c:	4823      	ldr	r0, [pc, #140]	; (8000edc <Fases_Auto+0x56c>)
 8000e4e:	f001 fe6b 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c5Fase == tiempos[14])
 8000e52:	7833      	ldrb	r3, [r6, #0]
 8000e54:	7ba2      	ldrb	r2, [r4, #14]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	f47f aeb8 	bne.w	8000bcc <Fases_Auto+0x25c>
				HAL_GPIO_WritePin(GPIOB,FASE5_ROJO_Pin,GPIO_PIN_SET);
 8000e5c:	465a      	mov	r2, fp
 8000e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e62:	481e      	ldr	r0, [pc, #120]	; (8000edc <Fases_Auto+0x56c>)
 8000e64:	f001 fe60 	bl	8002b28 <HAL_GPIO_WritePin>
				f5Actual = 1;
 8000e68:	f88a b000 	strb.w	fp, [sl]
 8000e6c:	e6ac      	b.n	8000bc8 <Fases_Auto+0x258>
			Error_Handler();
 8000e6e:	f000 f97b 	bl	8001168 <Error_Handler>
		break;
 8000e72:	e6ab      	b.n	8000bcc <Fases_Auto+0x25c>
	else if(Verif_Tiempo(aHora, &iHora->tFase6) == HAL_TIMEOUT)
 8000e74:	2803      	cmp	r0, #3
 8000e76:	f47f aeb9 	bne.w	8000bec <Fases_Auto+0x27c>
		bFases[5] = 0;
 8000e7a:	2300      	movs	r3, #0
		Apaga_Fase(6);
 8000e7c:	2006      	movs	r0, #6
		bFases[5] = 0;
 8000e7e:	716b      	strb	r3, [r5, #5]
		Apaga_Fase(6);
 8000e80:	f000 f8b8 	bl	8000ff4 <Apaga_Fase>
 8000e84:	e6b2      	b.n	8000bec <Fases_Auto+0x27c>
			HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin,GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <Fases_Auto+0x56c>)
 8000e8e:	f001 fe4b 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c6Fase == tiempos[16])
 8000e92:	782b      	ldrb	r3, [r5, #0]
 8000e94:	7c22      	ldrb	r2, [r4, #16]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	f47f aece 	bne.w	8000c38 <Fases_Auto+0x2c8>
				HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin,GPIO_PIN_SET);
 8000e9c:	4642      	mov	r2, r8
 8000e9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <Fases_Auto+0x56c>)
 8000ea4:	f001 fe40 	bl	8002b28 <HAL_GPIO_WritePin>
				f6Actual = 3;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e6c2      	b.n	8000c32 <Fases_Auto+0x2c2>
			HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <Fases_Auto+0x568>)
 8000eb2:	f001 fe39 	bl	8002b28 <HAL_GPIO_WritePin>
			if(c6Fase == tiempos[17])
 8000eb6:	782b      	ldrb	r3, [r5, #0]
 8000eb8:	7c62      	ldrb	r2, [r4, #17]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	f47f aebc 	bne.w	8000c38 <Fases_Auto+0x2c8>
				HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,GPIO_PIN_SET);
 8000ec0:	4642      	mov	r2, r8
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <Fases_Auto+0x568>)
 8000ec6:	f001 fe2f 	bl	8002b28 <HAL_GPIO_WritePin>
				f6Actual = 1;
 8000eca:	f887 8000 	strb.w	r8, [r7]
 8000ece:	e6b1      	b.n	8000c34 <Fases_Auto+0x2c4>
			Error_Handler();
 8000ed0:	f000 f94a 	bl	8001168 <Error_Handler>
		break;
 8000ed4:	e6b0      	b.n	8000c38 <Fases_Auto+0x2c8>
 8000ed6:	bf00      	nop
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	40010c00 	.word	0x40010c00

08000ee0 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	2210      	movs	r2, #16
{
 8000ee2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ee6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	eb0d 0002 	add.w	r0, sp, r2
 8000eec:	2100      	movs	r1, #0
 8000eee:	f004 f80d 	bl	8004f0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000ef4:	4e3a      	ldr	r6, [pc, #232]	; (8000fe0 <MX_GPIO_Init+0x100>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	699a      	ldr	r2, [r3, #24]
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin|FASE3_ROJO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 8000ef8:	4d3a      	ldr	r5, [pc, #232]	; (8000fe4 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	f042 0210 	orr.w	r2, r2, #16
 8000efe:	619a      	str	r2, [r3, #24]
 8000f00:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000f02:	4630      	mov	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	f002 0210 	and.w	r2, r2, #16
 8000f08:	9200      	str	r2, [sp, #0]
 8000f0a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000f0e:	f649 7180 	movw	r1, #40832	; 0x9f80
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f12:	f042 0220 	orr.w	r2, r2, #32
 8000f16:	619a      	str	r2, [r3, #24]
 8000f18:	699a      	ldr	r2, [r3, #24]
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2403      	movs	r4, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1c:	f002 0220 	and.w	r2, r2, #32
 8000f20:	9201      	str	r2, [sp, #4]
 8000f22:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin|FASE3_ROJO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	f042 0204 	orr.w	r2, r2, #4
 8000f2e:	619a      	str	r2, [r3, #24]
 8000f30:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	f002 0204 	and.w	r2, r2, #4
 8000f3a:	9202      	str	r2, [sp, #8]
 8000f3c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	f042 0208 	orr.w	r2, r2, #8
 8000f46:	619a      	str	r2, [r3, #24]
 8000f48:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000f4a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	9303      	str	r3, [sp, #12]
 8000f52:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000f54:	f001 fde8 	bl	8002b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f24f 713f 	movw	r1, #63295	; 0xf73f
 8000f60:	f001 fde2 	bl	8002b28 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f68:	a904      	add	r1, sp, #16
 8000f6a:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <MX_GPIO_Init+0x108>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6c:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f70:	f001 fc7e 	bl	8002870 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f74:	a904      	add	r1, sp, #16
 8000f76:	481d      	ldr	r0, [pc, #116]	; (8000fec <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f78:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7c:	f001 fc78 	bl	8002870 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f80:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	a904      	add	r1, sp, #16
 8000f84:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f001 fc71 	bl	8002870 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	f649 7380 	movw	r3, #40832	; 0x9f80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	a904      	add	r1, sp, #16
 8000f94:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	e9cd 3904 	strd	r3, r9, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	e9cd 8706 	strd	r8, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f001 fc67 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 8000fa2:	f24f 733f 	movw	r3, #63295	; 0xf73f
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	a904      	add	r1, sp, #16
 8000fa8:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	e9cd 3904 	strd	r3, r9, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	e9cd 8706 	strd	r8, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f001 fc5d 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	a904      	add	r1, sp, #16
 8000fbc:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f001 fc55 	bl	8002870 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <MX_GPIO_Init+0x110>)
 8000fc8:	6853      	ldr	r3, [r2, #4]
 8000fca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd2:	6053      	str	r3, [r2, #4]

}
 8000fd4:	b009      	add	sp, #36	; 0x24
 8000fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40011400 	.word	0x40011400
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <Apaga_Fase>:

* @param: numero
* @retval: ninguno. */
void Apaga_Fase(uint8_t numero)		/* Función para apagar completamente una */
{									/* fase.								 */
	switch(numero)
 8000ff4:	3801      	subs	r0, #1
{									/* fase.								 */
 8000ff6:	b508      	push	{r3, lr}
	switch(numero)
 8000ff8:	2805      	cmp	r0, #5
 8000ffa:	d832      	bhi.n	8001062 <Apaga_Fase+0x6e>
 8000ffc:	e8df f000 	tbb	[pc, r0]
 8001000:	1c120e03 	.word	0x1c120e03
 8001004:	2723      	.short	0x2723
	{
	case 1:
	{
		HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <Apaga_Fase+0x70>)
 800100e:	f001 fd8b 	bl	8002b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin | FASE1_ROJO_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 7140 	mov.w	r1, #768	; 0x300
	}
	break;
	case 6:
	{
		HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin | FASE6_AMA_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin | FASE6_ROJO_Pin, GPIO_PIN_SET);
 8001018:	4813      	ldr	r0, [pc, #76]	; (8001068 <Apaga_Fase+0x74>)
 800101a:	e010      	b.n	800103e <Apaga_Fase+0x4a>
		HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin | FASE2_AMA_Pin | FASE2_ROJO_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001022:	e7f9      	b.n	8001018 <Apaga_Fase+0x24>
		HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE3_AMA_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f241 0104 	movw	r1, #4100	; 0x1004
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <Apaga_Fase+0x70>)
 800102c:	f001 fd7c 	bl	8002b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001036:	e7ef      	b.n	8001018 <Apaga_Fase+0x24>
		HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin | FASE4_AMA_Pin | FASE4_ROJO_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2138      	movs	r1, #56	; 0x38
		HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin | FASE5_AMA_Pin | FASE5_ROJO_Pin, GPIO_PIN_SET);
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <Apaga_Fase+0x70>)
	}
	break;
	}
}
 800103e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin | FASE6_ROJO_Pin, GPIO_PIN_SET);
 8001042:	f001 bd71 	b.w	8002b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin | FASE5_AMA_Pin | FASE5_ROJO_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800104c:	e7f6      	b.n	800103c <Apaga_Fase+0x48>
		HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin | FASE6_AMA_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <Apaga_Fase+0x70>)
 8001056:	f001 fd67 	bl	8002b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin | FASE6_ROJO_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001060:	e7da      	b.n	8001018 <Apaga_Fase+0x24>
}
 8001062:	bd08      	pop	{r3, pc}
 8001064:	40010c00 	.word	0x40010c00
 8001068:	40010800 	.word	0x40010800

0800106c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800106c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800106e:	480c      	ldr	r0, [pc, #48]	; (80010a0 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8001070:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <MX_I2C1_Init+0x38>)
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_I2C1_Init+0x3c>)
 8001074:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 68;
 8001078:	2300      	movs	r3, #0
 800107a:	2244      	movs	r2, #68	; 0x44
 800107c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001080:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001084:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001088:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108e:	f001 fe77 	bl	8002d80 <HAL_I2C_Init>
 8001092:	b118      	cbz	r0, 800109c <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8001094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001098:	f000 b866 	b.w	8001168 <Error_Handler>
}
 800109c:	bd08      	pop	{r3, pc}
 800109e:	bf00      	nop
 80010a0:	20000364 	.word	0x20000364
 80010a4:	40005400 	.word	0x40005400
 80010a8:	000186a0 	.word	0x000186a0

080010ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010ac:	b530      	push	{r4, r5, lr}
 80010ae:	4605      	mov	r5, r0
 80010b0:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	a802      	add	r0, sp, #8
 80010b8:	f003 ff28 	bl	8004f0c <memset>
  if(i2cHandle->Instance==I2C1)
 80010bc:	682a      	ldr	r2, [r5, #0]
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <HAL_I2C_MspInit+0xa4>)
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d142      	bne.n	800114a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4c23      	ldr	r4, [pc, #140]	; (8001154 <HAL_I2C_MspInit+0xa8>)
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c6:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ca:	2101      	movs	r1, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	61a3      	str	r3, [r4, #24]
 80010d2:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	4820      	ldr	r0, [pc, #128]	; (8001158 <HAL_I2C_MspInit+0xac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010de:	2312      	movs	r3, #18
 80010e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	a902      	add	r1, sp, #8
 80010ec:	f001 fbc0 	bl	8002870 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f0:	69e3      	ldr	r3, [r4, #28]
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f8:	61e3      	str	r3, [r4, #28]
 80010fa:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fc:	4817      	ldr	r0, [pc, #92]	; (800115c <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001106:	2300      	movs	r3, #0
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001108:	4c15      	ldr	r4, [pc, #84]	; (8001160 <HAL_I2C_MspInit+0xb4>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110a:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800110e:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001110:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001112:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001116:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800111a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800111c:	f001 f9e6 	bl	80024ec <HAL_DMA_Init>
 8001120:	b108      	cbz	r0, 8001126 <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8001122:	f000 f821 	bl	8001168 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	201f      	movs	r0, #31
 800112a:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800112c:	63ac      	str	r4, [r5, #56]	; 0x38
 800112e:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001130:	f001 f954 	bl	80023dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001134:	201f      	movs	r0, #31
 8001136:	f001 f995 	bl	8002464 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2020      	movs	r0, #32
 800113e:	4611      	mov	r1, r2
 8001140:	f001 f94c 	bl	80023dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001144:	2020      	movs	r0, #32
 8001146:	f001 f98d 	bl	8002464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800114a:	b007      	add	sp, #28
 800114c:	bd30      	pop	{r4, r5, pc}
 800114e:	bf00      	nop
 8001150:	40005400 	.word	0x40005400
 8001154:	40021000 	.word	0x40021000
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40020080 	.word	0x40020080
 8001160:	200003b8 	.word	0x200003b8

08001164 <HAL_I2C_SlaveRxCpltCallback>:
	}
}

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c1)/* No hace nada	 */
{									/* porque no se está utilizando la		 */
	__asm("nop");					/* interrupción del I2C.				 */
 8001164:	bf00      	nop
}
 8001166:	4770      	bx	lr

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)			/* Maneja los errores y toma una acción  */
{									/* dependiendo del error.				 */
 8001168:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	enum nFases {FASE_1 = 1, FASE_2, FASE_3, FASE_4, FASE_5, FASE_6};/* Enumerador
									 * para el caso fAFX (asignación de
									 * parámetros una fase a la vez).		 */
	HAL_GPIO_WritePin(GPIOB,LED_FALLA_Pin,GPIO_PIN_RESET);/* Se enciende el
 800116a:	2200      	movs	r2, #0
 800116c:	2102      	movs	r1, #2
 800116e:	481d      	ldr	r0, [pc, #116]	; (80011e4 <Error_Handler+0x7c>)
 8001170:	f001 fcda 	bl	8002b28 <HAL_GPIO_WritePin>
									 * indicador de falla.					 */
	errEnviar[6] = codigoError;		/* Se termina de llenar llenar la trama a*/
	errEnviar[8] = horaLeida.Hours;	/* enviar con el número del código de	 */
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <Error_Handler+0x80>)
	errEnviar[6] = codigoError;		/* Se termina de llenar llenar la trama a*/
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <Error_Handler+0x84>)
	errEnviar[8] = horaLeida.Hours;	/* enviar con el número del código de	 */
 8001178:	7811      	ldrb	r1, [r2, #0]
	errEnviar[6] = codigoError;		/* Se termina de llenar llenar la trama a*/
 800117a:	681c      	ldr	r4, [r3, #0]
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <Error_Handler+0x88>)
	errEnviar[8] = horaLeida.Hours;	/* enviar con el número del código de	 */
 800117e:	7219      	strb	r1, [r3, #8]
	errEnviar[10] = horaLeida.Minutes;/* error y la hora a la que ocurrió el */
 8001180:	7851      	ldrb	r1, [r2, #1]
	errEnviar[12] = horaLeida.Seconds;/* error.								 */
 8001182:	7892      	ldrb	r2, [r2, #2]
	errEnviar[6] = codigoError;		/* Se termina de llenar llenar la trama a*/
 8001184:	719c      	strb	r4, [r3, #6]
	errEnviar[10] = horaLeida.Minutes;/* error y la hora a la que ocurrió el */
 8001186:	7299      	strb	r1, [r3, #10]
	errEnviar[12] = horaLeida.Seconds;/* error.								 */
 8001188:	731a      	strb	r2, [r3, #12]
	switch(codigoError)				/* Decide la acción a tomar en función   */
 800118a:	b11c      	cbz	r4, 8001194 <Error_Handler+0x2c>
 800118c:	2c02      	cmp	r4, #2
 800118e:	d90d      	bls.n	80011ac <Error_Handler+0x44>
 8001190:	2c03      	cmp	r4, #3
 8001192:	d010      	beq.n	80011b6 <Error_Handler+0x4e>
		 * funcionando normalmente ya que no se asignó ningún parámetro
		 * erroneo.															 */
	}
	break;
	}
	HAL_I2C_Master_Transmit(&hi2c1, dirMaestra, errEnviar, sizeof(errEnviar),
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <Error_Handler+0x8c>)
 8001196:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <Error_Handler+0x88>)
 8001198:	8819      	ldrh	r1, [r3, #0]
 800119a:	f242 7310 	movw	r3, #10000	; 0x2710
 800119e:	4816      	ldr	r0, [pc, #88]	; (80011f8 <Error_Handler+0x90>)
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	230e      	movs	r3, #14
 80011a4:	f001 feec 	bl	8002f80 <HAL_I2C_Master_Transmit>
			10000);
  /* USER CODE END Error_Handler_Debug */
}
 80011a8:	b002      	add	sp, #8
 80011aa:	bd10      	pop	{r4, pc}
		Apaga_Fase(canalADC);		/* corriente o por corriente baja.
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <Error_Handler+0x94>)
 80011ae:	7818      	ldrb	r0, [r3, #0]
 80011b0:	f7ff ff20 	bl	8000ff4 <Apaga_Fase>
	break;
 80011b4:	e7ee      	b.n	8001194 <Error_Handler+0x2c>
		Apaga_Fase(FASE_1);			/* luego se deshabilita el RTC, el ADC	 */
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff ff1c 	bl	8000ff4 <Apaga_Fase>
		Apaga_Fase(FASE_2);			/* queda habilitado pero como no se está */
 80011bc:	2002      	movs	r0, #2
 80011be:	f7ff ff19 	bl	8000ff4 <Apaga_Fase>
		Apaga_Fase(FASE_3);			/* entrando en el callback del RTC,		 */
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7ff ff16 	bl	8000ff4 <Apaga_Fase>
		Apaga_Fase(FASE_4);			/* no se está midiendo nada con el ADC.	 */
 80011c8:	2004      	movs	r0, #4
 80011ca:	f7ff ff13 	bl	8000ff4 <Apaga_Fase>
		Apaga_Fase(FASE_5);			/* De esa manera habría que habilitar el */
 80011ce:	2005      	movs	r0, #5
 80011d0:	f7ff ff10 	bl	8000ff4 <Apaga_Fase>
		Apaga_Fase(FASE_6);			/* RTC mediante comando.				 */
 80011d4:	2006      	movs	r0, #6
 80011d6:	f7ff ff0d 	bl	8000ff4 <Apaga_Fase>
		HAL_RTC_MspDeInit(&hrtc);
 80011da:	4809      	ldr	r0, [pc, #36]	; (8001200 <Error_Handler+0x98>)
 80011dc:	f000 fc4a 	bl	8001a74 <HAL_RTC_MspDeInit>
	break;
 80011e0:	e7d8      	b.n	8001194 <Error_Handler+0x2c>
 80011e2:	bf00      	nop
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	200003fc 	.word	0x200003fc
 80011ec:	20000034 	.word	0x20000034
 80011f0:	2000003a 	.word	0x2000003a
 80011f4:	20000038 	.word	0x20000038
 80011f8:	20000364 	.word	0x20000364
 80011fc:	20000031 	.word	0x20000031
 8001200:	2000046c 	.word	0x2000046c

08001204 <SystemClock_Config>:
{
 8001204:	b510      	push	{r4, lr}
 8001206:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001208:	2224      	movs	r2, #36	; 0x24
 800120a:	2100      	movs	r1, #0
 800120c:	a80b      	add	r0, sp, #44	; 0x2c
 800120e:	f003 fe7d 	bl	8004f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001212:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	2410      	movs	r4, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001216:	2100      	movs	r1, #0
 8001218:	eb0d 0002 	add.w	r0, sp, r2
 800121c:	f003 fe76 	bl	8004f0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001220:	4622      	mov	r2, r4
 8001222:	2100      	movs	r1, #0
 8001224:	a801      	add	r0, sp, #4
 8001226:	f003 fe71 	bl	8004f0c <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800122a:	2306      	movs	r3, #6
 800122c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800122e:	2301      	movs	r3, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001232:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001236:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f002 fdda 	bl	8003df0 <HAL_RCC_OscConfig>
 800123c:	b108      	cbz	r0, 8001242 <SystemClock_Config+0x3e>
    Error_Handler();
 800123e:	f7ff ff93 	bl	8001168 <Error_Handler>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001242:	230f      	movs	r3, #15
 8001244:	2100      	movs	r1, #0
 8001246:	e9cd 3105 	strd	r3, r1, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800124a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124e:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001250:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001254:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001256:	f003 f813 	bl	8004280 <HAL_RCC_ClockConfig>
 800125a:	b108      	cbz	r0, 8001260 <SystemClock_Config+0x5c>
    Error_Handler();
 800125c:	f7ff ff84 	bl	8001168 <Error_Handler>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001264:	2203      	movs	r2, #3
 8001266:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800126a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001270:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001272:	f003 f919 	bl	80044a8 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	b108      	cbz	r0, 800127c <SystemClock_Config+0x78>
    Error_Handler();
 8001278:	f7ff ff76 	bl	8001168 <Error_Handler>
}
 800127c:	b014      	add	sp, #80	; 0x50
 800127e:	bd10      	pop	{r4, pc}

08001280 <main>:
	MODO_FASE = true;				/* Selecciona el modo de trabajo de las
 8001280:	2301      	movs	r3, #1
 8001282:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <main+0xb8>)
{
 8001284:	b570      	push	{r4, r5, r6, lr}
	MODO_FASE = true;				/* Selecciona el modo de trabajo de las
 8001286:	7493      	strb	r3, [r2, #18]
 8001288:	2300      	movs	r3, #0
		manualTiempo[val] = 0;		/* con todas las luminarias encendidas,	 */
 800128a:	4619      	mov	r1, r3
 800128c:	54d1      	strb	r1, [r2, r3]
 800128e:	3301      	adds	r3, #1
	for(uint8_t val = 0; val < 18; val++)/* Se le asigna el estado a cada	 */
 8001290:	2b12      	cmp	r3, #18
 8001292:	d1fb      	bne.n	800128c <main+0xc>
	fasesTiempo[1] = 3;				/* debe eliminar esta asignación y tomar */
 8001294:	2103      	movs	r1, #3
	fasesTiempo[2] = 4;				/* los valores del comando recibido una  */
 8001296:	2204      	movs	r2, #4
	fasesTiempo[0] = 6;				/* Tiempos de encendido de la fase 1, se */
 8001298:	2006      	movs	r0, #6
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <main+0xbc>)
	  if(HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) tramaEntrada,
 800129c:	4c28      	ldr	r4, [pc, #160]	; (8001340 <main+0xc0>)
	fasesTiempo[1] = 3;				/* debe eliminar esta asignación y tomar */
 800129e:	7059      	strb	r1, [r3, #1]
	fasesTiempo[2] = 4;				/* los valores del comando recibido una  */
 80012a0:	709a      	strb	r2, [r3, #2]
	fasesTiempo[4] = 3;				/* debe eliminar esta asignación y tomar */
 80012a2:	7119      	strb	r1, [r3, #4]
	fasesTiempo[5] = 4;				/* los valores del comando recibido una  */
 80012a4:	715a      	strb	r2, [r3, #5]
	fasesTiempo[7] = 3;				/* debe eliminar esta asignación y tomar */
 80012a6:	71d9      	strb	r1, [r3, #7]
	fasesTiempo[8] = 4;				/* los valores del comando recibido una  */
 80012a8:	721a      	strb	r2, [r3, #8]
	fasesTiempo[10] = 3;			/* debe eliminar esta asignación y tomar */
 80012aa:	7299      	strb	r1, [r3, #10]
	fasesTiempo[11] = 4;			/* los valores del comando recibido una  */
 80012ac:	72da      	strb	r2, [r3, #11]
	fasesTiempo[13] = 3;			/* debe eliminar esta asignación y tomar */
 80012ae:	7359      	strb	r1, [r3, #13]
	fasesTiempo[14] = 4;			/* los valores del comando recibido una  */
 80012b0:	739a      	strb	r2, [r3, #14]
	fasesTiempo[16] = 3;			/* debe eliminar esta asignación y tomar */
 80012b2:	7419      	strb	r1, [r3, #16]
	fasesTiempo[17] = 4;			/* los valores del comando recibido una  */
 80012b4:	745a      	strb	r2, [r3, #17]
	fasesTiempo[0] = 6;				/* Tiempos de encendido de la fase 1, se */
 80012b6:	7018      	strb	r0, [r3, #0]
	fasesTiempo[3] = 6;				/* Tiempos de encendido de la fase 2, se */
 80012b8:	70d8      	strb	r0, [r3, #3]
	fasesTiempo[6] = 6;				/* Tiempos de encendido de la fase 3, se */
 80012ba:	7198      	strb	r0, [r3, #6]
	fasesTiempo[9] = 6;				/* Tiempos de encendido de la fase 4, se */
 80012bc:	7258      	strb	r0, [r3, #9]
	fasesTiempo[12] = 6;			/* Tiempos de encendido de la fase 5, se */
 80012be:	7318      	strb	r0, [r3, #12]
	fasesTiempo[15] = 6;			/* Tiempos de encendido de la fase 6, se */
 80012c0:	73d8      	strb	r0, [r3, #15]
  HAL_Init();
 80012c2:	f000 fcf5 	bl	8001cb0 <HAL_Init>
  SystemClock_Config();
 80012c6:	f7ff ff9d 	bl	8001204 <SystemClock_Config>
  MX_GPIO_Init();
 80012ca:	f7ff fe09 	bl	8000ee0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ce:	f7ff fa07 	bl	80006e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80012d2:	f7ff f989 	bl	80005e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80012d6:	f7ff fec9 	bl	800106c <MX_I2C1_Init>
  MX_RTC_Init();
 80012da:	f000 fb69 	bl	80019b0 <MX_RTC_Init>
  HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin | FASE1_AMA_Pin | FASE1_ROJO_Pin |
 80012de:	2201      	movs	r2, #1
 80012e0:	f649 7180 	movw	r1, #40832	; 0x9f80
 80012e4:	4817      	ldr	r0, [pc, #92]	; (8001344 <main+0xc4>)
 80012e6:	f001 fc1f 	bl	8002b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,LED_STATUS_Pin | LED_FALLA_Pin | FASE3_VERDE_Pin |
 80012ea:	2201      	movs	r2, #1
 80012ec:	f24f 713f 	movw	r1, #63295	; 0xf73f
 80012f0:	4815      	ldr	r0, [pc, #84]	; (8001348 <main+0xc8>)
 80012f2:	f001 fc19 	bl	8002b28 <HAL_GPIO_WritePin>
  HAL_I2C_MspInit(&hi2c1);			/* Inicializando el modo I2C.            */
 80012f6:	4815      	ldr	r0, [pc, #84]	; (800134c <main+0xcc>)
 80012f8:	f7ff fed8 	bl	80010ac <HAL_I2C_MspInit>
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_SEC);/* Se habilita la interrupción */
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <main+0xd0>)
	  if(HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) tramaEntrada,
 80012fe:	4d13      	ldr	r5, [pc, #76]	; (800134c <main+0xcc>)
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_SEC);/* Se habilita la interrupción */
 8001300:	681a      	ldr	r2, [r3, #0]
		  codigoError = 20;			/* En caso de error establece el código  */
 8001302:	4e14      	ldr	r6, [pc, #80]	; (8001354 <main+0xd4>)
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_SEC);/* Se habilita la interrupción */
 8001304:	6813      	ldr	r3, [r2, #0]
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);	/* del RTC cada segundo y luego se       */
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <main+0xd8>)
 800130e:	6853      	ldr	r3, [r2, #4]
 8001310:	f023 0310 	bic.w	r3, r3, #16
 8001314:	6053      	str	r3, [r2, #4]
	  if(HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) tramaEntrada,
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	2219      	movs	r2, #25
 800131c:	4621      	mov	r1, r4
 800131e:	4628      	mov	r0, r5
 8001320:	f001 fefc 	bl	800311c <HAL_I2C_Slave_Receive>
 8001324:	b120      	cbz	r0, 8001330 <main+0xb0>
		  codigoError = 20;			/* En caso de error establece el código  */
 8001326:	2314      	movs	r3, #20
 8001328:	6033      	str	r3, [r6, #0]
		  Error_Handler();			/* de error y llama al Error_Handler.	 */
 800132a:	f7ff ff1d 	bl	8001168 <Error_Handler>
 800132e:	e7f2      	b.n	8001316 <main+0x96>
		  Selec_Opera((char *) tramaEntrada);/* la función para seleccionar  */
 8001330:	4620      	mov	r0, r4
 8001332:	f000 f8f7 	bl	8001524 <Selec_Opera>
 8001336:	e7ee      	b.n	8001316 <main+0x96>
 8001338:	2000001e 	.word	0x2000001e
 800133c:	2000000c 	.word	0x2000000c
 8001340:	20000048 	.word	0x20000048
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00
 800134c:	20000364 	.word	0x20000364
 8001350:	2000046c 	.word	0x2000046c
 8001354:	20000034 	.word	0x20000034
 8001358:	40002800 	.word	0x40002800

0800135c <HAL_RTCEx_RTCEventCallback>:
{									/* una interrupción por evento de		 */
 800135c:	b510      	push	{r4, lr}
 800135e:	4604      	mov	r4, r0
	HAL_RTC_GetTime(hrtc,&horaLeida, RTC_FORMAT_BCD);
 8001360:	2201      	movs	r2, #1
 8001362:	4912      	ldr	r1, [pc, #72]	; (80013ac <HAL_RTCEx_RTCEventCallback+0x50>)
 8001364:	f003 fb04 	bl	8004970 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc,&fechaLeida, RTC_FORMAT_BCD);
 8001368:	2201      	movs	r2, #1
 800136a:	4911      	ldr	r1, [pc, #68]	; (80013b0 <HAL_RTCEx_RTCEventCallback+0x54>)
 800136c:	4620      	mov	r0, r4
 800136e:	f003 fc61 	bl	8004c34 <HAL_RTC_GetDate>
	if(MODO_FASE == false)					/* Si MODO_FASE es igual a cero, se		 */
 8001372:	4810      	ldr	r0, [pc, #64]	; (80013b4 <HAL_RTCEx_RTCEventCallback+0x58>)
 8001374:	7c83      	ldrb	r3, [r0, #18]
 8001376:	b99b      	cbnz	r3, 80013a0 <HAL_RTCEx_RTCEventCallback+0x44>
		Fases_Auto(fasesTiempo, &horaLeida, &fTiempo);/* Manejo de fases en
 8001378:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_RTCEx_RTCEventCallback+0x5c>)
 800137a:	490c      	ldr	r1, [pc, #48]	; (80013ac <HAL_RTCEx_RTCEventCallback+0x50>)
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <HAL_RTCEx_RTCEventCallback+0x60>)
 800137e:	f7ff faf7 	bl	8000970 <Fases_Auto>
  	if(HAL_ADC_Start_DMA(&hadc1,sensorLeido,2*BUFFER_ADC) != HAL_OK)
 8001382:	221a      	movs	r2, #26
 8001384:	490e      	ldr	r1, [pc, #56]	; (80013c0 <HAL_RTCEx_RTCEventCallback+0x64>)
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <HAL_RTCEx_RTCEventCallback+0x68>)
 8001388:	f000 fe7a 	bl	8002080 <HAL_ADC_Start_DMA>
 800138c:	b120      	cbz	r0, 8001398 <HAL_RTCEx_RTCEventCallback+0x3c>
  	    codigoError = 1;			/* Se inicia la conversión de los sensores*/
 800138e:	2201      	movs	r2, #1
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_RTCEx_RTCEventCallback+0x6c>)
 8001392:	601a      	str	r2, [r3, #0]
  		Error_Handler();	  		/* por DMA para poder almacenar los       */
 8001394:	f7ff fee8 	bl	8001168 <Error_Handler>
	canalADC = 0;   				/* veces que se van a enviar datos es     */
 8001398:	2200      	movs	r2, #0
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_RTCEx_RTCEventCallback+0x70>)
 800139c:	701a      	strb	r2, [r3, #0]
}
 800139e:	bd10      	pop	{r4, pc}
	else if(MODO_FASE == true)				/* Si MODO_FASE es igual a cero, se		 */
 80013a0:	7c83      	ldrb	r3, [r0, #18]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0ed      	beq.n	8001382 <HAL_RTCEx_RTCEventCallback+0x26>
		Fases_Sec(manualTiempo);	/* Función para el manejo de las fases en*/
 80013a6:	f7ff f9bb 	bl	8000720 <Fases_Sec>
 80013aa:	e7ea      	b.n	8001382 <HAL_RTCEx_RTCEventCallback+0x26>
 80013ac:	200003fc 	.word	0x200003fc
 80013b0:	20000465 	.word	0x20000465
 80013b4:	2000001e 	.word	0x2000001e
 80013b8:	20000434 	.word	0x20000434
 80013bc:	2000000c 	.word	0x2000000c
 80013c0:	20000400 	.word	0x20000400
 80013c4:	200002e4 	.word	0x200002e4
 80013c8:	20000034 	.word	0x20000034
 80013cc:	20000031 	.word	0x20000031

080013d0 <HAL_ADC_ConvCpltCallback>:
{
 80013d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ADC_ChannelConfTypeDef sConfig = {0};
 80013d2:	2300      	movs	r3, #0
	canalADC++;						/* Para configurar el canal ADC a medir. */
 80013d4:	4e3b      	ldr	r6, [pc, #236]	; (80014c4 <HAL_ADC_ConvCpltCallback+0xf4>)
	ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80013da:	9303      	str	r3, [sp, #12]
	canalADC++;						/* Para configurar el canal ADC a medir. */
 80013dc:	7833      	ldrb	r3, [r6, #0]
{
 80013de:	4605      	mov	r5, r0
	canalADC++;						/* Para configurar el canal ADC a medir. */
 80013e0:	3301      	adds	r3, #1
	Corrige_Med16(sensorLeido, tam);
 80013e2:	210d      	movs	r1, #13
 80013e4:	4838      	ldr	r0, [pc, #224]	; (80014c8 <HAL_ADC_ConvCpltCallback+0xf8>)
	canalADC++;						/* Para configurar el canal ADC a medir. */
 80013e6:	7033      	strb	r3, [r6, #0]
	Corrige_Med16(sensorLeido, tam);
 80013e8:	f7ff fa0c 	bl	8000804 <Corrige_Med16>
	if(canalADC < 7)				/* Verifica si la señal está entre los   */
 80013ec:	7833      	ldrb	r3, [r6, #0]
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d81c      	bhi.n	800142c <HAL_ADC_ConvCpltCallback+0x5c>
		if(bFases[canalADC - 1] == 1)/* Solo si hay fases encendidas se		 */
 80013f2:	4a36      	ldr	r2, [pc, #216]	; (80014cc <HAL_ADC_ConvCpltCallback+0xfc>)
 80013f4:	4413      	add	r3, r2
 80013f6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80013fa:	2a01      	cmp	r2, #1
 80013fc:	d10a      	bne.n	8001414 <HAL_ADC_ConvCpltCallback+0x44>
			if(Verif_Ten(sensorLeido, tam, 1) != HAL_OK)/* Si está midiendo  */
 80013fe:	210d      	movs	r1, #13
 8001400:	4831      	ldr	r0, [pc, #196]	; (80014c8 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001402:	f7ff fa35 	bl	8000870 <Verif_Ten>
 8001406:	b138      	cbz	r0, 8001418 <HAL_ADC_ConvCpltCallback+0x48>
				codigoError = 2;	/* condición de error.				 	 */
 8001408:	2202      	movs	r2, #2
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <HAL_ADC_ConvCpltCallback+0x100>)
			codigoError = 3;
 800140c:	601a      	str	r2, [r3, #0]
			Error_Handler();
 800140e:	f7ff feab 	bl	8001168 <Error_Handler>
 8001412:	e001      	b.n	8001418 <HAL_ADC_ConvCpltCallback+0x48>
		else if(bFases[canalADC - 1] == 0)/* Solo si hay fases apagadas se   */
 8001414:	2a00      	cmp	r2, #0
 8001416:	d0f2      	beq.n	80013fe <HAL_ADC_ConvCpltCallback+0x2e>
	switch(canalADC)				/* Se cambia al sensor de fasea medir, el*/
 8001418:	7833      	ldrb	r3, [r6, #0]
 800141a:	3b01      	subs	r3, #1
 800141c:	2b06      	cmp	r3, #6
 800141e:	d842      	bhi.n	80014a6 <HAL_ADC_ConvCpltCallback+0xd6>
 8001420:	e8df f003 	tbb	[pc, r3]
 8001424:	4745430f 	.word	0x4745430f
 8001428:	4b49      	.short	0x4b49
 800142a:	4d          	.byte	0x4d
 800142b:	00          	.byte	0x00
	else if(canalADC == 7)			/* Si se está midiendo el sensor de      */
 800142c:	2b07      	cmp	r3, #7
 800142e:	d1f3      	bne.n	8001418 <HAL_ADC_ConvCpltCallback+0x48>
		if(Verif_Temp(sensorLeido,tam))
 8001430:	210d      	movs	r1, #13
 8001432:	4825      	ldr	r0, [pc, #148]	; (80014c8 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001434:	f7ff fa6c 	bl	8000910 <Verif_Temp>
 8001438:	2800      	cmp	r0, #0
 800143a:	d0ed      	beq.n	8001418 <HAL_ADC_ConvCpltCallback+0x48>
			codigoError = 3;
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <HAL_ADC_ConvCpltCallback+0x100>)
 800143e:	2203      	movs	r2, #3
 8001440:	e7e4      	b.n	800140c <HAL_ADC_ConvCpltCallback+0x3c>
		sConfig.Channel = ADC_CHANNEL_1;
 8001442:	2301      	movs	r3, #1
	  hadc1.Instance = ADC1;
 8001444:	4823      	ldr	r0, [pc, #140]	; (80014d4 <HAL_ADC_ConvCpltCallback+0x104>)
		sConfig.Channel = ADC_CHANNEL_0;/* la fase 1 nuevamente.			 */
 8001446:	9301      	str	r3, [sp, #4]
	  hadc1.Instance = ADC1;
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_ADC_ConvCpltCallback+0x108>)
	  hadc1.Init.ContinuousConvMode = ENABLE;
 800144a:	2401      	movs	r4, #1
	  hadc1.Instance = ADC1;
 800144c:	6003      	str	r3, [r0, #0]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800144e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001452:	2300      	movs	r3, #0
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001454:	7304      	strb	r4, [r0, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001456:	6083      	str	r3, [r0, #8]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001458:	7503      	strb	r3, [r0, #20]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145a:	61c2      	str	r2, [r0, #28]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800145c:	6043      	str	r3, [r0, #4]
	  hadc1.Init.NbrOfConversion = 1;
 800145e:	6104      	str	r4, [r0, #16]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001460:	f000 fec0 	bl	80021e4 <HAL_ADC_Init>
 8001464:	b108      	cbz	r0, 800146a <HAL_ADC_ConvCpltCallback+0x9a>
	    Error_Handler();
 8001466:	f7ff fe7f 	bl	8001168 <Error_Handler>
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;/* muestrear.           */
 800146a:	2306      	movs	r3, #6
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146c:	a901      	add	r1, sp, #4
 800146e:	4819      	ldr	r0, [pc, #100]	; (80014d4 <HAL_ADC_ConvCpltCallback+0x104>)
	sConfig.Rank = ADC_REGULAR_RANK_1;/* Se configura el proximo canal a     */
 8001470:	9402      	str	r4, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;/* muestrear.           */
 8001472:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001474:	f000 fd26 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 8001478:	b120      	cbz	r0, 8001484 <HAL_ADC_ConvCpltCallback+0xb4>
		codigoError = 4;
 800147a:	2204      	movs	r2, #4
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_ADC_ConvCpltCallback+0x100>)
 800147e:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001480:	f7ff fe72 	bl	8001168 <Error_Handler>
	HAL_ADC_MspInit(hadc);
 8001484:	4628      	mov	r0, r5
 8001486:	f7ff f8d7 	bl	8000638 <HAL_ADC_MspInit>
	if(canalADC <=6)				/* Se inicia la conversión por DMA       */
 800148a:	7833      	ldrb	r3, [r6, #0]
 800148c:	2b06      	cmp	r3, #6
 800148e:	d80a      	bhi.n	80014a6 <HAL_ADC_ConvCpltCallback+0xd6>
		if(HAL_ADC_Start_DMA(&hadc1, sensorLeido, 2*BUFFER_ADC) != HAL_OK)
 8001490:	221a      	movs	r2, #26
 8001492:	490d      	ldr	r1, [pc, #52]	; (80014c8 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001494:	480f      	ldr	r0, [pc, #60]	; (80014d4 <HAL_ADC_ConvCpltCallback+0x104>)
 8001496:	f000 fdf3 	bl	8002080 <HAL_ADC_Start_DMA>
 800149a:	b120      	cbz	r0, 80014a6 <HAL_ADC_ConvCpltCallback+0xd6>
			codigoError = 1;
 800149c:	2201      	movs	r2, #1
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_ADC_ConvCpltCallback+0x100>)
 80014a0:	601a      	str	r2, [r3, #0]
			Error_Handler();
 80014a2:	f7ff fe61 	bl	8001168 <Error_Handler>
}
 80014a6:	b004      	add	sp, #16
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
		sConfig.Channel = ADC_CHANNEL_2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	e7ca      	b.n	8001444 <HAL_ADC_ConvCpltCallback+0x74>
		sConfig.Channel = ADC_CHANNEL_3;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e7c8      	b.n	8001444 <HAL_ADC_ConvCpltCallback+0x74>
		sConfig.Channel = ADC_CHANNEL_4;
 80014b2:	2304      	movs	r3, #4
 80014b4:	e7c6      	b.n	8001444 <HAL_ADC_ConvCpltCallback+0x74>
		sConfig.Channel = ADC_CHANNEL_5;
 80014b6:	2305      	movs	r3, #5
 80014b8:	e7c4      	b.n	8001444 <HAL_ADC_ConvCpltCallback+0x74>
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014ba:	2310      	movs	r3, #16
 80014bc:	e7c2      	b.n	8001444 <HAL_ADC_ConvCpltCallback+0x74>
		sConfig.Channel = ADC_CHANNEL_0;/* la fase 1 nuevamente.			 */
 80014be:	2300      	movs	r3, #0
 80014c0:	e7c0      	b.n	8001444 <HAL_ADC_ConvCpltCallback+0x74>
 80014c2:	bf00      	nop
 80014c4:	20000031 	.word	0x20000031
 80014c8:	20000400 	.word	0x20000400
 80014cc:	2000035b 	.word	0x2000035b
 80014d0:	20000034 	.word	0x20000034
 80014d4:	200002e4 	.word	0x200002e4
 80014d8:	40012400 	.word	0x40012400

080014dc <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80014dc:	4770      	bx	lr

080014de <strindex>:
* donde comienza t[].

* @param: s[], t[]
* @retval: índice "i" o 0xff en caso de no encontrar la sub-trama. */
volatile uint8_t strindex(char s[], char t[])/*Determnina la posición en la  */
{									/* que comienza el arreglo t[] dentro del*/
 80014de:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t i, j, k;				/* arreglo s[], si el arreglo t[] no se  */
	for (i = 0; s[i] != '\0'; i++)	/* encuentra dentro de s[] entonces		 */
 80014e0:	2400      	movs	r4, #0
 80014e2:	b2e3      	uxtb	r3, r4
 80014e4:	5cc2      	ldrb	r2, [r0, r3]
 80014e6:	b912      	cbnz	r2, 80014ee <strindex+0x10>
	{								/* devuelve 0xff.						 */
		for (j=i, k=0; t[k]!='\0' && s[j]==t[k]; j++, k++);
		if (k > 0 && t[k] == '\0')
		return i;
	}
	return 0xff;
 80014e8:	23ff      	movs	r3, #255	; 0xff
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ee:	2600      	movs	r6, #0
 80014f0:	b2f2      	uxtb	r2, r6
		for (j=i, k=0; t[k]!='\0' && s[j]==t[k]; j++, k++);
 80014f2:	5c8f      	ldrb	r7, [r1, r2]
 80014f4:	189d      	adds	r5, r3, r2
 80014f6:	b2ed      	uxtb	r5, r5
 80014f8:	b12f      	cbz	r7, 8001506 <strindex+0x28>
 80014fa:	5d42      	ldrb	r2, [r0, r5]
 80014fc:	3601      	adds	r6, #1
 80014fe:	42ba      	cmp	r2, r7
 8001500:	d0f6      	beq.n	80014f0 <strindex+0x12>
 8001502:	3401      	adds	r4, #1
 8001504:	e7ed      	b.n	80014e2 <strindex+0x4>
		if (k > 0 && t[k] == '\0')
 8001506:	2a00      	cmp	r2, #0
 8001508:	d0fb      	beq.n	8001502 <strindex+0x24>
 800150a:	e7ee      	b.n	80014ea <strindex+0xc>

0800150c <Byte2Bcd2>:

* @param: Value
* @retval: Value convertido a BCD. */
uint8_t Byte2Bcd2(uint8_t Value)	/* (Copiada) Función para convertir un   */
{									/* número recibido en formato decimal (en*/
  uint32_t bcdhigh = 0U;			/* un byte) a un número (en un byte) en  */
 800150c:	2300      	movs	r3, #0
  while (Value >= 10U)				/* formato BCD.							 */
 800150e:	2809      	cmp	r0, #9
 8001510:	d803      	bhi.n	800151a <Byte2Bcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8001512:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001516:	b2c0      	uxtb	r0, r0
 8001518:	4770      	bx	lr
    Value -= 10U;
 800151a:	380a      	subs	r0, #10
    bcdhigh++;
 800151c:	3301      	adds	r3, #1
    Value -= 10U;
 800151e:	b2c0      	uxtb	r0, r0
 8001520:	e7f5      	b.n	800150e <Byte2Bcd2+0x2>
	...

08001524 <Selec_Opera>:
{
 8001524:	b570      	push	{r4, r5, r6, lr}
	volatile uint8_t pos = 0;		/* Variable de uso múltiple para usar como
 8001526:	2400      	movs	r4, #0
{
 8001528:	b0da      	sub	sp, #360	; 0x168
	int iFase[22] = {0};			/* Arreglo para almacenar la hora de
 800152a:	2258      	movs	r2, #88	; 0x58
 800152c:	4621      	mov	r1, r4
{
 800152e:	4605      	mov	r5, r0
	int tFase[21] = {0};			/* Arreglo para almacenar los tiempos de
 8001530:	ae2f      	add	r6, sp, #188	; 0xbc
	int iFase[22] = {0};			/* Arreglo para almacenar la hora de
 8001532:	a844      	add	r0, sp, #272	; 0x110
	volatile uint8_t pos = 0;		/* Variable de uso múltiple para usar como
 8001534:	f88d 4097 	strb.w	r4, [sp, #151]	; 0x97
	uint8_t eComando[T_COMANDO + 1] = {0};/* Arreglo donde se almacena el
 8001538:	9426      	str	r4, [sp, #152]	; 0x98
 800153a:	f88d 409c 	strb.w	r4, [sp, #156]	; 0x9c
	int iFase[22] = {0};			/* Arreglo para almacenar la hora de
 800153e:	f003 fce5 	bl	8004f0c <memset>
	int tFase[21] = {0};			/* Arreglo para almacenar los tiempos de
 8001542:	2254      	movs	r2, #84	; 0x54
 8001544:	4621      	mov	r1, r4
 8001546:	4630      	mov	r0, r6
 8001548:	f003 fce0 	bl	8004f0c <memset>
	int hSist[7] = {0};				/* Arreglo para almacenar la hora y fecha*
 800154c:	221c      	movs	r2, #28
 800154e:	4621      	mov	r1, r4
 8001550:	a828      	add	r0, sp, #160	; 0xa0
 8001552:	f003 fcdb 	bl	8004f0c <memset>
	while(pos < T_COMANDO)			/* Extrae el comando de la trama recibida*/
 8001556:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
 800155a:	2b03      	cmp	r3, #3
 800155c:	d93f      	bls.n	80015de <Selec_Opera+0xba>
	pos = strindex(comandos, (char *) eComando);/* Verifica si el comando    */
 800155e:	a926      	add	r1, sp, #152	; 0x98
 8001560:	48ab      	ldr	r0, [pc, #684]	; (8001810 <Selec_Opera+0x2ec>)
 8001562:	f7ff ffbc 	bl	80014de <strindex>
 8001566:	f88d 0097 	strb.w	r0, [sp, #151]	; 0x97
	switch(pos)						/* Selección de operación a realizar en  */
 800156a:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b0c      	cmp	r3, #12
 8001572:	f000 8097 	beq.w	80016a4 <Selec_Opera+0x180>
 8001576:	d842      	bhi.n	80015fe <Selec_Opera+0xda>
 8001578:	2b04      	cmp	r3, #4
 800157a:	d04b      	beq.n	8001614 <Selec_Opera+0xf0>
 800157c:	2b08      	cmp	r3, #8
 800157e:	f000 808d 	beq.w	800169c <Selec_Opera+0x178>
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 8209 	bne.w	800199a <Selec_Opera+0x476>
		pos = sscanf(ent, "%s %d %d %d %d %d %d %d", eComando, &hSist[0], &hSist[1],
 8001588:	ab2e      	add	r3, sp, #184	; 0xb8
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	ab2d      	add	r3, sp, #180	; 0xb4
 800158e:	9304      	str	r3, [sp, #16]
 8001590:	ab2c      	add	r3, sp, #176	; 0xb0
 8001592:	9303      	str	r3, [sp, #12]
 8001594:	ab2b      	add	r3, sp, #172	; 0xac
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	ab2a      	add	r3, sp, #168	; 0xa8
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	ab29      	add	r3, sp, #164	; 0xa4
 800159e:	aa26      	add	r2, sp, #152	; 0x98
 80015a0:	499c      	ldr	r1, [pc, #624]	; (8001814 <Selec_Opera+0x2f0>)
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	4628      	mov	r0, r5
 80015a6:	ab28      	add	r3, sp, #160	; 0xa0
 80015a8:	f003 fcb8 	bl	8004f1c <siscanf>
 80015ac:	b2c0      	uxtb	r0, r0
 80015ae:	f88d 0097 	strb.w	r0, [sp, #151]	; 0x97
		fTiempo.hSistema.Hours = Byte2Bcd2((uint8_t) hSist[0]);
 80015b2:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
 80015b6:	f7ff ffa9 	bl	800150c <Byte2Bcd2>
 80015ba:	4997      	ldr	r1, [pc, #604]	; (8001818 <Selec_Opera+0x2f4>)
 80015bc:	7008      	strb	r0, [r1, #0]
		fTiempo.hSistema.Minutes = Byte2Bcd2((uint8_t) hSist[1]);
 80015be:	f89d 00a4 	ldrb.w	r0, [sp, #164]	; 0xa4
 80015c2:	f7ff ffa3 	bl	800150c <Byte2Bcd2>
 80015c6:	7048      	strb	r0, [r1, #1]
		fTiempo.hSistema.Seconds = Byte2Bcd2((uint8_t) hSist[2]);
 80015c8:	f89d 00a8 	ldrb.w	r0, [sp, #168]	; 0xa8
 80015cc:	f7ff ff9e 	bl	800150c <Byte2Bcd2>
		HAL_RTC_SetTime(&hrtc, &fTiempo.hSistema, RTC_FORMAT_BCD);
 80015d0:	2201      	movs	r2, #1
		fTiempo.hSistema.Seconds = Byte2Bcd2((uint8_t) hSist[2]);
 80015d2:	7088      	strb	r0, [r1, #2]
		HAL_RTC_SetTime(&hrtc, &fTiempo.hSistema, RTC_FORMAT_BCD);
 80015d4:	4891      	ldr	r0, [pc, #580]	; (800181c <Selec_Opera+0x2f8>)
 80015d6:	f003 f935 	bl	8004844 <HAL_RTC_SetTime>
}
 80015da:	b05a      	add	sp, #360	; 0x168
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
		eComando[pos] = ent[pos];	/* usará luego para determinar el comando*/
 80015de:	f89d 2097 	ldrb.w	r2, [sp, #151]	; 0x97
 80015e2:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
 80015e6:	a95a      	add	r1, sp, #360	; 0x168
 80015e8:	5caa      	ldrb	r2, [r5, r2]
 80015ea:	440b      	add	r3, r1
 80015ec:	f803 2cd0 	strb.w	r2, [r3, #-208]
		pos++;						/* recibido.							 */
 80015f0:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
 80015fc:	e7ab      	b.n	8001556 <Selec_Opera+0x32>
	switch(pos)						/* Selección de operación a realizar en  */
 80015fe:	2b14      	cmp	r3, #20
 8001600:	d054      	beq.n	80016ac <Selec_Opera+0x188>
 8001602:	2b18      	cmp	r3, #24
 8001604:	f000 8114 	beq.w	8001830 <Selec_Opera+0x30c>
 8001608:	2b10      	cmp	r3, #16
 800160a:	f040 81c6 	bne.w	800199a <Selec_Opera+0x476>
		MODO_FASE = 1;
 800160e:	4b84      	ldr	r3, [pc, #528]	; (8001820 <Selec_Opera+0x2fc>)
 8001610:	2201      	movs	r2, #1
 8001612:	e049      	b.n	80016a8 <Selec_Opera+0x184>
		pos = sscanf(ent, "%s %d %d %d %d %d %d %d", eComando, &hSist[0], &hSist[1],
 8001614:	ab2e      	add	r3, sp, #184	; 0xb8
 8001616:	9305      	str	r3, [sp, #20]
 8001618:	ab2d      	add	r3, sp, #180	; 0xb4
 800161a:	9304      	str	r3, [sp, #16]
 800161c:	ab2c      	add	r3, sp, #176	; 0xb0
 800161e:	9303      	str	r3, [sp, #12]
 8001620:	ab2b      	add	r3, sp, #172	; 0xac
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	ab2a      	add	r3, sp, #168	; 0xa8
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	ab29      	add	r3, sp, #164	; 0xa4
 800162a:	aa26      	add	r2, sp, #152	; 0x98
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	4979      	ldr	r1, [pc, #484]	; (8001814 <Selec_Opera+0x2f0>)
 8001630:	ab28      	add	r3, sp, #160	; 0xa0
 8001632:	4628      	mov	r0, r5
 8001634:	f003 fc72 	bl	8004f1c <siscanf>
 8001638:	b2c0      	uxtb	r0, r0
 800163a:	f88d 0097 	strb.w	r0, [sp, #151]	; 0x97
		fTiempo.hSistema.Hours = Byte2Bcd2((uint8_t) hSist[0]);
 800163e:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
 8001642:	f7ff ff63 	bl	800150c <Byte2Bcd2>
 8001646:	4974      	ldr	r1, [pc, #464]	; (8001818 <Selec_Opera+0x2f4>)
		fFecha.dSistema.Date = Byte2Bcd2((uint8_t) hSist[3]);
 8001648:	4c76      	ldr	r4, [pc, #472]	; (8001824 <Selec_Opera+0x300>)
		fTiempo.hSistema.Hours = Byte2Bcd2((uint8_t) hSist[0]);
 800164a:	7008      	strb	r0, [r1, #0]
		fTiempo.hSistema.Minutes = Byte2Bcd2((uint8_t) hSist[1]);
 800164c:	f89d 00a4 	ldrb.w	r0, [sp, #164]	; 0xa4
 8001650:	f7ff ff5c 	bl	800150c <Byte2Bcd2>
 8001654:	7048      	strb	r0, [r1, #1]
		fTiempo.hSistema.Seconds = Byte2Bcd2((uint8_t) hSist[2]);
 8001656:	f89d 00a8 	ldrb.w	r0, [sp, #168]	; 0xa8
 800165a:	f7ff ff57 	bl	800150c <Byte2Bcd2>
 800165e:	7088      	strb	r0, [r1, #2]
		fFecha.dSistema.Date = Byte2Bcd2((uint8_t) hSist[3]);
 8001660:	f89d 00ac 	ldrb.w	r0, [sp, #172]	; 0xac
 8001664:	f7ff ff52 	bl	800150c <Byte2Bcd2>
 8001668:	70a0      	strb	r0, [r4, #2]
		fFecha.dSistema.Month = Byte2Bcd2((uint8_t) hSist[4]);
 800166a:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
 800166e:	f7ff ff4d 	bl	800150c <Byte2Bcd2>
 8001672:	7060      	strb	r0, [r4, #1]
		fFecha.dSistema.Year = Byte2Bcd2((uint8_t) hSist[5]);
 8001674:	f89d 00b4 	ldrb.w	r0, [sp, #180]	; 0xb4
 8001678:	f7ff ff48 	bl	800150c <Byte2Bcd2>
 800167c:	70e0      	strb	r0, [r4, #3]
		fFecha.dSistema.WeekDay = Byte2Bcd2((uint8_t) hSist[6]);
 800167e:	f89d 00b8 	ldrb.w	r0, [sp, #184]	; 0xb8
 8001682:	f7ff ff43 	bl	800150c <Byte2Bcd2>
		HAL_RTC_SetTime(&hrtc, &fTiempo.hSistema, RTC_FORMAT_BCD);
 8001686:	2201      	movs	r2, #1
		fFecha.dSistema.WeekDay = Byte2Bcd2((uint8_t) hSist[6]);
 8001688:	7020      	strb	r0, [r4, #0]
		HAL_RTC_SetTime(&hrtc, &fTiempo.hSistema, RTC_FORMAT_BCD);
 800168a:	4864      	ldr	r0, [pc, #400]	; (800181c <Selec_Opera+0x2f8>)
 800168c:	f003 f8da 	bl	8004844 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &fFecha.dSistema, RTC_FORMAT_BCD);
 8001690:	2201      	movs	r2, #1
 8001692:	4621      	mov	r1, r4
 8001694:	4861      	ldr	r0, [pc, #388]	; (800181c <Selec_Opera+0x2f8>)
 8001696:	f003 fa2b 	bl	8004af0 <HAL_RTC_SetDate>
	break;
 800169a:	e79e      	b.n	80015da <Selec_Opera+0xb6>
		HAL_RTC_DeInit(&hrtc);
 800169c:	485f      	ldr	r0, [pc, #380]	; (800181c <Selec_Opera+0x2f8>)
 800169e:	f003 fbaf 	bl	8004e00 <HAL_RTC_DeInit>
	break;
 80016a2:	e79a      	b.n	80015da <Selec_Opera+0xb6>
		MODO_FASE = 0;
 80016a4:	2200      	movs	r2, #0
 80016a6:	4b5e      	ldr	r3, [pc, #376]	; (8001820 <Selec_Opera+0x2fc>)
		MODO_FASE = 1;
 80016a8:	749a      	strb	r2, [r3, #18]
	break;
 80016aa:	e796      	b.n	80015da <Selec_Opera+0xb6>
		pos = sscanf(ent, "%s %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d",
 80016ac:	ab40      	add	r3, sp, #256	; 0x100
 80016ae:	9322      	str	r3, [sp, #136]	; 0x88
 80016b0:	ab3f      	add	r3, sp, #252	; 0xfc
 80016b2:	9321      	str	r3, [sp, #132]	; 0x84
 80016b4:	ab3e      	add	r3, sp, #248	; 0xf8
 80016b6:	9320      	str	r3, [sp, #128]	; 0x80
 80016b8:	ab55      	add	r3, sp, #340	; 0x154
 80016ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80016bc:	ab54      	add	r3, sp, #336	; 0x150
 80016be:	931e      	str	r3, [sp, #120]	; 0x78
 80016c0:	ab53      	add	r3, sp, #332	; 0x14c
 80016c2:	931d      	str	r3, [sp, #116]	; 0x74
 80016c4:	ab3d      	add	r3, sp, #244	; 0xf4
 80016c6:	931c      	str	r3, [sp, #112]	; 0x70
 80016c8:	ab3c      	add	r3, sp, #240	; 0xf0
 80016ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80016cc:	ab3b      	add	r3, sp, #236	; 0xec
 80016ce:	931a      	str	r3, [sp, #104]	; 0x68
 80016d0:	ab52      	add	r3, sp, #328	; 0x148
 80016d2:	9319      	str	r3, [sp, #100]	; 0x64
 80016d4:	ab51      	add	r3, sp, #324	; 0x144
 80016d6:	9318      	str	r3, [sp, #96]	; 0x60
 80016d8:	ab50      	add	r3, sp, #320	; 0x140
 80016da:	9317      	str	r3, [sp, #92]	; 0x5c
 80016dc:	ab3a      	add	r3, sp, #232	; 0xe8
 80016de:	9316      	str	r3, [sp, #88]	; 0x58
 80016e0:	ab39      	add	r3, sp, #228	; 0xe4
 80016e2:	9315      	str	r3, [sp, #84]	; 0x54
 80016e4:	ab38      	add	r3, sp, #224	; 0xe0
 80016e6:	9314      	str	r3, [sp, #80]	; 0x50
 80016e8:	ab4f      	add	r3, sp, #316	; 0x13c
 80016ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80016ec:	ab4e      	add	r3, sp, #312	; 0x138
 80016ee:	9312      	str	r3, [sp, #72]	; 0x48
 80016f0:	ab4d      	add	r3, sp, #308	; 0x134
 80016f2:	9311      	str	r3, [sp, #68]	; 0x44
 80016f4:	ab37      	add	r3, sp, #220	; 0xdc
 80016f6:	9310      	str	r3, [sp, #64]	; 0x40
 80016f8:	ab36      	add	r3, sp, #216	; 0xd8
 80016fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80016fc:	ab35      	add	r3, sp, #212	; 0xd4
 80016fe:	930e      	str	r3, [sp, #56]	; 0x38
 8001700:	ab4c      	add	r3, sp, #304	; 0x130
 8001702:	930d      	str	r3, [sp, #52]	; 0x34
 8001704:	ab4b      	add	r3, sp, #300	; 0x12c
 8001706:	930c      	str	r3, [sp, #48]	; 0x30
 8001708:	ab4a      	add	r3, sp, #296	; 0x128
 800170a:	930b      	str	r3, [sp, #44]	; 0x2c
 800170c:	ab34      	add	r3, sp, #208	; 0xd0
 800170e:	930a      	str	r3, [sp, #40]	; 0x28
 8001710:	ab33      	add	r3, sp, #204	; 0xcc
 8001712:	9309      	str	r3, [sp, #36]	; 0x24
 8001714:	ab32      	add	r3, sp, #200	; 0xc8
 8001716:	9308      	str	r3, [sp, #32]
 8001718:	ab49      	add	r3, sp, #292	; 0x124
 800171a:	9307      	str	r3, [sp, #28]
 800171c:	ab48      	add	r3, sp, #288	; 0x120
 800171e:	9306      	str	r3, [sp, #24]
 8001720:	ab47      	add	r3, sp, #284	; 0x11c
 8001722:	9305      	str	r3, [sp, #20]
 8001724:	ab31      	add	r3, sp, #196	; 0xc4
 8001726:	9304      	str	r3, [sp, #16]
 8001728:	ab30      	add	r3, sp, #192	; 0xc0
 800172a:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800172e:	ab46      	add	r3, sp, #280	; 0x118
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	ab45      	add	r3, sp, #276	; 0x114
 8001734:	493c      	ldr	r1, [pc, #240]	; (8001828 <Selec_Opera+0x304>)
 8001736:	aa26      	add	r2, sp, #152	; 0x98
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	4628      	mov	r0, r5
 800173c:	ab44      	add	r3, sp, #272	; 0x110
 800173e:	f003 fbed 	bl	8004f1c <siscanf>
 8001742:	b2c0      	uxtb	r0, r0
 8001744:	f88d 0097 	strb.w	r0, [sp, #151]	; 0x97
		fTiempo.tFase1.Hours = Byte2Bcd2((uint8_t) iFase[0]);/* Tiempos para */
 8001748:	f89d 0110 	ldrb.w	r0, [sp, #272]	; 0x110
 800174c:	f7ff fede 	bl	800150c <Byte2Bcd2>
 8001750:	4a31      	ldr	r2, [pc, #196]	; (8001818 <Selec_Opera+0x2f4>)
 8001752:	70d0      	strb	r0, [r2, #3]
		fTiempo.tFase1.Minutes = Byte2Bcd2((uint8_t) iFase[1]);/* fase 1.	 */
 8001754:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
 8001758:	f7ff fed8 	bl	800150c <Byte2Bcd2>
 800175c:	7110      	strb	r0, [r2, #4]
		fTiempo.tFase1.Seconds = Byte2Bcd2((uint8_t) iFase[2]);
 800175e:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8001762:	f7ff fed3 	bl	800150c <Byte2Bcd2>
 8001766:	7150      	strb	r0, [r2, #5]
		fTiempo.tFase2.Hours = Byte2Bcd2((uint8_t) iFase[3]);/* Tiempos para */
 8001768:	f89d 011c 	ldrb.w	r0, [sp, #284]	; 0x11c
 800176c:	f7ff fece 	bl	800150c <Byte2Bcd2>
 8001770:	7190      	strb	r0, [r2, #6]
		fTiempo.tFase2.Minutes = Byte2Bcd2((uint8_t) iFase[4]);/* fase 2.	 */
 8001772:	f89d 0120 	ldrb.w	r0, [sp, #288]	; 0x120
 8001776:	f7ff fec9 	bl	800150c <Byte2Bcd2>
 800177a:	71d0      	strb	r0, [r2, #7]
		fTiempo.tFase2.Seconds = Byte2Bcd2((uint8_t) iFase[5]);
 800177c:	f89d 0124 	ldrb.w	r0, [sp, #292]	; 0x124
 8001780:	f7ff fec4 	bl	800150c <Byte2Bcd2>
 8001784:	7210      	strb	r0, [r2, #8]
		fTiempo.tFase3.Hours = Byte2Bcd2((uint8_t) iFase[6]);/* Tiempos para */
 8001786:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
 800178a:	f7ff febf 	bl	800150c <Byte2Bcd2>
 800178e:	7250      	strb	r0, [r2, #9]
		fTiempo.tFase3.Minutes = Byte2Bcd2((uint8_t) iFase[7]);/* fase 3.	 */
 8001790:	f89d 012c 	ldrb.w	r0, [sp, #300]	; 0x12c
 8001794:	f7ff feba 	bl	800150c <Byte2Bcd2>
 8001798:	7290      	strb	r0, [r2, #10]
		fTiempo.tFase3.Seconds = Byte2Bcd2((uint8_t) iFase[8]);
 800179a:	f89d 0130 	ldrb.w	r0, [sp, #304]	; 0x130
 800179e:	f7ff feb5 	bl	800150c <Byte2Bcd2>
 80017a2:	72d0      	strb	r0, [r2, #11]
		fTiempo.tFase4.Hours = Byte2Bcd2((uint8_t) iFase[9]);/* Tiempos para */
 80017a4:	f89d 0134 	ldrb.w	r0, [sp, #308]	; 0x134
 80017a8:	f7ff feb0 	bl	800150c <Byte2Bcd2>
 80017ac:	7310      	strb	r0, [r2, #12]
		fTiempo.tFase4.Minutes = Byte2Bcd2((uint8_t) iFase[10]);/* fase 4.	 */
 80017ae:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
 80017b2:	f7ff feab 	bl	800150c <Byte2Bcd2>
 80017b6:	7350      	strb	r0, [r2, #13]
		fTiempo.tFase4.Seconds = Byte2Bcd2((uint8_t) iFase[11]);
 80017b8:	f89d 013c 	ldrb.w	r0, [sp, #316]	; 0x13c
 80017bc:	f7ff fea6 	bl	800150c <Byte2Bcd2>
 80017c0:	7390      	strb	r0, [r2, #14]
		fTiempo.tFase5.Hours = Byte2Bcd2((uint8_t) iFase[12]);/* Tiempos para*/
 80017c2:	f89d 0140 	ldrb.w	r0, [sp, #320]	; 0x140
 80017c6:	f7ff fea1 	bl	800150c <Byte2Bcd2>
 80017ca:	73d0      	strb	r0, [r2, #15]
		fTiempo.tFase5.Minutes = Byte2Bcd2((uint8_t) iFase[13]);/* fase 5.	 */
 80017cc:	f89d 0144 	ldrb.w	r0, [sp, #324]	; 0x144
 80017d0:	f7ff fe9c 	bl	800150c <Byte2Bcd2>
 80017d4:	7410      	strb	r0, [r2, #16]
		fTiempo.tFase5.Seconds = Byte2Bcd2((uint8_t) iFase[14]);
 80017d6:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
 80017da:	f7ff fe97 	bl	800150c <Byte2Bcd2>
 80017de:	7450      	strb	r0, [r2, #17]
		fTiempo.tFase6.Hours = Byte2Bcd2((uint8_t) iFase[15]);/* Tiempos para*/
 80017e0:	f89d 014c 	ldrb.w	r0, [sp, #332]	; 0x14c
 80017e4:	f7ff fe92 	bl	800150c <Byte2Bcd2>
 80017e8:	7490      	strb	r0, [r2, #18]
		fTiempo.tFase6.Minutes = Byte2Bcd2((uint8_t) iFase[16]);/* fase 6.	 */
 80017ea:	f89d 0150 	ldrb.w	r0, [sp, #336]	; 0x150
 80017ee:	f7ff fe8d 	bl	800150c <Byte2Bcd2>
 80017f2:	74d0      	strb	r0, [r2, #19]
		fTiempo.tFase6.Seconds = Byte2Bcd2((uint8_t) iFase[17]);
 80017f4:	f89d 0154 	ldrb.w	r0, [sp, #340]	; 0x154
 80017f8:	f7ff fe88 	bl	800150c <Byte2Bcd2>
 80017fc:	2300      	movs	r3, #0
 80017fe:	7510      	strb	r0, [r2, #20]
			fasesTiempo[cont] = tFase[cont];/* vector correspondiente para   */
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <Selec_Opera+0x308>)
 8001802:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001806:	5499      	strb	r1, [r3, r2]
 8001808:	3301      	adds	r3, #1
		for(uint8_t cont = 0; cont <= 17; cont++)/* Asigna los tiempos de	 */
 800180a:	2b12      	cmp	r3, #18
 800180c:	d1f9      	bne.n	8001802 <Selec_Opera+0x2de>
 800180e:	e6e4      	b.n	80015da <Selec_Opera+0xb6>
 8001810:	200000c0 	.word	0x200000c0
 8001814:	08005b24 	.word	0x08005b24
 8001818:	20000434 	.word	0x20000434
 800181c:	2000046c 	.word	0x2000046c
 8001820:	2000001e 	.word	0x2000001e
 8001824:	20000449 	.word	0x20000449
 8001828:	08005b3c 	.word	0x08005b3c
 800182c:	2000000c 	.word	0x2000000c
		pos = sscanf(ent, "%s %d %d %d %d %d %d %d", eComando, &iFase[18],
 8001830:	ab43      	add	r3, sp, #268	; 0x10c
 8001832:	9305      	str	r3, [sp, #20]
 8001834:	ab42      	add	r3, sp, #264	; 0x108
 8001836:	9304      	str	r3, [sp, #16]
 8001838:	ab41      	add	r3, sp, #260	; 0x104
 800183a:	9303      	str	r3, [sp, #12]
 800183c:	ab59      	add	r3, sp, #356	; 0x164
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	ab58      	add	r3, sp, #352	; 0x160
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	ab57      	add	r3, sp, #348	; 0x15c
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	aa26      	add	r2, sp, #152	; 0x98
 800184a:	ab56      	add	r3, sp, #344	; 0x158
 800184c:	4954      	ldr	r1, [pc, #336]	; (80019a0 <Selec_Opera+0x47c>)
 800184e:	4628      	mov	r0, r5
 8001850:	f003 fb64 	bl	8004f1c <siscanf>
		switch(iFase[18])
 8001854:	9b56      	ldr	r3, [sp, #344]	; 0x158
		pos = sscanf(ent, "%s %d %d %d %d %d %d %d", eComando, &iFase[18],
 8001856:	b2c0      	uxtb	r0, r0
		switch(iFase[18])
 8001858:	3b01      	subs	r3, #1
		pos = sscanf(ent, "%s %d %d %d %d %d %d %d", eComando, &iFase[18],
 800185a:	f88d 0097 	strb.w	r0, [sp, #151]	; 0x97
		switch(iFase[18])
 800185e:	2b05      	cmp	r3, #5
 8001860:	f200 8095 	bhi.w	800198e <Selec_Opera+0x46a>
 8001864:	e8df f003 	tbb	[pc, r3]
 8001868:	4b331b03 	.word	0x4b331b03
 800186c:	7b63      	.short	0x7b63
			fTiempo.tFase1.Hours = Byte2Bcd2((uint8_t) iFase[19]);/* Tiempos */
 800186e:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
 8001872:	f7ff fe4b 	bl	800150c <Byte2Bcd2>
 8001876:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <Selec_Opera+0x480>)
 8001878:	70d0      	strb	r0, [r2, #3]
			fTiempo.tFase1.Minutes = Byte2Bcd2((uint8_t) iFase[20]);/* para  */
 800187a:	f89d 0160 	ldrb.w	r0, [sp, #352]	; 0x160
 800187e:	f7ff fe45 	bl	800150c <Byte2Bcd2>
 8001882:	7110      	strb	r0, [r2, #4]
			fTiempo.tFase1.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 8001884:	f89d 0164 	ldrb.w	r0, [sp, #356]	; 0x164
 8001888:	f7ff fe40 	bl	800150c <Byte2Bcd2>
			fasesTiempo[0] = tFase[18];/* Tiempos de duración de encendido 	 */
 800188c:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <Selec_Opera+0x484>)
			fTiempo.tFase1.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 800188e:	7150      	strb	r0, [r2, #5]
			fasesTiempo[0] = tFase[18];/* Tiempos de duración de encendido 	 */
 8001890:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001892:	701a      	strb	r2, [r3, #0]
			fasesTiempo[1] = tFase[19];/* para la fase 1.					 */
 8001894:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8001896:	705a      	strb	r2, [r3, #1]
			fasesTiempo[2] = tFase[20];
 8001898:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800189a:	709a      	strb	r2, [r3, #2]
		break;
 800189c:	e69d      	b.n	80015da <Selec_Opera+0xb6>
			fTiempo.tFase2.Hours = Byte2Bcd2((uint8_t) iFase[19]);/* Tiempos */
 800189e:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
 80018a2:	f7ff fe33 	bl	800150c <Byte2Bcd2>
 80018a6:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <Selec_Opera+0x480>)
 80018a8:	7190      	strb	r0, [r2, #6]
			fTiempo.tFase2.Minutes = Byte2Bcd2((uint8_t) iFase[20]);/* para  */
 80018aa:	f89d 0160 	ldrb.w	r0, [sp, #352]	; 0x160
 80018ae:	f7ff fe2d 	bl	800150c <Byte2Bcd2>
 80018b2:	71d0      	strb	r0, [r2, #7]
			fTiempo.tFase2.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 80018b4:	f89d 0164 	ldrb.w	r0, [sp, #356]	; 0x164
 80018b8:	f7ff fe28 	bl	800150c <Byte2Bcd2>
			fasesTiempo[3] = tFase[18];
 80018bc:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <Selec_Opera+0x484>)
			fTiempo.tFase2.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 80018be:	7210      	strb	r0, [r2, #8]
			fasesTiempo[3] = tFase[18];
 80018c0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80018c2:	70da      	strb	r2, [r3, #3]
			fasesTiempo[4] = tFase[19];
 80018c4:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80018c6:	711a      	strb	r2, [r3, #4]
			fasesTiempo[5] = tFase[20];
 80018c8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80018ca:	715a      	strb	r2, [r3, #5]
		break;
 80018cc:	e685      	b.n	80015da <Selec_Opera+0xb6>
			fTiempo.tFase3.Hours = Byte2Bcd2((uint8_t) iFase[19]);/* Tiempos */
 80018ce:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
 80018d2:	f7ff fe1b 	bl	800150c <Byte2Bcd2>
 80018d6:	4a33      	ldr	r2, [pc, #204]	; (80019a4 <Selec_Opera+0x480>)
 80018d8:	7250      	strb	r0, [r2, #9]
			fTiempo.tFase3.Minutes = Byte2Bcd2((uint8_t) iFase[20]);/* para  */
 80018da:	f89d 0160 	ldrb.w	r0, [sp, #352]	; 0x160
 80018de:	f7ff fe15 	bl	800150c <Byte2Bcd2>
 80018e2:	7290      	strb	r0, [r2, #10]
			fTiempo.tFase3.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 80018e4:	f89d 0164 	ldrb.w	r0, [sp, #356]	; 0x164
 80018e8:	f7ff fe10 	bl	800150c <Byte2Bcd2>
			fasesTiempo[6] = tFase[18];
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <Selec_Opera+0x484>)
			fTiempo.tFase3.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 80018ee:	72d0      	strb	r0, [r2, #11]
			fasesTiempo[6] = tFase[18];
 80018f0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80018f2:	719a      	strb	r2, [r3, #6]
			fasesTiempo[7] = tFase[19];
 80018f4:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80018f6:	71da      	strb	r2, [r3, #7]
			fasesTiempo[8] = tFase[20];
 80018f8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80018fa:	721a      	strb	r2, [r3, #8]
		break;
 80018fc:	e66d      	b.n	80015da <Selec_Opera+0xb6>
			fTiempo.tFase4.Hours = Byte2Bcd2((uint8_t) iFase[19]);/* Tiempos */
 80018fe:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
 8001902:	f7ff fe03 	bl	800150c <Byte2Bcd2>
 8001906:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <Selec_Opera+0x480>)
 8001908:	7310      	strb	r0, [r2, #12]
			fTiempo.tFase4.Minutes = Byte2Bcd2((uint8_t) iFase[20]);/* para  */
 800190a:	f89d 0160 	ldrb.w	r0, [sp, #352]	; 0x160
 800190e:	f7ff fdfd 	bl	800150c <Byte2Bcd2>
 8001912:	7350      	strb	r0, [r2, #13]
			fTiempo.tFase4.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 8001914:	f89d 0164 	ldrb.w	r0, [sp, #356]	; 0x164
 8001918:	f7ff fdf8 	bl	800150c <Byte2Bcd2>
			fasesTiempo[9] = tFase[18];
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <Selec_Opera+0x484>)
			fTiempo.tFase4.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 800191e:	7390      	strb	r0, [r2, #14]
			fasesTiempo[9] = tFase[18];
 8001920:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001922:	725a      	strb	r2, [r3, #9]
			fasesTiempo[10] = tFase[19];
 8001924:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8001926:	729a      	strb	r2, [r3, #10]
			fasesTiempo[11] = tFase[20];
 8001928:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800192a:	72da      	strb	r2, [r3, #11]
		break;
 800192c:	e655      	b.n	80015da <Selec_Opera+0xb6>
			fTiempo.tFase5.Hours = Byte2Bcd2((uint8_t) iFase[19]);/* Tiempos */
 800192e:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
 8001932:	f7ff fdeb 	bl	800150c <Byte2Bcd2>
 8001936:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <Selec_Opera+0x480>)
 8001938:	73d0      	strb	r0, [r2, #15]
			fTiempo.tFase5.Minutes = Byte2Bcd2((uint8_t) iFase[20]);/* para  */
 800193a:	f89d 0160 	ldrb.w	r0, [sp, #352]	; 0x160
 800193e:	f7ff fde5 	bl	800150c <Byte2Bcd2>
 8001942:	7410      	strb	r0, [r2, #16]
			fTiempo.tFase5.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 8001944:	f89d 0164 	ldrb.w	r0, [sp, #356]	; 0x164
 8001948:	f7ff fde0 	bl	800150c <Byte2Bcd2>
			fasesTiempo[12] = tFase[18];
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <Selec_Opera+0x484>)
			fTiempo.tFase5.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 800194e:	7450      	strb	r0, [r2, #17]
			fasesTiempo[12] = tFase[18];
 8001950:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001952:	731a      	strb	r2, [r3, #12]
			fasesTiempo[13] = tFase[19];
 8001954:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8001956:	735a      	strb	r2, [r3, #13]
			fasesTiempo[14] = tFase[20];
 8001958:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800195a:	739a      	strb	r2, [r3, #14]
		break;
 800195c:	e63d      	b.n	80015da <Selec_Opera+0xb6>
			fTiempo.tFase6.Hours = Byte2Bcd2((uint8_t) iFase[19]);/* Tiempos */
 800195e:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
 8001962:	f7ff fdd3 	bl	800150c <Byte2Bcd2>
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <Selec_Opera+0x480>)
 8001968:	7490      	strb	r0, [r2, #18]
			fTiempo.tFase6.Minutes = Byte2Bcd2((uint8_t) iFase[20]);/* para  */
 800196a:	f89d 0160 	ldrb.w	r0, [sp, #352]	; 0x160
 800196e:	f7ff fdcd 	bl	800150c <Byte2Bcd2>
 8001972:	74d0      	strb	r0, [r2, #19]
			fTiempo.tFase6.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 8001974:	f89d 0164 	ldrb.w	r0, [sp, #356]	; 0x164
 8001978:	f7ff fdc8 	bl	800150c <Byte2Bcd2>
			fasesTiempo[15] = tFase[18];
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <Selec_Opera+0x484>)
			fTiempo.tFase6.Seconds = Byte2Bcd2((uint8_t) iFase[21]);/* fase 1*/
 800197e:	7510      	strb	r0, [r2, #20]
			fasesTiempo[15] = tFase[18];
 8001980:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001982:	73da      	strb	r2, [r3, #15]
			fasesTiempo[16] = tFase[19];
 8001984:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8001986:	741a      	strb	r2, [r3, #16]
			fasesTiempo[17] = tFase[20];
 8001988:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800198a:	745a      	strb	r2, [r3, #17]
		break;
 800198c:	e625      	b.n	80015da <Selec_Opera+0xb6>
			codigoError = 5;		/* llamar al Error_Handler().            */
 800198e:	2205      	movs	r2, #5
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <Selec_Opera+0x488>)
		codigoError = 6;		/* llamar al Error_Handler().            */
 8001992:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001994:	f7ff fbe8 	bl	8001168 <Error_Handler>
}
 8001998:	e61f      	b.n	80015da <Selec_Opera+0xb6>
		codigoError = 6;		/* llamar al Error_Handler().            */
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <Selec_Opera+0x488>)
 800199c:	2206      	movs	r2, #6
 800199e:	e7f8      	b.n	8001992 <Selec_Opera+0x46e>
 80019a0:	08005b24 	.word	0x08005b24
 80019a4:	20000434 	.word	0x20000434
 80019a8:	2000000c 	.word	0x2000000c
 80019ac:	20000034 	.word	0x20000034

080019b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019b0:	b513      	push	{r0, r1, r4, lr}
  RTC_DateTypeDef DateToUpdate = {0};

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
  RTC_TimeTypeDef sTime = {0};
 80019b6:	2400      	movs	r4, #0
  hrtc.Instance = RTC;
 80019b8:	4813      	ldr	r0, [pc, #76]	; (8001a08 <MX_RTC_Init+0x58>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <MX_RTC_Init+0x5c>)
  RTC_TimeTypeDef sTime = {0};
 80019bc:	f8ad 4000 	strh.w	r4, [sp]
 80019c0:	f88d 4002 	strb.w	r4, [sp, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80019c4:	9401      	str	r4, [sp, #4]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80019c6:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80019ca:	6084      	str	r4, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019cc:	f003 f9a0 	bl	8004d10 <HAL_RTC_Init>
 80019d0:	b108      	cbz	r0, 80019d6 <MX_RTC_Init+0x26>
  {
    Error_Handler();
 80019d2:	f7ff fbc9 	bl	8001168 <Error_Handler>
  */
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019d6:	2201      	movs	r2, #1
 80019d8:	4669      	mov	r1, sp
 80019da:	480b      	ldr	r0, [pc, #44]	; (8001a08 <MX_RTC_Init+0x58>)
  sTime.Hours = 0x0;
 80019dc:	f8ad 4000 	strh.w	r4, [sp]
  sTime.Minutes = 0x0;
 80019e0:	f88d 4002 	strb.w	r4, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019e4:	f002 ff2e 	bl	8004844 <HAL_RTC_SetTime>
 80019e8:	b108      	cbz	r0, 80019ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80019ea:	f7ff fbbd 	bl	8001168 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_RTC_Init+0x60>)
 80019f0:	a902      	add	r1, sp, #8
 80019f2:	f841 3d04 	str.w	r3, [r1, #-4]!
  DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.Date = 0x1;
  DateToUpdate.Year = 0x20;

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80019f6:	2201      	movs	r2, #1
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_RTC_Init+0x58>)
 80019fa:	f003 f879 	bl	8004af0 <HAL_RTC_SetDate>
 80019fe:	b108      	cbz	r0, 8001a04 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001a00:	f7ff fbb2 	bl	8001168 <Error_Handler>
  }

}
 8001a04:	b002      	add	sp, #8
 8001a06:	bd10      	pop	{r4, pc}
 8001a08:	2000046c 	.word	0x2000046c
 8001a0c:	40002800 	.word	0x40002800
 8001a10:	20010103 	.word	0x20010103

08001a14 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a14:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_RTC_MspInit+0x54>)
 8001a18:	6802      	ldr	r2, [r0, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d121      	bne.n	8001a62 <HAL_RTC_MspInit+0x4e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001a1e:	f002 f9e1 	bl	8003de4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_RTC_MspInit+0x58>)
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001a24:	2003      	movs	r0, #3
    __HAL_RCC_BKP_CLK_ENABLE();
 8001a26:	69da      	ldr	r2, [r3, #28]
 8001a28:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001a2c:	61da      	str	r2, [r3, #28]
    __HAL_RCC_RTC_ENABLE();
 8001a2e:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RTC_MspInit+0x5c>)
 8001a3c:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4611      	mov	r1, r2
 8001a42:	f000 fccb 	bl	80023dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001a46:	2003      	movs	r0, #3
 8001a48:	f000 fd0c 	bl	8002464 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2029      	movs	r0, #41	; 0x29
 8001a50:	4611      	mov	r1, r2
 8001a52:	f000 fcc3 	bl	80023dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a56:	2029      	movs	r0, #41	; 0x29
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a58:	b003      	add	sp, #12
 8001a5a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a5e:	f000 bd01 	b.w	8002464 <HAL_NVIC_EnableIRQ>
}
 8001a62:	b003      	add	sp, #12
 8001a64:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a68:	40002800 	.word	0x40002800
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	4242043c 	.word	0x4242043c

08001a74 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a74:	b508      	push	{r3, lr}

  if(rtcHandle->Instance==RTC)
 8001a76:	6802      	ldr	r2, [r0, #0]
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_RTC_MspDeInit+0x24>)
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d10a      	bne.n	8001a94 <HAL_RTC_MspDeInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RTC_MspDeInit+0x28>)

    /* RTC interrupt Deinit */
    HAL_NVIC_DisableIRQ(RTC_IRQn);
 8001a82:	2003      	movs	r0, #3
    __HAL_RCC_RTC_DISABLE();
 8001a84:	601a      	str	r2, [r3, #0]
    HAL_NVIC_DisableIRQ(RTC_IRQn);
 8001a86:	f000 fd01 	bl	800248c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
} 
 8001a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8001a8e:	2029      	movs	r0, #41	; 0x29
 8001a90:	f000 bcfc 	b.w	800248c <HAL_NVIC_DisableIRQ>
} 
 8001a94:	bd08      	pop	{r3, pc}
 8001a96:	bf00      	nop
 8001a98:	40002800 	.word	0x40002800
 8001a9c:	4242043c 	.word	0x4242043c

08001aa0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_MspInit+0x54>)
{
 8001aa2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa4:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aa6:	2007      	movs	r0, #7
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	619a      	str	r2, [r3, #24]
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	f002 0201 	and.w	r2, r2, #1
 8001ab4:	9200      	str	r2, [sp, #0]
 8001ab6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001abe:	61da      	str	r2, [r3, #28]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aca:	f000 fc69 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2005      	movs	r0, #5
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	f000 fc82 	bl	80023dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ad8:	2005      	movs	r0, #5
 8001ada:	f000 fcc3 	bl	8002464 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ade:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_MspInit+0x58>)
 8001ae0:	6853      	ldr	r3, [r2, #4]
 8001ae2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aea:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aec:	b003      	add	sp, #12
 8001aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000

08001afc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001afc:	4770      	bx	lr
	...

08001b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b00:	b508      	push	{r3, lr}
//		volatile unsigned long _ISPR0 = __get_IPSR();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, LED_STATUS_Pin);/* El led de estado se queda */
 8001b02:	4c04      	ldr	r4, [pc, #16]	; (8001b14 <HardFault_Handler+0x14>)
 8001b04:	4620      	mov	r0, r4
 8001b06:	2101      	movs	r1, #1
 8001b08:	f001 f828 	bl	8002b5c <HAL_GPIO_TogglePin>
	  HAL_Delay(200);				/* titilando si hay una hard fault.      */
 8001b0c:	20c8      	movs	r0, #200	; 0xc8
 8001b0e:	f000 f8f3 	bl	8001cf8 <HAL_Delay>
 8001b12:	e7f7      	b.n	8001b04 <HardFault_Handler+0x4>
 8001b14:	40010c00 	.word	0x40010c00

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	e7fe      	b.n	8001b1a <BusFault_Handler>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler>

08001b1e <SVC_Handler>:
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f000 b8d6 	b.w	8001cd4 <HAL_IncTick>

08001b28 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001b28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001b2a:	4804      	ldr	r0, [pc, #16]	; (8001b3c <RTC_IRQHandler+0x14>)
 8001b2c:	f003 f9a7 	bl	8004e7e <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);	/* Para salir del modo de configuración  */
 8001b30:	4a03      	ldr	r2, [pc, #12]	; (8001b40 <RTC_IRQHandler+0x18>)
 8001b32:	6853      	ldr	r3, [r2, #4]
 8001b34:	f023 0310 	bic.w	r3, r3, #16
 8001b38:	6053      	str	r3, [r2, #4]
  	  	  	  	  	  	  	  	  	/* del RTC.								 */
  /* USER CODE END RTC_IRQn 1 */
}
 8001b3a:	bd08      	pop	{r3, pc}
 8001b3c:	2000046c 	.word	0x2000046c
 8001b40:	40002800 	.word	0x40002800

08001b44 <RCC_IRQHandler>:
 8001b44:	4770      	bx	lr
	...

08001b48 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b48:	4801      	ldr	r0, [pc, #4]	; (8001b50 <DMA1_Channel1_IRQHandler+0x8>)
 8001b4a:	f000 bdf9 	b.w	8002740 <HAL_DMA_IRQHandler>
 8001b4e:	bf00      	nop
 8001b50:	20000314 	.word	0x20000314

08001b54 <DMA1_Channel7_IRQHandler>:
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
//	uint8_t prueba;

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b54:	4801      	ldr	r0, [pc, #4]	; (8001b5c <DMA1_Channel7_IRQHandler+0x8>)
 8001b56:	f000 bdf3 	b.w	8002740 <HAL_DMA_IRQHandler>
 8001b5a:	bf00      	nop
 8001b5c:	200003b8 	.word	0x200003b8

08001b60 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b60:	4801      	ldr	r0, [pc, #4]	; (8001b68 <ADC1_2_IRQHandler+0x8>)
 8001b62:	f000 b909 	b.w	8001d78 <HAL_ADC_IRQHandler>
 8001b66:	bf00      	nop
 8001b68:	200002e4 	.word	0x200002e4

08001b6c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b6c:	4801      	ldr	r0, [pc, #4]	; (8001b74 <I2C1_EV_IRQHandler+0x8>)
 8001b6e:	f001 bc77 	b.w	8003460 <HAL_I2C_EV_IRQHandler>
 8001b72:	bf00      	nop
 8001b74:	20000364 	.word	0x20000364

08001b78 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b78:	4801      	ldr	r0, [pc, #4]	; (8001b80 <I2C1_ER_IRQHandler+0x8>)
 8001b7a:	f002 b899 	b.w	8003cb0 <HAL_I2C_ER_IRQHandler>
 8001b7e:	bf00      	nop
 8001b80:	20000364 	.word	0x20000364

08001b84 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001b84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b86:	4c04      	ldr	r4, [pc, #16]	; (8001b98 <RTC_Alarm_IRQHandler+0x14>)
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f003 f88d 	bl	8004ca8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
    HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b8e:	4620      	mov	r0, r4
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b94:	f003 b888 	b.w	8004ca8 <HAL_RTC_AlarmIRQHandler>
 8001b98:	2000046c 	.word	0x2000046c

08001b9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b9c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <_sbrk+0x2c>)
{
 8001ba0:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001ba2:	6819      	ldr	r1, [r3, #0]
 8001ba4:	b909      	cbnz	r1, 8001baa <_sbrk+0xe>
		heap_end = &end;
 8001ba6:	4909      	ldr	r1, [pc, #36]	; (8001bcc <_sbrk+0x30>)
 8001ba8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001baa:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001bac:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001bae:	4402      	add	r2, r0
 8001bb0:	428a      	cmp	r2, r1
 8001bb2:	d906      	bls.n	8001bc2 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001bb4:	f003 f980 	bl	8004eb8 <__errno>
 8001bb8:	230c      	movs	r3, #12
 8001bba:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001bc0:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001bc2:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001bc4:	e7fc      	b.n	8001bc0 <_sbrk+0x24>
 8001bc6:	bf00      	nop
 8001bc8:	200002d8 	.word	0x200002d8
 8001bcc:	20000488 	.word	0x20000488

08001bd0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <SystemInit+0x40>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001bda:	6859      	ldr	r1, [r3, #4]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <SystemInit+0x44>)
 8001bde:	400a      	ands	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001be8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bf4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001bfc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001bfe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c02:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <SystemInit+0x48>)
 8001c0a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	f8ff0000 	.word	0xf8ff0000
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c1e:	e003      	b.n	8001c28 <LoopCopyDataInit>

08001c20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c26:	3104      	adds	r1, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c28:	480a      	ldr	r0, [pc, #40]	; (8001c54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c30:	d3f6      	bcc.n	8001c20 <CopyDataInit>
  ldr r2, =_sbss
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c34:	e002      	b.n	8001c3c <LoopFillZerobss>

08001c36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c38:	f842 3b04 	str.w	r3, [r2], #4

08001c3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c40:	d3f9      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c42:	f7ff ffc5 	bl	8001bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c46:	f003 f93d 	bl	8004ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c4a:	f7ff fb19 	bl	8001280 <main>
  bx lr
 8001c4e:	4770      	bx	lr
  ldr r3, =_sidata
 8001c50:	08005f20 	.word	0x08005f20
  ldr r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c58:	200002bc 	.word	0x200002bc
  ldr r2, =_sbss
 8001c5c:	200002bc 	.word	0x200002bc
  ldr r3, = _ebss
 8001c60:	20000488 	.word	0x20000488

08001c64 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <CAN1_RX1_IRQHandler>
	...

08001c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_InitTick+0x3c>)
{
 8001c6c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6e:	7818      	ldrb	r0, [r3, #0]
 8001c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c74:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c78:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_InitTick+0x40>)
 8001c7a:	6810      	ldr	r0, [r2, #0]
 8001c7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c80:	f000 fc1e 	bl	80024c0 <HAL_SYSTICK_Config>
 8001c84:	4604      	mov	r4, r0
 8001c86:	b958      	cbnz	r0, 8001ca0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c88:	2d0f      	cmp	r5, #15
 8001c8a:	d809      	bhi.n	8001ca0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4629      	mov	r1, r5
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 fba2 	bl	80023dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <HAL_InitTick+0x44>)
 8001c9c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	e7fc      	b.n	8001c9e <HAL_InitTick+0x36>
 8001ca4:	200000e4 	.word	0x200000e4
 8001ca8:	200000e0 	.word	0x200000e0
 8001cac:	200000e8 	.word	0x200000e8

08001cb0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <HAL_Init+0x20>)
{
 8001cb2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	f043 0310 	orr.w	r3, r3, #16
 8001cbc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbe:	f000 fb6f 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff ffd0 	bl	8001c68 <HAL_InitTick>
  HAL_MspInit();
 8001cc8:	f7ff feea 	bl	8001aa0 <HAL_MspInit>
}
 8001ccc:	2000      	movs	r0, #0
 8001cce:	bd08      	pop	{r3, pc}
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001cd4:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <HAL_IncTick+0x10>)
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_IncTick+0x14>)
 8001cd8:	6811      	ldr	r1, [r2, #0]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	440b      	add	r3, r1
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000480 	.word	0x20000480
 8001ce8:	200000e4 	.word	0x200000e4

08001cec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001cec:	4b01      	ldr	r3, [pc, #4]	; (8001cf4 <HAL_GetTick+0x8>)
 8001cee:	6818      	ldr	r0, [r3, #0]
}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000480 	.word	0x20000480

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b538      	push	{r3, r4, r5, lr}
 8001cfa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff fff6 	bl	8001cec <HAL_GetTick>
 8001d00:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d02:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001d04:	bf1e      	ittt	ne
 8001d06:	4b04      	ldrne	r3, [pc, #16]	; (8001d18 <HAL_Delay+0x20>)
 8001d08:	781b      	ldrbne	r3, [r3, #0]
 8001d0a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	1b40      	subs	r0, r0, r5
 8001d12:	42a0      	cmp	r0, r4
 8001d14:	d3fa      	bcc.n	8001d0c <HAL_Delay+0x14>
  {
  }
}
 8001d16:	bd38      	pop	{r3, r4, r5, pc}
 8001d18:	200000e4 	.word	0x200000e4

08001d1c <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001d1e:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d22:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001d26:	d11b      	bne.n	8001d60 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	6892      	ldr	r2, [r2, #8]
 8001d34:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001d38:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001d3c:	d10c      	bne.n	8001d58 <ADC_DMAConvCplt+0x3c>
 8001d3e:	7b1a      	ldrb	r2, [r3, #12]
 8001d40:	b952      	cbnz	r2, 8001d58 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4c:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d4e:	bf5e      	ittt	pl
 8001d50:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001d52:	f042 0201 	orrpl.w	r2, r2, #1
 8001d56:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fb39 	bl	80013d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d5e:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d60:	6a1b      	ldr	r3, [r3, #32]
}
 8001d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	4718      	bx	r3

08001d6a <HAL_ADC_ConvHalfCpltCallback>:
 8001d6a:	4770      	bx	lr

08001d6c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d6c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001d70:	f7ff fffb 	bl	8001d6a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d74:	bd08      	pop	{r3, pc}

08001d76 <HAL_ADC_LevelOutOfWindowCallback>:
 8001d76:	4770      	bx	lr

08001d78 <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001d78:	6803      	ldr	r3, [r0, #0]
 8001d7a:	4a49      	ldr	r2, [pc, #292]	; (8001ea0 <HAL_ADC_IRQHandler+0x128>)
{
 8001d7c:	b510      	push	{r4, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001d7e:	4293      	cmp	r3, r2
{
 8001d80:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001d82:	d008      	beq.n	8001d96 <HAL_ADC_IRQHandler+0x1e>
 8001d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d004      	beq.n	8001d96 <HAL_ADC_IRQHandler+0x1e>
 8001d8c:	f240 61f1 	movw	r1, #1777	; 0x6f1
 8001d90:	4844      	ldr	r0, [pc, #272]	; (8001ea4 <HAL_ADC_IRQHandler+0x12c>)
 8001d92:	f7ff fba3 	bl	80014dc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001d96:	7b23      	ldrb	r3, [r4, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d904      	bls.n	8001da6 <HAL_ADC_IRQHandler+0x2e>
 8001d9c:	f240 61f2 	movw	r1, #1778	; 0x6f2
 8001da0:	4840      	ldr	r0, [pc, #256]	; (8001ea4 <HAL_ADC_IRQHandler+0x12c>)
 8001da2:	f7ff fb9b 	bl	80014dc <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001da6:	6923      	ldr	r3, [r4, #16]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	2b0f      	cmp	r3, #15
 8001dac:	d904      	bls.n	8001db8 <HAL_ADC_IRQHandler+0x40>
 8001dae:	f240 61f3 	movw	r1, #1779	; 0x6f3
 8001db2:	483c      	ldr	r0, [pc, #240]	; (8001ea4 <HAL_ADC_IRQHandler+0x12c>)
 8001db4:	f7ff fb92 	bl	80014dc <assert_failed>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	0690      	lsls	r0, r2, #26
 8001dbe:	d527      	bpl.n	8001e10 <HAL_ADC_IRQHandler+0x98>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	0791      	lsls	r1, r2, #30
 8001dc4:	d524      	bpl.n	8001e10 <HAL_ADC_IRQHandler+0x98>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001dc8:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001dca:	bf5e      	ittt	pl
 8001dcc:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001dce:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001dd2:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001dda:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001dde:	d110      	bne.n	8001e02 <HAL_ADC_IRQHandler+0x8a>
 8001de0:	7b22      	ldrb	r2, [r4, #12]
 8001de2:	b972      	cbnz	r2, 8001e02 <HAL_ADC_IRQHandler+0x8a>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	f022 0220 	bic.w	r2, r2, #32
 8001dea:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df2:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001df6:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df8:	bf5e      	ittt	pl
 8001dfa:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001dfc:	f043 0301 	orrpl.w	r3, r3, #1
 8001e00:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8001e02:	4620      	mov	r0, r4
 8001e04:	f7ff fae4 	bl	80013d0 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e08:	f06f 0212 	mvn.w	r2, #18
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	0610      	lsls	r0, r2, #24
 8001e16:	d530      	bpl.n	8001e7a <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	0751      	lsls	r1, r2, #29
 8001e1c:	d52d      	bpl.n	8001e7a <HAL_ADC_IRQHandler+0x102>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e20:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e22:	bf5e      	ittt	pl
 8001e24:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001e26:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001e2a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001e32:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001e36:	d00a      	beq.n	8001e4e <HAL_ADC_IRQHandler+0xd6>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e38:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e3a:	0550      	lsls	r0, r2, #21
 8001e3c:	d416      	bmi.n	8001e6c <HAL_ADC_IRQHandler+0xf4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e44:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001e48:	d110      	bne.n	8001e6c <HAL_ADC_IRQHandler+0xf4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e4a:	7b22      	ldrb	r2, [r4, #12]
 8001e4c:	b972      	cbnz	r2, 8001e6c <HAL_ADC_IRQHandler+0xf4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e54:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e5c:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e60:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e62:	bf5e      	ittt	pl
 8001e64:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001e66:	f043 0301 	orrpl.w	r3, r3, #1
 8001e6a:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f000 fa95 	bl	800239c <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e72:	f06f 020c 	mvn.w	r2, #12
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	0652      	lsls	r2, r2, #25
 8001e80:	d50d      	bpl.n	8001e9e <HAL_ADC_IRQHandler+0x126>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	07db      	lsls	r3, r3, #31
 8001e86:	d50a      	bpl.n	8001e9e <HAL_ADC_IRQHandler+0x126>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e8a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e92:	f7ff ff70 	bl	8001d76 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e96:	f06f 0201 	mvn.w	r2, #1
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	601a      	str	r2, [r3, #0]
}
 8001e9e:	bd10      	pop	{r4, pc}
 8001ea0:	40012400 	.word	0x40012400
 8001ea4:	08005bc3 	.word	0x08005bc3

08001ea8 <HAL_ADC_ErrorCallback>:
 8001ea8:	4770      	bx	lr

08001eaa <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eaa:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001eac:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001eae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb4:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001eb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ebe:	f7ff fff3 	bl	8001ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ec2:	bd08      	pop	{r3, pc}

08001ec4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001ec4:	2300      	movs	r3, #0
{ 
 8001ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001ec8:	4a4d      	ldr	r2, [pc, #308]	; (8002000 <HAL_ADC_ConfigChannel+0x13c>)
  __IO uint32_t wait_loop_index = 0U;
 8001eca:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001ecc:	6803      	ldr	r3, [r0, #0]
{ 
 8001ece:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001ed0:	4293      	cmp	r3, r2
{ 
 8001ed2:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001ed4:	d008      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0x24>
 8001ed6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0x24>
 8001ede:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8001ee2:	4848      	ldr	r0, [pc, #288]	; (8002004 <HAL_ADC_ConfigChannel+0x140>)
 8001ee4:	f7ff fafa 	bl	80014dc <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001ee8:	682b      	ldr	r3, [r5, #0]
 8001eea:	2b11      	cmp	r3, #17
 8001eec:	d904      	bls.n	8001ef8 <HAL_ADC_ConfigChannel+0x34>
 8001eee:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8001ef2:	4844      	ldr	r0, [pc, #272]	; (8002004 <HAL_ADC_ConfigChannel+0x140>)
 8001ef4:	f7ff faf2 	bl	80014dc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001ef8:	686b      	ldr	r3, [r5, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d904      	bls.n	8001f0a <HAL_ADC_ConfigChannel+0x46>
 8001f00:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001f04:	483f      	ldr	r0, [pc, #252]	; (8002004 <HAL_ADC_ConfigChannel+0x140>)
 8001f06:	f7ff fae9 	bl	80014dc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001f0a:	68ab      	ldr	r3, [r5, #8]
 8001f0c:	2b07      	cmp	r3, #7
 8001f0e:	d904      	bls.n	8001f1a <HAL_ADC_ConfigChannel+0x56>
 8001f10:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8001f14:	483b      	ldr	r0, [pc, #236]	; (8002004 <HAL_ADC_ConfigChannel+0x140>)
 8001f16:	f7ff fae1 	bl	80014dc <assert_failed>
  __HAL_LOCK(hadc);
 8001f1a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d06c      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x138>
 8001f22:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001f24:	6868      	ldr	r0, [r5, #4]
  __HAL_LOCK(hadc);
 8001f26:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001f2a:	2806      	cmp	r0, #6
 8001f2c:	6822      	ldr	r2, [r4, #0]
 8001f2e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001f32:	6829      	ldr	r1, [r5, #0]
 8001f34:	d822      	bhi.n	8001f7c <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f36:	261f      	movs	r6, #31
 8001f38:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8001f3a:	3b05      	subs	r3, #5
 8001f3c:	409e      	lsls	r6, r3
 8001f3e:	ea20 0006 	bic.w	r0, r0, r6
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	4303      	orrs	r3, r0
 8001f48:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f4a:	2909      	cmp	r1, #9
 8001f4c:	68ab      	ldr	r3, [r5, #8]
 8001f4e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001f52:	f04f 0507 	mov.w	r5, #7
 8001f56:	d929      	bls.n	8001fac <HAL_ADC_ConfigChannel+0xe8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f58:	68d6      	ldr	r6, [r2, #12]
 8001f5a:	381e      	subs	r0, #30
 8001f5c:	4085      	lsls	r5, r0
 8001f5e:	ea26 0505 	bic.w	r5, r6, r5
 8001f62:	4083      	lsls	r3, r0
 8001f64:	432b      	orrs	r3, r5
 8001f66:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f68:	f1a1 0310 	sub.w	r3, r1, #16
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d925      	bls.n	8001fbc <HAL_ADC_ConfigChannel+0xf8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f70:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001f72:	2300      	movs	r3, #0
 8001f74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001f7c:	280c      	cmp	r0, #12
 8001f7e:	f04f 001f 	mov.w	r0, #31
 8001f82:	d809      	bhi.n	8001f98 <HAL_ADC_ConfigChannel+0xd4>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f84:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001f86:	3b23      	subs	r3, #35	; 0x23
 8001f88:	4098      	lsls	r0, r3
 8001f8a:	ea26 0000 	bic.w	r0, r6, r0
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	4303      	orrs	r3, r0
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	e7d8      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f98:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001f9a:	3b41      	subs	r3, #65	; 0x41
 8001f9c:	4098      	lsls	r0, r3
 8001f9e:	ea26 0000 	bic.w	r0, r6, r0
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	4303      	orrs	r3, r0
 8001fa8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001faa:	e7ce      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fac:	6916      	ldr	r6, [r2, #16]
 8001fae:	4085      	lsls	r5, r0
 8001fb0:	ea26 0505 	bic.w	r5, r6, r5
 8001fb4:	4083      	lsls	r3, r0
 8001fb6:	432b      	orrs	r3, r5
 8001fb8:	6113      	str	r3, [r2, #16]
 8001fba:	e7d5      	b.n	8001f68 <HAL_ADC_ConfigChannel+0xa4>
    if (hadc->Instance == ADC1)
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_ADC_ConfigChannel+0x13c>)
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d116      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x12c>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fc2:	6893      	ldr	r3, [r2, #8]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	d4d3      	bmi.n	8001f70 <HAL_ADC_ConfigChannel+0xac>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fc8:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fca:	2910      	cmp	r1, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fd0:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fd2:	d1cd      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0xac>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_ADC_ConfigChannel+0x144>)
 8001fd6:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_ADC_ConfigChannel+0x148>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fbb3 f2f2 	udiv	r2, r3, r2
 8001fde:	230a      	movs	r3, #10
 8001fe0:	4353      	muls	r3, r2
            wait_loop_index--;
 8001fe2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001fe4:	9b01      	ldr	r3, [sp, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0c2      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0xac>
            wait_loop_index--;
 8001fea:	9b01      	ldr	r3, [sp, #4]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	e7f8      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x11e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff4:	f043 0320 	orr.w	r3, r3, #32
 8001ff8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ffa:	e7ba      	b.n	8001f72 <HAL_ADC_ConfigChannel+0xae>
  __HAL_LOCK(hadc);
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	e7bb      	b.n	8001f78 <HAL_ADC_ConfigChannel+0xb4>
 8002000:	40012400 	.word	0x40012400
 8002004:	08005bc3 	.word	0x08005bc3
 8002008:	200000e0 	.word	0x200000e0
 800200c:	000f4240 	.word	0x000f4240

08002010 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8002010:	2300      	movs	r3, #0
{
 8002012:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002014:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002016:	6803      	ldr	r3, [r0, #0]
{
 8002018:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	07d2      	lsls	r2, r2, #31
 800201e:	d502      	bpl.n	8002026 <ADC_Enable+0x16>
  return HAL_OK;
 8002020:	2000      	movs	r0, #0
}
 8002022:	b002      	add	sp, #8
 8002024:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <ADC_Enable+0x68>)
 8002030:	4a12      	ldr	r2, [pc, #72]	; (800207c <ADC_Enable+0x6c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002038:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800203a:	9b01      	ldr	r3, [sp, #4]
 800203c:	b9c3      	cbnz	r3, 8002070 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800203e:	f7ff fe55 	bl	8001cec <HAL_GetTick>
 8002042:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	689d      	ldr	r5, [r3, #8]
 8002048:	f015 0501 	ands.w	r5, r5, #1
 800204c:	d1e8      	bne.n	8002020 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800204e:	f7ff fe4d 	bl	8001cec <HAL_GetTick>
 8002052:	1b80      	subs	r0, r0, r6
 8002054:	2802      	cmp	r0, #2
 8002056:	d9f5      	bls.n	8002044 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002058:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800205a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	f043 0310 	orr.w	r3, r3, #16
 8002062:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8002066:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800206e:	e7d8      	b.n	8002022 <ADC_Enable+0x12>
      wait_loop_index--;
 8002070:	9b01      	ldr	r3, [sp, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	e7e0      	b.n	8002038 <ADC_Enable+0x28>
 8002076:	bf00      	nop
 8002078:	200000e0 	.word	0x200000e0
 800207c:	000f4240 	.word	0x000f4240

08002080 <HAL_ADC_Start_DMA>:
{
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	4617      	mov	r7, r2
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8002084:	4d40      	ldr	r5, [pc, #256]	; (8002188 <HAL_ADC_Start_DMA+0x108>)
 8002086:	6802      	ldr	r2, [r0, #0]
{
 8002088:	4604      	mov	r4, r0
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 800208a:	42aa      	cmp	r2, r5
{
 800208c:	460e      	mov	r6, r1
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 800208e:	d004      	beq.n	800209a <HAL_ADC_Start_DMA+0x1a>
 8002090:	f240 6114 	movw	r1, #1556	; 0x614
 8002094:	483d      	ldr	r0, [pc, #244]	; (800218c <HAL_ADC_Start_DMA+0x10c>)
 8002096:	f7ff fa21 	bl	80014dc <assert_failed>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	42ab      	cmp	r3, r5
 800209e:	d002      	beq.n	80020a6 <HAL_ADC_Start_DMA+0x26>
 80020a0:	4a3b      	ldr	r2, [pc, #236]	; (8002190 <HAL_ADC_Start_DMA+0x110>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d104      	bne.n	80020b0 <HAL_ADC_Start_DMA+0x30>
 80020a6:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_ADC_Start_DMA+0x108>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80020ae:	d167      	bne.n	8002180 <HAL_ADC_Start_DMA+0x100>
    __HAL_LOCK(hadc);
 80020b0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d065      	beq.n	8002184 <HAL_ADC_Start_DMA+0x104>
 80020b8:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80020ba:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80020bc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80020c0:	f7ff ffa6 	bl	8002010 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80020c4:	4605      	mov	r5, r0
 80020c6:	2800      	cmp	r0, #0
 80020c8:	d156      	bne.n	8002178 <HAL_ADC_Start_DMA+0xf8>
      ADC_STATE_CLR_SET(hadc->State,
 80020ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020cc:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80020ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_ADC_Start_DMA+0x110>)
 80020de:	4299      	cmp	r1, r3
 80020e0:	d104      	bne.n	80020ec <HAL_ADC_Start_DMA+0x6c>
 80020e2:	4a29      	ldr	r2, [pc, #164]	; (8002188 <HAL_ADC_Start_DMA+0x108>)
 80020e4:	6853      	ldr	r3, [r2, #4]
 80020e6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80020ea:	d13f      	bne.n	800216c <HAL_ADC_Start_DMA+0xec>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020f2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020f4:	684b      	ldr	r3, [r1, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020f6:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020f8:	bf48      	it	mi
 80020fa:	6aa3      	ldrmi	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020fc:	6a20      	ldr	r0, [r4, #32]
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020fe:	bf42      	ittt	mi
 8002100:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8002104:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8002108:	62a3      	strmi	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800210c:	4632      	mov	r2, r6
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002112:	bf18      	it	ne
 8002114:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002116:	f101 014c 	add.w	r1, r1, #76	; 0x4c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800211a:	bf18      	it	ne
 800211c:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002120:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002122:	2300      	movs	r3, #0
 8002124:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_ADC_Start_DMA+0x114>)
 800212a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_ADC_Start_DMA+0x118>)
 800212e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_ADC_Start_DMA+0x11c>)
 8002132:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002134:	f06f 0302 	mvn.w	r3, #2
 8002138:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800213c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002148:	463b      	mov	r3, r7
 800214a:	f000 fa5f 	bl	800260c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002156:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	bf0c      	ite	eq
 800215e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002162:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8002166:	609a      	str	r2, [r3, #8]
}
 8002168:	4628      	mov	r0, r5
 800216a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800216c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800216e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002172:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002174:	6853      	ldr	r3, [r2, #4]
 8002176:	e7be      	b.n	80020f6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8002178:	2300      	movs	r3, #0
 800217a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800217e:	e7f3      	b.n	8002168 <HAL_ADC_Start_DMA+0xe8>
    tmp_hal_status = HAL_ERROR;
 8002180:	2501      	movs	r5, #1
 8002182:	e7f1      	b.n	8002168 <HAL_ADC_Start_DMA+0xe8>
    __HAL_LOCK(hadc);
 8002184:	2502      	movs	r5, #2
 8002186:	e7ef      	b.n	8002168 <HAL_ADC_Start_DMA+0xe8>
 8002188:	40012400 	.word	0x40012400
 800218c:	08005bc3 	.word	0x08005bc3
 8002190:	40012800 	.word	0x40012800
 8002194:	08001d1d 	.word	0x08001d1d
 8002198:	08001d6d 	.word	0x08001d6d
 800219c:	08001eab 	.word	0x08001eab

080021a0 <ADC_ConversionStop_Disable>:
{
 80021a0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021a2:	6803      	ldr	r3, [r0, #0]
{
 80021a4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	07d2      	lsls	r2, r2, #31
 80021aa:	d401      	bmi.n	80021b0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80021ac:	2000      	movs	r0, #0
}
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80021b8:	f7ff fd98 	bl	8001cec <HAL_GetTick>
 80021bc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	07db      	lsls	r3, r3, #31
 80021c4:	d5f2      	bpl.n	80021ac <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021c6:	f7ff fd91 	bl	8001cec <HAL_GetTick>
 80021ca:	1b40      	subs	r0, r0, r5
 80021cc:	2802      	cmp	r0, #2
 80021ce:	d9f6      	bls.n	80021be <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021e2:	e7e4      	b.n	80021ae <ADC_ConversionStop_Disable+0xe>

080021e4 <HAL_ADC_Init>:
{
 80021e4:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80021e6:	4604      	mov	r4, r0
 80021e8:	2800      	cmp	r0, #0
 80021ea:	f000 80c8 	beq.w	800237e <HAL_ADC_Init+0x19a>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80021ee:	6803      	ldr	r3, [r0, #0]
 80021f0:	4a66      	ldr	r2, [pc, #408]	; (800238c <HAL_ADC_Init+0x1a8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d008      	beq.n	8002208 <HAL_ADC_Init+0x24>
 80021f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d004      	beq.n	8002208 <HAL_ADC_Init+0x24>
 80021fe:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002202:	4863      	ldr	r0, [pc, #396]	; (8002390 <HAL_ADC_Init+0x1ac>)
 8002204:	f7ff f96a 	bl	80014dc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002208:	6863      	ldr	r3, [r4, #4]
 800220a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800220e:	d004      	beq.n	800221a <HAL_ADC_Init+0x36>
 8002210:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002214:	485e      	ldr	r0, [pc, #376]	; (8002390 <HAL_ADC_Init+0x1ac>)
 8002216:	f7ff f961 	bl	80014dc <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800221a:	68a3      	ldr	r3, [r4, #8]
 800221c:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8002220:	d004      	beq.n	800222c <HAL_ADC_Init+0x48>
 8002222:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002226:	485a      	ldr	r0, [pc, #360]	; (8002390 <HAL_ADC_Init+0x1ac>)
 8002228:	f7ff f958 	bl	80014dc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800222c:	7b23      	ldrb	r3, [r4, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d904      	bls.n	800223c <HAL_ADC_Init+0x58>
 8002232:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002236:	4856      	ldr	r0, [pc, #344]	; (8002390 <HAL_ADC_Init+0x1ac>)
 8002238:	f7ff f950 	bl	80014dc <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800223c:	69e3      	ldr	r3, [r4, #28]
 800223e:	f433 2220 	bics.w	r2, r3, #655360	; 0xa0000
 8002242:	d00c      	beq.n	800225e <HAL_ADC_Init+0x7a>
 8002244:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002248:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
 800224c:	d007      	beq.n	800225e <HAL_ADC_Init+0x7a>
 800224e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002252:	d004      	beq.n	800225e <HAL_ADC_Init+0x7a>
 8002254:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002258:	484d      	ldr	r0, [pc, #308]	; (8002390 <HAL_ADC_Init+0x1ac>)
 800225a:	f7ff f93f 	bl	80014dc <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800225e:	68a3      	ldr	r3, [r4, #8]
 8002260:	b1db      	cbz	r3, 800229a <HAL_ADC_Init+0xb6>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002262:	6923      	ldr	r3, [r4, #16]
 8002264:	3b01      	subs	r3, #1
 8002266:	2b0f      	cmp	r3, #15
 8002268:	d904      	bls.n	8002274 <HAL_ADC_Init+0x90>
 800226a:	f240 11bb 	movw	r1, #443	; 0x1bb
 800226e:	4848      	ldr	r0, [pc, #288]	; (8002390 <HAL_ADC_Init+0x1ac>)
 8002270:	f7ff f934 	bl	80014dc <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002274:	7d23      	ldrb	r3, [r4, #20]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d904      	bls.n	8002284 <HAL_ADC_Init+0xa0>
 800227a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800227e:	4844      	ldr	r0, [pc, #272]	; (8002390 <HAL_ADC_Init+0x1ac>)
 8002280:	f7ff f92c 	bl	80014dc <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002284:	7d23      	ldrb	r3, [r4, #20]
 8002286:	b143      	cbz	r3, 800229a <HAL_ADC_Init+0xb6>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002288:	69a3      	ldr	r3, [r4, #24]
 800228a:	3b01      	subs	r3, #1
 800228c:	2b07      	cmp	r3, #7
 800228e:	d904      	bls.n	800229a <HAL_ADC_Init+0xb6>
 8002290:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002294:	483e      	ldr	r0, [pc, #248]	; (8002390 <HAL_ADC_Init+0x1ac>)
 8002296:	f7ff f921 	bl	80014dc <assert_failed>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800229a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800229c:	b92b      	cbnz	r3, 80022aa <HAL_ADC_Init+0xc6>
    ADC_CLEAR_ERRORCODE(hadc);
 800229e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80022a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80022a4:	4620      	mov	r0, r4
 80022a6:	f7fe f9c7 	bl	8000638 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff ff78 	bl	80021a0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022b2:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80022b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022b8:	d163      	bne.n	8002382 <HAL_ADC_Init+0x19e>
 80022ba:	2800      	cmp	r0, #0
 80022bc:	d161      	bne.n	8002382 <HAL_ADC_Init+0x19e>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022be:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80022c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022c4:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80022c6:	f023 0302 	bic.w	r3, r3, #2
 80022ca:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022ce:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022d0:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80022d2:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022d4:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022da:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022de:	d037      	beq.n	8002350 <HAL_ADC_Init+0x16c>
 80022e0:	2901      	cmp	r1, #1
 80022e2:	bf14      	ite	ne
 80022e4:	4606      	movne	r6, r0
 80022e6:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ea:	7d25      	ldrb	r5, [r4, #20]
 80022ec:	2d01      	cmp	r5, #1
 80022ee:	d106      	bne.n	80022fe <HAL_ADC_Init+0x11a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022f0:	bb83      	cbnz	r3, 8002354 <HAL_ADC_Init+0x170>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022f2:	69a3      	ldr	r3, [r4, #24]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80022fa:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80022fe:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002300:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002304:	685d      	ldr	r5, [r3, #4]
 8002306:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800230a:	ea45 0506 	orr.w	r5, r5, r6
 800230e:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002310:	689e      	ldr	r6, [r3, #8]
 8002312:	4d20      	ldr	r5, [pc, #128]	; (8002394 <HAL_ADC_Init+0x1b0>)
 8002314:	ea05 0506 	and.w	r5, r5, r6
 8002318:	ea45 0502 	orr.w	r5, r5, r2
 800231c:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800231e:	d001      	beq.n	8002324 <HAL_ADC_Init+0x140>
 8002320:	2901      	cmp	r1, #1
 8002322:	d120      	bne.n	8002366 <HAL_ADC_Init+0x182>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002324:	6921      	ldr	r1, [r4, #16]
 8002326:	3901      	subs	r1, #1
 8002328:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800232a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800232c:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8002330:	4329      	orrs	r1, r5
 8002332:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_ADC_Init+0x1b4>)
 8002338:	400b      	ands	r3, r1
 800233a:	429a      	cmp	r2, r3
 800233c:	d115      	bne.n	800236a <HAL_ADC_Init+0x186>
      ADC_CLEAR_ERRORCODE(hadc);
 800233e:	2300      	movs	r3, #0
 8002340:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002344:	f023 0303 	bic.w	r3, r3, #3
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800234e:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002350:	460e      	mov	r6, r1
 8002352:	e7ca      	b.n	80022ea <HAL_ADC_Init+0x106>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002354:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002356:	f043 0320 	orr.w	r3, r3, #32
 800235a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002364:	e7cb      	b.n	80022fe <HAL_ADC_Init+0x11a>
  uint32_t tmp_sqr1 = 0U;
 8002366:	2100      	movs	r1, #0
 8002368:	e7df      	b.n	800232a <HAL_ADC_Init+0x146>
      ADC_STATE_CLR_SET(hadc->State,
 800236a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800236c:	f023 0312 	bic.w	r3, r3, #18
 8002370:	f043 0310 	orr.w	r3, r3, #16
 8002374:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800237e:	2001      	movs	r0, #1
 8002380:	e7e5      	b.n	800234e <HAL_ADC_Init+0x16a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002382:	f043 0310 	orr.w	r3, r3, #16
 8002386:	62a3      	str	r3, [r4, #40]	; 0x28
 8002388:	e7f9      	b.n	800237e <HAL_ADC_Init+0x19a>
 800238a:	bf00      	nop
 800238c:	40012400 	.word	0x40012400
 8002390:	08005bc3 	.word	0x08005bc3
 8002394:	ffe1f7fd 	.word	0xffe1f7fd
 8002398:	ff1f0efe 	.word	0xff1f0efe

0800239c <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80023a0:	1ec3      	subs	r3, r0, #3
 80023a2:	2b04      	cmp	r3, #4
{
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80023a8:	d903      	bls.n	80023b2 <HAL_NVIC_SetPriorityGrouping+0x12>
 80023aa:	2192      	movs	r1, #146	; 0x92
 80023ac:	4809      	ldr	r0, [pc, #36]	; (80023d4 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80023ae:	f7ff f895 	bl	80014dc <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023b4:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b6:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023b8:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023c0:	041b      	lsls	r3, r3, #16
 80023c2:	0c1b      	lsrs	r3, r3, #16
 80023c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80023cc:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80023ce:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80023d0:	bd10      	pop	{r4, pc}
 80023d2:	bf00      	nop
 80023d4:	08005bfb 	.word	0x08005bfb
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80023dc:	2a0f      	cmp	r2, #15
{ 
 80023de:	b570      	push	{r4, r5, r6, lr}
 80023e0:	4605      	mov	r5, r0
 80023e2:	460c      	mov	r4, r1
 80023e4:	4616      	mov	r6, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80023e6:	d903      	bls.n	80023f0 <HAL_NVIC_SetPriority+0x14>
 80023e8:	21aa      	movs	r1, #170	; 0xaa
 80023ea:	481b      	ldr	r0, [pc, #108]	; (8002458 <HAL_NVIC_SetPriority+0x7c>)
 80023ec:	f7ff f876 	bl	80014dc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80023f0:	2c0f      	cmp	r4, #15
 80023f2:	d903      	bls.n	80023fc <HAL_NVIC_SetPriority+0x20>
 80023f4:	21ab      	movs	r1, #171	; 0xab
 80023f6:	4818      	ldr	r0, [pc, #96]	; (8002458 <HAL_NVIC_SetPriority+0x7c>)
 80023f8:	f7ff f870 	bl	80014dc <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_NVIC_SetPriority+0x80>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	f1c2 0307 	rsb	r3, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002408:	1d11      	adds	r1, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002410:	2906      	cmp	r1, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002412:	f04f 31ff 	mov.w	r1, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	bf98      	it	ls
 8002418:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	bf88      	it	hi
 8002420:	3a03      	subhi	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002422:	ea24 0303 	bic.w	r3, r4, r3
 8002426:	4093      	lsls	r3, r2
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	ea26 0602 	bic.w	r6, r6, r2
  if ((int32_t)(IRQn) >= 0)
 8002430:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002432:	ea43 0306 	orr.w	r3, r3, r6
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	bfa8      	it	ge
 8002438:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
 800243c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	bfb8      	it	lt
 8002442:	4a07      	ldrlt	r2, [pc, #28]	; (8002460 <HAL_NVIC_SetPriority+0x84>)
 8002444:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	bfab      	itete	ge
 8002448:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	f885 3300 	strbge.w	r3, [r5, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	5553      	strblt	r3, [r2, r5]
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	08005bfb 	.word	0x08005bfb
 800245c:	e000ed00 	.word	0xe000ed00
 8002460:	e000ed14 	.word	0xe000ed14

08002464 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002464:	2800      	cmp	r0, #0
 8002466:	da03      	bge.n	8002470 <HAL_NVIC_EnableIRQ+0xc>
 8002468:	21be      	movs	r1, #190	; 0xbe
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <HAL_NVIC_EnableIRQ+0x20>)
 800246c:	f7ff b836 	b.w	80014dc <assert_failed>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002470:	2301      	movs	r3, #1
 8002472:	0942      	lsrs	r2, r0, #5
 8002474:	f000 001f 	and.w	r0, r0, #31
 8002478:	fa03 f000 	lsl.w	r0, r3, r0
 800247c:	4b02      	ldr	r3, [pc, #8]	; (8002488 <HAL_NVIC_EnableIRQ+0x24>)
 800247e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002482:	4770      	bx	lr
 8002484:	08005bfb 	.word	0x08005bfb
 8002488:	e000e100 	.word	0xe000e100

0800248c <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800248c:	2800      	cmp	r0, #0
 800248e:	da03      	bge.n	8002498 <HAL_NVIC_DisableIRQ+0xc>
 8002490:	21ce      	movs	r1, #206	; 0xce
 8002492:	4809      	ldr	r0, [pc, #36]	; (80024b8 <HAL_NVIC_DisableIRQ+0x2c>)
 8002494:	f7ff b822 	b.w	80014dc <assert_failed>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002498:	2201      	movs	r2, #1
 800249a:	0943      	lsrs	r3, r0, #5
 800249c:	f000 001f 	and.w	r0, r0, #31
 80024a0:	fa02 f000 	lsl.w	r0, r2, r0
 80024a4:	4a05      	ldr	r2, [pc, #20]	; (80024bc <HAL_NVIC_DisableIRQ+0x30>)
 80024a6:	3320      	adds	r3, #32
 80024a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024b0:	f3bf 8f6f 	isb	sy

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	08005bfb 	.word	0x08005bfb
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c0:	3801      	subs	r0, #1
 80024c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024c6:	d20a      	bcs.n	80024de <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024ec:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024ee:	4604      	mov	r4, r0
 80024f0:	2800      	cmp	r0, #0
 80024f2:	f000 8081 	beq.w	80025f8 <HAL_DMA_Init+0x10c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80024f6:	6803      	ldr	r3, [r0, #0]
 80024f8:	4a40      	ldr	r2, [pc, #256]	; (80025fc <HAL_DMA_Init+0x110>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d015      	beq.n	800252a <HAL_DMA_Init+0x3e>
 80024fe:	3214      	adds	r2, #20
 8002500:	4293      	cmp	r3, r2
 8002502:	d012      	beq.n	800252a <HAL_DMA_Init+0x3e>
 8002504:	3214      	adds	r2, #20
 8002506:	4293      	cmp	r3, r2
 8002508:	d00f      	beq.n	800252a <HAL_DMA_Init+0x3e>
 800250a:	3214      	adds	r2, #20
 800250c:	4293      	cmp	r3, r2
 800250e:	d00c      	beq.n	800252a <HAL_DMA_Init+0x3e>
 8002510:	3214      	adds	r2, #20
 8002512:	4293      	cmp	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_DMA_Init+0x3e>
 8002516:	3214      	adds	r2, #20
 8002518:	4293      	cmp	r3, r2
 800251a:	d006      	beq.n	800252a <HAL_DMA_Init+0x3e>
 800251c:	3214      	adds	r2, #20
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <HAL_DMA_Init+0x3e>
 8002522:	219a      	movs	r1, #154	; 0x9a
 8002524:	4836      	ldr	r0, [pc, #216]	; (8002600 <HAL_DMA_Init+0x114>)
 8002526:	f7fe ffd9 	bl	80014dc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800252a:	6863      	ldr	r3, [r4, #4]
 800252c:	f033 0210 	bics.w	r2, r3, #16
 8002530:	d006      	beq.n	8002540 <HAL_DMA_Init+0x54>
 8002532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002536:	d003      	beq.n	8002540 <HAL_DMA_Init+0x54>
 8002538:	219b      	movs	r1, #155	; 0x9b
 800253a:	4831      	ldr	r0, [pc, #196]	; (8002600 <HAL_DMA_Init+0x114>)
 800253c:	f7fe ffce 	bl	80014dc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002540:	68a3      	ldr	r3, [r4, #8]
 8002542:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8002546:	d003      	beq.n	8002550 <HAL_DMA_Init+0x64>
 8002548:	219c      	movs	r1, #156	; 0x9c
 800254a:	482d      	ldr	r0, [pc, #180]	; (8002600 <HAL_DMA_Init+0x114>)
 800254c:	f7fe ffc6 	bl	80014dc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002550:	68e3      	ldr	r3, [r4, #12]
 8002552:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002556:	d003      	beq.n	8002560 <HAL_DMA_Init+0x74>
 8002558:	219d      	movs	r1, #157	; 0x9d
 800255a:	4829      	ldr	r0, [pc, #164]	; (8002600 <HAL_DMA_Init+0x114>)
 800255c:	f7fe ffbe 	bl	80014dc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002560:	6923      	ldr	r3, [r4, #16]
 8002562:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8002566:	d006      	beq.n	8002576 <HAL_DMA_Init+0x8a>
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d003      	beq.n	8002576 <HAL_DMA_Init+0x8a>
 800256e:	219e      	movs	r1, #158	; 0x9e
 8002570:	4823      	ldr	r0, [pc, #140]	; (8002600 <HAL_DMA_Init+0x114>)
 8002572:	f7fe ffb3 	bl	80014dc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002576:	6963      	ldr	r3, [r4, #20]
 8002578:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800257c:	d006      	beq.n	800258c <HAL_DMA_Init+0xa0>
 800257e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002582:	d003      	beq.n	800258c <HAL_DMA_Init+0xa0>
 8002584:	219f      	movs	r1, #159	; 0x9f
 8002586:	481e      	ldr	r0, [pc, #120]	; (8002600 <HAL_DMA_Init+0x114>)
 8002588:	f7fe ffa8 	bl	80014dc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800258c:	69a3      	ldr	r3, [r4, #24]
 800258e:	f033 0320 	bics.w	r3, r3, #32
 8002592:	d003      	beq.n	800259c <HAL_DMA_Init+0xb0>
 8002594:	21a0      	movs	r1, #160	; 0xa0
 8002596:	481a      	ldr	r0, [pc, #104]	; (8002600 <HAL_DMA_Init+0x114>)
 8002598:	f7fe ffa0 	bl	80014dc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800259c:	69e3      	ldr	r3, [r4, #28]
 800259e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80025a2:	d003      	beq.n	80025ac <HAL_DMA_Init+0xc0>
 80025a4:	21a1      	movs	r1, #161	; 0xa1
 80025a6:	4816      	ldr	r0, [pc, #88]	; (8002600 <HAL_DMA_Init+0x114>)
 80025a8:	f7fe ff98 	bl	80014dc <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025ac:	2214      	movs	r2, #20
 80025ae:	6821      	ldr	r1, [r4, #0]
 80025b0:	4b14      	ldr	r3, [pc, #80]	; (8002604 <HAL_DMA_Init+0x118>)
 80025b2:	440b      	add	r3, r1
 80025b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_DMA_Init+0x11c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025be:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80025c0:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025c2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80025c6:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c8:	68e0      	ldr	r0, [r4, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025ca:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	4303      	orrs	r3, r0
 80025d0:	6920      	ldr	r0, [r4, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025d2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d6:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d8:	6960      	ldr	r0, [r4, #20]
 80025da:	4303      	orrs	r3, r0
 80025dc:	69a0      	ldr	r0, [r4, #24]
 80025de:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e0:	69e0      	ldr	r0, [r4, #28]
 80025e2:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80025e4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025e6:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e8:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025ea:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ec:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80025ee:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025f2:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 80025f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025f8:	2001      	movs	r0, #1
 80025fa:	e7fc      	b.n	80025f6 <HAL_DMA_Init+0x10a>
 80025fc:	40020008 	.word	0x40020008
 8002600:	08005c36 	.word	0x08005c36
 8002604:	bffdfff8 	.word	0xbffdfff8
 8002608:	40020000 	.word	0x40020000

0800260c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002610:	4617      	mov	r7, r2
 8002612:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800261a:	429a      	cmp	r2, r3
{
 800261c:	4604      	mov	r4, r0
 800261e:	460e      	mov	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002620:	d904      	bls.n	800262c <HAL_DMA_Start_IT+0x20>
 8002622:	f240 116f 	movw	r1, #367	; 0x16f
 8002626:	4821      	ldr	r0, [pc, #132]	; (80026ac <HAL_DMA_Start_IT+0xa0>)
 8002628:	f7fe ff58 	bl	80014dc <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800262c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d038      	beq.n	80026a6 <HAL_DMA_Start_IT+0x9a>
 8002634:	2301      	movs	r3, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002636:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 800263a:	f884 3020 	strb.w	r3, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800263e:	429d      	cmp	r5, r3
 8002640:	f04f 0002 	mov.w	r0, #2
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	d12a      	bne.n	80026a0 <HAL_DMA_Start_IT+0x94>
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800264a:	6821      	ldr	r1, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800264c:	63a3      	str	r3, [r4, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 800264e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8002652:	6808      	ldr	r0, [r1, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002654:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002658:	f020 0001 	bic.w	r0, r0, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800265c:	4095      	lsls	r5, r2
    __HAL_DMA_DISABLE(hdma);
 800265e:	6008      	str	r0, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002660:	605d      	str	r5, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002662:	6863      	ldr	r3, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 8002664:	f8c1 8004 	str.w	r8, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002668:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800266a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800266c:	6822      	ldr	r2, [r4, #0]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800266e:	bf0b      	itete	eq
 8002670:	608f      	streq	r7, [r1, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002672:	608e      	strne	r6, [r1, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002674:	60ce      	streq	r6, [r1, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002676:	60cf      	strne	r7, [r1, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002678:	b153      	cbz	r3, 8002690 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800267a:	680b      	ldr	r3, [r1, #0]
 800267c:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8002680:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002682:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 8002684:	6813      	ldr	r3, [r2, #0]
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002690:	680b      	ldr	r3, [r1, #0]
 8002692:	f023 0304 	bic.w	r3, r3, #4
 8002696:	600b      	str	r3, [r1, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002698:	680b      	ldr	r3, [r1, #0]
 800269a:	f043 030a 	orr.w	r3, r3, #10
 800269e:	e7ef      	b.n	8002680 <HAL_DMA_Start_IT+0x74>
    __HAL_UNLOCK(hdma); 
 80026a0:	f884 3020 	strb.w	r3, [r4, #32]
 80026a4:	e7f2      	b.n	800268c <HAL_DMA_Start_IT+0x80>
  __HAL_LOCK(hdma);
 80026a6:	2002      	movs	r0, #2
 80026a8:	e7f0      	b.n	800268c <HAL_DMA_Start_IT+0x80>
 80026aa:	bf00      	nop
 80026ac:	08005c36 	.word	0x08005c36

080026b0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026b0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80026b4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d003      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ba:	2304      	movs	r3, #4
 80026bc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80026be:	2001      	movs	r0, #1
}
 80026c0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c2:	6803      	ldr	r3, [r0, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	f022 020e 	bic.w	r2, r2, #14
 80026ca:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026d4:	4a18      	ldr	r2, [pc, #96]	; (8002738 <HAL_DMA_Abort_IT+0x88>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <HAL_DMA_Abort_IT+0x6a>
 80026da:	3214      	adds	r2, #20
 80026dc:	4293      	cmp	r3, r2
 80026de:	d01e      	beq.n	800271e <HAL_DMA_Abort_IT+0x6e>
 80026e0:	3214      	adds	r2, #20
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_Abort_IT+0x72>
 80026e6:	3214      	adds	r2, #20
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d01d      	beq.n	8002728 <HAL_DMA_Abort_IT+0x78>
 80026ec:	3214      	adds	r2, #20
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01d      	beq.n	800272e <HAL_DMA_Abort_IT+0x7e>
 80026f2:	3214      	adds	r2, #20
 80026f4:	4293      	cmp	r3, r2
 80026f6:	bf0c      	ite	eq
 80026f8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80026fc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002702:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002704:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002706:	2301      	movs	r3, #1
 8002708:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 800270c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800270e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002712:	b17b      	cbz	r3, 8002734 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002714:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002716:	4620      	mov	r0, r4
 8002718:	e7d2      	b.n	80026c0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800271a:	2301      	movs	r3, #1
 800271c:	e7f0      	b.n	8002700 <HAL_DMA_Abort_IT+0x50>
 800271e:	2310      	movs	r3, #16
 8002720:	e7ee      	b.n	8002700 <HAL_DMA_Abort_IT+0x50>
 8002722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002726:	e7eb      	b.n	8002700 <HAL_DMA_Abort_IT+0x50>
 8002728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272c:	e7e8      	b.n	8002700 <HAL_DMA_Abort_IT+0x50>
 800272e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002732:	e7e5      	b.n	8002700 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002734:	4618      	mov	r0, r3
 8002736:	e7c3      	b.n	80026c0 <HAL_DMA_Abort_IT+0x10>
 8002738:	40020008 	.word	0x40020008
 800273c:	40020000 	.word	0x40020000

08002740 <HAL_DMA_IRQHandler>:
{
 8002740:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002742:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002744:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002746:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002748:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800274a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800274c:	4095      	lsls	r5, r2
 800274e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002750:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002752:	d032      	beq.n	80027ba <HAL_DMA_IRQHandler+0x7a>
 8002754:	074d      	lsls	r5, r1, #29
 8002756:	d530      	bpl.n	80027ba <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800275c:	bf5e      	ittt	pl
 800275e:	681a      	ldrpl	r2, [r3, #0]
 8002760:	f022 0204 	bicpl.w	r2, r2, #4
 8002764:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002766:	4a3e      	ldr	r2, [pc, #248]	; (8002860 <HAL_DMA_IRQHandler+0x120>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d019      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x60>
 800276c:	3214      	adds	r2, #20
 800276e:	4293      	cmp	r3, r2
 8002770:	d018      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x64>
 8002772:	3214      	adds	r2, #20
 8002774:	4293      	cmp	r3, r2
 8002776:	d017      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x68>
 8002778:	3214      	adds	r2, #20
 800277a:	4293      	cmp	r3, r2
 800277c:	d017      	beq.n	80027ae <HAL_DMA_IRQHandler+0x6e>
 800277e:	3214      	adds	r2, #20
 8002780:	4293      	cmp	r3, r2
 8002782:	d017      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x74>
 8002784:	3214      	adds	r2, #20
 8002786:	4293      	cmp	r3, r2
 8002788:	bf0c      	ite	eq
 800278a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800278e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002792:	4a34      	ldr	r2, [pc, #208]	; (8002864 <HAL_DMA_IRQHandler+0x124>)
 8002794:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002796:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002798:	2b00      	cmp	r3, #0
 800279a:	d05e      	beq.n	800285a <HAL_DMA_IRQHandler+0x11a>
}
 800279c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800279e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027a0:	2304      	movs	r3, #4
 80027a2:	e7f6      	b.n	8002792 <HAL_DMA_IRQHandler+0x52>
 80027a4:	2340      	movs	r3, #64	; 0x40
 80027a6:	e7f4      	b.n	8002792 <HAL_DMA_IRQHandler+0x52>
 80027a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ac:	e7f1      	b.n	8002792 <HAL_DMA_IRQHandler+0x52>
 80027ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027b2:	e7ee      	b.n	8002792 <HAL_DMA_IRQHandler+0x52>
 80027b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027b8:	e7eb      	b.n	8002792 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027ba:	2502      	movs	r5, #2
 80027bc:	4095      	lsls	r5, r2
 80027be:	4225      	tst	r5, r4
 80027c0:	d035      	beq.n	800282e <HAL_DMA_IRQHandler+0xee>
 80027c2:	078d      	lsls	r5, r1, #30
 80027c4:	d533      	bpl.n	800282e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	0694      	lsls	r4, r2, #26
 80027ca:	d406      	bmi.n	80027da <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	f022 020a 	bic.w	r2, r2, #10
 80027d2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80027d4:	2201      	movs	r2, #1
 80027d6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027da:	4a21      	ldr	r2, [pc, #132]	; (8002860 <HAL_DMA_IRQHandler+0x120>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d019      	beq.n	8002814 <HAL_DMA_IRQHandler+0xd4>
 80027e0:	3214      	adds	r2, #20
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d018      	beq.n	8002818 <HAL_DMA_IRQHandler+0xd8>
 80027e6:	3214      	adds	r2, #20
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d017      	beq.n	800281c <HAL_DMA_IRQHandler+0xdc>
 80027ec:	3214      	adds	r2, #20
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d017      	beq.n	8002822 <HAL_DMA_IRQHandler+0xe2>
 80027f2:	3214      	adds	r2, #20
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d017      	beq.n	8002828 <HAL_DMA_IRQHandler+0xe8>
 80027f8:	3214      	adds	r2, #20
 80027fa:	4293      	cmp	r3, r2
 80027fc:	bf0c      	ite	eq
 80027fe:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002802:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002806:	4a17      	ldr	r2, [pc, #92]	; (8002864 <HAL_DMA_IRQHandler+0x124>)
 8002808:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800280a:	2300      	movs	r3, #0
 800280c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002810:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002812:	e7c1      	b.n	8002798 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002814:	2302      	movs	r3, #2
 8002816:	e7f6      	b.n	8002806 <HAL_DMA_IRQHandler+0xc6>
 8002818:	2320      	movs	r3, #32
 800281a:	e7f4      	b.n	8002806 <HAL_DMA_IRQHandler+0xc6>
 800281c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002820:	e7f1      	b.n	8002806 <HAL_DMA_IRQHandler+0xc6>
 8002822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002826:	e7ee      	b.n	8002806 <HAL_DMA_IRQHandler+0xc6>
 8002828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800282c:	e7eb      	b.n	8002806 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800282e:	2508      	movs	r5, #8
 8002830:	4095      	lsls	r5, r2
 8002832:	4225      	tst	r5, r4
 8002834:	d011      	beq.n	800285a <HAL_DMA_IRQHandler+0x11a>
 8002836:	0709      	lsls	r1, r1, #28
 8002838:	d50f      	bpl.n	800285a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	f021 010e 	bic.w	r1, r1, #14
 8002840:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002842:	2301      	movs	r3, #1
 8002844:	fa03 f202 	lsl.w	r2, r3, r2
 8002848:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800284a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800284c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002850:	2300      	movs	r3, #0
 8002852:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002856:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002858:	e79e      	b.n	8002798 <HAL_DMA_IRQHandler+0x58>
}
 800285a:	bc70      	pop	{r4, r5, r6}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40020008 	.word	0x40020008
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_DMA_GetState>:
}
 8002868:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 800286c:	4770      	bx	lr
	...

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002874:	4aa2      	ldr	r2, [pc, #648]	; (8002b00 <HAL_GPIO_Init+0x290>)
{
 8002876:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002878:	4290      	cmp	r0, r2
{
 800287a:	4604      	mov	r4, r0
 800287c:	468b      	mov	fp, r1
 800287e:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002880:	d00f      	beq.n	80028a2 <HAL_GPIO_Init+0x32>
 8002882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002886:	4290      	cmp	r0, r2
 8002888:	d00b      	beq.n	80028a2 <HAL_GPIO_Init+0x32>
 800288a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800288e:	4290      	cmp	r0, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x32>
 8002892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002896:	4290      	cmp	r0, r2
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x32>
 800289a:	21bd      	movs	r1, #189	; 0xbd
 800289c:	4899      	ldr	r0, [pc, #612]	; (8002b04 <HAL_GPIO_Init+0x294>)
 800289e:	f7fe fe1d 	bl	80014dc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80028a2:	f8db 2000 	ldr.w	r2, [fp]
 80028a6:	b291      	uxth	r1, r2
 80028a8:	b111      	cbz	r1, 80028b0 <HAL_GPIO_Init+0x40>
 80028aa:	0c12      	lsrs	r2, r2, #16
 80028ac:	0412      	lsls	r2, r2, #16
 80028ae:	b11a      	cbz	r2, 80028b8 <HAL_GPIO_Init+0x48>
 80028b0:	21be      	movs	r1, #190	; 0xbe
 80028b2:	4894      	ldr	r0, [pc, #592]	; (8002b04 <HAL_GPIO_Init+0x294>)
 80028b4:	f7fe fe12 	bl	80014dc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80028b8:	f8db 2004 	ldr.w	r2, [fp, #4]
 80028bc:	2a03      	cmp	r2, #3
 80028be:	d917      	bls.n	80028f0 <HAL_GPIO_Init+0x80>
 80028c0:	f1a2 0111 	sub.w	r1, r2, #17
 80028c4:	2901      	cmp	r1, #1
 80028c6:	d913      	bls.n	80028f0 <HAL_GPIO_Init+0x80>
 80028c8:	488f      	ldr	r0, [pc, #572]	; (8002b08 <HAL_GPIO_Init+0x298>)
 80028ca:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 80028ce:	4281      	cmp	r1, r0
 80028d0:	d00e      	beq.n	80028f0 <HAL_GPIO_Init+0x80>
 80028d2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80028d6:	4282      	cmp	r2, r0
 80028d8:	d00a      	beq.n	80028f0 <HAL_GPIO_Init+0x80>
 80028da:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 80028de:	4281      	cmp	r1, r0
 80028e0:	d006      	beq.n	80028f0 <HAL_GPIO_Init+0x80>
 80028e2:	498a      	ldr	r1, [pc, #552]	; (8002b0c <HAL_GPIO_Init+0x29c>)
 80028e4:	428a      	cmp	r2, r1
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x80>
 80028e8:	21bf      	movs	r1, #191	; 0xbf
 80028ea:	4886      	ldr	r0, [pc, #536]	; (8002b04 <HAL_GPIO_Init+0x294>)
 80028ec:	f7fe fdf6 	bl	80014dc <assert_failed>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028f0:	2500      	movs	r5, #0
 80028f2:	46a8      	mov	r8, r5
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028f4:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002b24 <HAL_GPIO_Init+0x2b4>
 80028f8:	4e85      	ldr	r6, [pc, #532]	; (8002b10 <HAL_GPIO_Init+0x2a0>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028fa:	f8db 7000 	ldr.w	r7, [fp]
 80028fe:	fa37 f308 	lsrs.w	r3, r7, r8
 8002902:	d102      	bne.n	800290a <HAL_GPIO_Init+0x9a>
      }
    }

	position++;
  }
}
 8002904:	b005      	add	sp, #20
 8002906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800290a:	2201      	movs	r2, #1
 800290c:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002910:	ea07 0709 	and.w	r7, r7, r9
    if (iocurrent == ioposition)
 8002914:	45b9      	cmp	r9, r7
 8002916:	f040 8086 	bne.w	8002a26 <HAL_GPIO_Init+0x1b6>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800291a:	9b01      	ldr	r3, [sp, #4]
 800291c:	429c      	cmp	r4, r3
 800291e:	d00d      	beq.n	800293c <HAL_GPIO_Init+0xcc>
 8002920:	497c      	ldr	r1, [pc, #496]	; (8002b14 <HAL_GPIO_Init+0x2a4>)
 8002922:	428c      	cmp	r4, r1
 8002924:	d00a      	beq.n	800293c <HAL_GPIO_Init+0xcc>
 8002926:	4b7c      	ldr	r3, [pc, #496]	; (8002b18 <HAL_GPIO_Init+0x2a8>)
 8002928:	429c      	cmp	r4, r3
 800292a:	d007      	beq.n	800293c <HAL_GPIO_Init+0xcc>
 800292c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002930:	428c      	cmp	r4, r1
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0xcc>
 8002934:	21cd      	movs	r1, #205	; 0xcd
 8002936:	4873      	ldr	r0, [pc, #460]	; (8002b04 <HAL_GPIO_Init+0x294>)
 8002938:	f7fe fdd0 	bl	80014dc <assert_failed>
      switch (GPIO_Init->Mode)
 800293c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8002940:	2912      	cmp	r1, #18
 8002942:	f000 80c7 	beq.w	8002ad4 <HAL_GPIO_Init+0x264>
 8002946:	f200 8082 	bhi.w	8002a4e <HAL_GPIO_Init+0x1de>
 800294a:	2902      	cmp	r1, #2
 800294c:	f000 80b5 	beq.w	8002aba <HAL_GPIO_Init+0x24a>
 8002950:	d86c      	bhi.n	8002a2c <HAL_GPIO_Init+0x1bc>
 8002952:	2900      	cmp	r1, #0
 8002954:	f000 8088 	beq.w	8002a68 <HAL_GPIO_Init+0x1f8>
 8002958:	2901      	cmp	r1, #1
 800295a:	f000 80a2 	beq.w	8002aa2 <HAL_GPIO_Init+0x232>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800295e:	2fff      	cmp	r7, #255	; 0xff
 8002960:	bf82      	ittt	hi
 8002962:	f108 4c80 	addhi.w	ip, r8, #1073741824	; 0x40000000
 8002966:	f1ac 0c08 	subhi.w	ip, ip, #8
 800296a:	ea4f 028c 	movhi.w	r2, ip, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800296e:	f04f 0c0f 	mov.w	ip, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002972:	bf9d      	ittte	ls
 8002974:	4620      	movls	r0, r4
 8002976:	6821      	ldrls	r1, [r4, #0]
 8002978:	ea4f 0288 	movls.w	r2, r8, lsl #2
 800297c:	6861      	ldrhi	r1, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800297e:	fa0c fe02 	lsl.w	lr, ip, r2
 8002982:	ea21 010e 	bic.w	r1, r1, lr
 8002986:	fa05 f202 	lsl.w	r2, r5, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800298a:	bf88      	it	hi
 800298c:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800298e:	430a      	orrs	r2, r1
 8002990:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002992:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002996:	00c3      	lsls	r3, r0, #3
 8002998:	d545      	bpl.n	8002a26 <HAL_GPIO_Init+0x1b6>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800299a:	f8da 2018 	ldr.w	r2, [sl, #24]
 800299e:	f028 0103 	bic.w	r1, r8, #3
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	f8ca 2018 	str.w	r2, [sl, #24]
 80029aa:	f8da 2018 	ldr.w	r2, [sl, #24]
 80029ae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80029b2:	f002 0201 	and.w	r2, r2, #1
 80029b6:	9203      	str	r2, [sp, #12]
 80029b8:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029bc:	f008 0e03 	and.w	lr, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c0:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029c2:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029c4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80029c8:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029ca:	fa0c fc0e 	lsl.w	ip, ip, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029ce:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029d0:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029d4:	f000 808f 	beq.w	8002af6 <HAL_GPIO_Init+0x286>
 80029d8:	4a4e      	ldr	r2, [pc, #312]	; (8002b14 <HAL_GPIO_Init+0x2a4>)
 80029da:	4294      	cmp	r4, r2
 80029dc:	f000 808d 	beq.w	8002afa <HAL_GPIO_Init+0x28a>
 80029e0:	4b4d      	ldr	r3, [pc, #308]	; (8002b18 <HAL_GPIO_Init+0x2a8>)
 80029e2:	429c      	cmp	r4, r3
 80029e4:	bf14      	ite	ne
 80029e6:	2203      	movne	r2, #3
 80029e8:	2202      	moveq	r2, #2
 80029ea:	fa02 f20e 	lsl.w	r2, r2, lr
 80029ee:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2u] = temp;
 80029f2:	608a      	str	r2, [r1, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80029f4:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029f6:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 80029f8:	bf4c      	ite	mi
 80029fa:	433a      	orrmi	r2, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029fc:	43ba      	bicpl	r2, r7
 80029fe:	6032      	str	r2, [r6, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002a00:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a02:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8002a04:	bf4c      	ite	mi
 8002a06:	433a      	orrmi	r2, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a08:	43ba      	bicpl	r2, r7
 8002a0a:	6072      	str	r2, [r6, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a0c:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a0e:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a10:	bf4c      	ite	mi
 8002a12:	433a      	orrmi	r2, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a14:	43ba      	bicpl	r2, r7
 8002a16:	60b2      	str	r2, [r6, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a18:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a1a:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a1c:	bf4c      	ite	mi
 8002a1e:	4317      	orrmi	r7, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a20:	ea22 0707 	bicpl.w	r7, r2, r7
 8002a24:	60f7      	str	r7, [r6, #12]
	position++;
 8002a26:	f108 0801 	add.w	r8, r8, #1
 8002a2a:	e766      	b.n	80028fa <HAL_GPIO_Init+0x8a>
      switch (GPIO_Init->Mode)
 8002a2c:	2903      	cmp	r1, #3
 8002a2e:	d05e      	beq.n	8002aee <HAL_GPIO_Init+0x27e>
 8002a30:	2911      	cmp	r1, #17
 8002a32:	d194      	bne.n	800295e <HAL_GPIO_Init+0xee>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a34:	f8db 200c 	ldr.w	r2, [fp, #12]
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	2a02      	cmp	r2, #2
 8002a3c:	d903      	bls.n	8002a46 <HAL_GPIO_Init+0x1d6>
 8002a3e:	21dc      	movs	r1, #220	; 0xdc
 8002a40:	4830      	ldr	r0, [pc, #192]	; (8002b04 <HAL_GPIO_Init+0x294>)
 8002a42:	f7fe fd4b 	bl	80014dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a46:	f8db 500c 	ldr.w	r5, [fp, #12]
 8002a4a:	3504      	adds	r5, #4
          break;
 8002a4c:	e787      	b.n	800295e <HAL_GPIO_Init+0xee>
      switch (GPIO_Init->Mode)
 8002a4e:	4833      	ldr	r0, [pc, #204]	; (8002b1c <HAL_GPIO_Init+0x2ac>)
 8002a50:	4281      	cmp	r1, r0
 8002a52:	d009      	beq.n	8002a68 <HAL_GPIO_Init+0x1f8>
 8002a54:	d81b      	bhi.n	8002a8e <HAL_GPIO_Init+0x21e>
 8002a56:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8002a5a:	4281      	cmp	r1, r0
 8002a5c:	d004      	beq.n	8002a68 <HAL_GPIO_Init+0x1f8>
 8002a5e:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002a62:	4281      	cmp	r1, r0
 8002a64:	f47f af7b 	bne.w	800295e <HAL_GPIO_Init+0xee>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002a68:	f8db 1008 	ldr.w	r1, [fp, #8]
 8002a6c:	2902      	cmp	r1, #2
 8002a6e:	d903      	bls.n	8002a78 <HAL_GPIO_Init+0x208>
 8002a70:	21f7      	movs	r1, #247	; 0xf7
 8002a72:	4824      	ldr	r0, [pc, #144]	; (8002b04 <HAL_GPIO_Init+0x294>)
 8002a74:	f7fe fd32 	bl	80014dc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a78:	f8db 1008 	ldr.w	r1, [fp, #8]
 8002a7c:	b3c9      	cbz	r1, 8002af2 <HAL_GPIO_Init+0x282>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a7e:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 8002a80:	bf0c      	ite	eq
 8002a82:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 8002a86:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a8a:	2508      	movs	r5, #8
 8002a8c:	e767      	b.n	800295e <HAL_GPIO_Init+0xee>
      switch (GPIO_Init->Mode)
 8002a8e:	4824      	ldr	r0, [pc, #144]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a90:	4281      	cmp	r1, r0
 8002a92:	d0e9      	beq.n	8002a68 <HAL_GPIO_Init+0x1f8>
 8002a94:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002a98:	4281      	cmp	r1, r0
 8002a9a:	d0e5      	beq.n	8002a68 <HAL_GPIO_Init+0x1f8>
 8002a9c:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8002aa0:	e7df      	b.n	8002a62 <HAL_GPIO_Init+0x1f2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002aa2:	f8db 200c 	ldr.w	r2, [fp, #12]
 8002aa6:	3a01      	subs	r2, #1
 8002aa8:	2a02      	cmp	r2, #2
 8002aaa:	d903      	bls.n	8002ab4 <HAL_GPIO_Init+0x244>
 8002aac:	21d5      	movs	r1, #213	; 0xd5
 8002aae:	4815      	ldr	r0, [pc, #84]	; (8002b04 <HAL_GPIO_Init+0x294>)
 8002ab0:	f7fe fd14 	bl	80014dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ab4:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 8002ab8:	e751      	b.n	800295e <HAL_GPIO_Init+0xee>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002aba:	f8db 200c 	ldr.w	r2, [fp, #12]
 8002abe:	3a01      	subs	r2, #1
 8002ac0:	2a02      	cmp	r2, #2
 8002ac2:	d903      	bls.n	8002acc <HAL_GPIO_Init+0x25c>
 8002ac4:	21e3      	movs	r1, #227	; 0xe3
 8002ac6:	480f      	ldr	r0, [pc, #60]	; (8002b04 <HAL_GPIO_Init+0x294>)
 8002ac8:	f7fe fd08 	bl	80014dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002acc:	f8db 500c 	ldr.w	r5, [fp, #12]
 8002ad0:	3508      	adds	r5, #8
          break;
 8002ad2:	e744      	b.n	800295e <HAL_GPIO_Init+0xee>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ad4:	f8db 200c 	ldr.w	r2, [fp, #12]
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	2a02      	cmp	r2, #2
 8002adc:	d903      	bls.n	8002ae6 <HAL_GPIO_Init+0x276>
 8002ade:	21ea      	movs	r1, #234	; 0xea
 8002ae0:	4808      	ldr	r0, [pc, #32]	; (8002b04 <HAL_GPIO_Init+0x294>)
 8002ae2:	f7fe fcfb 	bl	80014dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ae6:	f8db 500c 	ldr.w	r5, [fp, #12]
 8002aea:	350c      	adds	r5, #12
          break;
 8002aec:	e737      	b.n	800295e <HAL_GPIO_Init+0xee>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002aee:	2500      	movs	r5, #0
 8002af0:	e735      	b.n	800295e <HAL_GPIO_Init+0xee>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002af2:	2504      	movs	r5, #4
 8002af4:	e733      	b.n	800295e <HAL_GPIO_Init+0xee>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002af6:	2200      	movs	r2, #0
 8002af8:	e777      	b.n	80029ea <HAL_GPIO_Init+0x17a>
 8002afa:	2201      	movs	r2, #1
 8002afc:	e775      	b.n	80029ea <HAL_GPIO_Init+0x17a>
 8002afe:	bf00      	nop
 8002b00:	40010800 	.word	0x40010800
 8002b04:	08005c6e 	.word	0x08005c6e
 8002b08:	10110000 	.word	0x10110000
 8002b0c:	10220000 	.word	0x10220000
 8002b10:	40010400 	.word	0x40010400
 8002b14:	40010c00 	.word	0x40010c00
 8002b18:	40011000 	.word	0x40011000
 8002b1c:	10210000 	.word	0x10210000
 8002b20:	10310000 	.word	0x10310000
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	4605      	mov	r5, r0
 8002b2c:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b2e:	460c      	mov	r4, r1
 8002b30:	b921      	cbnz	r1, 8002b3c <HAL_GPIO_WritePin+0x14>
 8002b32:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8002b36:	4808      	ldr	r0, [pc, #32]	; (8002b58 <HAL_GPIO_WritePin+0x30>)
 8002b38:	f7fe fcd0 	bl	80014dc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b3c:	2e01      	cmp	r6, #1
 8002b3e:	d906      	bls.n	8002b4e <HAL_GPIO_WritePin+0x26>
 8002b40:	f240 11d5 	movw	r1, #469	; 0x1d5
 8002b44:	4804      	ldr	r0, [pc, #16]	; (8002b58 <HAL_GPIO_WritePin+0x30>)
 8002b46:	f7fe fcc9 	bl	80014dc <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b4a:	612c      	str	r4, [r5, #16]
  }
}
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 8002b4e:	2e00      	cmp	r6, #0
 8002b50:	d1fb      	bne.n	8002b4a <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b52:	0424      	lsls	r4, r4, #16
 8002b54:	e7f9      	b.n	8002b4a <HAL_GPIO_WritePin+0x22>
 8002b56:	bf00      	nop
 8002b58:	08005c6e 	.word	0x08005c6e

08002b5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b60:	460c      	mov	r4, r1
 8002b62:	b921      	cbnz	r1, 8002b6e <HAL_GPIO_TogglePin+0x12>
 8002b64:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <HAL_GPIO_TogglePin+0x20>)
 8002b6a:	f7fe fcb7 	bl	80014dc <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002b6e:	68eb      	ldr	r3, [r5, #12]
 8002b70:	4223      	tst	r3, r4
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b72:	bf14      	ite	ne
 8002b74:	616c      	strne	r4, [r5, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b76:	612c      	streq	r4, [r5, #16]
  }
}
 8002b78:	bd38      	pop	{r3, r4, r5, pc}
 8002b7a:	bf00      	nop
 8002b7c:	08005c6e 	.word	0x08005c6e

08002b80 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b80:	6801      	ldr	r1, [r0, #0]
 8002b82:	2200      	movs	r2, #0
 8002b84:	694b      	ldr	r3, [r1, #20]
 8002b86:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002b8a:	d010      	beq.n	8002bae <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002b90:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b92:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b94:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
 8002bac:	4770      	bx	lr
  }
  return HAL_OK;
 8002bae:	4618      	mov	r0, r3
}
 8002bb0:	4770      	bx	lr

08002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	4616      	mov	r6, r2
 8002bba:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bbc:	b28f      	uxth	r7, r1
 8002bbe:	6825      	ldr	r5, [r4, #0]
 8002bc0:	6968      	ldr	r0, [r5, #20]
 8002bc2:	ea37 0000 	bics.w	r0, r7, r0
 8002bc6:	d017      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bc8:	696b      	ldr	r3, [r5, #20]
 8002bca:	055a      	lsls	r2, r3, #21
 8002bcc:	d516      	bpl.n	8002bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bd6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002bdc:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002be2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bec:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8002bf0:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002bf4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002bfc:	1c73      	adds	r3, r6, #1
 8002bfe:	d0df      	beq.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c00:	f7ff f874 	bl	8001cec <HAL_GetTick>
 8002c04:	eba0 0008 	sub.w	r0, r0, r8
 8002c08:	42b0      	cmp	r0, r6
 8002c0a:	d801      	bhi.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8002c0c:	2e00      	cmp	r6, #0
 8002c0e:	d1d6      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c10:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c12:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c14:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c20:	f042 0220 	orr.w	r2, r2, #32
 8002c24:	e7e4      	b.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08002c26 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002c26:	b570      	push	{r4, r5, r6, lr}
 8002c28:	4604      	mov	r4, r0
 8002c2a:	460d      	mov	r5, r1
 8002c2c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	075b      	lsls	r3, r3, #29
 8002c34:	d501      	bpl.n	8002c3a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002c36:	2000      	movs	r0, #0
}
 8002c38:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7ff ffa0 	bl	8002b80 <I2C_IsAcknowledgeFailed>
 8002c40:	b9a8      	cbnz	r0, 8002c6e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	1c6a      	adds	r2, r5, #1
 8002c44:	d0f3      	beq.n	8002c2e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c46:	f7ff f851 	bl	8001cec <HAL_GetTick>
 8002c4a:	1b80      	subs	r0, r0, r6
 8002c4c:	42a8      	cmp	r0, r5
 8002c4e:	d801      	bhi.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002c50:	2d00      	cmp	r5, #0
 8002c52:	d1ec      	bne.n	8002c2e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c54:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c56:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c58:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c5a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c62:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c68:	f042 0220 	orr.w	r2, r2, #32
 8002c6c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002c6e:	2001      	movs	r0, #1
 8002c70:	e7e2      	b.n	8002c38 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002c72 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002c72:	b570      	push	{r4, r5, r6, lr}
 8002c74:	4604      	mov	r4, r0
 8002c76:	460d      	mov	r5, r1
 8002c78:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	6943      	ldr	r3, [r0, #20]
 8002c7e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002c82:	d001      	beq.n	8002c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002c84:	2000      	movs	r0, #0
 8002c86:	e010      	b.n	8002caa <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c88:	6942      	ldr	r2, [r0, #20]
 8002c8a:	06d2      	lsls	r2, r2, #27
 8002c8c:	d50e      	bpl.n	8002cac <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8e:	f06f 0210 	mvn.w	r2, #16
 8002c92:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c96:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c98:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ca0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ca2:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ca4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ca6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cac:	f7ff f81e 	bl	8001cec <HAL_GetTick>
 8002cb0:	1b80      	subs	r0, r0, r6
 8002cb2:	42a8      	cmp	r0, r5
 8002cb4:	d801      	bhi.n	8002cba <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8002cb6:	2d00      	cmp	r5, #0
 8002cb8:	d1df      	bne.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cba:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cbc:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cbe:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cc0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cc4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cca:	f042 0220 	orr.w	r2, r2, #32
 8002cce:	e7e8      	b.n	8002ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08002cd0 <I2C_WaitOnFlagUntilTimeout>:
{
 8002cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	4690      	mov	r8, r2
 8002cd8:	461f      	mov	r7, r3
 8002cda:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cdc:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8002ce0:	b28d      	uxth	r5, r1
 8002ce2:	6821      	ldr	r1, [r4, #0]
 8002ce4:	f1b9 0f01 	cmp.w	r9, #1
 8002ce8:	bf0c      	ite	eq
 8002cea:	694b      	ldreq	r3, [r1, #20]
 8002cec:	698b      	ldrne	r3, [r1, #24]
 8002cee:	ea35 0303 	bics.w	r3, r5, r3
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	4598      	cmp	r8, r3
 8002cfa:	d001      	beq.n	8002d00 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	e016      	b.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002d00:	1c7b      	adds	r3, r7, #1
 8002d02:	d0ef      	beq.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7fe fff2 	bl	8001cec <HAL_GetTick>
 8002d08:	1b80      	subs	r0, r0, r6
 8002d0a:	42b8      	cmp	r0, r7
 8002d0c:	d801      	bhi.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002d0e:	2f00      	cmp	r7, #0
 8002d10:	d1e7      	bne.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d12:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d14:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8002d16:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d18:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d1a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d28:	f042 0220 	orr.w	r2, r2, #32
 8002d2c:	6422      	str	r2, [r4, #64]	; 0x40
}
 8002d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002d32 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002d32:	b570      	push	{r4, r5, r6, lr}
 8002d34:	4604      	mov	r4, r0
 8002d36:	460d      	mov	r5, r1
 8002d38:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	061b      	lsls	r3, r3, #24
 8002d40:	d501      	bpl.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002d42:	2000      	movs	r0, #0
}
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff ff1a 	bl	8002b80 <I2C_IsAcknowledgeFailed>
 8002d4c:	b9a8      	cbnz	r0, 8002d7a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	1c6a      	adds	r2, r5, #1
 8002d50:	d0f3      	beq.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7fe ffcb 	bl	8001cec <HAL_GetTick>
 8002d56:	1b80      	subs	r0, r0, r6
 8002d58:	42a8      	cmp	r0, r5
 8002d5a:	d801      	bhi.n	8002d60 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002d5c:	2d00      	cmp	r5, #0
 8002d5e:	d1ec      	bne.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d60:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d62:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d64:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d66:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d6e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d74:	f042 0220 	orr.w	r2, r2, #32
 8002d78:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	e7e2      	b.n	8002d44 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08002d80 <HAL_I2C_Init>:
{
 8002d80:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002d82:	4604      	mov	r4, r0
 8002d84:	b908      	cbnz	r0, 8002d8a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002d86:	2001      	movs	r0, #1
}
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002d8a:	6802      	ldr	r2, [r0, #0]
 8002d8c:	4b75      	ldr	r3, [pc, #468]	; (8002f64 <HAL_I2C_Init+0x1e4>)
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d004      	beq.n	8002d9c <HAL_I2C_Init+0x1c>
 8002d92:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002d96:	4874      	ldr	r0, [pc, #464]	; (8002f68 <HAL_I2C_Init+0x1e8>)
 8002d98:	f7fe fba0 	bl	80014dc <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002d9c:	6863      	ldr	r3, [r4, #4]
 8002d9e:	4a73      	ldr	r2, [pc, #460]	; (8002f6c <HAL_I2C_Init+0x1ec>)
 8002da0:	3b01      	subs	r3, #1
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d904      	bls.n	8002db0 <HAL_I2C_Init+0x30>
 8002da6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8002daa:	486f      	ldr	r0, [pc, #444]	; (8002f68 <HAL_I2C_Init+0x1e8>)
 8002dac:	f7fe fb96 	bl	80014dc <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002db0:	68a3      	ldr	r3, [r4, #8]
 8002db2:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8002db6:	d004      	beq.n	8002dc2 <HAL_I2C_Init+0x42>
 8002db8:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002dbc:	486a      	ldr	r0, [pc, #424]	; (8002f68 <HAL_I2C_Init+0x1e8>)
 8002dbe:	f7fe fb8d 	bl	80014dc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002dc2:	68e3      	ldr	r3, [r4, #12]
 8002dc4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dc8:	f023 0303 	bic.w	r3, r3, #3
 8002dcc:	b123      	cbz	r3, 8002dd8 <HAL_I2C_Init+0x58>
 8002dce:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002dd2:	4865      	ldr	r0, [pc, #404]	; (8002f68 <HAL_I2C_Init+0x1e8>)
 8002dd4:	f7fe fb82 	bl	80014dc <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002dd8:	6923      	ldr	r3, [r4, #16]
 8002dda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de2:	d004      	beq.n	8002dee <HAL_I2C_Init+0x6e>
 8002de4:	f240 11d1 	movw	r1, #465	; 0x1d1
 8002de8:	485f      	ldr	r0, [pc, #380]	; (8002f68 <HAL_I2C_Init+0x1e8>)
 8002dea:	f7fe fb77 	bl	80014dc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002dee:	6963      	ldr	r3, [r4, #20]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d904      	bls.n	8002dfe <HAL_I2C_Init+0x7e>
 8002df4:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8002df8:	485b      	ldr	r0, [pc, #364]	; (8002f68 <HAL_I2C_Init+0x1e8>)
 8002dfa:	f7fe fb6f 	bl	80014dc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002dfe:	69a3      	ldr	r3, [r4, #24]
 8002e00:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8002e04:	d004      	beq.n	8002e10 <HAL_I2C_Init+0x90>
 8002e06:	f240 11d3 	movw	r1, #467	; 0x1d3
 8002e0a:	4857      	ldr	r0, [pc, #348]	; (8002f68 <HAL_I2C_Init+0x1e8>)
 8002e0c:	f7fe fb66 	bl	80014dc <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002e10:	69e3      	ldr	r3, [r4, #28]
 8002e12:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8002e16:	d004      	beq.n	8002e22 <HAL_I2C_Init+0xa2>
 8002e18:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8002e1c:	4852      	ldr	r0, [pc, #328]	; (8002f68 <HAL_I2C_Init+0x1e8>)
 8002e1e:	f7fe fb5d 	bl	80014dc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002e22:	6a23      	ldr	r3, [r4, #32]
 8002e24:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002e28:	d004      	beq.n	8002e34 <HAL_I2C_Init+0xb4>
 8002e2a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8002e2e:	484e      	ldr	r0, [pc, #312]	; (8002f68 <HAL_I2C_Init+0x1e8>)
 8002e30:	f7fe fb54 	bl	80014dc <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e34:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002e38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e3c:	b923      	cbnz	r3, 8002e48 <HAL_I2C_Init+0xc8>
    hi2c->Lock = HAL_UNLOCKED;
 8002e3e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7fe f932 	bl	80010ac <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e48:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002e4a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e58:	f001 fb06 	bl	8004468 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e5c:	6863      	ldr	r3, [r4, #4]
 8002e5e:	4a44      	ldr	r2, [pc, #272]	; (8002f70 <HAL_I2C_Init+0x1f0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d84d      	bhi.n	8002f00 <HAL_I2C_Init+0x180>
 8002e64:	4a43      	ldr	r2, [pc, #268]	; (8002f74 <HAL_I2C_Init+0x1f4>)
 8002e66:	4290      	cmp	r0, r2
 8002e68:	d98d      	bls.n	8002d86 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8002e6a:	4943      	ldr	r1, [pc, #268]	; (8002f78 <HAL_I2C_Init+0x1f8>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e6c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002e6e:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e72:	6855      	ldr	r5, [r2, #4]
 8002e74:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002e78:	430d      	orrs	r5, r1
 8002e7a:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e7c:	6a15      	ldr	r5, [r2, #32]
 8002e7e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002e82:	3101      	adds	r1, #1
 8002e84:	4329      	orrs	r1, r5
 8002e86:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e88:	69d1      	ldr	r1, [r2, #28]
 8002e8a:	4d39      	ldr	r5, [pc, #228]	; (8002f70 <HAL_I2C_Init+0x1f0>)
 8002e8c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002e90:	42ab      	cmp	r3, r5
 8002e92:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e96:	f100 30ff 	add.w	r0, r0, #4294967295
 8002e9a:	d849      	bhi.n	8002f30 <HAL_I2C_Init+0x1b0>
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ea2:	1c43      	adds	r3, r0, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	bf38      	it	cc
 8002eac:	2304      	movcc	r3, #4
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eb2:	6811      	ldr	r1, [r2, #0]
 8002eb4:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002eb8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec2:	6891      	ldr	r1, [r2, #8]
 8002ec4:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002ec8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002ecc:	4303      	orrs	r3, r0
 8002ece:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ed6:	68d1      	ldr	r1, [r2, #12]
 8002ed8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002edc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ee0:	4303      	orrs	r3, r0
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002ee6:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee8:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ef8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002efe:	e743      	b.n	8002d88 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f00:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_I2C_Init+0x1fc>)
 8002f02:	4290      	cmp	r0, r2
 8002f04:	f67f af3f 	bls.w	8002d86 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8002f08:	4e1b      	ldr	r6, [pc, #108]	; (8002f78 <HAL_I2C_Init+0x1f8>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f0a:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002f0e:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f12:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f14:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f16:	6855      	ldr	r5, [r2, #4]
 8002f18:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002f1c:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f1e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f22:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f24:	6a15      	ldr	r5, [r2, #32]
 8002f26:	fbb1 f1f6 	udiv	r1, r1, r6
 8002f2a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002f2e:	e7a8      	b.n	8002e82 <HAL_I2C_Init+0x102>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f30:	68a5      	ldr	r5, [r4, #8]
 8002f32:	b955      	cbnz	r5, 8002f4a <HAL_I2C_Init+0x1ca>
 8002f34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002f38:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f3c:	1c43      	adds	r3, r0, #1
 8002f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f42:	b16b      	cbz	r3, 8002f60 <HAL_I2C_Init+0x1e0>
 8002f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f48:	e7b1      	b.n	8002eae <HAL_I2C_Init+0x12e>
 8002f4a:	2519      	movs	r5, #25
 8002f4c:	436b      	muls	r3, r5
 8002f4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f52:	1c43      	adds	r3, r0, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	b113      	cbz	r3, 8002f60 <HAL_I2C_Init+0x1e0>
 8002f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5e:	e7a6      	b.n	8002eae <HAL_I2C_Init+0x12e>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e7a4      	b.n	8002eae <HAL_I2C_Init+0x12e>
 8002f64:	40005400 	.word	0x40005400
 8002f68:	08005ca7 	.word	0x08005ca7
 8002f6c:	00061a7f 	.word	0x00061a7f
 8002f70:	000186a0 	.word	0x000186a0
 8002f74:	001e847f 	.word	0x001e847f
 8002f78:	000f4240 	.word	0x000f4240
 8002f7c:	003d08ff 	.word	0x003d08ff

08002f80 <HAL_I2C_Master_Transmit>:
{
 8002f80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002f84:	4604      	mov	r4, r0
 8002f86:	461f      	mov	r7, r3
 8002f88:	460d      	mov	r5, r1
 8002f8a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7fe feae 	bl	8001cec <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f90:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002f94:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d004      	beq.n	8002fa4 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8002f9a:	2502      	movs	r5, #2
}
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	b004      	add	sp, #16
 8002fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa4:	9000      	str	r0, [sp, #0]
 8002fa6:	2319      	movs	r3, #25
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4958      	ldr	r1, [pc, #352]	; (800310c <HAL_I2C_Master_Transmit+0x18c>)
 8002fac:	4620      	mov	r0, r4
 8002fae:	f7ff fe8f 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d1f1      	bne.n	8002f9a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8002fb6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d0ed      	beq.n	8002f9a <HAL_I2C_Master_Transmit+0x1a>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002fca:	bf5e      	ittt	pl
 8002fcc:	681a      	ldrpl	r2, [r3, #0]
 8002fce:	f042 0201 	orrpl.w	r2, r2, #1
 8002fd2:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fda:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fdc:	2221      	movs	r2, #33	; 0x21
 8002fde:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fe2:	2210      	movs	r2, #16
 8002fe4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fe8:	2200      	movs	r2, #0
 8002fea:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002fec:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002ff0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002ff4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff6:	4a46      	ldr	r2, [pc, #280]	; (8003110 <HAL_I2C_Master_Transmit+0x190>)
 8002ff8:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ffa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ffc:	2a08      	cmp	r2, #8
 8002ffe:	d004      	beq.n	800300a <HAL_I2C_Master_Transmit+0x8a>
 8003000:	2a01      	cmp	r2, #1
 8003002:	d002      	beq.n	800300a <HAL_I2C_Master_Transmit+0x8a>
 8003004:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003008:	d104      	bne.n	8003014 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e002      	b.n	800301a <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003014:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003016:	2a12      	cmp	r2, #18
 8003018:	d0f7      	beq.n	800300a <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800301a:	9600      	str	r6, [sp, #0]
 800301c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800301e:	2200      	movs	r2, #0
 8003020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003024:	4620      	mov	r0, r4
 8003026:	f7ff fe53 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 800302a:	b108      	cbz	r0, 8003030 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 800302c:	2501      	movs	r5, #1
 800302e:	e7b5      	b.n	8002f9c <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003030:	6923      	ldr	r3, [r4, #16]
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003038:	d121      	bne.n	800307e <HAL_I2C_Master_Transmit+0xfe>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303a:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800303e:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003040:	4633      	mov	r3, r6
 8003042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003044:	4933      	ldr	r1, [pc, #204]	; (8003114 <HAL_I2C_Master_Transmit+0x194>)
 8003046:	4620      	mov	r0, r4
 8003048:	f7ff fdb3 	bl	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800304c:	4605      	mov	r5, r0
 800304e:	2800      	cmp	r0, #0
 8003050:	d1ec      	bne.n	800302c <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	9003      	str	r0, [sp, #12]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	9203      	str	r2, [sp, #12]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	9303      	str	r3, [sp, #12]
 800305e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003060:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003062:	b9f3      	cbnz	r3, 80030a2 <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	6821      	ldr	r1, [r4, #0]
 8003066:	680a      	ldr	r2, [r1, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306c:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800306e:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003070:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800307c:	e78e      	b.n	8002f9c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800307e:	11eb      	asrs	r3, r5, #7
 8003080:	f003 0306 	and.w	r3, r3, #6
 8003084:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003088:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800308a:	4923      	ldr	r1, [pc, #140]	; (8003118 <HAL_I2C_Master_Transmit+0x198>)
 800308c:	4633      	mov	r3, r6
 800308e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003090:	4620      	mov	r0, r4
 8003092:	f7ff fd8e 	bl	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003096:	2800      	cmp	r0, #0
 8003098:	d1c8      	bne.n	800302c <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	b2ed      	uxtb	r5, r5
 800309e:	611d      	str	r5, [r3, #16]
 80030a0:	e7ce      	b.n	8003040 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a2:	4632      	mov	r2, r6
 80030a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7ff fe43 	bl	8002d32 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ac:	b140      	cbz	r0, 80030c0 <HAL_I2C_Master_Transmit+0x140>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030b0:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b2:	bf01      	itttt	eq
 80030b4:	6822      	ldreq	r2, [r4, #0]
 80030b6:	6813      	ldreq	r3, [r2, #0]
 80030b8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80030bc:	6013      	streq	r3, [r2, #0]
 80030be:	e7b5      	b.n	800302c <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80030ca:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80030cc:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80030ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80030d0:	3a01      	subs	r2, #1
 80030d2:	b292      	uxth	r2, r2
 80030d4:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030d8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80030da:	1e51      	subs	r1, r2, #1
 80030dc:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030de:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80030e0:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030e2:	d50a      	bpl.n	80030fa <HAL_I2C_Master_Transmit+0x17a>
 80030e4:	b149      	cbz	r1, 80030fa <HAL_I2C_Master_Transmit+0x17a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e6:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80030e8:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ea:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80030ec:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80030ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80030f0:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80030f8:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fa:	4632      	mov	r2, r6
 80030fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80030fe:	4620      	mov	r0, r4
 8003100:	f7ff fd91 	bl	8002c26 <I2C_WaitOnBTFFlagUntilTimeout>
 8003104:	2800      	cmp	r0, #0
 8003106:	d0ab      	beq.n	8003060 <HAL_I2C_Master_Transmit+0xe0>
 8003108:	e7d1      	b.n	80030ae <HAL_I2C_Master_Transmit+0x12e>
 800310a:	bf00      	nop
 800310c:	00100002 	.word	0x00100002
 8003110:	ffff0000 	.word	0xffff0000
 8003114:	00010002 	.word	0x00010002
 8003118:	00010008 	.word	0x00010008

0800311c <HAL_I2C_Slave_Receive>:
{
 800311c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003120:	4604      	mov	r4, r0
 8003122:	461e      	mov	r6, r3
 8003124:	460d      	mov	r5, r1
 8003126:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7fe fde0 	bl	8001cec <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800312c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003130:	4607      	mov	r7, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003132:	2b20      	cmp	r3, #32
 8003134:	f040 80a7 	bne.w	8003286 <HAL_I2C_Slave_Receive+0x16a>
    if ((pData == NULL) || (Size == (uint16_t)0))
 8003138:	b925      	cbnz	r5, 8003144 <HAL_I2C_Slave_Receive+0x28>
        return HAL_ERROR;
 800313a:	2501      	movs	r5, #1
}
 800313c:	4628      	mov	r0, r5
 800313e:	b004      	add	sp, #16
 8003140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((pData == NULL) || (Size == (uint16_t)0))
 8003144:	f1b8 0f00 	cmp.w	r8, #0
 8003148:	d0f7      	beq.n	800313a <HAL_I2C_Slave_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800314a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800314e:	2b01      	cmp	r3, #1
 8003150:	f000 8099 	beq.w	8003286 <HAL_I2C_Slave_Receive+0x16a>
 8003154:	2301      	movs	r3, #1
 8003156:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	07d2      	lsls	r2, r2, #31
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003160:	f04f 0222 	mov.w	r2, #34	; 0x22
      __HAL_I2C_ENABLE(hi2c);
 8003164:	bf5e      	ittt	pl
 8003166:	6818      	ldrpl	r0, [r3, #0]
 8003168:	f040 0001 	orrpl.w	r0, r0, #1
 800316c:	6018      	strpl	r0, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8003174:	6018      	str	r0, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003176:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800317a:	2220      	movs	r2, #32
 800317c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003180:	2200      	movs	r2, #0
 8003182:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003184:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003188:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800318a:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800318c:	8521      	strh	r1, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800318e:	493f      	ldr	r1, [pc, #252]	; (800328c <HAL_I2C_Slave_Receive+0x170>)
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003190:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003192:	62e1      	str	r1, [r4, #44]	; 0x2c
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800319a:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800319c:	9700      	str	r7, [sp, #0]
 800319e:	4633      	mov	r3, r6
 80031a0:	493b      	ldr	r1, [pc, #236]	; (8003290 <HAL_I2C_Slave_Receive+0x174>)
 80031a2:	f7ff fd95 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 80031a6:	4605      	mov	r5, r0
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d1c6      	bne.n	800313a <HAL_I2C_Slave_Receive+0x1e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	9002      	str	r0, [sp, #8]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	9202      	str	r2, [sp, #8]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	9302      	str	r3, [sp, #8]
 80031b8:	9b02      	ldr	r3, [sp, #8]
    while (hi2c->XferSize > 0U)
 80031ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80031bc:	b9c3      	cbnz	r3, 80031f0 <HAL_I2C_Slave_Receive+0xd4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	06d2      	lsls	r2, r2, #27
 80031c4:	d541      	bpl.n	800324a <HAL_I2C_Slave_Receive+0x12e>
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80031c6:	2200      	movs	r2, #0
 80031c8:	9203      	str	r2, [sp, #12]
 80031ca:	6959      	ldr	r1, [r3, #20]
 80031cc:	9103      	str	r1, [sp, #12]
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	f041 0101 	orr.w	r1, r1, #1
 80031d4:	6019      	str	r1, [r3, #0]
 80031d6:	9903      	ldr	r1, [sp, #12]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80031de:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80031e2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ea:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 80031ee:	e7a5      	b.n	800313c <HAL_I2C_Slave_Receive+0x20>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f0:	463a      	mov	r2, r7
 80031f2:	4631      	mov	r1, r6
 80031f4:	4620      	mov	r0, r4
 80031f6:	f7ff fd3c 	bl	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	b120      	cbz	r0, 8003208 <HAL_I2C_Slave_Receive+0xec>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e798      	b.n	800313a <HAL_I2C_Slave_Receive+0x1e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800320c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800320e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003210:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003212:	3a01      	subs	r2, #1
 8003214:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8003216:	1c4b      	adds	r3, r1, #1
      hi2c->XferCount--;
 8003218:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800321a:	6822      	ldr	r2, [r4, #0]
      hi2c->pBuffPtr++;
 800321c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800321e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003220:	6950      	ldr	r0, [r2, #20]
      hi2c->XferSize--;
 8003222:	3b01      	subs	r3, #1
 8003224:	b29b      	uxth	r3, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003226:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 8003228:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800322a:	d5c6      	bpl.n	80031ba <HAL_I2C_Slave_Receive+0x9e>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0c4      	beq.n	80031ba <HAL_I2C_Slave_Receive+0x9e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003230:	6913      	ldr	r3, [r2, #16]
 8003232:	704b      	strb	r3, [r1, #1]
        hi2c->pBuffPtr++;
 8003234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003236:	3301      	adds	r3, #1
 8003238:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800323a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003240:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003242:	3b01      	subs	r3, #1
 8003244:	b29b      	uxth	r3, r3
 8003246:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003248:	e7b7      	b.n	80031ba <HAL_I2C_Slave_Receive+0x9e>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800324a:	4620      	mov	r0, r4
 800324c:	f7ff fc98 	bl	8002b80 <I2C_IsAcknowledgeFailed>
 8003250:	b998      	cbnz	r0, 800327a <HAL_I2C_Slave_Receive+0x15e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003252:	f7fe fd4b 	bl	8001cec <HAL_GetTick>
 8003256:	1bc0      	subs	r0, r0, r7
 8003258:	4286      	cmp	r6, r0
 800325a:	d301      	bcc.n	8003260 <HAL_I2C_Slave_Receive+0x144>
 800325c:	2e00      	cmp	r6, #0
 800325e:	d1ae      	bne.n	80031be <HAL_I2C_Slave_Receive+0xa2>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003260:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003262:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003264:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003266:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800326e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003270:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	f042 0220 	orr.w	r2, r2, #32
 8003278:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327a:	6822      	ldr	r2, [r4, #0]
 800327c:	6813      	ldr	r3, [r2, #0]
 800327e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e759      	b.n	800313a <HAL_I2C_Slave_Receive+0x1e>
    return HAL_BUSY;
 8003286:	2502      	movs	r5, #2
 8003288:	e758      	b.n	800313c <HAL_I2C_Slave_Receive+0x20>
 800328a:	bf00      	nop
 800328c:	ffff0000 	.word	0xffff0000
 8003290:	00010002 	.word	0x00010002

08003294 <HAL_I2C_MasterTxCpltCallback>:
 8003294:	4770      	bx	lr

08003296 <HAL_I2C_MasterRxCpltCallback>:
 8003296:	4770      	bx	lr

08003298 <HAL_I2C_SlaveTxCpltCallback>:
 8003298:	4770      	bx	lr

0800329a <HAL_I2C_AddrCallback>:
}
 800329a:	4770      	bx	lr

0800329c <HAL_I2C_ListenCpltCallback>:
 800329c:	4770      	bx	lr

0800329e <HAL_I2C_MemTxCpltCallback>:
 800329e:	4770      	bx	lr

080032a0 <HAL_I2C_MemRxCpltCallback>:
 80032a0:	4770      	bx	lr

080032a2 <HAL_I2C_ErrorCallback>:
 80032a2:	4770      	bx	lr

080032a4 <HAL_I2C_AbortCpltCallback>:
 80032a4:	4770      	bx	lr

080032a6 <I2C_DMAAbort>:
  hi2c->hdmatx->XferCpltCallback = NULL;
 80032a6:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80032aa:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ac:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032ae:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b2:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 80032b4:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 80032b6:	6b85      	ldr	r5, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b8:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 80032bc:	62b3      	str	r3, [r6, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 80032be:	62ab      	str	r3, [r5, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c0:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 80032c2:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 80032c4:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 80032c6:	6373      	str	r3, [r6, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 80032c8:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 80032cc:	636b      	str	r3, [r5, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 80032ce:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032d0:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032d4:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032d6:	2c60      	cmp	r4, #96	; 0x60
 80032d8:	d108      	bne.n	80032ec <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 80032da:	2220      	movs	r2, #32
 80032dc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032e0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80032e4:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80032e6:	f7ff ffdd 	bl	80032a4 <HAL_I2C_AbortCpltCallback>
}
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032ec:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80032f0:	2928      	cmp	r1, #40	; 0x28
 80032f2:	d10d      	bne.n	8003310 <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 80032f4:	6814      	ldr	r4, [r2, #0]
 80032f6:	f044 0401 	orr.w	r4, r4, #1
 80032fa:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fc:	6814      	ldr	r4, [r2, #0]
 80032fe:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8003302:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003304:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003306:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 800330a:	f7ff ffca 	bl	80032a2 <HAL_I2C_ErrorCallback>
}
 800330e:	e7ec      	b.n	80032ea <I2C_DMAAbort+0x44>
      hi2c->State = HAL_I2C_STATE_READY;
 8003310:	2220      	movs	r2, #32
 8003312:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003316:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800331a:	e7f6      	b.n	800330a <I2C_DMAAbort+0x64>

0800331c <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800331c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003320:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8003324:	b510      	push	{r4, lr}
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003326:	2910      	cmp	r1, #16
{
 8003328:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800332e:	d105      	bne.n	800333c <I2C_ITError+0x20>
 8003330:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003332:	bf02      	ittt	eq
 8003334:	6819      	ldreq	r1, [r3, #0]
 8003336:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 800333a:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800333c:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8003340:	2928      	cmp	r1, #40	; 0x28
 8003342:	d13a      	bne.n	80033ba <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003344:	2200      	movs	r2, #0
 8003346:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003348:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003352:	d059      	beq.n	8003408 <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003354:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003356:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800335c:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800335e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003362:	2b01      	cmp	r3, #1
 8003364:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <I2C_ITError+0x13c>)
 8003366:	d035      	beq.n	80033d4 <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003368:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800336a:	f7ff f9a1 	bl	80026b0 <HAL_DMA_Abort_IT>
 800336e:	b150      	cbz	r0, 8003386 <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8003370:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003372:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003374:	6813      	ldr	r3, [r2, #0]
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800337c:	2320      	movs	r3, #32
 800337e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003382:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003384:	4798      	blx	r3
  CurrentState = hi2c->State;
 8003386:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800338a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 800338c:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800338e:	0752      	lsls	r2, r2, #29
 8003390:	d512      	bpl.n	80033b8 <I2C_ITError+0x9c>
 8003392:	2b28      	cmp	r3, #40	; 0x28
 8003394:	d110      	bne.n	80033b8 <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003396:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003398:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800339a:	6853      	ldr	r3, [r2, #4]
 800339c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033a0:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033a2:	4b2e      	ldr	r3, [pc, #184]	; (800345c <I2C_ITError+0x140>)
    hi2c->State         = HAL_I2C_STATE_READY;
 80033a4:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80033b4:	f7ff ff72 	bl	800329c <HAL_I2C_ListenCpltCallback>
}
 80033b8:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	0509      	lsls	r1, r1, #20
 80033be:	d404      	bmi.n	80033ca <I2C_ITError+0xae>
 80033c0:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	bf1c      	itt	ne
 80033c4:	2220      	movne	r2, #32
 80033c6:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80033ca:	2200      	movs	r2, #0
 80033cc:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80033d2:	e7bb      	b.n	800334c <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80033d6:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033d8:	f7ff f96a 	bl	80026b0 <HAL_DMA_Abort_IT>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d0d2      	beq.n	8003386 <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	0652      	lsls	r2, r2, #25
 80033e6:	d505      	bpl.n	80033f4 <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033ec:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80033ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033f0:	3301      	adds	r3, #1
 80033f2:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80033f4:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80033f8:	6813      	ldr	r3, [r2, #0]
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003400:	2320      	movs	r3, #32
 8003402:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003406:	e7bc      	b.n	8003382 <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003408:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800340c:	2960      	cmp	r1, #96	; 0x60
 800340e:	d115      	bne.n	800343c <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	2120      	movs	r1, #32
 8003412:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003416:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	0650      	lsls	r0, r2, #25
 800341c:	d505      	bpl.n	800342a <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003422:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003426:	3301      	adds	r3, #1
 8003428:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800342a:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800342c:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 800342e:	6813      	ldr	r3, [r2, #0]
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003436:	f7ff ff35 	bl	80032a4 <HAL_I2C_AbortCpltCallback>
 800343a:	e7a4      	b.n	8003386 <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	0651      	lsls	r1, r2, #25
 8003440:	d505      	bpl.n	800344e <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003446:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800344a:	3301      	adds	r3, #1
 800344c:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff ff27 	bl	80032a2 <HAL_I2C_ErrorCallback>
 8003454:	e797      	b.n	8003386 <I2C_ITError+0x6a>
 8003456:	bf00      	nop
 8003458:	080032a7 	.word	0x080032a7
 800345c:	ffff0000 	.word	0xffff0000

08003460 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003460:	6803      	ldr	r3, [r0, #0]
{
 8003462:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003464:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003466:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003468:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 800346c:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800346e:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003470:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003474:	2910      	cmp	r1, #16
{
 8003476:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003478:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800347a:	d002      	beq.n	8003482 <HAL_I2C_EV_IRQHandler+0x22>
 800347c:	2940      	cmp	r1, #64	; 0x40
 800347e:	f040 82b9 	bne.w	80039f4 <HAL_I2C_EV_IRQHandler+0x594>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003482:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003484:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003486:	f010 0f01 	tst.w	r0, #1
 800348a:	d107      	bne.n	800349c <HAL_I2C_EV_IRQHandler+0x3c>
 800348c:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8003490:	d002      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 8003492:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8003496:	d152      	bne.n	800353e <HAL_I2C_EV_IRQHandler+0xde>
}
 8003498:	b00d      	add	sp, #52	; 0x34
 800349a:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349c:	0595      	lsls	r5, r2, #22
 800349e:	d54e      	bpl.n	800353e <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80034a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034a2:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 80034a6:	d10c      	bne.n	80034c2 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80034a8:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80034aa:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034ac:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80034b0:	2a40      	cmp	r2, #64	; 0x40
 80034b2:	d111      	bne.n	80034d8 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 80034b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80034b6:	b952      	cbnz	r2, 80034ce <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80034ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034be:	611a      	str	r2, [r3, #16]
 80034c0:	e7ea      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80034c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034c4:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 80034c8:	d1f0      	bne.n	80034ac <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80034ca:	2208      	movs	r2, #8
 80034cc:	e7ed      	b.n	80034aa <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	e7f2      	b.n	80034be <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034d8:	6922      	ldr	r2, [r4, #16]
 80034da:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80034de:	d11b      	bne.n	8003518 <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034e0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80034e4:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034e8:	d112      	bne.n	8003510 <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034ee:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80034f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80034f2:	b912      	cbnz	r2, 80034fa <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80034f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80034f6:	2900      	cmp	r1, #0
 80034f8:	d0ce      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80034fa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80034fc:	b91a      	cbnz	r2, 8003506 <HAL_I2C_EV_IRQHandler+0xa6>
 80034fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003500:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003502:	2a00      	cmp	r2, #0
 8003504:	d0c8      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	e7c3      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	e7ea      	b.n	80034ee <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8003518:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800351a:	b932      	cbnz	r2, 800352a <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800351c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800351e:	11d2      	asrs	r2, r2, #7
 8003520:	f002 0206 	and.w	r2, r2, #6
 8003524:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003528:	e7c9      	b.n	80034be <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 800352a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800352c:	2a01      	cmp	r2, #1
 800352e:	d1b3      	bne.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003530:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003532:	11d2      	asrs	r2, r2, #7
 8003534:	f002 0206 	and.w	r2, r2, #6
 8003538:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 800353c:	e7bf      	b.n	80034be <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353e:	0705      	lsls	r5, r0, #28
 8003540:	d503      	bpl.n	800354a <HAL_I2C_EV_IRQHandler+0xea>
 8003542:	0595      	lsls	r5, r2, #22
 8003544:	d501      	bpl.n	800354a <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003546:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003548:	e7e4      	b.n	8003514 <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800354a:	0785      	lsls	r5, r0, #30
 800354c:	f140 80e6 	bpl.w	800371c <HAL_I2C_EV_IRQHandler+0x2bc>
 8003550:	0595      	lsls	r5, r2, #22
 8003552:	f140 80e3 	bpl.w	800371c <HAL_I2C_EV_IRQHandler+0x2bc>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003556:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800355a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800355c:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800355e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003562:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003564:	2822      	cmp	r0, #34	; 0x22
 8003566:	f040 80d1 	bne.w	800370c <HAL_I2C_EV_IRQHandler+0x2ac>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800356a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800356c:	b940      	cbnz	r0, 8003580 <HAL_I2C_EV_IRQHandler+0x120>
 800356e:	2940      	cmp	r1, #64	; 0x40
 8003570:	d106      	bne.n	8003580 <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003572:	9000      	str	r0, [sp, #0]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	9200      	str	r2, [sp, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	9b00      	ldr	r3, [sp, #0]
 800357e:	e78b      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003580:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003582:	b981      	cbnz	r1, 80035a6 <HAL_I2C_EV_IRQHandler+0x146>
 8003584:	6920      	ldr	r0, [r4, #16]
 8003586:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800358a:	d10c      	bne.n	80035a6 <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358c:	9101      	str	r1, [sp, #4]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	9201      	str	r2, [sp, #4]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	9201      	str	r2, [sp, #4]
 8003596:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800359e:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 80035a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80035a2:	3301      	adds	r3, #1
 80035a4:	e028      	b.n	80035f8 <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 80035a6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80035a8:	b289      	uxth	r1, r1
 80035aa:	b951      	cbnz	r1, 80035c2 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ac:	9102      	str	r1, [sp, #8]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	9202      	str	r2, [sp, #8]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	9202      	str	r2, [sp, #8]
 80035b6:	9a02      	ldr	r2, [sp, #8]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e019      	b.n	80035f6 <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 80035c2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80035c4:	b289      	uxth	r1, r1
 80035c6:	2901      	cmp	r1, #1
 80035c8:	d14a      	bne.n	8003660 <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80035ca:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80035ce:	d11c      	bne.n	800360a <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80035de:	d00d      	beq.n	80035fc <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e6:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e8:	2200      	movs	r2, #0
 80035ea:	9203      	str	r2, [sp, #12]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	9203      	str	r2, [sp, #12]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	9303      	str	r3, [sp, #12]
 80035f4:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	6523      	str	r3, [r4, #80]	; 0x50
 80035fa:	e74d      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fc:	9204      	str	r2, [sp, #16]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	9204      	str	r2, [sp, #16]
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	9204      	str	r2, [sp, #16]
 8003606:	9a04      	ldr	r2, [sp, #16]
 8003608:	e7d6      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800360a:	2a08      	cmp	r2, #8
 800360c:	d01c      	beq.n	8003648 <HAL_I2C_EV_IRQHandler+0x1e8>
 800360e:	2a20      	cmp	r2, #32
 8003610:	d01a      	beq.n	8003648 <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003612:	2d12      	cmp	r5, #18
 8003614:	d10d      	bne.n	8003632 <HAL_I2C_EV_IRQHandler+0x1d2>
 8003616:	2a01      	cmp	r2, #1
 8003618:	d116      	bne.n	8003648 <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003620:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003622:	2200      	movs	r2, #0
 8003624:	9205      	str	r2, [sp, #20]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	9205      	str	r2, [sp, #20]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	9305      	str	r3, [sp, #20]
 800362e:	9b05      	ldr	r3, [sp, #20]
 8003630:	e7e1      	b.n	80035f6 <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003632:	2a10      	cmp	r2, #16
 8003634:	d8f1      	bhi.n	800361a <HAL_I2C_EV_IRQHandler+0x1ba>
 8003636:	4990      	ldr	r1, [pc, #576]	; (8003878 <HAL_I2C_EV_IRQHandler+0x418>)
 8003638:	fa21 f202 	lsr.w	r2, r1, r2
 800363c:	07d2      	lsls	r2, r2, #31
 800363e:	d5ec      	bpl.n	800361a <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003646:	e7eb      	b.n	8003620 <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003650:	2200      	movs	r2, #0
 8003652:	9206      	str	r2, [sp, #24]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	9206      	str	r2, [sp, #24]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	9206      	str	r2, [sp, #24]
 800365c:	9a06      	ldr	r2, [sp, #24]
 800365e:	e7ab      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8003660:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003662:	b289      	uxth	r1, r1
 8003664:	2902      	cmp	r1, #2
 8003666:	d133      	bne.n	80036d0 <HAL_I2C_EV_IRQHandler+0x270>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003668:	2a10      	cmp	r2, #16
 800366a:	d805      	bhi.n	8003678 <HAL_I2C_EV_IRQHandler+0x218>
 800366c:	4982      	ldr	r1, [pc, #520]	; (8003878 <HAL_I2C_EV_IRQHandler+0x418>)
 800366e:	40d1      	lsrs	r1, r2
 8003670:	43c9      	mvns	r1, r1
 8003672:	f011 0101 	ands.w	r1, r1, #1
 8003676:	d020      	beq.n	80036ba <HAL_I2C_EV_IRQHandler+0x25a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800367e:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003680:	2100      	movs	r1, #0
 8003682:	9107      	str	r1, [sp, #28]
 8003684:	6959      	ldr	r1, [r3, #20]
 8003686:	9107      	str	r1, [sp, #28]
 8003688:	6999      	ldr	r1, [r3, #24]
 800368a:	9107      	str	r1, [sp, #28]
 800368c:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368e:	6819      	ldr	r1, [r3, #0]
 8003690:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003694:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	050d      	lsls	r5, r1, #20
 800369a:	d5ac      	bpl.n	80035f6 <HAL_I2C_EV_IRQHandler+0x196>
 800369c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80036a0:	d006      	beq.n	80036b0 <HAL_I2C_EV_IRQHandler+0x250>
 80036a2:	1e51      	subs	r1, r2, #1
 80036a4:	291f      	cmp	r1, #31
 80036a6:	d8a6      	bhi.n	80035f6 <HAL_I2C_EV_IRQHandler+0x196>
 80036a8:	4a74      	ldr	r2, [pc, #464]	; (800387c <HAL_I2C_EV_IRQHandler+0x41c>)
 80036aa:	40ca      	lsrs	r2, r1
 80036ac:	07d0      	lsls	r0, r2, #31
 80036ae:	d5a2      	bpl.n	80035f6 <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	e79d      	b.n	80035f6 <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 80036c0:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c2:	9108      	str	r1, [sp, #32]
 80036c4:	6959      	ldr	r1, [r3, #20]
 80036c6:	9108      	str	r1, [sp, #32]
 80036c8:	6999      	ldr	r1, [r3, #24]
 80036ca:	9108      	str	r1, [sp, #32]
 80036cc:	9908      	ldr	r1, [sp, #32]
 80036ce:	e7e2      	b.n	8003696 <HAL_I2C_EV_IRQHandler+0x236>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80036d6:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	0509      	lsls	r1, r1, #20
 80036dc:	d50e      	bpl.n	80036fc <HAL_I2C_EV_IRQHandler+0x29c>
 80036de:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80036e2:	d007      	beq.n	80036f4 <HAL_I2C_EV_IRQHandler+0x294>
 80036e4:	3a01      	subs	r2, #1
 80036e6:	2a1f      	cmp	r2, #31
 80036e8:	d808      	bhi.n	80036fc <HAL_I2C_EV_IRQHandler+0x29c>
 80036ea:	4964      	ldr	r1, [pc, #400]	; (800387c <HAL_I2C_EV_IRQHandler+0x41c>)
 80036ec:	fa21 f202 	lsr.w	r2, r1, r2
 80036f0:	07d2      	lsls	r2, r2, #31
 80036f2:	d503      	bpl.n	80036fc <HAL_I2C_EV_IRQHandler+0x29c>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036fa:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fc:	2200      	movs	r2, #0
 80036fe:	9209      	str	r2, [sp, #36]	; 0x24
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	9209      	str	r2, [sp, #36]	; 0x24
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	9309      	str	r3, [sp, #36]	; 0x24
 8003708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800370a:	e774      	b.n	80035f6 <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370c:	2200      	movs	r2, #0
 800370e:	920a      	str	r2, [sp, #40]	; 0x28
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	920a      	str	r2, [sp, #40]	; 0x28
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	930a      	str	r3, [sp, #40]	; 0x28
 8003718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800371a:	e6bd      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800371c:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003720:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003722:	f000 80ad 	beq.w	8003880 <HAL_I2C_EV_IRQHandler+0x420>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003726:	050d      	lsls	r5, r1, #20
 8003728:	f53f aeb6 	bmi.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 800372c:	f3c0 0180 	ubfx	r1, r0, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003730:	0600      	lsls	r0, r0, #24
 8003732:	d569      	bpl.n	8003808 <HAL_I2C_EV_IRQHandler+0x3a8>
 8003734:	0555      	lsls	r5, r2, #21
 8003736:	d567      	bpl.n	8003808 <HAL_I2C_EV_IRQHandler+0x3a8>
 8003738:	2900      	cmp	r1, #0
 800373a:	d168      	bne.n	800380e <HAL_I2C_EV_IRQHandler+0x3ae>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800373c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003740:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003742:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003746:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003748:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800374a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800374c:	b9c5      	cbnz	r5, 8003780 <HAL_I2C_EV_IRQHandler+0x320>
 800374e:	2a21      	cmp	r2, #33	; 0x21
 8003750:	d118      	bne.n	8003784 <HAL_I2C_EV_IRQHandler+0x324>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003752:	2808      	cmp	r0, #8
 8003754:	d078      	beq.n	8003848 <HAL_I2C_EV_IRQHandler+0x3e8>
 8003756:	2820      	cmp	r0, #32
 8003758:	d076      	beq.n	8003848 <HAL_I2C_EV_IRQHandler+0x3e8>
 800375a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800375e:	d073      	beq.n	8003848 <HAL_I2C_EV_IRQHandler+0x3e8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003766:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003768:	2311      	movs	r3, #17
 800376a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	2300      	movs	r3, #0
 800376e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003772:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003774:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003776:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800377a:	f7ff fd8b 	bl	8003294 <HAL_I2C_MasterTxCpltCallback>
 800377e:	e68b      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003780:	2a21      	cmp	r2, #33	; 0x21
 8003782:	d005      	beq.n	8003790 <HAL_I2C_EV_IRQHandler+0x330>
 8003784:	2940      	cmp	r1, #64	; 0x40
 8003786:	f47f ae87 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800378a:	2a22      	cmp	r2, #34	; 0x22
 800378c:	f47f ae84 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8003790:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003792:	b292      	uxth	r2, r2
 8003794:	b91a      	cbnz	r2, 800379e <HAL_I2C_EV_IRQHandler+0x33e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379c:	e6b6      	b.n	800350c <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800379e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80037a2:	2a40      	cmp	r2, #64	; 0x40
 80037a4:	d126      	bne.n	80037f4 <HAL_I2C_EV_IRQHandler+0x394>
        if (hi2c->EventCount == 0U)
 80037a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80037a8:	b962      	cbnz	r2, 80037c4 <HAL_I2C_EV_IRQHandler+0x364>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037aa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80037ac:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037b0:	d104      	bne.n	80037bc <HAL_I2C_EV_IRQHandler+0x35c>
 80037b2:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037b4:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80037b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037b8:	3302      	adds	r3, #2
 80037ba:	e71d      	b.n	80035f8 <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80037bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80037c0:	611a      	str	r2, [r3, #16]
 80037c2:	e6ed      	b.n	80035a0 <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 80037c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80037c6:	2a01      	cmp	r2, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_I2C_EV_IRQHandler+0x370>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	e7f7      	b.n	80037c0 <HAL_I2C_EV_IRQHandler+0x360>
        else if (hi2c->EventCount == 2U)
 80037d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80037d2:	2a02      	cmp	r2, #2
 80037d4:	f47f ae60 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037d8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80037dc:	2a22      	cmp	r2, #34	; 0x22
 80037de:	d104      	bne.n	80037ea <HAL_I2C_EV_IRQHandler+0x38a>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e656      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037ea:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80037ee:	2a21      	cmp	r2, #33	; 0x21
 80037f0:	f47f ae52 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037f6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80037fa:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80037fc:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80037fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003800:	3b01      	subs	r3, #1
 8003802:	b29b      	uxth	r3, r3
 8003804:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003806:	e647      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003808:	2900      	cmp	r1, #0
 800380a:	f43f ae45 	beq.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 800380e:	0590      	lsls	r0, r2, #22
 8003810:	f57f ae42 	bpl.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003814:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003816:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800381a:	2a21      	cmp	r2, #33	; 0x21
 800381c:	f47f ae3c 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8003820:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003822:	b292      	uxth	r2, r2
 8003824:	2a00      	cmp	r2, #0
 8003826:	d1e5      	bne.n	80037f4 <HAL_I2C_EV_IRQHandler+0x394>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003828:	2908      	cmp	r1, #8
 800382a:	d00d      	beq.n	8003848 <HAL_I2C_EV_IRQHandler+0x3e8>
 800382c:	2920      	cmp	r1, #32
 800382e:	d00b      	beq.n	8003848 <HAL_I2C_EV_IRQHandler+0x3e8>
 8003830:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003834:	d008      	beq.n	8003848 <HAL_I2C_EV_IRQHandler+0x3e8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800383c:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800383e:	2311      	movs	r3, #17
 8003840:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003842:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8003846:	e794      	b.n	8003772 <HAL_I2C_EV_IRQHandler+0x312>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003848:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 800384a:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800384c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003850:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003858:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800385a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800385c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800385e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003860:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003864:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800386c:	2a40      	cmp	r2, #64	; 0x40
 800386e:	d184      	bne.n	800377a <HAL_I2C_EV_IRQHandler+0x31a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003870:	f7ff fd15 	bl	800329e <HAL_I2C_MemTxCpltCallback>
 8003874:	e610      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 8003876:	bf00      	nop
 8003878:	00010014 	.word	0x00010014
 800387c:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003880:	0509      	lsls	r1, r1, #20
 8003882:	f53f ae09 	bmi.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003886:	0645      	lsls	r5, r0, #25
 8003888:	f3c0 0180 	ubfx	r1, r0, #2, #1
 800388c:	d548      	bpl.n	8003920 <HAL_I2C_EV_IRQHandler+0x4c0>
 800388e:	0550      	lsls	r0, r2, #21
 8003890:	d546      	bpl.n	8003920 <HAL_I2C_EV_IRQHandler+0x4c0>
 8003892:	2900      	cmp	r1, #0
 8003894:	d147      	bne.n	8003926 <HAL_I2C_EV_IRQHandler+0x4c6>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003896:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800389a:	2a22      	cmp	r2, #34	; 0x22
 800389c:	f47f adfc 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 80038a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038a2:	b292      	uxth	r2, r2
    if (tmp > 3U)
 80038a4:	2a03      	cmp	r2, #3
 80038a6:	d914      	bls.n	80038d2 <HAL_I2C_EV_IRQHandler+0x472>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038ac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80038ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038b0:	3301      	adds	r3, #1
 80038b2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80038b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80038bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	f47f ade9 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038c6:	6822      	ldr	r2, [r4, #0]
 80038c8:	6853      	ldr	r3, [r2, #4]
 80038ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ce:	6053      	str	r3, [r2, #4]
 80038d0:	e5e2      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80038d4:	2802      	cmp	r0, #2
 80038d6:	f43f addf 	beq.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 80038da:	2a01      	cmp	r2, #1
 80038dc:	f63f addc 	bhi.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ee:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038f4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80038f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038f8:	3301      	adds	r3, #1
 80038fa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80038fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29b      	uxth	r3, r3
 8003902:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003904:	2320      	movs	r3, #32
 8003906:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800390a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d168      	bne.n	80039e8 <HAL_I2C_EV_IRQHandler+0x588>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003916:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003918:	4620      	mov	r0, r4
 800391a:	f7ff fcc1 	bl	80032a0 <HAL_I2C_MemRxCpltCallback>
 800391e:	e5bb      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003920:	2900      	cmp	r1, #0
 8003922:	f43f adb9 	beq.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 8003926:	0592      	lsls	r2, r2, #22
 8003928:	f57f adb6 	bpl.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800392c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 800392e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003930:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003932:	b280      	uxth	r0, r0
 8003934:	2804      	cmp	r0, #4
 8003936:	d109      	bne.n	800394c <HAL_I2C_EV_IRQHandler+0x4ec>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393e:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003946:	3301      	adds	r3, #1
 8003948:	6263      	str	r3, [r4, #36]	; 0x24
 800394a:	e758      	b.n	80037fe <HAL_I2C_EV_IRQHandler+0x39e>
  else if (hi2c->XferCount == 3U)
 800394c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800394e:	b280      	uxth	r0, r0
 8003950:	2803      	cmp	r0, #3
 8003952:	d10c      	bne.n	800396e <HAL_I2C_EV_IRQHandler+0x50e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003954:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003956:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003958:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800395c:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800395e:	d0ef      	beq.n	8003940 <HAL_I2C_EV_IRQHandler+0x4e0>
 8003960:	2a02      	cmp	r2, #2
 8003962:	d0ed      	beq.n	8003940 <HAL_I2C_EV_IRQHandler+0x4e0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e7e8      	b.n	8003940 <HAL_I2C_EV_IRQHandler+0x4e0>
  else if (hi2c->XferCount == 2U)
 800396e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003970:	b280      	uxth	r0, r0
 8003972:	2802      	cmp	r0, #2
 8003974:	d1e4      	bne.n	8003940 <HAL_I2C_EV_IRQHandler+0x4e0>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003976:	2a01      	cmp	r2, #1
 8003978:	d001      	beq.n	800397e <HAL_I2C_EV_IRQHandler+0x51e>
 800397a:	2a10      	cmp	r2, #16
 800397c:	d128      	bne.n	80039d0 <HAL_I2C_EV_IRQHandler+0x570>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800398a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800398c:	1c53      	adds	r3, r2, #1
 800398e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003990:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003992:	3b01      	subs	r3, #1
 8003994:	b29b      	uxth	r3, r3
 8003996:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 800399e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039a0:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 80039a2:	3301      	adds	r3, #1
 80039a4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80039a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039ae:	6853      	ldr	r3, [r2, #4]
 80039b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	2320      	movs	r3, #32
 80039b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039bc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ca:	d10d      	bne.n	80039e8 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->PreviousState = I2C_STATE_NONE;
 80039cc:	6323      	str	r3, [r4, #48]	; 0x30
 80039ce:	e7a3      	b.n	8003918 <HAL_I2C_EV_IRQHandler+0x4b8>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80039d0:	2a04      	cmp	r2, #4
 80039d2:	d001      	beq.n	80039d8 <HAL_I2C_EV_IRQHandler+0x578>
 80039d4:	2a02      	cmp	r2, #2
 80039d6:	d103      	bne.n	80039e0 <HAL_I2C_EV_IRQHandler+0x580>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039de:	e7d1      	b.n	8003984 <HAL_I2C_EV_IRQHandler+0x524>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e6:	e7cd      	b.n	8003984 <HAL_I2C_EV_IRQHandler+0x524>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039e8:	2312      	movs	r3, #18
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039ea:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039ec:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039ee:	f7ff fc52 	bl	8003296 <HAL_I2C_MasterRxCpltCallback>
 80039f2:	e551      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80039f6:	b321      	cbz	r1, 8003a42 <HAL_I2C_EV_IRQHandler+0x5e2>
  uint32_t sr2itflags               = 0U;
 80039f8:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039fa:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039fc:	f011 0f02 	tst.w	r1, #2
 8003a00:	d029      	beq.n	8003a56 <HAL_I2C_EV_IRQHandler+0x5f6>
 8003a02:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003a06:	d026      	beq.n	8003a56 <HAL_I2C_EV_IRQHandler+0x5f6>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a0a:	b102      	cbz	r2, 8003a0e <HAL_I2C_EV_IRQHandler+0x5ae>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a0c:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a0e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003a12:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003a16:	2a28      	cmp	r2, #40	; 0x28
 8003a18:	d116      	bne.n	8003a48 <HAL_I2C_EV_IRQHandler+0x5e8>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a1a:	685a      	ldr	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a1c:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a24:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a26:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8003a28:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a2c:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a30:	bf54      	ite	pl
 8003a32:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a34:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8003a36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f7ff fc2d 	bl	800329a <HAL_I2C_AddrCallback>
 8003a40:	e52a      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a42:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a44:	6959      	ldr	r1, [r3, #20]
 8003a46:	e7d9      	b.n	80039fc <HAL_I2C_EV_IRQHandler+0x59c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a48:	f06f 0202 	mvn.w	r2, #2
 8003a4c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8003a54:	e520      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a56:	06cd      	lsls	r5, r1, #27
 8003a58:	f140 80b1 	bpl.w	8003bbe <HAL_I2C_EV_IRQHandler+0x75e>
 8003a5c:	0595      	lsls	r5, r2, #22
 8003a5e:	f140 80ae 	bpl.w	8003bbe <HAL_I2C_EV_IRQHandler+0x75e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a62:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a66:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a68:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a6e:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a70:	2200      	movs	r2, #0
 8003a72:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a88:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	0511      	lsls	r1, r2, #20
 8003a8e:	d520      	bpl.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x672>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a90:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8003a94:	2a22      	cmp	r2, #34	; 0x22
 8003a96:	d14a      	bne.n	8003b2e <HAL_I2C_EV_IRQHandler+0x6ce>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a9a:	6802      	ldr	r2, [r0, #0]
 8003a9c:	6852      	ldr	r2, [r2, #4]
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003aa2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003aa4:	b292      	uxth	r2, r2
 8003aa6:	b11a      	cbz	r2, 8003ab0 <HAL_I2C_EV_IRQHandler+0x650>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aa8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003aaa:	f042 0204 	orr.w	r2, r2, #4
 8003aae:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab6:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ab8:	f7fe fed6 	bl	8002868 <HAL_DMA_GetState>
 8003abc:	2801      	cmp	r0, #1
 8003abe:	d008      	beq.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x672>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ac0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003ac2:	4b79      	ldr	r3, [pc, #484]	; (8003ca8 <HAL_I2C_EV_IRQHandler+0x848>)
 8003ac4:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ac6:	f7fe fdf3 	bl	80026b0 <HAL_DMA_Abort_IT>
 8003aca:	b110      	cbz	r0, 8003ad2 <HAL_I2C_EV_IRQHandler+0x672>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003acc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ace:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ad0:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8003ad2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	b313      	cbz	r3, 8003b1e <HAL_I2C_EV_IRQHandler+0x6be>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	0752      	lsls	r2, r2, #29
 8003ade:	d509      	bpl.n	8003af4 <HAL_I2C_EV_IRQHandler+0x694>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ae4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ae8:	3301      	adds	r3, #1
 8003aea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003aec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	0650      	lsls	r0, r2, #25
 8003afa:	d509      	bpl.n	8003b10 <HAL_I2C_EV_IRQHandler+0x6b0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b00:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b04:	3301      	adds	r3, #1
 8003b06:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003b08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8003b10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b11b      	cbz	r3, 8003b1e <HAL_I2C_EV_IRQHandler+0x6be>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b20:	b313      	cbz	r3, 8003b68 <HAL_I2C_EV_IRQHandler+0x708>
    I2C_ITError(hi2c);
 8003b22:	4620      	mov	r0, r4
}
 8003b24:	b00d      	add	sp, #52	; 0x34
 8003b26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c);
 8003b2a:	f7ff bbf7 	b.w	800331c <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003b2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003b30:	6802      	ldr	r2, [r0, #0]
 8003b32:	6852      	ldr	r2, [r2, #4]
 8003b34:	b292      	uxth	r2, r2
 8003b36:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003b38:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b3a:	b292      	uxth	r2, r2
 8003b3c:	b11a      	cbz	r2, 8003b46 <HAL_I2C_EV_IRQHandler+0x6e6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b40:	f042 0204 	orr.w	r2, r2, #4
 8003b44:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b4e:	f7fe fe8b 	bl	8002868 <HAL_DMA_GetState>
 8003b52:	2801      	cmp	r0, #1
 8003b54:	d0bd      	beq.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x672>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b56:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003b58:	4b53      	ldr	r3, [pc, #332]	; (8003ca8 <HAL_I2C_EV_IRQHandler+0x848>)
 8003b5a:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b5c:	f7fe fda8 	bl	80026b0 <HAL_DMA_Abort_IT>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0b6      	beq.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x672>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b64:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003b66:	e7b2      	b.n	8003ace <HAL_I2C_EV_IRQHandler+0x66e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b68:	2d2a      	cmp	r5, #42	; 0x2a
 8003b6a:	d106      	bne.n	8003b7a <HAL_I2C_EV_IRQHandler+0x71a>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b6c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b6e:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b70:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b76:	f7fd faf5 	bl	8001164 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b7a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003b7e:	2b28      	cmp	r3, #40	; 0x28
 8003b80:	d10c      	bne.n	8003b9c <HAL_I2C_EV_IRQHandler+0x73c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b82:	4b4a      	ldr	r3, [pc, #296]	; (8003cac <HAL_I2C_EV_IRQHandler+0x84c>)
      hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b86:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b88:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b8a:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b8c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b96:	f7ff fb81 	bl	800329c <HAL_I2C_ListenCpltCallback>
 8003b9a:	e47d      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b9e:	2b22      	cmp	r3, #34	; 0x22
 8003ba0:	d002      	beq.n	8003ba8 <HAL_I2C_EV_IRQHandler+0x748>
 8003ba2:	2d22      	cmp	r5, #34	; 0x22
 8003ba4:	f47f ac78 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ba8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bac:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7fd fad4 	bl	8001164 <HAL_I2C_SlaveRxCpltCallback>
 8003bbc:	e46c      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bbe:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8003bc2:	2821      	cmp	r0, #33	; 0x21
 8003bc4:	f3c1 0580 	ubfx	r5, r1, #2, #1
 8003bc8:	d135      	bne.n	8003c36 <HAL_I2C_EV_IRQHandler+0x7d6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bca:	0609      	lsls	r1, r1, #24
 8003bcc:	d527      	bpl.n	8003c1e <HAL_I2C_EV_IRQHandler+0x7be>
 8003bce:	0551      	lsls	r1, r2, #21
 8003bd0:	d525      	bpl.n	8003c1e <HAL_I2C_EV_IRQHandler+0x7be>
 8003bd2:	bb3d      	cbnz	r5, 8003c24 <HAL_I2C_EV_IRQHandler+0x7c4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bd4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003bd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bda:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	f43f ac5a 	beq.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003be6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003bea:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8003bec:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003bee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	b292      	uxth	r2, r2
 8003bf4:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bf6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003bf8:	b292      	uxth	r2, r2
 8003bfa:	2a00      	cmp	r2, #0
 8003bfc:	f47f ac4c 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 8003c00:	2929      	cmp	r1, #41	; 0x29
 8003c02:	f47f ac49 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0c:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c0e:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c10:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c16:	4620      	mov	r0, r4
 8003c18:	f7ff fb3e 	bl	8003298 <HAL_I2C_SlaveTxCpltCallback>
 8003c1c:	e43c      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c1e:	2d00      	cmp	r5, #0
 8003c20:	f43f ac3a 	beq.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 8003c24:	0595      	lsls	r5, r2, #22
 8003c26:	f57f ac37 	bpl.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8003c2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c2c:	b292      	uxth	r2, r2
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	f47f ade0 	bne.w	80037f4 <HAL_I2C_EV_IRQHandler+0x394>
 8003c34:	e430      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c36:	0648      	lsls	r0, r1, #25
 8003c38:	d527      	bpl.n	8003c8a <HAL_I2C_EV_IRQHandler+0x82a>
 8003c3a:	0551      	lsls	r1, r2, #21
 8003c3c:	d525      	bpl.n	8003c8a <HAL_I2C_EV_IRQHandler+0x82a>
 8003c3e:	bb3d      	cbnz	r5, 8003c90 <HAL_I2C_EV_IRQHandler+0x830>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c40:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003c44:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c46:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8003c48:	b289      	uxth	r1, r1
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	f43f ac24 	beq.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c50:	6919      	ldr	r1, [r3, #16]
 8003c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c54:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8003c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c58:	3301      	adds	r3, #1
 8003c5a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003c5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f ac15 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 8003c6e:	2a2a      	cmp	r2, #42	; 0x2a
 8003c70:	f47f ac12 	bne.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	6853      	ldr	r3, [r2, #4]
 8003c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c7c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c7e:	2322      	movs	r3, #34	; 0x22
 8003c80:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c82:	2328      	movs	r3, #40	; 0x28
 8003c84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003c88:	e795      	b.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x756>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c8a:	2d00      	cmp	r5, #0
 8003c8c:	f43f ac04 	beq.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 8003c90:	0592      	lsls	r2, r2, #22
 8003c92:	f57f ac01 	bpl.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8003c96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	2a00      	cmp	r2, #0
 8003c9c:	f43f abfc 	beq.w	8003498 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e64d      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x4e4>
 8003ca8:	080032a7 	.word	0x080032a7
 8003cac:	ffff0000 	.word	0xffff0000

08003cb0 <HAL_I2C_ER_IRQHandler>:
{
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003cb2:	6803      	ldr	r3, [r0, #0]
{
 8003cb4:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003cb6:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003cb8:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cba:	f3c7 2500 	ubfx	r5, r7, #8, #1
 8003cbe:	b155      	cbz	r5, 8003cd6 <HAL_I2C_ER_IRQHandler+0x26>
 8003cc0:	f3c6 2500 	ubfx	r5, r6, #8, #1
 8003cc4:	b13d      	cbz	r5, 8003cd6 <HAL_I2C_ER_IRQHandler+0x26>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
    error |= HAL_I2C_ERROR_BERR;
 8003cca:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ccc:	615a      	str	r2, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd4:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cd6:	05b9      	lsls	r1, r7, #22
 8003cd8:	d506      	bpl.n	8003ce8 <HAL_I2C_ER_IRQHandler+0x38>
 8003cda:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cdc:	bf42      	ittt	mi
 8003cde:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8003ce2:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ce6:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ce8:	0578      	lsls	r0, r7, #21
 8003cea:	d537      	bpl.n	8003d5c <HAL_I2C_ER_IRQHandler+0xac>
 8003cec:	05f1      	lsls	r1, r6, #23
 8003cee:	d535      	bpl.n	8003d5c <HAL_I2C_ER_IRQHandler+0xac>
    tmp1 = hi2c->Mode;
 8003cf0:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8003cf4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8003cf6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003cfa:	f1bc 0f20 	cmp.w	ip, #32
    tmp2 = hi2c->XferCount;
 8003cfe:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8003d00:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8003d02:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d04:	d15a      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0x10c>
 8003d06:	2900      	cmp	r1, #0
 8003d08:	d158      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0x10c>
 8003d0a:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8003d0e:	2921      	cmp	r1, #33	; 0x21
 8003d10:	d003      	beq.n	8003d1a <HAL_I2C_ER_IRQHandler+0x6a>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d12:	2a28      	cmp	r2, #40	; 0x28
 8003d14:	d152      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0x10c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d16:	2821      	cmp	r0, #33	; 0x21
 8003d18:	d150      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0x10c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d1a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d20:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d22:	2908      	cmp	r1, #8
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_ER_IRQHandler+0x7a>
 8003d26:	2920      	cmp	r1, #32
 8003d28:	d12a      	bne.n	8003d80 <HAL_I2C_ER_IRQHandler+0xd0>
 8003d2a:	2a28      	cmp	r2, #40	; 0x28
 8003d2c:	d128      	bne.n	8003d80 <HAL_I2C_ER_IRQHandler+0xd0>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d2e:	4a2c      	ldr	r2, [pc, #176]	; (8003de0 <HAL_I2C_ER_IRQHandler+0x130>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d30:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d32:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d3a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d40:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d48:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d4a:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d4c:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d4e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d50:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d58:	f7ff faa0 	bl	800329c <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d5c:	053a      	lsls	r2, r7, #20
 8003d5e:	d53b      	bpl.n	8003dd8 <HAL_I2C_ER_IRQHandler+0x128>
 8003d60:	05f3      	lsls	r3, r6, #23
 8003d62:	d539      	bpl.n	8003dd8 <HAL_I2C_ER_IRQHandler+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d64:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003d68:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8003d6a:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d6e:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8003d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8003d72:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 8003d74:	431d      	orrs	r5, r3
 8003d76:	6425      	str	r5, [r4, #64]	; 0x40
}
 8003d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8003d7c:	f7ff bace 	b.w	800331c <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d80:	2a21      	cmp	r2, #33	; 0x21
 8003d82:	d117      	bne.n	8003db4 <HAL_I2C_ER_IRQHandler+0x104>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d84:	4916      	ldr	r1, [pc, #88]	; (8003de0 <HAL_I2C_ER_IRQHandler+0x130>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d86:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d88:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d8a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d92:	2200      	movs	r2, #0
 8003d94:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d9e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003da4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003dae:	f7ff fa73 	bl	8003298 <HAL_I2C_SlaveTxCpltCallback>
 8003db2:	e7d3      	b.n	8003d5c <HAL_I2C_ER_IRQHandler+0xac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003db8:	615a      	str	r2, [r3, #20]
 8003dba:	e7cf      	b.n	8003d5c <HAL_I2C_ER_IRQHandler+0xac>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dc0:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003dc2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
      error |= HAL_I2C_ERROR_AF;
 8003dc6:	f045 0504 	orr.w	r5, r5, #4
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003dca:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	bf02      	ittt	eq
 8003dce:	681a      	ldreq	r2, [r3, #0]
 8003dd0:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 8003dd4:	601a      	streq	r2, [r3, #0]
 8003dd6:	e7c1      	b.n	8003d5c <HAL_I2C_ER_IRQHandler+0xac>
  if (error != HAL_I2C_ERROR_NONE)
 8003dd8:	2d00      	cmp	r5, #0
 8003dda:	d1c9      	bne.n	8003d70 <HAL_I2C_ER_IRQHandler+0xc0>
}
 8003ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dde:	bf00      	nop
 8003de0:	ffff0000 	.word	0xffff0000

08003de4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003de4:	2201      	movs	r2, #1
 8003de6:	4b01      	ldr	r3, [pc, #4]	; (8003dec <HAL_PWR_EnableBkUpAccess+0x8>)
 8003de8:	601a      	str	r2, [r3, #0]
}
 8003dea:	4770      	bx	lr
 8003dec:	420e0020 	.word	0x420e0020

08003df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003df4:	4604      	mov	r4, r0
 8003df6:	b908      	cbnz	r0, 8003dfc <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8003df8:	2001      	movs	r0, #1
 8003dfa:	e059      	b.n	8003eb0 <HAL_RCC_OscConfig+0xc0>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003dfc:	6803      	ldr	r3, [r0, #0]
 8003dfe:	b133      	cbz	r3, 8003e0e <HAL_RCC_OscConfig+0x1e>
 8003e00:	071a      	lsls	r2, r3, #28
 8003e02:	d104      	bne.n	8003e0e <HAL_RCC_OscConfig+0x1e>
 8003e04:	f240 1167 	movw	r1, #359	; 0x167
 8003e08:	48a0      	ldr	r0, [pc, #640]	; (800408c <HAL_RCC_OscConfig+0x29c>)
 8003e0a:	f7fd fb67 	bl	80014dc <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	07db      	lsls	r3, r3, #31
 8003e12:	d418      	bmi.n	8003e46 <HAL_RCC_OscConfig+0x56>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	079f      	lsls	r7, r3, #30
 8003e18:	d471      	bmi.n	8003efe <HAL_RCC_OscConfig+0x10e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	0719      	lsls	r1, r3, #28
 8003e1e:	f100 80b9 	bmi.w	8003f94 <HAL_RCC_OscConfig+0x1a4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	075a      	lsls	r2, r3, #29
 8003e26:	f100 80eb 	bmi.w	8004000 <HAL_RCC_OscConfig+0x210>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003e2a:	69e3      	ldr	r3, [r4, #28]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d904      	bls.n	8003e3a <HAL_RCC_OscConfig+0x4a>
 8003e30:	f240 21af 	movw	r1, #687	; 0x2af
 8003e34:	4895      	ldr	r0, [pc, #596]	; (800408c <HAL_RCC_OscConfig+0x29c>)
 8003e36:	f7fd fb51 	bl	80014dc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3a:	69e0      	ldr	r0, [r4, #28]
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	f040 815d 	bne.w	80040fc <HAL_RCC_OscConfig+0x30c>
        }
      }
    }
  }

  return HAL_OK;
 8003e42:	2000      	movs	r0, #0
 8003e44:	e034      	b.n	8003eb0 <HAL_RCC_OscConfig+0xc0>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003e46:	6863      	ldr	r3, [r4, #4]
 8003e48:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8003e4c:	d007      	beq.n	8003e5e <HAL_RCC_OscConfig+0x6e>
 8003e4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e52:	d004      	beq.n	8003e5e <HAL_RCC_OscConfig+0x6e>
 8003e54:	f240 116d 	movw	r1, #365	; 0x16d
 8003e58:	488c      	ldr	r0, [pc, #560]	; (800408c <HAL_RCC_OscConfig+0x29c>)
 8003e5a:	f7fd fb3f 	bl	80014dc <assert_failed>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e5e:	4d8c      	ldr	r5, [pc, #560]	; (8004090 <HAL_RCC_OscConfig+0x2a0>)
 8003e60:	686b      	ldr	r3, [r5, #4]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d007      	beq.n	8003e7a <HAL_RCC_OscConfig+0x8a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e6a:	686b      	ldr	r3, [r5, #4]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d109      	bne.n	8003e88 <HAL_RCC_OscConfig+0x98>
 8003e74:	686b      	ldr	r3, [r5, #4]
 8003e76:	03de      	lsls	r6, r3, #15
 8003e78:	d506      	bpl.n	8003e88 <HAL_RCC_OscConfig+0x98>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	039d      	lsls	r5, r3, #14
 8003e7e:	d5c9      	bpl.n	8003e14 <HAL_RCC_OscConfig+0x24>
 8003e80:	6863      	ldr	r3, [r4, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1c6      	bne.n	8003e14 <HAL_RCC_OscConfig+0x24>
 8003e86:	e7b7      	b.n	8003df8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e88:	6863      	ldr	r3, [r4, #4]
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8e:	d112      	bne.n	8003eb6 <HAL_RCC_OscConfig+0xc6>
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e98:	f7fd ff28 	bl	8001cec <HAL_GetTick>
 8003e9c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	0398      	lsls	r0, r3, #14
 8003ea2:	d4b7      	bmi.n	8003e14 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea4:	f7fd ff22 	bl	8001cec <HAL_GetTick>
 8003ea8:	1b80      	subs	r0, r0, r6
 8003eaa:	2864      	cmp	r0, #100	; 0x64
 8003eac:	d9f7      	bls.n	8003e9e <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 8003eae:	2003      	movs	r0, #3
}
 8003eb0:	b002      	add	sp, #8
 8003eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb6:	b99b      	cbnz	r3, 8003ee0 <HAL_RCC_OscConfig+0xf0>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ec8:	f7fd ff10 	bl	8001cec <HAL_GetTick>
 8003ecc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	682b      	ldr	r3, [r5, #0]
 8003ed0:	0399      	lsls	r1, r3, #14
 8003ed2:	d59f      	bpl.n	8003e14 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fd ff0a 	bl	8001cec <HAL_GetTick>
 8003ed8:	1b80      	subs	r0, r0, r6
 8003eda:	2864      	cmp	r0, #100	; 0x64
 8003edc:	d9f7      	bls.n	8003ece <HAL_RCC_OscConfig+0xde>
 8003ede:	e7e6      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	d103      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x100>
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	e7cf      	b.n	8003e90 <HAL_RCC_OscConfig+0xa0>
 8003ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	682b      	ldr	r3, [r5, #0]
 8003ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efc:	e7cb      	b.n	8003e96 <HAL_RCC_OscConfig+0xa6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003efe:	6923      	ldr	r3, [r4, #16]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d904      	bls.n	8003f0e <HAL_RCC_OscConfig+0x11e>
 8003f04:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003f08:	4860      	ldr	r0, [pc, #384]	; (800408c <HAL_RCC_OscConfig+0x29c>)
 8003f0a:	f7fd fae7 	bl	80014dc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003f0e:	6963      	ldr	r3, [r4, #20]
 8003f10:	2b1f      	cmp	r3, #31
 8003f12:	d904      	bls.n	8003f1e <HAL_RCC_OscConfig+0x12e>
 8003f14:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003f18:	485c      	ldr	r0, [pc, #368]	; (800408c <HAL_RCC_OscConfig+0x29c>)
 8003f1a:	f7fd fadf 	bl	80014dc <assert_failed>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f1e:	4d5c      	ldr	r5, [pc, #368]	; (8004090 <HAL_RCC_OscConfig+0x2a0>)
 8003f20:	686b      	ldr	r3, [r5, #4]
 8003f22:	f013 0f0c 	tst.w	r3, #12
 8003f26:	d007      	beq.n	8003f38 <HAL_RCC_OscConfig+0x148>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f28:	686b      	ldr	r3, [r5, #4]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d111      	bne.n	8003f56 <HAL_RCC_OscConfig+0x166>
 8003f32:	686b      	ldr	r3, [r5, #4]
 8003f34:	03da      	lsls	r2, r3, #15
 8003f36:	d40e      	bmi.n	8003f56 <HAL_RCC_OscConfig+0x166>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	079b      	lsls	r3, r3, #30
 8003f3c:	d503      	bpl.n	8003f46 <HAL_RCC_OscConfig+0x156>
 8003f3e:	6923      	ldr	r3, [r4, #16]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	f47f af59 	bne.w	8003df8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f46:	682b      	ldr	r3, [r5, #0]
 8003f48:	6962      	ldr	r2, [r4, #20]
 8003f4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f4e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003f52:	602b      	str	r3, [r5, #0]
 8003f54:	e761      	b.n	8003e1a <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f56:	6922      	ldr	r2, [r4, #16]
 8003f58:	4b4e      	ldr	r3, [pc, #312]	; (8004094 <HAL_RCC_OscConfig+0x2a4>)
 8003f5a:	b16a      	cbz	r2, 8003f78 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_ENABLE();
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f60:	f7fd fec4 	bl	8001cec <HAL_GetTick>
 8003f64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	079f      	lsls	r7, r3, #30
 8003f6a:	d4ec      	bmi.n	8003f46 <HAL_RCC_OscConfig+0x156>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7fd febe 	bl	8001cec <HAL_GetTick>
 8003f70:	1b80      	subs	r0, r0, r6
 8003f72:	2802      	cmp	r0, #2
 8003f74:	d9f7      	bls.n	8003f66 <HAL_RCC_OscConfig+0x176>
 8003f76:	e79a      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_DISABLE();
 8003f78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f7a:	f7fd feb7 	bl	8001cec <HAL_GetTick>
 8003f7e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	0798      	lsls	r0, r3, #30
 8003f84:	f57f af49 	bpl.w	8003e1a <HAL_RCC_OscConfig+0x2a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f88:	f7fd feb0 	bl	8001cec <HAL_GetTick>
 8003f8c:	1b80      	subs	r0, r0, r6
 8003f8e:	2802      	cmp	r0, #2
 8003f90:	d9f6      	bls.n	8003f80 <HAL_RCC_OscConfig+0x190>
 8003f92:	e78c      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003f94:	69a3      	ldr	r3, [r4, #24]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d904      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x1b4>
 8003f9a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003f9e:	483b      	ldr	r0, [pc, #236]	; (800408c <HAL_RCC_OscConfig+0x29c>)
 8003fa0:	f7fd fa9c 	bl	80014dc <assert_failed>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fa4:	69a2      	ldr	r2, [r4, #24]
 8003fa6:	4d3a      	ldr	r5, [pc, #232]	; (8004090 <HAL_RCC_OscConfig+0x2a0>)
 8003fa8:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_RCC_OscConfig+0x2a8>)
 8003faa:	b1da      	cbz	r2, 8003fe4 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003fb0:	f7fd fe9c 	bl	8001cec <HAL_GetTick>
 8003fb4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fb8:	079b      	lsls	r3, r3, #30
 8003fba:	d50d      	bpl.n	8003fd8 <HAL_RCC_OscConfig+0x1e8>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fbc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003fc0:	4b36      	ldr	r3, [pc, #216]	; (800409c <HAL_RCC_OscConfig+0x2ac>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fc8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003fca:	bf00      	nop
  }
  while (Delay --);
 8003fcc:	9b01      	ldr	r3, [sp, #4]
 8003fce:	1e5a      	subs	r2, r3, #1
 8003fd0:	9201      	str	r2, [sp, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f9      	bne.n	8003fca <HAL_RCC_OscConfig+0x1da>
 8003fd6:	e724      	b.n	8003e22 <HAL_RCC_OscConfig+0x32>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd8:	f7fd fe88 	bl	8001cec <HAL_GetTick>
 8003fdc:	1b80      	subs	r0, r0, r6
 8003fde:	2802      	cmp	r0, #2
 8003fe0:	d9e9      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1c6>
 8003fe2:	e764      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_LSI_DISABLE();
 8003fe4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fe81 	bl	8001cec <HAL_GetTick>
 8003fea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fee:	079f      	lsls	r7, r3, #30
 8003ff0:	f57f af17 	bpl.w	8003e22 <HAL_RCC_OscConfig+0x32>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff4:	f7fd fe7a 	bl	8001cec <HAL_GetTick>
 8003ff8:	1b80      	subs	r0, r0, r6
 8003ffa:	2802      	cmp	r0, #2
 8003ffc:	d9f6      	bls.n	8003fec <HAL_RCC_OscConfig+0x1fc>
 8003ffe:	e756      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004000:	68e3      	ldr	r3, [r4, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d906      	bls.n	8004014 <HAL_RCC_OscConfig+0x224>
 8004006:	2b05      	cmp	r3, #5
 8004008:	d004      	beq.n	8004014 <HAL_RCC_OscConfig+0x224>
 800400a:	f240 2111 	movw	r1, #529	; 0x211
 800400e:	481f      	ldr	r0, [pc, #124]	; (800408c <HAL_RCC_OscConfig+0x29c>)
 8004010:	f7fd fa64 	bl	80014dc <assert_failed>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004014:	4d1e      	ldr	r5, [pc, #120]	; (8004090 <HAL_RCC_OscConfig+0x2a0>)
 8004016:	69eb      	ldr	r3, [r5, #28]
 8004018:	00d8      	lsls	r0, r3, #3
 800401a:	d424      	bmi.n	8004066 <HAL_RCC_OscConfig+0x276>
      pwrclkchanged = SET;
 800401c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800401e:	69eb      	ldr	r3, [r5, #28]
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004024:	61eb      	str	r3, [r5, #28]
 8004026:	69eb      	ldr	r3, [r5, #28]
 8004028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	4e1b      	ldr	r6, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x2b0>)
 8004032:	6833      	ldr	r3, [r6, #0]
 8004034:	05d9      	lsls	r1, r3, #23
 8004036:	d518      	bpl.n	800406a <HAL_RCC_OscConfig+0x27a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	68e3      	ldr	r3, [r4, #12]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d132      	bne.n	80040a4 <HAL_RCC_OscConfig+0x2b4>
 800403e:	6a2b      	ldr	r3, [r5, #32]
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004046:	f7fd fe51 	bl	8001cec <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800404e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004050:	6a2b      	ldr	r3, [r5, #32]
 8004052:	079b      	lsls	r3, r3, #30
 8004054:	d54b      	bpl.n	80040ee <HAL_RCC_OscConfig+0x2fe>
    if (pwrclkchanged == SET)
 8004056:	2f00      	cmp	r7, #0
 8004058:	f43f aee7 	beq.w	8003e2a <HAL_RCC_OscConfig+0x3a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800405c:	69eb      	ldr	r3, [r5, #28]
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004062:	61eb      	str	r3, [r5, #28]
 8004064:	e6e1      	b.n	8003e2a <HAL_RCC_OscConfig+0x3a>
    FlagStatus       pwrclkchanged = RESET;
 8004066:	2700      	movs	r7, #0
 8004068:	e7e2      	b.n	8004030 <HAL_RCC_OscConfig+0x240>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406a:	6833      	ldr	r3, [r6, #0]
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004072:	f7fd fe3b 	bl	8001cec <HAL_GetTick>
 8004076:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	6833      	ldr	r3, [r6, #0]
 800407a:	05da      	lsls	r2, r3, #23
 800407c:	d4dc      	bmi.n	8004038 <HAL_RCC_OscConfig+0x248>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407e:	f7fd fe35 	bl	8001cec <HAL_GetTick>
 8004082:	eba0 0008 	sub.w	r0, r0, r8
 8004086:	2864      	cmp	r0, #100	; 0x64
 8004088:	d9f6      	bls.n	8004078 <HAL_RCC_OscConfig+0x288>
 800408a:	e710      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
 800408c:	08005cdf 	.word	0x08005cdf
 8004090:	40021000 	.word	0x40021000
 8004094:	42420000 	.word	0x42420000
 8004098:	42420480 	.word	0x42420480
 800409c:	200000e0 	.word	0x200000e0
 80040a0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a4:	b9ab      	cbnz	r3, 80040d2 <HAL_RCC_OscConfig+0x2e2>
 80040a6:	6a2b      	ldr	r3, [r5, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	622b      	str	r3, [r5, #32]
 80040b2:	6a2b      	ldr	r3, [r5, #32]
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80040ba:	f7fd fe17 	bl	8001cec <HAL_GetTick>
 80040be:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c0:	6a2b      	ldr	r3, [r5, #32]
 80040c2:	0798      	lsls	r0, r3, #30
 80040c4:	d5c7      	bpl.n	8004056 <HAL_RCC_OscConfig+0x266>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fd fe11 	bl	8001cec <HAL_GetTick>
 80040ca:	1b80      	subs	r0, r0, r6
 80040cc:	4540      	cmp	r0, r8
 80040ce:	d9f7      	bls.n	80040c0 <HAL_RCC_OscConfig+0x2d0>
 80040d0:	e6ed      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	6a2b      	ldr	r3, [r5, #32]
 80040d6:	d103      	bne.n	80040e0 <HAL_RCC_OscConfig+0x2f0>
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	622b      	str	r3, [r5, #32]
 80040de:	e7ae      	b.n	800403e <HAL_RCC_OscConfig+0x24e>
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	622b      	str	r3, [r5, #32]
 80040e6:	6a2b      	ldr	r3, [r5, #32]
 80040e8:	f023 0304 	bic.w	r3, r3, #4
 80040ec:	e7aa      	b.n	8004044 <HAL_RCC_OscConfig+0x254>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fd fdfd 	bl	8001cec <HAL_GetTick>
 80040f2:	eba0 0008 	sub.w	r0, r0, r8
 80040f6:	42b0      	cmp	r0, r6
 80040f8:	d9aa      	bls.n	8004050 <HAL_RCC_OscConfig+0x260>
 80040fa:	e6d8      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040fc:	4b40      	ldr	r3, [pc, #256]	; (8004200 <HAL_RCC_OscConfig+0x410>)
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	461d      	mov	r5, r3
 8004102:	f002 020c 	and.w	r2, r2, #12
 8004106:	2a08      	cmp	r2, #8
 8004108:	d069      	beq.n	80041de <HAL_RCC_OscConfig+0x3ee>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410a:	2802      	cmp	r0, #2
 800410c:	4e3d      	ldr	r6, [pc, #244]	; (8004204 <HAL_RCC_OscConfig+0x414>)
 800410e:	d157      	bne.n	80041c0 <HAL_RCC_OscConfig+0x3d0>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004110:	6a23      	ldr	r3, [r4, #32]
 8004112:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8004116:	d004      	beq.n	8004122 <HAL_RCC_OscConfig+0x332>
 8004118:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800411c:	483a      	ldr	r0, [pc, #232]	; (8004208 <HAL_RCC_OscConfig+0x418>)
 800411e:	f7fd f9dd 	bl	80014dc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004124:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8004128:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800412c:	d010      	beq.n	8004150 <HAL_RCC_OscConfig+0x360>
 800412e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004132:	d00d      	beq.n	8004150 <HAL_RCC_OscConfig+0x360>
 8004134:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8004138:	d00a      	beq.n	8004150 <HAL_RCC_OscConfig+0x360>
 800413a:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800413e:	d007      	beq.n	8004150 <HAL_RCC_OscConfig+0x360>
 8004140:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004144:	d004      	beq.n	8004150 <HAL_RCC_OscConfig+0x360>
 8004146:	f240 21b9 	movw	r1, #697	; 0x2b9
 800414a:	482f      	ldr	r0, [pc, #188]	; (8004208 <HAL_RCC_OscConfig+0x418>)
 800414c:	f7fd f9c6 	bl	80014dc <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8004150:	2300      	movs	r3, #0
 8004152:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004154:	f7fd fdca 	bl	8001cec <HAL_GetTick>
 8004158:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415a:	682b      	ldr	r3, [r5, #0]
 800415c:	0199      	lsls	r1, r3, #6
 800415e:	d429      	bmi.n	80041b4 <HAL_RCC_OscConfig+0x3c4>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004160:	6a23      	ldr	r3, [r4, #32]
 8004162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004166:	d10e      	bne.n	8004186 <HAL_RCC_OscConfig+0x396>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004168:	68a3      	ldr	r3, [r4, #8]
 800416a:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800416e:	d004      	beq.n	800417a <HAL_RCC_OscConfig+0x38a>
 8004170:	f240 21cf 	movw	r1, #719	; 0x2cf
 8004174:	4824      	ldr	r0, [pc, #144]	; (8004208 <HAL_RCC_OscConfig+0x418>)
 8004176:	f7fd f9b1 	bl	80014dc <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800417a:	686b      	ldr	r3, [r5, #4]
 800417c:	68a2      	ldr	r2, [r4, #8]
 800417e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004182:	4313      	orrs	r3, r2
 8004184:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004186:	686a      	ldr	r2, [r5, #4]
 8004188:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 800418c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004190:	430b      	orrs	r3, r1
 8004192:	4313      	orrs	r3, r2
 8004194:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004196:	2301      	movs	r3, #1
 8004198:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800419a:	f7fd fda7 	bl	8001cec <HAL_GetTick>
 800419e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	019a      	lsls	r2, r3, #6
 80041a4:	f53f ae4d 	bmi.w	8003e42 <HAL_RCC_OscConfig+0x52>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fd fda0 	bl	8001cec <HAL_GetTick>
 80041ac:	1b00      	subs	r0, r0, r4
 80041ae:	2802      	cmp	r0, #2
 80041b0:	d9f6      	bls.n	80041a0 <HAL_RCC_OscConfig+0x3b0>
 80041b2:	e67c      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fd fd9a 	bl	8001cec <HAL_GetTick>
 80041b8:	1bc0      	subs	r0, r0, r7
 80041ba:	2802      	cmp	r0, #2
 80041bc:	d9cd      	bls.n	800415a <HAL_RCC_OscConfig+0x36a>
 80041be:	e676      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_PLL_DISABLE();
 80041c0:	2300      	movs	r3, #0
 80041c2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80041c4:	f7fd fd92 	bl	8001cec <HAL_GetTick>
 80041c8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ca:	682b      	ldr	r3, [r5, #0]
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	f57f ae38 	bpl.w	8003e42 <HAL_RCC_OscConfig+0x52>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fd fd8b 	bl	8001cec <HAL_GetTick>
 80041d6:	1b00      	subs	r0, r0, r4
 80041d8:	2802      	cmp	r0, #2
 80041da:	d9f6      	bls.n	80041ca <HAL_RCC_OscConfig+0x3da>
 80041dc:	e667      	b.n	8003eae <HAL_RCC_OscConfig+0xbe>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041de:	2801      	cmp	r0, #1
 80041e0:	f43f ae66 	beq.w	8003eb0 <HAL_RCC_OscConfig+0xc0>
        pll_config = RCC->CFGR;
 80041e4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	6a23      	ldr	r3, [r4, #32]
 80041e8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80041ec:	429a      	cmp	r2, r3
 80041ee:	f47f ae03 	bne.w	8003df8 <HAL_RCC_OscConfig+0x8>
 80041f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041f4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80041f8:	1ac0      	subs	r0, r0, r3
 80041fa:	bf18      	it	ne
 80041fc:	2001      	movne	r0, #1
 80041fe:	e657      	b.n	8003eb0 <HAL_RCC_OscConfig+0xc0>
 8004200:	40021000 	.word	0x40021000
 8004204:	42420060 	.word	0x42420060
 8004208:	08005cdf 	.word	0x08005cdf

0800420c <HAL_RCC_GetSysClockFreq>:
{
 800420c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800420e:	4b18      	ldr	r3, [pc, #96]	; (8004270 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8004210:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004212:	ac02      	add	r4, sp, #8
 8004214:	f103 0510 	add.w	r5, r3, #16
 8004218:	4622      	mov	r2, r4
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	3308      	adds	r3, #8
 8004220:	c203      	stmia	r2!, {r0, r1}
 8004222:	42ab      	cmp	r3, r5
 8004224:	4614      	mov	r4, r2
 8004226:	d1f7      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004228:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800422c:	4911      	ldr	r1, [pc, #68]	; (8004274 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800422e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8004232:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004234:	f003 020c 	and.w	r2, r3, #12
 8004238:	2a08      	cmp	r2, #8
 800423a:	d117      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800423c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004240:	a806      	add	r0, sp, #24
 8004242:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004244:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004246:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800424a:	d50c      	bpl.n	8004266 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800424c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800424e:	480a      	ldr	r0, [pc, #40]	; (8004278 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004250:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004254:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004256:	aa06      	add	r2, sp, #24
 8004258:	4413      	add	r3, r2
 800425a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800425e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004262:	b007      	add	sp, #28
 8004264:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004266:	4805      	ldr	r0, [pc, #20]	; (800427c <HAL_RCC_GetSysClockFreq+0x70>)
 8004268:	4350      	muls	r0, r2
 800426a:	e7fa      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800426c:	4802      	ldr	r0, [pc, #8]	; (8004278 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800426e:	e7f8      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x56>
 8004270:	08005af8 	.word	0x08005af8
 8004274:	40021000 	.word	0x40021000
 8004278:	007a1200 	.word	0x007a1200
 800427c:	003d0900 	.word	0x003d0900

08004280 <HAL_RCC_ClockConfig>:
{
 8004280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004284:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004286:	4604      	mov	r4, r0
 8004288:	b910      	cbnz	r0, 8004290 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800428a:	2001      	movs	r0, #1
}
 800428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004290:	6803      	ldr	r3, [r0, #0]
 8004292:	071e      	lsls	r6, r3, #28
 8004294:	d104      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x20>
 8004296:	f44f 714e 	mov.w	r1, #824	; 0x338
 800429a:	486d      	ldr	r0, [pc, #436]	; (8004450 <HAL_RCC_ClockConfig+0x1d0>)
 800429c:	f7fd f91e 	bl	80014dc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80042a0:	2d02      	cmp	r5, #2
 80042a2:	d904      	bls.n	80042ae <HAL_RCC_ClockConfig+0x2e>
 80042a4:	f240 3139 	movw	r1, #825	; 0x339
 80042a8:	4869      	ldr	r0, [pc, #420]	; (8004450 <HAL_RCC_ClockConfig+0x1d0>)
 80042aa:	f7fd f917 	bl	80014dc <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042ae:	4a69      	ldr	r2, [pc, #420]	; (8004454 <HAL_RCC_ClockConfig+0x1d4>)
 80042b0:	6813      	ldr	r3, [r2, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	42ab      	cmp	r3, r5
 80042b8:	d33d      	bcc.n	8004336 <HAL_RCC_ClockConfig+0xb6>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	0798      	lsls	r0, r3, #30
 80042be:	d445      	bmi.n	800434c <HAL_RCC_ClockConfig+0xcc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	07da      	lsls	r2, r3, #31
 80042c4:	d46e      	bmi.n	80043a4 <HAL_RCC_ClockConfig+0x124>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042c6:	4a63      	ldr	r2, [pc, #396]	; (8004454 <HAL_RCC_ClockConfig+0x1d4>)
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	42ab      	cmp	r3, r5
 80042d0:	f200 809a 	bhi.w	8004408 <HAL_RCC_ClockConfig+0x188>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	4d60      	ldr	r5, [pc, #384]	; (8004458 <HAL_RCC_ClockConfig+0x1d8>)
 80042d8:	f013 0f04 	tst.w	r3, #4
 80042dc:	f040 80a0 	bne.w	8004420 <HAL_RCC_ClockConfig+0x1a0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	071b      	lsls	r3, r3, #28
 80042e4:	d517      	bpl.n	8004316 <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80042e6:	6923      	ldr	r3, [r4, #16]
 80042e8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80042ec:	d00c      	beq.n	8004308 <HAL_RCC_ClockConfig+0x88>
 80042ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042f2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80042f6:	d007      	beq.n	8004308 <HAL_RCC_ClockConfig+0x88>
 80042f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042fc:	d004      	beq.n	8004308 <HAL_RCC_ClockConfig+0x88>
 80042fe:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004302:	4853      	ldr	r0, [pc, #332]	; (8004450 <HAL_RCC_ClockConfig+0x1d0>)
 8004304:	f7fd f8ea 	bl	80014dc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004308:	686b      	ldr	r3, [r5, #4]
 800430a:	6922      	ldr	r2, [r4, #16]
 800430c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004310:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004314:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004316:	f7ff ff79 	bl	800420c <HAL_RCC_GetSysClockFreq>
 800431a:	686b      	ldr	r3, [r5, #4]
 800431c:	4a4f      	ldr	r2, [pc, #316]	; (800445c <HAL_RCC_ClockConfig+0x1dc>)
 800431e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004322:	5cd3      	ldrb	r3, [r2, r3]
 8004324:	40d8      	lsrs	r0, r3
 8004326:	4b4e      	ldr	r3, [pc, #312]	; (8004460 <HAL_RCC_ClockConfig+0x1e0>)
 8004328:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800432a:	4b4e      	ldr	r3, [pc, #312]	; (8004464 <HAL_RCC_ClockConfig+0x1e4>)
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	f7fd fc9b 	bl	8001c68 <HAL_InitTick>
  return HAL_OK;
 8004332:	2000      	movs	r0, #0
 8004334:	e7aa      	b.n	800428c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	f023 0307 	bic.w	r3, r3, #7
 800433c:	432b      	orrs	r3, r5
 800433e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004340:	6813      	ldr	r3, [r2, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	42ab      	cmp	r3, r5
 8004348:	d19f      	bne.n	800428a <HAL_RCC_ClockConfig+0xa>
 800434a:	e7b6      	b.n	80042ba <HAL_RCC_ClockConfig+0x3a>
 800434c:	4e42      	ldr	r6, [pc, #264]	; (8004458 <HAL_RCC_ClockConfig+0x1d8>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434e:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004352:	bf1e      	ittt	ne
 8004354:	6872      	ldrne	r2, [r6, #4]
 8004356:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800435a:	6072      	strne	r2, [r6, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800435e:	bf42      	ittt	mi
 8004360:	6873      	ldrmi	r3, [r6, #4]
 8004362:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8004366:	6073      	strmi	r3, [r6, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004368:	68a3      	ldr	r3, [r4, #8]
 800436a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 800436e:	d012      	beq.n	8004396 <HAL_RCC_ClockConfig+0x116>
 8004370:	f023 0220 	bic.w	r2, r3, #32
 8004374:	2a90      	cmp	r2, #144	; 0x90
 8004376:	d00e      	beq.n	8004396 <HAL_RCC_ClockConfig+0x116>
 8004378:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800437c:	2aa0      	cmp	r2, #160	; 0xa0
 800437e:	d00a      	beq.n	8004396 <HAL_RCC_ClockConfig+0x116>
 8004380:	f023 0210 	bic.w	r2, r3, #16
 8004384:	2ac0      	cmp	r2, #192	; 0xc0
 8004386:	d006      	beq.n	8004396 <HAL_RCC_ClockConfig+0x116>
 8004388:	2bf0      	cmp	r3, #240	; 0xf0
 800438a:	d004      	beq.n	8004396 <HAL_RCC_ClockConfig+0x116>
 800438c:	f240 315f 	movw	r1, #863	; 0x35f
 8004390:	482f      	ldr	r0, [pc, #188]	; (8004450 <HAL_RCC_ClockConfig+0x1d0>)
 8004392:	f7fd f8a3 	bl	80014dc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004396:	6873      	ldr	r3, [r6, #4]
 8004398:	68a2      	ldr	r2, [r4, #8]
 800439a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800439e:	4313      	orrs	r3, r2
 80043a0:	6073      	str	r3, [r6, #4]
 80043a2:	e78d      	b.n	80042c0 <HAL_RCC_ClockConfig+0x40>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80043a4:	6863      	ldr	r3, [r4, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d904      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x134>
 80043aa:	f240 3166 	movw	r1, #870	; 0x366
 80043ae:	4828      	ldr	r0, [pc, #160]	; (8004450 <HAL_RCC_ClockConfig+0x1d0>)
 80043b0:	f7fd f894 	bl	80014dc <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b4:	6862      	ldr	r2, [r4, #4]
 80043b6:	4e28      	ldr	r6, [pc, #160]	; (8004458 <HAL_RCC_ClockConfig+0x1d8>)
 80043b8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043bc:	d11c      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x178>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	f43f af62 	beq.w	800428a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043c6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043cc:	f023 0303 	bic.w	r3, r3, #3
 80043d0:	4313      	orrs	r3, r2
 80043d2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80043d4:	f7fd fc8a 	bl	8001cec <HAL_GetTick>
 80043d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043da:	6873      	ldr	r3, [r6, #4]
 80043dc:	6862      	ldr	r2, [r4, #4]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043e6:	f43f af6e 	beq.w	80042c6 <HAL_RCC_ClockConfig+0x46>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ea:	f7fd fc7f 	bl	8001cec <HAL_GetTick>
 80043ee:	1bc0      	subs	r0, r0, r7
 80043f0:	4540      	cmp	r0, r8
 80043f2:	d9f2      	bls.n	80043da <HAL_RCC_ClockConfig+0x15a>
        return HAL_TIMEOUT;
 80043f4:	2003      	movs	r0, #3
 80043f6:	e749      	b.n	800428c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043f8:	2a02      	cmp	r2, #2
 80043fa:	d102      	bne.n	8004402 <HAL_RCC_ClockConfig+0x182>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004400:	e7df      	b.n	80043c2 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004402:	f013 0f02 	tst.w	r3, #2
 8004406:	e7dc      	b.n	80043c2 <HAL_RCC_ClockConfig+0x142>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004408:	6813      	ldr	r3, [r2, #0]
 800440a:	f023 0307 	bic.w	r3, r3, #7
 800440e:	432b      	orrs	r3, r5
 8004410:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004412:	6813      	ldr	r3, [r2, #0]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	42ab      	cmp	r3, r5
 800441a:	f47f af36 	bne.w	800428a <HAL_RCC_ClockConfig+0xa>
 800441e:	e759      	b.n	80042d4 <HAL_RCC_ClockConfig+0x54>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004420:	68e3      	ldr	r3, [r4, #12]
 8004422:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8004426:	d00c      	beq.n	8004442 <HAL_RCC_ClockConfig+0x1c2>
 8004428:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800442c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8004430:	d007      	beq.n	8004442 <HAL_RCC_ClockConfig+0x1c2>
 8004432:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004436:	d004      	beq.n	8004442 <HAL_RCC_ClockConfig+0x1c2>
 8004438:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800443c:	4804      	ldr	r0, [pc, #16]	; (8004450 <HAL_RCC_ClockConfig+0x1d0>)
 800443e:	f7fd f84d 	bl	80014dc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004442:	686b      	ldr	r3, [r5, #4]
 8004444:	68e2      	ldr	r2, [r4, #12]
 8004446:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800444a:	4313      	orrs	r3, r2
 800444c:	606b      	str	r3, [r5, #4]
 800444e:	e747      	b.n	80042e0 <HAL_RCC_ClockConfig+0x60>
 8004450:	08005cdf 	.word	0x08005cdf
 8004454:	40022000 	.word	0x40022000
 8004458:	40021000 	.word	0x40021000
 800445c:	08005bab 	.word	0x08005bab
 8004460:	200000e0 	.word	0x200000e0
 8004464:	200000e8 	.word	0x200000e8

08004468 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <HAL_RCC_GetPCLK1Freq+0x14>)
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x18>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004472:	5cd3      	ldrb	r3, [r2, r3]
 8004474:	4a03      	ldr	r2, [pc, #12]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004476:	6810      	ldr	r0, [r2, #0]
}
 8004478:	40d8      	lsrs	r0, r3
 800447a:	4770      	bx	lr
 800447c:	40021000 	.word	0x40021000
 8004480:	08005bbb 	.word	0x08005bbb
 8004484:	200000e0 	.word	0x200000e0

08004488 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <HAL_RCC_GetPCLK2Freq+0x14>)
 800448a:	4a05      	ldr	r2, [pc, #20]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004492:	5cd3      	ldrb	r3, [r2, r3]
 8004494:	4a03      	ldr	r2, [pc, #12]	; (80044a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004496:	6810      	ldr	r0, [r2, #0]
}
 8004498:	40d8      	lsrs	r0, r3
 800449a:	4770      	bx	lr
 800449c:	40021000 	.word	0x40021000
 80044a0:	08005bbb 	.word	0x08005bbb
 80044a4:	200000e0 	.word	0x200000e0

080044a8 <HAL_RCCEx_PeriphCLKConfig>:
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80044a8:	6803      	ldr	r3, [r0, #0]
{
 80044aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80044ae:	f013 0f13 	tst.w	r3, #19
{
 80044b2:	4605      	mov	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80044b4:	d103      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x16>
 80044b6:	216c      	movs	r1, #108	; 0x6c
 80044b8:	4845      	ldr	r0, [pc, #276]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80044ba:	f7fd f80f 	bl	80014dc <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044be:	682b      	ldr	r3, [r5, #0]
 80044c0:	07d9      	lsls	r1, r3, #31
 80044c2:	d528      	bpl.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80044c4:	686b      	ldr	r3, [r5, #4]
 80044c6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80044ca:	d003      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 80044cc:	2172      	movs	r1, #114	; 0x72
 80044ce:	4840      	ldr	r0, [pc, #256]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80044d0:	f7fd f804 	bl	80014dc <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d4:	4c3f      	ldr	r4, [pc, #252]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80044d6:	69e3      	ldr	r3, [r4, #28]
 80044d8:	00da      	lsls	r2, r3, #3
 80044da:	d444      	bmi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80044dc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	69e3      	ldr	r3, [r4, #28]
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	61e3      	str	r3, [r4, #28]
 80044e6:	69e3      	ldr	r3, [r4, #28]
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	4e39      	ldr	r6, [pc, #228]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f2:	6833      	ldr	r3, [r6, #0]
 80044f4:	05db      	lsls	r3, r3, #23
 80044f6:	d538      	bpl.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044f8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044fa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80044fe:	d148      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004500:	6a23      	ldr	r3, [r4, #32]
 8004502:	686a      	ldr	r2, [r5, #4]
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	4313      	orrs	r3, r2
 800450a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800450c:	b11f      	cbz	r7, 8004516 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450e:	69e3      	ldr	r3, [r4, #28]
 8004510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004514:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	079b      	lsls	r3, r3, #30
 800451a:	d50e      	bpl.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800451c:	68ab      	ldr	r3, [r5, #8]
 800451e:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8004522:	d003      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x84>
 8004524:	21b9      	movs	r1, #185	; 0xb9
 8004526:	482a      	ldr	r0, [pc, #168]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004528:	f7fc ffd8 	bl	80014dc <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800452c:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800452e:	68a9      	ldr	r1, [r5, #8]
 8004530:	6853      	ldr	r3, [r2, #4]
 8004532:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004536:	430b      	orrs	r3, r1
 8004538:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800453a:	6828      	ldr	r0, [r5, #0]
 800453c:	f010 0010 	ands.w	r0, r0, #16
 8004540:	d024      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004542:	68eb      	ldr	r3, [r5, #12]
 8004544:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8004548:	d004      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800454a:	f240 1115 	movw	r1, #277	; 0x115
 800454e:	4820      	ldr	r0, [pc, #128]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004550:	f7fc ffc4 	bl	80014dc <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004554:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8004556:	68e9      	ldr	r1, [r5, #12]
 8004558:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800455a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800455c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004560:	430b      	orrs	r3, r1
 8004562:	6053      	str	r3, [r2, #4]
 8004564:	e012      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    FlagStatus       pwrclkchanged = RESET;
 8004566:	2700      	movs	r7, #0
 8004568:	e7c2      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456a:	6833      	ldr	r3, [r6, #0]
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004572:	f7fd fbbb 	bl	8001cec <HAL_GetTick>
 8004576:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004578:	6833      	ldr	r3, [r6, #0]
 800457a:	05d8      	lsls	r0, r3, #23
 800457c:	d4bc      	bmi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7fd fbb5 	bl	8001cec <HAL_GetTick>
 8004582:	eba0 0008 	sub.w	r0, r0, r8
 8004586:	2864      	cmp	r0, #100	; 0x64
 8004588:	d9f6      	bls.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          return HAL_TIMEOUT;
 800458a:	2003      	movs	r0, #3
}
 800458c:	b002      	add	sp, #8
 800458e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004592:	686a      	ldr	r2, [r5, #4]
 8004594:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004598:	429a      	cmp	r2, r3
 800459a:	d0b1      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 800459c:	2001      	movs	r0, #1
 800459e:	4a0f      	ldr	r2, [pc, #60]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80045a2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045a4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045aa:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80045ac:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045ae:	07d9      	lsls	r1, r3, #31
 80045b0:	d5a6      	bpl.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 80045b2:	f7fd fb9b 	bl	8001cec <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80045ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045bc:	6a23      	ldr	r3, [r4, #32]
 80045be:	079a      	lsls	r2, r3, #30
 80045c0:	d49e      	bmi.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fd fb93 	bl	8001cec <HAL_GetTick>
 80045c6:	1b80      	subs	r0, r0, r6
 80045c8:	4540      	cmp	r0, r8
 80045ca:	d9f7      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x114>
 80045cc:	e7dd      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045ce:	bf00      	nop
 80045d0:	08005d17 	.word	0x08005d17
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40007000 	.word	0x40007000
 80045dc:	42420440 	.word	0x42420440

080045e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045e4:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
{
 80045e6:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045e8:	ad02      	add	r5, sp, #8
 80045ea:	f103 0610 	add.w	r6, r3, #16
 80045ee:	462a      	mov	r2, r5
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	3308      	adds	r3, #8
 80045f6:	c203      	stmia	r2!, {r0, r1}
 80045f8:	42b3      	cmp	r3, r6
 80045fa:	4615      	mov	r5, r2
 80045fc:	d1f7      	bne.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045fe:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004602:	f014 0f13 	tst.w	r4, #19
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004606:	f8ad 3004 	strh.w	r3, [sp, #4]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 800460a:	d104      	bne.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800460c:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004610:	482e      	ldr	r0, [pc, #184]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004612:	f7fc ff63 	bl	80014dc <assert_failed>

  switch (PeriphClk)
 8004616:	2c02      	cmp	r4, #2
 8004618:	d047      	beq.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800461a:	2c10      	cmp	r4, #16
 800461c:	d017      	beq.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 800461e:	2c01      	cmp	r4, #1
 8004620:	d14f      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004622:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8004626:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8004628:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800462a:	4019      	ands	r1, r3
 800462c:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8004630:	d044      	beq.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463a:	d12d      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        frequency = LSI_VALUE;
 800463c:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004640:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8004642:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8004646:	bf08      	it	eq
 8004648:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 800464a:	b006      	add	sp, #24
 800464c:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 800464e:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8004650:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004658:	d0f7      	beq.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800465a:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800465e:	a806      	add	r0, sp, #24
 8004660:	4402      	add	r2, r0
 8004662:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004666:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004668:	bf41      	itttt	mi
 800466a:	685a      	ldrmi	r2, [r3, #4]
 800466c:	a906      	addmi	r1, sp, #24
 800466e:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8004672:	1852      	addmi	r2, r2, r1
 8004674:	bf44      	itt	mi
 8004676:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800467a:	4a16      	ldrmi	r2, [pc, #88]	; (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800467c:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800467e:	bf4c      	ite	mi
 8004680:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004684:	4a14      	ldrpl	r2, [pc, #80]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004686:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004688:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800468c:	d4dd      	bmi.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          frequency = (pllclk * 2) / 3;
 800468e:	2303      	movs	r3, #3
 8004690:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004692:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004696:	e7d8      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469c:	d111      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800469e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80046a0:	f24f 4024 	movw	r0, #62500	; 0xf424
 80046a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80046a8:	e7cd      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80046aa:	f7ff feed 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80046b6:	3301      	adds	r3, #1
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	e7ea      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
        frequency = LSE_VALUE;
 80046bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80046c0:	e7c3      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  uint32_t temp_reg = 0U, frequency = 0U;
 80046c2:	2000      	movs	r0, #0
 80046c4:	e7c1      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80046c6:	bf00      	nop
 80046c8:	08005b08 	.word	0x08005b08
 80046cc:	08005d17 	.word	0x08005d17
 80046d0:	40021000 	.word	0x40021000
 80046d4:	007a1200 	.word	0x007a1200
 80046d8:	003d0900 	.word	0x003d0900

080046dc <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80046dc:	6803      	ldr	r3, [r0, #0]
{
 80046de:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80046e0:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80046e2:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80046e4:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80046e6:	b295      	uxth	r5, r2
 80046e8:	b28c      	uxth	r4, r1
 80046ea:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80046ec:	bf17      	itett	ne
 80046ee:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80046f0:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80046f2:	b280      	uxthne	r0, r0
 80046f4:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 80046f8:	bf08      	it	eq
 80046fa:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 80046fe:	bd30      	pop	{r4, r5, pc}

08004700 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004700:	6803      	ldr	r3, [r0, #0]
 8004702:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8004706:	b29b      	uxth	r3, r3
}
 8004708:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800470c:	4770      	bx	lr

0800470e <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800470e:	2300      	movs	r3, #0

  while (Value >= 10U)
 8004710:	2809      	cmp	r0, #9
 8004712:	d803      	bhi.n	800471c <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004714:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004718:	b2c0      	uxtb	r0, r0
 800471a:	4770      	bx	lr
    Value -= 10U;
 800471c:	380a      	subs	r0, #10
    bcdhigh++;
 800471e:	3301      	adds	r3, #1
    Value -= 10U;
 8004720:	b2c0      	uxtb	r0, r0
 8004722:	e7f5      	b.n	8004710 <RTC_ByteToBcd2+0x2>

08004724 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8004724:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004726:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8004728:	f000 000f 	and.w	r0, r0, #15
 800472c:	fb02 0003 	mla	r0, r2, r3, r0
}
 8004730:	b2c0      	uxtb	r0, r0
 8004732:	4770      	bx	lr

08004734 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004734:	b530      	push	{r4, r5, lr}
 8004736:	2517      	movs	r5, #23
 8004738:	2309      	movs	r3, #9
 800473a:	434d      	muls	r5, r1
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 800473c:	2902      	cmp	r1, #2
  year = 2000U + nYear;
 800473e:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
 8004742:	fbb5 f5f3 	udiv	r5, r5, r3
  if (nMonth < 3U)
 8004746:	d817      	bhi.n	8004778 <RTC_WeekDayNum+0x44>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004748:	3204      	adds	r2, #4
 800474a:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 800474e:	1910      	adds	r0, r2, r4
 8004750:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004754:	fbb3 f2f2 	udiv	r2, r3, r2
 8004758:	4428      	add	r0, r5
 800475a:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 800475e:	4410      	add	r0, r2
 8004760:	2264      	movs	r2, #100	; 0x64
 8004762:	fbb3 f3f2 	udiv	r3, r3, r2
 8004766:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004768:	2307      	movs	r3, #7
 800476a:	fbb0 f3f3 	udiv	r3, r0, r3
 800476e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004772:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8004774:	b2c0      	uxtb	r0, r0
 8004776:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004778:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800477c:	1c90      	adds	r0, r2, #2
 800477e:	2264      	movs	r2, #100	; 0x64
 8004780:	4420      	add	r0, r4
 8004782:	fbb4 f3f3 	udiv	r3, r4, r3
 8004786:	4428      	add	r0, r5
 8004788:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 800478c:	fbb4 f4f2 	udiv	r4, r4, r2
 8004790:	4418      	add	r0, r3
 8004792:	1b00      	subs	r0, r0, r4
 8004794:	e7e8      	b.n	8004768 <RTC_WeekDayNum+0x34>

08004796 <RTC_EnterInitMode>:
{
 8004796:	b538      	push	{r3, r4, r5, lr}
 8004798:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800479a:	f7fd faa7 	bl	8001cec <HAL_GetTick>
 800479e:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	0692      	lsls	r2, r2, #26
 80047a6:	d505      	bpl.n	80047b4 <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 80047a8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	f042 0210 	orr.w	r2, r2, #16
 80047b0:	605a      	str	r2, [r3, #4]
}
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80047b4:	f7fd fa9a 	bl	8001cec <HAL_GetTick>
 80047b8:	1b40      	subs	r0, r0, r5
 80047ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80047be:	d9ef      	bls.n	80047a0 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80047c0:	2003      	movs	r0, #3
 80047c2:	e7f6      	b.n	80047b2 <RTC_EnterInitMode+0x1c>

080047c4 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047c4:	6802      	ldr	r2, [r0, #0]
{
 80047c6:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047c8:	6853      	ldr	r3, [r2, #4]
{
 80047ca:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047cc:	f023 0310 	bic.w	r3, r3, #16
 80047d0:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80047d2:	f7fd fa8b 	bl	8001cec <HAL_GetTick>
 80047d6:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	069b      	lsls	r3, r3, #26
 80047de:	d501      	bpl.n	80047e4 <RTC_ExitInitMode+0x20>
  return HAL_OK;
 80047e0:	2000      	movs	r0, #0
}
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80047e4:	f7fd fa82 	bl	8001cec <HAL_GetTick>
 80047e8:	1b40      	subs	r0, r0, r5
 80047ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80047ee:	d9f3      	bls.n	80047d8 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80047f0:	2003      	movs	r0, #3
 80047f2:	e7f6      	b.n	80047e2 <RTC_ExitInitMode+0x1e>

080047f4 <RTC_WriteTimeCounter>:
{
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	4605      	mov	r5, r0
 80047f8:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047fa:	f7ff ffcc 	bl	8004796 <RTC_EnterInitMode>
 80047fe:	b958      	cbnz	r0, 8004818 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004804:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004806:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004808:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800480a:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800480c:	f7ff ffda 	bl	80047c4 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8004810:	3000      	adds	r0, #0
 8004812:	bf18      	it	ne
 8004814:	2001      	movne	r0, #1
}
 8004816:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8004818:	2001      	movs	r0, #1
 800481a:	e7fc      	b.n	8004816 <RTC_WriteTimeCounter+0x22>

0800481c <RTC_WriteAlarmCounter>:
{
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	4605      	mov	r5, r0
 8004820:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004822:	f7ff ffb8 	bl	8004796 <RTC_EnterInitMode>
 8004826:	b958      	cbnz	r0, 8004840 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800482c:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800482e:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004830:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004832:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004834:	f7ff ffc6 	bl	80047c4 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8004838:	3000      	adds	r0, #0
 800483a:	bf18      	it	ne
 800483c:	2001      	movne	r0, #1
}
 800483e:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8004840:	2001      	movs	r0, #1
 8004842:	e7fc      	b.n	800483e <RTC_WriteAlarmCounter+0x22>

08004844 <HAL_RTC_SetTime>:
{
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	460d      	mov	r5, r1
 8004848:	4616      	mov	r6, r2
  if ((hrtc == NULL) || (sTime == NULL))
 800484a:	4604      	mov	r4, r0
 800484c:	2800      	cmp	r0, #0
 800484e:	d03d      	beq.n	80048cc <HAL_RTC_SetTime+0x88>
 8004850:	2900      	cmp	r1, #0
 8004852:	d03b      	beq.n	80048cc <HAL_RTC_SetTime+0x88>
  assert_param(IS_RTC_FORMAT(Format));
 8004854:	2a01      	cmp	r2, #1
 8004856:	d904      	bls.n	8004862 <HAL_RTC_SetTime+0x1e>
 8004858:	f240 21ca 	movw	r1, #714	; 0x2ca
 800485c:	4843      	ldr	r0, [pc, #268]	; (800496c <HAL_RTC_SetTime+0x128>)
 800485e:	f7fc fe3d 	bl	80014dc <assert_failed>
  __HAL_LOCK(hrtc);
 8004862:	7c23      	ldrb	r3, [r4, #16]
 8004864:	2b01      	cmp	r3, #1
 8004866:	f04f 0302 	mov.w	r3, #2
 800486a:	d07d      	beq.n	8004968 <HAL_RTC_SetTime+0x124>
 800486c:	2201      	movs	r2, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800486e:	7463      	strb	r3, [r4, #17]
  __HAL_LOCK(hrtc);
 8004870:	7422      	strb	r2, [r4, #16]
 8004872:	7828      	ldrb	r0, [r5, #0]
  if (Format == RTC_FORMAT_BIN)
 8004874:	bb66      	cbnz	r6, 80048d0 <HAL_RTC_SetTime+0x8c>
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004876:	2817      	cmp	r0, #23
 8004878:	d904      	bls.n	8004884 <HAL_RTC_SetTime+0x40>
 800487a:	f240 21d3 	movw	r1, #723	; 0x2d3
 800487e:	483b      	ldr	r0, [pc, #236]	; (800496c <HAL_RTC_SetTime+0x128>)
 8004880:	f7fc fe2c 	bl	80014dc <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004884:	786b      	ldrb	r3, [r5, #1]
 8004886:	2b3b      	cmp	r3, #59	; 0x3b
 8004888:	d904      	bls.n	8004894 <HAL_RTC_SetTime+0x50>
 800488a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800488e:	4837      	ldr	r0, [pc, #220]	; (800496c <HAL_RTC_SetTime+0x128>)
 8004890:	f7fc fe24 	bl	80014dc <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004894:	78ab      	ldrb	r3, [r5, #2]
 8004896:	2b3b      	cmp	r3, #59	; 0x3b
 8004898:	d904      	bls.n	80048a4 <HAL_RTC_SetTime+0x60>
 800489a:	f240 21d5 	movw	r1, #725	; 0x2d5
 800489e:	4833      	ldr	r0, [pc, #204]	; (800496c <HAL_RTC_SetTime+0x128>)
 80048a0:	f7fc fe1c 	bl	80014dc <assert_failed>
                              ((uint32_t)sTime->Minutes * 60U) + \
 80048a4:	203c      	movs	r0, #60	; 0x3c
 80048a6:	786b      	ldrb	r3, [r5, #1]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80048a8:	782e      	ldrb	r6, [r5, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 80048aa:	4358      	muls	r0, r3
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80048ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80048b0:	fb03 0606 	mla	r6, r3, r6, r0
                              ((uint32_t)sTime->Seconds));
 80048b4:	78a8      	ldrb	r0, [r5, #2]
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80048b6:	4406      	add	r6, r0
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80048b8:	4631      	mov	r1, r6
 80048ba:	4620      	mov	r0, r4
 80048bc:	f7ff ff9a 	bl	80047f4 <RTC_WriteTimeCounter>
 80048c0:	4605      	mov	r5, r0
 80048c2:	b398      	cbz	r0, 800492c <HAL_RTC_SetTime+0xe8>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048c4:	2304      	movs	r3, #4
 80048c6:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80048c8:	2300      	movs	r3, #0
 80048ca:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 80048cc:	2501      	movs	r5, #1
 80048ce:	e049      	b.n	8004964 <HAL_RTC_SetTime+0x120>
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80048d0:	f7ff ff28 	bl	8004724 <RTC_Bcd2ToByte>
 80048d4:	2817      	cmp	r0, #23
 80048d6:	d904      	bls.n	80048e2 <HAL_RTC_SetTime+0x9e>
 80048d8:	f240 21dd 	movw	r1, #733	; 0x2dd
 80048dc:	4823      	ldr	r0, [pc, #140]	; (800496c <HAL_RTC_SetTime+0x128>)
 80048de:	f7fc fdfd 	bl	80014dc <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80048e2:	7868      	ldrb	r0, [r5, #1]
 80048e4:	f7ff ff1e 	bl	8004724 <RTC_Bcd2ToByte>
 80048e8:	283b      	cmp	r0, #59	; 0x3b
 80048ea:	d904      	bls.n	80048f6 <HAL_RTC_SetTime+0xb2>
 80048ec:	f240 21de 	movw	r1, #734	; 0x2de
 80048f0:	481e      	ldr	r0, [pc, #120]	; (800496c <HAL_RTC_SetTime+0x128>)
 80048f2:	f7fc fdf3 	bl	80014dc <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80048f6:	78a8      	ldrb	r0, [r5, #2]
 80048f8:	f7ff ff14 	bl	8004724 <RTC_Bcd2ToByte>
 80048fc:	283b      	cmp	r0, #59	; 0x3b
 80048fe:	d904      	bls.n	800490a <HAL_RTC_SetTime+0xc6>
 8004900:	f240 21df 	movw	r1, #735	; 0x2df
 8004904:	4819      	ldr	r0, [pc, #100]	; (800496c <HAL_RTC_SetTime+0x128>)
 8004906:	f7fc fde9 	bl	80014dc <assert_failed>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800490a:	7828      	ldrb	r0, [r5, #0]
 800490c:	f7ff ff0a 	bl	8004724 <RTC_Bcd2ToByte>
 8004910:	4606      	mov	r6, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004912:	7868      	ldrb	r0, [r5, #1]
 8004914:	f7ff ff06 	bl	8004724 <RTC_Bcd2ToByte>
 8004918:	233c      	movs	r3, #60	; 0x3c
 800491a:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800491c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004920:	fb03 0606 	mla	r6, r3, r6, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004924:	78a8      	ldrb	r0, [r5, #2]
 8004926:	f7ff fefd 	bl	8004724 <RTC_Bcd2ToByte>
 800492a:	e7c4      	b.n	80048b6 <HAL_RTC_SetTime+0x72>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800492c:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800492e:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004930:	6853      	ldr	r3, [r2, #4]
 8004932:	f023 0305 	bic.w	r3, r3, #5
 8004936:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004938:	f7ff fee2 	bl	8004700 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d00d      	beq.n	800495c <HAL_RTC_SetTime+0x118>
      if (counter_alarm < counter_time)
 8004940:	4286      	cmp	r6, r0
 8004942:	d90b      	bls.n	800495c <HAL_RTC_SetTime+0x118>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004944:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8004948:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800494c:	4620      	mov	r0, r4
 800494e:	f7ff ff65 	bl	800481c <RTC_WriteAlarmCounter>
 8004952:	b118      	cbz	r0, 800495c <HAL_RTC_SetTime+0x118>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004954:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8004956:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004958:	7463      	strb	r3, [r4, #17]
 800495a:	e7b7      	b.n	80048cc <HAL_RTC_SetTime+0x88>
    hrtc->State = HAL_RTC_STATE_READY;
 800495c:	2301      	movs	r3, #1
 800495e:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8004960:	2300      	movs	r3, #0
 8004962:	7423      	strb	r3, [r4, #16]
}
 8004964:	4628      	mov	r0, r5
 8004966:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 8004968:	461d      	mov	r5, r3
 800496a:	e7fb      	b.n	8004964 <HAL_RTC_SetTime+0x120>
 800496c:	08005d52 	.word	0x08005d52

08004970 <HAL_RTC_GetTime>:
{
 8004970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004974:	460d      	mov	r5, r1
 8004976:	4690      	mov	r8, r2
  if ((hrtc == NULL) || (sTime == NULL))
 8004978:	4604      	mov	r4, r0
 800497a:	b910      	cbnz	r0, 8004982 <HAL_RTC_GetTime+0x12>
    return HAL_ERROR;
 800497c:	2001      	movs	r0, #1
}
 800497e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hrtc == NULL) || (sTime == NULL))
 8004982:	2900      	cmp	r1, #0
 8004984:	d0fa      	beq.n	800497c <HAL_RTC_GetTime+0xc>
  assert_param(IS_RTC_FORMAT(Format));
 8004986:	2a01      	cmp	r2, #1
 8004988:	d904      	bls.n	8004994 <HAL_RTC_GetTime+0x24>
 800498a:	f240 312d 	movw	r1, #813	; 0x32d
 800498e:	4856      	ldr	r0, [pc, #344]	; (8004ae8 <HAL_RTC_GetTime+0x178>)
 8004990:	f7fc fda4 	bl	80014dc <assert_failed>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	0758      	lsls	r0, r3, #29
 800499a:	d4ef      	bmi.n	800497c <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff fe9d 	bl	80046dc <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 80049a2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80049a6:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 80049aa:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80049ac:	fb02 0213 	mls	r2, r2, r3, r0
 80049b0:	203c      	movs	r0, #60	; 0x3c
 80049b2:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80049b6:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 80049ba:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80049bc:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80049be:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 80049c0:	f240 808d 	bls.w	8004ade <HAL_RTC_GetTime+0x16e>
    sTime->Hours = (hours % 24U);
 80049c4:	2118      	movs	r1, #24
 80049c6:	fbb3 f2f1 	udiv	r2, r3, r1
 80049ca:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80049ce:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);
 80049d0:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80049d2:	f7ff fe95 	bl	8004700 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80049d6:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80049d8:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80049da:	d004      	beq.n	80049e6 <HAL_RTC_GetTime+0x76>
 80049dc:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 80049de:	bf2c      	ite	cs
 80049e0:	f04f 36ff 	movcs.w	r6, #4294967295
      counter_alarm -= counter_time;
 80049e4:	1bc6      	subcc	r6, r0, r7
 80049e6:	4b41      	ldr	r3, [pc, #260]	; (8004aec <HAL_RTC_GetTime+0x17c>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80049e8:	4620      	mov	r0, r4
 80049ea:	fbb7 f9f3 	udiv	r9, r7, r3
 80049ee:	fb03 7919 	mls	r9, r3, r9, r7
 80049f2:	4649      	mov	r1, r9
 80049f4:	f7ff fefe 	bl	80047f4 <RTC_WriteTimeCounter>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d1bf      	bne.n	800497c <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80049fc:	1c72      	adds	r2, r6, #1
 80049fe:	d02e      	beq.n	8004a5e <HAL_RTC_GetTime+0xee>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004a00:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004a04:	4620      	mov	r0, r4
 8004a06:	f7ff ff09 	bl	800481c <RTC_WriteAlarmCounter>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d1b6      	bne.n	800497c <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 8004a0e:	4b37      	ldr	r3, [pc, #220]	; (8004aec <HAL_RTC_GetTime+0x17c>)
  for (loop = 0U; loop < DayElapsed; loop++)
 8004a10:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 8004a12:	fbb7 f7f3 	udiv	r7, r7, r3
  if ((nYear % 100U) != 0U)
 8004a16:	f04f 0c64 	mov.w	ip, #100	; 0x64
  if ((nYear % 400U) == 0U)
 8004a1a:	f44f 7ec8 	mov.w	lr, #400	; 0x190
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004a1e:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 8004a22:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 8004a24:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 8004a26:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004a28:	42b7      	cmp	r7, r6
 8004a2a:	d81a      	bhi.n	8004a62 <HAL_RTC_GetTime+0xf2>
  hrtc->DateToUpdate.Month = month;
 8004a2c:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 8004a2e:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8004a30:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 8004a32:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 8004a34:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004a36:	f7ff fe7d 	bl	8004734 <RTC_WeekDayNum>
 8004a3a:	7320      	strb	r0, [r4, #12]
  if (Format != RTC_FORMAT_BIN)
 8004a3c:	f1b8 0f00 	cmp.w	r8, #0
 8004a40:	d00b      	beq.n	8004a5a <HAL_RTC_GetTime+0xea>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004a42:	7828      	ldrb	r0, [r5, #0]
 8004a44:	f7ff fe63 	bl	800470e <RTC_ByteToBcd2>
 8004a48:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004a4a:	7868      	ldrb	r0, [r5, #1]
 8004a4c:	f7ff fe5f 	bl	800470e <RTC_ByteToBcd2>
 8004a50:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004a52:	78a8      	ldrb	r0, [r5, #2]
 8004a54:	f7ff fe5b 	bl	800470e <RTC_ByteToBcd2>
 8004a58:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	e78f      	b.n	800497e <HAL_RTC_GetTime+0xe>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004a5e:	4631      	mov	r1, r6
 8004a60:	e7d0      	b.n	8004a04 <HAL_RTC_GetTime+0x94>
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004a62:	1e4b      	subs	r3, r1, #1
 8004a64:	2b09      	cmp	r3, #9
 8004a66:	d80e      	bhi.n	8004a86 <HAL_RTC_GetTime+0x116>
 8004a68:	fa29 f303 	lsr.w	r3, r9, r3
 8004a6c:	07db      	lsls	r3, r3, #31
 8004a6e:	d438      	bmi.n	8004ae2 <HAL_RTC_GetTime+0x172>
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004a70:	f021 0302 	bic.w	r3, r1, #2
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d001      	beq.n	8004a7c <HAL_RTC_GetTime+0x10c>
 8004a78:	2b09      	cmp	r3, #9
 8004a7a:	d10d      	bne.n	8004a98 <HAL_RTC_GetTime+0x128>
      if (day < 30U)
 8004a7c:	2a1d      	cmp	r2, #29
      if (day < 31U)
 8004a7e:	d90f      	bls.n	8004aa0 <HAL_RTC_GetTime+0x130>
        month++;
 8004a80:	3101      	adds	r1, #1
        day = 1U;
 8004a82:	2201      	movs	r2, #1
 8004a84:	e006      	b.n	8004a94 <HAL_RTC_GetTime+0x124>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004a86:	290c      	cmp	r1, #12
 8004a88:	d1f2      	bne.n	8004a70 <HAL_RTC_GetTime+0x100>
      if (day < 31U)
 8004a8a:	2a1e      	cmp	r2, #30
 8004a8c:	d908      	bls.n	8004aa0 <HAL_RTC_GetTime+0x130>
          day = 1U;
 8004a8e:	2201      	movs	r2, #1
          month = 1U;
 8004a90:	4611      	mov	r1, r2
          year++;
 8004a92:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8004a94:	3601      	adds	r6, #1
 8004a96:	e7c7      	b.n	8004a28 <HAL_RTC_GetTime+0xb8>
    else if (month == 2U)
 8004a98:	2902      	cmp	r1, #2
 8004a9a:	d1fb      	bne.n	8004a94 <HAL_RTC_GetTime+0x124>
      if (day < 28U)
 8004a9c:	2a1b      	cmp	r2, #27
 8004a9e:	d801      	bhi.n	8004aa4 <HAL_RTC_GetTime+0x134>
        day++;
 8004aa0:	3201      	adds	r2, #1
 8004aa2:	e7f7      	b.n	8004a94 <HAL_RTC_GetTime+0x124>
      else if (day == 28U)
 8004aa4:	2a1c      	cmp	r2, #28
 8004aa6:	d113      	bne.n	8004ad0 <HAL_RTC_GetTime+0x160>
        if (RTC_IsLeapYear(year))
 8004aa8:	b282      	uxth	r2, r0
  if ((nYear % 4U) != 0U)
 8004aaa:	0793      	lsls	r3, r2, #30
 8004aac:	d112      	bne.n	8004ad4 <HAL_RTC_GetTime+0x164>
  if ((nYear % 100U) != 0U)
 8004aae:	fbb2 f3fc 	udiv	r3, r2, ip
 8004ab2:	fb0c 2313 	mls	r3, ip, r3, r2
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	b97b      	cbnz	r3, 8004ada <HAL_RTC_GetTime+0x16a>
  if ((nYear % 400U) == 0U)
 8004aba:	fbb2 f3fe 	udiv	r3, r2, lr
 8004abe:	fb0e 2313 	mls	r3, lr, r3, r2
 8004ac2:	b29b      	uxth	r3, r3
          day = 1U;
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0e      	itee	eq
 8004ac8:	221d      	moveq	r2, #29
 8004aca:	2201      	movne	r2, #1
 8004acc:	2103      	movne	r1, #3
 8004ace:	e7e1      	b.n	8004a94 <HAL_RTC_GetTime+0x124>
      else if (day == 29U)
 8004ad0:	2a1d      	cmp	r2, #29
 8004ad2:	d1df      	bne.n	8004a94 <HAL_RTC_GetTime+0x124>
        day = 1U;
 8004ad4:	2201      	movs	r2, #1
        month++;
 8004ad6:	2103      	movs	r1, #3
 8004ad8:	e7dc      	b.n	8004a94 <HAL_RTC_GetTime+0x124>
          day++;
 8004ada:	221d      	movs	r2, #29
 8004adc:	e7da      	b.n	8004a94 <HAL_RTC_GetTime+0x124>
    sTime->Hours = hours;
 8004ade:	702b      	strb	r3, [r5, #0]
 8004ae0:	e7ac      	b.n	8004a3c <HAL_RTC_GetTime+0xcc>
      if (day < 31U)
 8004ae2:	2a1e      	cmp	r2, #30
 8004ae4:	e7cb      	b.n	8004a7e <HAL_RTC_GetTime+0x10e>
 8004ae6:	bf00      	nop
 8004ae8:	08005d52 	.word	0x08005d52
 8004aec:	00015180 	.word	0x00015180

08004af0 <HAL_RTC_SetDate>:
{
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	460d      	mov	r5, r1
 8004af4:	4616      	mov	r6, r2
  if ((hrtc == NULL) || (sDate == NULL))
 8004af6:	4604      	mov	r4, r0
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d04f      	beq.n	8004b9c <HAL_RTC_SetDate+0xac>
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d04d      	beq.n	8004b9c <HAL_RTC_SetDate+0xac>
  assert_param(IS_RTC_FORMAT(Format));
 8004b00:	2a01      	cmp	r2, #1
 8004b02:	d904      	bls.n	8004b0e <HAL_RTC_SetDate+0x1e>
 8004b04:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004b08:	4848      	ldr	r0, [pc, #288]	; (8004c2c <HAL_RTC_SetDate+0x13c>)
 8004b0a:	f7fc fce7 	bl	80014dc <assert_failed>
  __HAL_LOCK(hrtc);
 8004b0e:	7c23      	ldrb	r3, [r4, #16]
 8004b10:	2002      	movs	r0, #2
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f000 8089 	beq.w	8004c2a <HAL_RTC_SetDate+0x13a>
 8004b18:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b1a:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 8004b1c:	7423      	strb	r3, [r4, #16]
 8004b1e:	78e8      	ldrb	r0, [r5, #3]
  if (Format == RTC_FORMAT_BIN)
 8004b20:	2e00      	cmp	r6, #0
 8004b22:	d13d      	bne.n	8004ba0 <HAL_RTC_SetDate+0xb0>
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004b24:	2863      	cmp	r0, #99	; 0x63
 8004b26:	d904      	bls.n	8004b32 <HAL_RTC_SetDate+0x42>
 8004b28:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004b2c:	483f      	ldr	r0, [pc, #252]	; (8004c2c <HAL_RTC_SetDate+0x13c>)
 8004b2e:	f7fc fcd5 	bl	80014dc <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004b32:	786b      	ldrb	r3, [r5, #1]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	2b0b      	cmp	r3, #11
 8004b38:	d904      	bls.n	8004b44 <HAL_RTC_SetDate+0x54>
 8004b3a:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004b3e:	483b      	ldr	r0, [pc, #236]	; (8004c2c <HAL_RTC_SetDate+0x13c>)
 8004b40:	f7fc fccc 	bl	80014dc <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004b44:	78ab      	ldrb	r3, [r5, #2]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	2b1e      	cmp	r3, #30
 8004b4a:	d904      	bls.n	8004b56 <HAL_RTC_SetDate+0x66>
 8004b4c:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004b50:	4836      	ldr	r0, [pc, #216]	; (8004c2c <HAL_RTC_SetDate+0x13c>)
 8004b52:	f7fc fcc3 	bl	80014dc <assert_failed>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004b56:	78eb      	ldrb	r3, [r5, #3]
 8004b58:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004b5a:	786b      	ldrb	r3, [r5, #1]
 8004b5c:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004b5e:	78ab      	ldrb	r3, [r5, #2]
 8004b60:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004b62:	7ba2      	ldrb	r2, [r4, #14]
 8004b64:	7b61      	ldrb	r1, [r4, #13]
 8004b66:	7be0      	ldrb	r0, [r4, #15]
 8004b68:	f7ff fde4 	bl	8004734 <RTC_WeekDayNum>
 8004b6c:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004b6e:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004b70:	4620      	mov	r0, r4
 8004b72:	f7ff fdb3 	bl	80046dc <RTC_ReadTimeCounter>
  if (hours > 24U)
 8004b76:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <HAL_RTC_SetDate+0x140>)
 8004b78:	4298      	cmp	r0, r3
 8004b7a:	d952      	bls.n	8004c22 <HAL_RTC_SetDate+0x132>
 8004b7c:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8004b80:	fbb0 f5f3 	udiv	r5, r0, r3
 8004b84:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004b88:	4620      	mov	r0, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f7ff fe32 	bl	80047f4 <RTC_WriteTimeCounter>
 8004b90:	4606      	mov	r6, r0
 8004b92:	b398      	cbz	r0, 8004bfc <HAL_RTC_SetDate+0x10c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b94:	2304      	movs	r3, #4
 8004b96:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	e044      	b.n	8004c2a <HAL_RTC_SetDate+0x13a>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004ba0:	f7ff fdc0 	bl	8004724 <RTC_Bcd2ToByte>
 8004ba4:	2863      	cmp	r0, #99	; 0x63
 8004ba6:	d904      	bls.n	8004bb2 <HAL_RTC_SetDate+0xc2>
 8004ba8:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004bac:	481f      	ldr	r0, [pc, #124]	; (8004c2c <HAL_RTC_SetDate+0x13c>)
 8004bae:	f7fc fc95 	bl	80014dc <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004bb2:	7868      	ldrb	r0, [r5, #1]
 8004bb4:	f7ff fdb6 	bl	8004724 <RTC_Bcd2ToByte>
 8004bb8:	3801      	subs	r0, #1
 8004bba:	b2c0      	uxtb	r0, r0
 8004bbc:	280b      	cmp	r0, #11
 8004bbe:	d904      	bls.n	8004bca <HAL_RTC_SetDate+0xda>
 8004bc0:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004bc4:	4819      	ldr	r0, [pc, #100]	; (8004c2c <HAL_RTC_SetDate+0x13c>)
 8004bc6:	f7fc fc89 	bl	80014dc <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004bca:	78a8      	ldrb	r0, [r5, #2]
 8004bcc:	f7ff fdaa 	bl	8004724 <RTC_Bcd2ToByte>
 8004bd0:	3801      	subs	r0, #1
 8004bd2:	b2c0      	uxtb	r0, r0
 8004bd4:	281e      	cmp	r0, #30
 8004bd6:	d904      	bls.n	8004be2 <HAL_RTC_SetDate+0xf2>
 8004bd8:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004bdc:	4813      	ldr	r0, [pc, #76]	; (8004c2c <HAL_RTC_SetDate+0x13c>)
 8004bde:	f7fc fc7d 	bl	80014dc <assert_failed>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004be2:	78e8      	ldrb	r0, [r5, #3]
 8004be4:	f7ff fd9e 	bl	8004724 <RTC_Bcd2ToByte>
 8004be8:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004bea:	7868      	ldrb	r0, [r5, #1]
 8004bec:	f7ff fd9a 	bl	8004724 <RTC_Bcd2ToByte>
 8004bf0:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004bf2:	78a8      	ldrb	r0, [r5, #2]
 8004bf4:	f7ff fd96 	bl	8004724 <RTC_Bcd2ToByte>
 8004bf8:	73a0      	strb	r0, [r4, #14]
 8004bfa:	e7b2      	b.n	8004b62 <HAL_RTC_SetDate+0x72>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f7ff fd7f 	bl	8004700 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	d00d      	beq.n	8004c22 <HAL_RTC_SetDate+0x132>
      if (counter_alarm < counter_time)
 8004c06:	4285      	cmp	r5, r0
 8004c08:	d90b      	bls.n	8004c22 <HAL_RTC_SetDate+0x132>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c0a:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8004c0e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8004c12:	4620      	mov	r0, r4
 8004c14:	f7ff fe02 	bl	800481c <RTC_WriteAlarmCounter>
 8004c18:	b118      	cbz	r0, 8004c22 <HAL_RTC_SetDate+0x132>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004c1a:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8004c1c:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004c1e:	7463      	strb	r3, [r4, #17]
 8004c20:	e7bc      	b.n	8004b9c <HAL_RTC_SetDate+0xac>
  hrtc->State = HAL_RTC_STATE_READY ;
 8004c22:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8004c24:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8004c26:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8004c28:	7420      	strb	r0, [r4, #16]
}
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	08005d52 	.word	0x08005d52
 8004c30:	00015f8f 	.word	0x00015f8f

08004c34 <HAL_RTC_GetDate>:
  RTC_TimeTypeDef stime = {0U};
 8004c34:	2300      	movs	r3, #0
{
 8004c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c38:	460c      	mov	r4, r1
 8004c3a:	4617      	mov	r7, r2
  RTC_TimeTypeDef stime = {0U};
 8004c3c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004c40:	f88d 3006 	strb.w	r3, [sp, #6]
  if ((hrtc == NULL) || (sDate == NULL))
 8004c44:	4605      	mov	r5, r0
 8004c46:	b918      	cbnz	r0, 8004c50 <HAL_RTC_GetDate+0x1c>
    return HAL_ERROR;
 8004c48:	2201      	movs	r2, #1
}
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	b003      	add	sp, #12
 8004c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hrtc == NULL) || (sDate == NULL))
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d0f9      	beq.n	8004c48 <HAL_RTC_GetDate+0x14>
  assert_param(IS_RTC_FORMAT(Format));
 8004c54:	2a01      	cmp	r2, #1
 8004c56:	d904      	bls.n	8004c62 <HAL_RTC_GetDate+0x2e>
 8004c58:	f240 410e 	movw	r1, #1038	; 0x40e
 8004c5c:	4810      	ldr	r0, [pc, #64]	; (8004ca0 <HAL_RTC_GetDate+0x6c>)
 8004c5e:	f7fc fc3d 	bl	80014dc <assert_failed>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004c62:	2200      	movs	r2, #0
 8004c64:	a901      	add	r1, sp, #4
 8004c66:	4628      	mov	r0, r5
 8004c68:	f7ff fe82 	bl	8004970 <HAL_RTC_GetTime>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d1ea      	bne.n	8004c48 <HAL_RTC_GetDate+0x14>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004c72:	7b2b      	ldrb	r3, [r5, #12]
 8004c74:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004c76:	7be8      	ldrb	r0, [r5, #15]
 8004c78:	70e0      	strb	r0, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004c7a:	7b6e      	ldrb	r6, [r5, #13]
 8004c7c:	7066      	strb	r6, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004c7e:	7ba9      	ldrb	r1, [r5, #14]
 8004c80:	70a1      	strb	r1, [r4, #2]
  if (Format != RTC_FORMAT_BIN)
 8004c82:	2f00      	cmp	r7, #0
 8004c84:	d0e1      	beq.n	8004c4a <HAL_RTC_GetDate+0x16>
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004c86:	f7ff fd42 	bl	800470e <RTC_ByteToBcd2>
 8004c8a:	70e0      	strb	r0, [r4, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f7ff fd3e 	bl	800470e <RTC_ByteToBcd2>
 8004c92:	7060      	strb	r0, [r4, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004c94:	4608      	mov	r0, r1
 8004c96:	f7ff fd3a 	bl	800470e <RTC_ByteToBcd2>
 8004c9a:	70a0      	strb	r0, [r4, #2]
 8004c9c:	e7d5      	b.n	8004c4a <HAL_RTC_GetDate+0x16>
 8004c9e:	bf00      	nop
 8004ca0:	08005d52 	.word	0x08005d52

08004ca4 <HAL_RTC_AlarmAEventCallback>:
 8004ca4:	4770      	bx	lr
	...

08004ca8 <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004ca8:	6803      	ldr	r3, [r0, #0]
{
 8004caa:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004cac:	681a      	ldr	r2, [r3, #0]
{
 8004cae:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004cb0:	0792      	lsls	r2, r2, #30
 8004cb2:	d508      	bpl.n	8004cc6 <HAL_RTC_AlarmIRQHandler+0x1e>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	079b      	lsls	r3, r3, #30
 8004cb8:	d505      	bpl.n	8004cc6 <HAL_RTC_AlarmIRQHandler+0x1e>
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004cba:	f7ff fff3 	bl	8004ca4 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004cbe:	f06f 0202 	mvn.w	r2, #2
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	605a      	str	r2, [r3, #4]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004cc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cca:	4b02      	ldr	r3, [pc, #8]	; (8004cd4 <HAL_RTC_AlarmIRQHandler+0x2c>)
 8004ccc:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	7463      	strb	r3, [r4, #17]
}
 8004cd2:	bd10      	pop	{r4, pc}
 8004cd4:	40010400 	.word	0x40010400

08004cd8 <HAL_RTC_WaitForSynchro>:
{
 8004cd8:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8004cda:	4604      	mov	r4, r0
 8004cdc:	b1a8      	cbz	r0, 8004d0a <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004cde:	6802      	ldr	r2, [r0, #0]
 8004ce0:	6853      	ldr	r3, [r2, #4]
 8004ce2:	f023 0308 	bic.w	r3, r3, #8
 8004ce6:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8004ce8:	f7fd f800 	bl	8001cec <HAL_GetTick>
 8004cec:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	071b      	lsls	r3, r3, #28
 8004cf4:	d501      	bpl.n	8004cfa <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8004cf6:	2000      	movs	r0, #0
}
 8004cf8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004cfa:	f7fc fff7 	bl	8001cec <HAL_GetTick>
 8004cfe:	1b40      	subs	r0, r0, r5
 8004d00:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004d04:	d9f3      	bls.n	8004cee <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8004d06:	2003      	movs	r0, #3
 8004d08:	e7f6      	b.n	8004cf8 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	e7f4      	b.n	8004cf8 <HAL_RTC_WaitForSynchro+0x20>
	...

08004d10 <HAL_RTC_Init>:
{
 8004d10:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8004d12:	4604      	mov	r4, r0
 8004d14:	b388      	cbz	r0, 8004d7a <HAL_RTC_Init+0x6a>
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004d16:	6802      	ldr	r2, [r0, #0]
 8004d18:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <HAL_RTC_Init+0xe0>)
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d004      	beq.n	8004d28 <HAL_RTC_Init+0x18>
 8004d1e:	f240 111d 	movw	r1, #285	; 0x11d
 8004d22:	4834      	ldr	r0, [pc, #208]	; (8004df4 <HAL_RTC_Init+0xe4>)
 8004d24:	f7fc fbda 	bl	80014dc <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004d28:	68a3      	ldr	r3, [r4, #8]
 8004d2a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8004d2e:	d009      	beq.n	8004d44 <HAL_RTC_Init+0x34>
 8004d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d38:	d004      	beq.n	8004d44 <HAL_RTC_Init+0x34>
 8004d3a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004d3e:	482d      	ldr	r0, [pc, #180]	; (8004df4 <HAL_RTC_Init+0xe4>)
 8004d40:	f7fc fbcc 	bl	80014dc <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004d44:	6863      	ldr	r3, [r4, #4]
 8004d46:	4a2c      	ldr	r2, [pc, #176]	; (8004df8 <HAL_RTC_Init+0xe8>)
 8004d48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d804      	bhi.n	8004d5a <HAL_RTC_Init+0x4a>
 8004d50:	f240 111f 	movw	r1, #287	; 0x11f
 8004d54:	4827      	ldr	r0, [pc, #156]	; (8004df4 <HAL_RTC_Init+0xe4>)
 8004d56:	f7fc fbc1 	bl	80014dc <assert_failed>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d5a:	7c63      	ldrb	r3, [r4, #17]
 8004d5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d60:	b91b      	cbnz	r3, 8004d6a <HAL_RTC_Init+0x5a>
    hrtc->Lock = HAL_UNLOCKED;
 8004d62:	7422      	strb	r2, [r4, #16]
    HAL_RTC_MspInit(hrtc);
 8004d64:	4620      	mov	r0, r4
 8004d66:	f7fc fe55 	bl	8001a14 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d6a:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d6c:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d6e:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d70:	f7ff ffb2 	bl	8004cd8 <HAL_RTC_WaitForSynchro>
 8004d74:	b118      	cbz	r0, 8004d7e <HAL_RTC_Init+0x6e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d76:	2304      	movs	r3, #4
 8004d78:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	e037      	b.n	8004dee <HAL_RTC_Init+0xde>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f7ff fd09 	bl	8004796 <RTC_EnterInitMode>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d1f6      	bne.n	8004d76 <HAL_RTC_Init+0x66>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004d88:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004d8a:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004d8c:	6853      	ldr	r3, [r2, #4]
 8004d8e:	f023 0307 	bic.w	r3, r3, #7
 8004d92:	6053      	str	r3, [r2, #4]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_RTC_Init+0xec>)
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004d96:	b118      	cbz	r0, 8004da0 <HAL_RTC_Init+0x90>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004d98:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004d9a:	f021 0101 	bic.w	r1, r1, #1
 8004d9e:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004da0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004da2:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8004da6:	4303      	orrs	r3, r0
 8004da8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004daa:	6860      	ldr	r0, [r4, #4]
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d105      	bne.n	8004dbc <HAL_RTC_Init+0xac>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004db0:	2001      	movs	r0, #1
 8004db2:	f7ff fc15 	bl	80045e0 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d0dd      	beq.n	8004d76 <HAL_RTC_Init+0x66>
        prescaler = prescaler - 1U;
 8004dba:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004dbc:	6822      	ldr	r2, [r4, #0]
 8004dbe:	6893      	ldr	r3, [r2, #8]
 8004dc0:	f023 030f 	bic.w	r3, r3, #15
 8004dc4:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8004dc8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004dca:	68d3      	ldr	r3, [r2, #12]
 8004dcc:	b280      	uxth	r0, r0
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	4318      	orrs	r0, r3
 8004dd4:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f7ff fcf4 	bl	80047c4 <RTC_ExitInitMode>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	b110      	cbz	r0, 8004de6 <HAL_RTC_Init+0xd6>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004de0:	2204      	movs	r2, #4
 8004de2:	7462      	strb	r2, [r4, #17]
 8004de4:	e7c9      	b.n	8004d7a <HAL_RTC_Init+0x6a>
    hrtc->DateToUpdate.Year = 0x00U;
 8004de6:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004de8:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004dea:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8004dec:	7463      	strb	r3, [r4, #17]
}
 8004dee:	bd10      	pop	{r4, pc}
 8004df0:	40002800 	.word	0x40002800
 8004df4:	08005d52 	.word	0x08005d52
 8004df8:	ffeffffe 	.word	0xffeffffe
 8004dfc:	40006c00 	.word	0x40006c00

08004e00 <HAL_RTC_DeInit>:
{
 8004e00:	b570      	push	{r4, r5, r6, lr}
  if (hrtc == NULL)
 8004e02:	4604      	mov	r4, r0
 8004e04:	b198      	cbz	r0, 8004e2e <HAL_RTC_DeInit+0x2e>
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004e06:	6802      	ldr	r2, [r0, #0]
 8004e08:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <HAL_RTC_DeInit+0x74>)
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d004      	beq.n	8004e18 <HAL_RTC_DeInit+0x18>
 8004e0e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004e12:	4819      	ldr	r0, [pc, #100]	; (8004e78 <HAL_RTC_DeInit+0x78>)
 8004e14:	f7fc fb62 	bl	80014dc <assert_failed>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e18:	2302      	movs	r3, #2
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e1a:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e1c:	7463      	strb	r3, [r4, #17]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e1e:	f7ff fcba 	bl	8004796 <RTC_EnterInitMode>
 8004e22:	4606      	mov	r6, r0
 8004e24:	b128      	cbz	r0, 8004e32 <HAL_RTC_DeInit+0x32>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e26:	2304      	movs	r3, #4
 8004e28:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8004e2e:	2501      	movs	r5, #1
 8004e30:	e01e      	b.n	8004e70 <HAL_RTC_DeInit+0x70>
    WRITE_REG(hrtc->Instance->PRLL, 0x00008000U);
 8004e32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    CLEAR_REG(hrtc->Instance->CNTL);
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	61d8      	str	r0, [r3, #28]
    CLEAR_REG(hrtc->Instance->CNTH);
 8004e3a:	6198      	str	r0, [r3, #24]
    WRITE_REG(hrtc->Instance->PRLL, 0x00008000U);
 8004e3c:	60da      	str	r2, [r3, #12]
    CLEAR_REG(hrtc->Instance->PRLH);
 8004e3e:	6098      	str	r0, [r3, #8]
    CLEAR_REG(hrtc->Instance->CRH);
 8004e40:	6018      	str	r0, [r3, #0]
    CLEAR_REG(hrtc->Instance->CRL);
 8004e42:	6058      	str	r0, [r3, #4]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004e44:	4620      	mov	r0, r4
 8004e46:	f7ff fcbd 	bl	80047c4 <RTC_ExitInitMode>
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	b118      	cbz	r0, 8004e56 <HAL_RTC_DeInit+0x56>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e4e:	2304      	movs	r3, #4
      __HAL_UNLOCK(hrtc);
 8004e50:	7426      	strb	r6, [r4, #16]
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e52:	7463      	strb	r3, [r4, #17]
 8004e54:	e7eb      	b.n	8004e2e <HAL_RTC_DeInit+0x2e>
  HAL_RTC_WaitForSynchro(hrtc);
 8004e56:	4620      	mov	r0, r4
 8004e58:	f7ff ff3e 	bl	8004cd8 <HAL_RTC_WaitForSynchro>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004e5c:	6822      	ldr	r2, [r4, #0]
  HAL_RTC_MspDeInit(hrtc);
 8004e5e:	4620      	mov	r0, r4
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004e60:	6853      	ldr	r3, [r2, #4]
 8004e62:	f023 0308 	bic.w	r3, r3, #8
 8004e66:	6053      	str	r3, [r2, #4]
  HAL_RTC_MspDeInit(hrtc);
 8004e68:	f7fc fe04 	bl	8001a74 <HAL_RTC_MspDeInit>
  hrtc->State = HAL_RTC_STATE_RESET;
 8004e6c:	7465      	strb	r5, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8004e6e:	7425      	strb	r5, [r4, #16]
}
 8004e70:	4628      	mov	r0, r5
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	40002800 	.word	0x40002800
 8004e78:	08005d52 	.word	0x08005d52

08004e7c <HAL_RTCEx_RTCEventErrorCallback>:
 8004e7c:	4770      	bx	lr

08004e7e <HAL_RTCEx_RTCIRQHandler>:
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004e7e:	6803      	ldr	r3, [r0, #0]
{
 8004e80:	b510      	push	{r4, lr}
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004e82:	681a      	ldr	r2, [r3, #0]
{
 8004e84:	4604      	mov	r4, r0
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004e86:	07d1      	lsls	r1, r2, #31
 8004e88:	d511      	bpl.n	8004eae <HAL_RTCEx_RTCIRQHandler+0x30>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	07d2      	lsls	r2, r2, #31
 8004e8e:	d50e      	bpl.n	8004eae <HAL_RTCEx_RTCIRQHandler+0x30>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	075b      	lsls	r3, r3, #29
 8004e94:	d50c      	bpl.n	8004eb0 <HAL_RTCEx_RTCIRQHandler+0x32>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004e96:	f7ff fff1 	bl	8004e7c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004e9a:	f06f 0204 	mvn.w	r2, #4
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ea2:	2304      	movs	r3, #4
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004ea4:	f06f 0201 	mvn.w	r2, #1
        hrtc->State = HAL_RTC_STATE_READY;
 8004ea8:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004eae:	bd10      	pop	{r4, pc}
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004eb0:	f7fc fa54 	bl	800135c <HAL_RTCEx_RTCEventCallback>
        hrtc->State = HAL_RTC_STATE_READY;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e7f5      	b.n	8004ea4 <HAL_RTCEx_RTCIRQHandler+0x26>

08004eb8 <__errno>:
 8004eb8:	4b01      	ldr	r3, [pc, #4]	; (8004ec0 <__errno+0x8>)
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	200000ec 	.word	0x200000ec

08004ec4 <__libc_init_array>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	2500      	movs	r5, #0
 8004ec8:	4e0c      	ldr	r6, [pc, #48]	; (8004efc <__libc_init_array+0x38>)
 8004eca:	4c0d      	ldr	r4, [pc, #52]	; (8004f00 <__libc_init_array+0x3c>)
 8004ecc:	1ba4      	subs	r4, r4, r6
 8004ece:	10a4      	asrs	r4, r4, #2
 8004ed0:	42a5      	cmp	r5, r4
 8004ed2:	d109      	bne.n	8004ee8 <__libc_init_array+0x24>
 8004ed4:	f000 fe04 	bl	8005ae0 <_init>
 8004ed8:	2500      	movs	r5, #0
 8004eda:	4e0a      	ldr	r6, [pc, #40]	; (8004f04 <__libc_init_array+0x40>)
 8004edc:	4c0a      	ldr	r4, [pc, #40]	; (8004f08 <__libc_init_array+0x44>)
 8004ede:	1ba4      	subs	r4, r4, r6
 8004ee0:	10a4      	asrs	r4, r4, #2
 8004ee2:	42a5      	cmp	r5, r4
 8004ee4:	d105      	bne.n	8004ef2 <__libc_init_array+0x2e>
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eec:	4798      	blx	r3
 8004eee:	3501      	adds	r5, #1
 8004ef0:	e7ee      	b.n	8004ed0 <__libc_init_array+0xc>
 8004ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ef6:	4798      	blx	r3
 8004ef8:	3501      	adds	r5, #1
 8004efa:	e7f2      	b.n	8004ee2 <__libc_init_array+0x1e>
 8004efc:	08005f18 	.word	0x08005f18
 8004f00:	08005f18 	.word	0x08005f18
 8004f04:	08005f18 	.word	0x08005f18
 8004f08:	08005f1c 	.word	0x08005f1c

08004f0c <memset>:
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4402      	add	r2, r0
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d100      	bne.n	8004f16 <memset+0xa>
 8004f14:	4770      	bx	lr
 8004f16:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1a:	e7f9      	b.n	8004f10 <memset+0x4>

08004f1c <siscanf>:
 8004f1c:	b40e      	push	{r1, r2, r3}
 8004f1e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004f22:	b530      	push	{r4, r5, lr}
 8004f24:	b09c      	sub	sp, #112	; 0x70
 8004f26:	ac1f      	add	r4, sp, #124	; 0x7c
 8004f28:	f854 5b04 	ldr.w	r5, [r4], #4
 8004f2c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004f30:	9002      	str	r0, [sp, #8]
 8004f32:	9006      	str	r0, [sp, #24]
 8004f34:	f7fb f90c 	bl	8000150 <strlen>
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <siscanf+0x4c>)
 8004f3a:	9003      	str	r0, [sp, #12]
 8004f3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f3e:	2300      	movs	r3, #0
 8004f40:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f42:	9314      	str	r3, [sp, #80]	; 0x50
 8004f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f48:	9007      	str	r0, [sp, #28]
 8004f4a:	4808      	ldr	r0, [pc, #32]	; (8004f6c <siscanf+0x50>)
 8004f4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f50:	462a      	mov	r2, r5
 8004f52:	4623      	mov	r3, r4
 8004f54:	a902      	add	r1, sp, #8
 8004f56:	6800      	ldr	r0, [r0, #0]
 8004f58:	9401      	str	r4, [sp, #4]
 8004f5a:	f000 f865 	bl	8005028 <__ssvfiscanf_r>
 8004f5e:	b01c      	add	sp, #112	; 0x70
 8004f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f64:	b003      	add	sp, #12
 8004f66:	4770      	bx	lr
 8004f68:	08004f71 	.word	0x08004f71
 8004f6c:	200000ec 	.word	0x200000ec

08004f70 <__seofread>:
 8004f70:	2000      	movs	r0, #0
 8004f72:	4770      	bx	lr

08004f74 <_sungetc_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	1c4b      	adds	r3, r1, #1
 8004f78:	4614      	mov	r4, r2
 8004f7a:	d103      	bne.n	8004f84 <_sungetc_r+0x10>
 8004f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8004f80:	4628      	mov	r0, r5
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	8993      	ldrh	r3, [r2, #12]
 8004f86:	b2cd      	uxtb	r5, r1
 8004f88:	f023 0320 	bic.w	r3, r3, #32
 8004f8c:	8193      	strh	r3, [r2, #12]
 8004f8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f90:	6852      	ldr	r2, [r2, #4]
 8004f92:	b18b      	cbz	r3, 8004fb8 <_sungetc_r+0x44>
 8004f94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f96:	4293      	cmp	r3, r2
 8004f98:	dd08      	ble.n	8004fac <_sungetc_r+0x38>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	1e5a      	subs	r2, r3, #1
 8004f9e:	6022      	str	r2, [r4, #0]
 8004fa0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004fa4:	6863      	ldr	r3, [r4, #4]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6063      	str	r3, [r4, #4]
 8004faa:	e7e9      	b.n	8004f80 <_sungetc_r+0xc>
 8004fac:	4621      	mov	r1, r4
 8004fae:	f000 fc2d 	bl	800580c <__submore>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d0f1      	beq.n	8004f9a <_sungetc_r+0x26>
 8004fb6:	e7e1      	b.n	8004f7c <_sungetc_r+0x8>
 8004fb8:	6921      	ldr	r1, [r4, #16]
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	b151      	cbz	r1, 8004fd4 <_sungetc_r+0x60>
 8004fbe:	4299      	cmp	r1, r3
 8004fc0:	d208      	bcs.n	8004fd4 <_sungetc_r+0x60>
 8004fc2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004fc6:	42a9      	cmp	r1, r5
 8004fc8:	d104      	bne.n	8004fd4 <_sungetc_r+0x60>
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	3201      	adds	r2, #1
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	6062      	str	r2, [r4, #4]
 8004fd2:	e7d5      	b.n	8004f80 <_sungetc_r+0xc>
 8004fd4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8004fde:	2303      	movs	r3, #3
 8004fe0:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	2301      	movs	r3, #1
 8004fec:	e7dc      	b.n	8004fa8 <_sungetc_r+0x34>

08004fee <__ssrefill_r>:
 8004fee:	b510      	push	{r4, lr}
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004ff4:	b169      	cbz	r1, 8005012 <__ssrefill_r+0x24>
 8004ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ffa:	4299      	cmp	r1, r3
 8004ffc:	d001      	beq.n	8005002 <__ssrefill_r+0x14>
 8004ffe:	f000 fc7b 	bl	80058f8 <_free_r>
 8005002:	2000      	movs	r0, #0
 8005004:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005006:	6360      	str	r0, [r4, #52]	; 0x34
 8005008:	6063      	str	r3, [r4, #4]
 800500a:	b113      	cbz	r3, 8005012 <__ssrefill_r+0x24>
 800500c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	bd10      	pop	{r4, pc}
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	6063      	str	r3, [r4, #4]
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	f043 0320 	orr.w	r3, r3, #32
 8005024:	81a3      	strh	r3, [r4, #12]
 8005026:	e7f3      	b.n	8005010 <__ssrefill_r+0x22>

08005028 <__ssvfiscanf_r>:
 8005028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502c:	460c      	mov	r4, r1
 800502e:	2100      	movs	r1, #0
 8005030:	4606      	mov	r6, r0
 8005032:	4692      	mov	sl, r2
 8005034:	270a      	movs	r7, #10
 8005036:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800503a:	9144      	str	r1, [sp, #272]	; 0x110
 800503c:	9145      	str	r1, [sp, #276]	; 0x114
 800503e:	499e      	ldr	r1, [pc, #632]	; (80052b8 <__ssvfiscanf_r+0x290>)
 8005040:	f10d 0804 	add.w	r8, sp, #4
 8005044:	91a0      	str	r1, [sp, #640]	; 0x280
 8005046:	499d      	ldr	r1, [pc, #628]	; (80052bc <__ssvfiscanf_r+0x294>)
 8005048:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80052c0 <__ssvfiscanf_r+0x298>
 800504c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005050:	91a1      	str	r1, [sp, #644]	; 0x284
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	f89a 3000 	ldrb.w	r3, [sl]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 812a 	beq.w	80052b2 <__ssvfiscanf_r+0x28a>
 800505e:	4655      	mov	r5, sl
 8005060:	f000 fc10 	bl	8005884 <__locale_ctype_ptr>
 8005064:	f815 bb01 	ldrb.w	fp, [r5], #1
 8005068:	4458      	add	r0, fp
 800506a:	7843      	ldrb	r3, [r0, #1]
 800506c:	f013 0308 	ands.w	r3, r3, #8
 8005070:	d01c      	beq.n	80050ac <__ssvfiscanf_r+0x84>
 8005072:	6863      	ldr	r3, [r4, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	dd12      	ble.n	800509e <__ssvfiscanf_r+0x76>
 8005078:	f000 fc04 	bl	8005884 <__locale_ctype_ptr>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	781a      	ldrb	r2, [r3, #0]
 8005080:	4410      	add	r0, r2
 8005082:	7842      	ldrb	r2, [r0, #1]
 8005084:	0712      	lsls	r2, r2, #28
 8005086:	d401      	bmi.n	800508c <__ssvfiscanf_r+0x64>
 8005088:	46aa      	mov	sl, r5
 800508a:	e7e3      	b.n	8005054 <__ssvfiscanf_r+0x2c>
 800508c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800508e:	3301      	adds	r3, #1
 8005090:	3201      	adds	r2, #1
 8005092:	9245      	str	r2, [sp, #276]	; 0x114
 8005094:	6862      	ldr	r2, [r4, #4]
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	3a01      	subs	r2, #1
 800509a:	6062      	str	r2, [r4, #4]
 800509c:	e7e9      	b.n	8005072 <__ssvfiscanf_r+0x4a>
 800509e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80050a0:	4621      	mov	r1, r4
 80050a2:	4630      	mov	r0, r6
 80050a4:	4798      	blx	r3
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d0e6      	beq.n	8005078 <__ssvfiscanf_r+0x50>
 80050aa:	e7ed      	b.n	8005088 <__ssvfiscanf_r+0x60>
 80050ac:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80050b0:	f040 8082 	bne.w	80051b8 <__ssvfiscanf_r+0x190>
 80050b4:	9343      	str	r3, [sp, #268]	; 0x10c
 80050b6:	9341      	str	r3, [sp, #260]	; 0x104
 80050b8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80050bc:	2b2a      	cmp	r3, #42	; 0x2a
 80050be:	d103      	bne.n	80050c8 <__ssvfiscanf_r+0xa0>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f10a 0502 	add.w	r5, sl, #2
 80050c6:	9341      	str	r3, [sp, #260]	; 0x104
 80050c8:	46aa      	mov	sl, r5
 80050ca:	f815 1b01 	ldrb.w	r1, [r5], #1
 80050ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80050d2:	2a09      	cmp	r2, #9
 80050d4:	d922      	bls.n	800511c <__ssvfiscanf_r+0xf4>
 80050d6:	2203      	movs	r2, #3
 80050d8:	4879      	ldr	r0, [pc, #484]	; (80052c0 <__ssvfiscanf_r+0x298>)
 80050da:	f000 fbf3 	bl	80058c4 <memchr>
 80050de:	b138      	cbz	r0, 80050f0 <__ssvfiscanf_r+0xc8>
 80050e0:	eba0 0309 	sub.w	r3, r0, r9
 80050e4:	2001      	movs	r0, #1
 80050e6:	46aa      	mov	sl, r5
 80050e8:	4098      	lsls	r0, r3
 80050ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80050ec:	4318      	orrs	r0, r3
 80050ee:	9041      	str	r0, [sp, #260]	; 0x104
 80050f0:	f89a 3000 	ldrb.w	r3, [sl]
 80050f4:	f10a 0501 	add.w	r5, sl, #1
 80050f8:	2b67      	cmp	r3, #103	; 0x67
 80050fa:	d82b      	bhi.n	8005154 <__ssvfiscanf_r+0x12c>
 80050fc:	2b65      	cmp	r3, #101	; 0x65
 80050fe:	f080 809f 	bcs.w	8005240 <__ssvfiscanf_r+0x218>
 8005102:	2b47      	cmp	r3, #71	; 0x47
 8005104:	d810      	bhi.n	8005128 <__ssvfiscanf_r+0x100>
 8005106:	2b45      	cmp	r3, #69	; 0x45
 8005108:	f080 809a 	bcs.w	8005240 <__ssvfiscanf_r+0x218>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d06c      	beq.n	80051ea <__ssvfiscanf_r+0x1c2>
 8005110:	2b25      	cmp	r3, #37	; 0x25
 8005112:	d051      	beq.n	80051b8 <__ssvfiscanf_r+0x190>
 8005114:	2303      	movs	r3, #3
 8005116:	9742      	str	r7, [sp, #264]	; 0x108
 8005118:	9347      	str	r3, [sp, #284]	; 0x11c
 800511a:	e027      	b.n	800516c <__ssvfiscanf_r+0x144>
 800511c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800511e:	fb07 1303 	mla	r3, r7, r3, r1
 8005122:	3b30      	subs	r3, #48	; 0x30
 8005124:	9343      	str	r3, [sp, #268]	; 0x10c
 8005126:	e7cf      	b.n	80050c8 <__ssvfiscanf_r+0xa0>
 8005128:	2b5b      	cmp	r3, #91	; 0x5b
 800512a:	d06a      	beq.n	8005202 <__ssvfiscanf_r+0x1da>
 800512c:	d80c      	bhi.n	8005148 <__ssvfiscanf_r+0x120>
 800512e:	2b58      	cmp	r3, #88	; 0x58
 8005130:	d1f0      	bne.n	8005114 <__ssvfiscanf_r+0xec>
 8005132:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005138:	9241      	str	r2, [sp, #260]	; 0x104
 800513a:	2210      	movs	r2, #16
 800513c:	9242      	str	r2, [sp, #264]	; 0x108
 800513e:	2b6e      	cmp	r3, #110	; 0x6e
 8005140:	bf8c      	ite	hi
 8005142:	2304      	movhi	r3, #4
 8005144:	2303      	movls	r3, #3
 8005146:	e010      	b.n	800516a <__ssvfiscanf_r+0x142>
 8005148:	2b63      	cmp	r3, #99	; 0x63
 800514a:	d065      	beq.n	8005218 <__ssvfiscanf_r+0x1f0>
 800514c:	2b64      	cmp	r3, #100	; 0x64
 800514e:	d1e1      	bne.n	8005114 <__ssvfiscanf_r+0xec>
 8005150:	9742      	str	r7, [sp, #264]	; 0x108
 8005152:	e7f4      	b.n	800513e <__ssvfiscanf_r+0x116>
 8005154:	2b70      	cmp	r3, #112	; 0x70
 8005156:	d04b      	beq.n	80051f0 <__ssvfiscanf_r+0x1c8>
 8005158:	d826      	bhi.n	80051a8 <__ssvfiscanf_r+0x180>
 800515a:	2b6e      	cmp	r3, #110	; 0x6e
 800515c:	d062      	beq.n	8005224 <__ssvfiscanf_r+0x1fc>
 800515e:	d84c      	bhi.n	80051fa <__ssvfiscanf_r+0x1d2>
 8005160:	2b69      	cmp	r3, #105	; 0x69
 8005162:	d1d7      	bne.n	8005114 <__ssvfiscanf_r+0xec>
 8005164:	2300      	movs	r3, #0
 8005166:	9342      	str	r3, [sp, #264]	; 0x108
 8005168:	2303      	movs	r3, #3
 800516a:	9347      	str	r3, [sp, #284]	; 0x11c
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	dd68      	ble.n	8005244 <__ssvfiscanf_r+0x21c>
 8005172:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005174:	0659      	lsls	r1, r3, #25
 8005176:	d407      	bmi.n	8005188 <__ssvfiscanf_r+0x160>
 8005178:	f000 fb84 	bl	8005884 <__locale_ctype_ptr>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	4410      	add	r0, r2
 8005182:	7842      	ldrb	r2, [r0, #1]
 8005184:	0712      	lsls	r2, r2, #28
 8005186:	d464      	bmi.n	8005252 <__ssvfiscanf_r+0x22a>
 8005188:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800518a:	2b02      	cmp	r3, #2
 800518c:	dc73      	bgt.n	8005276 <__ssvfiscanf_r+0x24e>
 800518e:	466b      	mov	r3, sp
 8005190:	4622      	mov	r2, r4
 8005192:	a941      	add	r1, sp, #260	; 0x104
 8005194:	4630      	mov	r0, r6
 8005196:	f000 f897 	bl	80052c8 <_scanf_chars>
 800519a:	2801      	cmp	r0, #1
 800519c:	f000 8089 	beq.w	80052b2 <__ssvfiscanf_r+0x28a>
 80051a0:	2802      	cmp	r0, #2
 80051a2:	f47f af71 	bne.w	8005088 <__ssvfiscanf_r+0x60>
 80051a6:	e01d      	b.n	80051e4 <__ssvfiscanf_r+0x1bc>
 80051a8:	2b75      	cmp	r3, #117	; 0x75
 80051aa:	d0d1      	beq.n	8005150 <__ssvfiscanf_r+0x128>
 80051ac:	2b78      	cmp	r3, #120	; 0x78
 80051ae:	d0c0      	beq.n	8005132 <__ssvfiscanf_r+0x10a>
 80051b0:	2b73      	cmp	r3, #115	; 0x73
 80051b2:	d1af      	bne.n	8005114 <__ssvfiscanf_r+0xec>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e7d8      	b.n	800516a <__ssvfiscanf_r+0x142>
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	dd0c      	ble.n	80051d8 <__ssvfiscanf_r+0x1b0>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	455a      	cmp	r2, fp
 80051c4:	d175      	bne.n	80052b2 <__ssvfiscanf_r+0x28a>
 80051c6:	3301      	adds	r3, #1
 80051c8:	6862      	ldr	r2, [r4, #4]
 80051ca:	6023      	str	r3, [r4, #0]
 80051cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80051ce:	3a01      	subs	r2, #1
 80051d0:	3301      	adds	r3, #1
 80051d2:	6062      	str	r2, [r4, #4]
 80051d4:	9345      	str	r3, [sp, #276]	; 0x114
 80051d6:	e757      	b.n	8005088 <__ssvfiscanf_r+0x60>
 80051d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80051da:	4621      	mov	r1, r4
 80051dc:	4630      	mov	r0, r6
 80051de:	4798      	blx	r3
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d0ec      	beq.n	80051be <__ssvfiscanf_r+0x196>
 80051e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d159      	bne.n	800529e <__ssvfiscanf_r+0x276>
 80051ea:	f04f 30ff 	mov.w	r0, #4294967295
 80051ee:	e05c      	b.n	80052aa <__ssvfiscanf_r+0x282>
 80051f0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80051f2:	f042 0220 	orr.w	r2, r2, #32
 80051f6:	9241      	str	r2, [sp, #260]	; 0x104
 80051f8:	e79b      	b.n	8005132 <__ssvfiscanf_r+0x10a>
 80051fa:	2308      	movs	r3, #8
 80051fc:	9342      	str	r3, [sp, #264]	; 0x108
 80051fe:	2304      	movs	r3, #4
 8005200:	e7b3      	b.n	800516a <__ssvfiscanf_r+0x142>
 8005202:	4629      	mov	r1, r5
 8005204:	4640      	mov	r0, r8
 8005206:	f000 f9b7 	bl	8005578 <__sccl>
 800520a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800520c:	4605      	mov	r5, r0
 800520e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005212:	9341      	str	r3, [sp, #260]	; 0x104
 8005214:	2301      	movs	r3, #1
 8005216:	e7a8      	b.n	800516a <__ssvfiscanf_r+0x142>
 8005218:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800521a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800521e:	9341      	str	r3, [sp, #260]	; 0x104
 8005220:	2300      	movs	r3, #0
 8005222:	e7a2      	b.n	800516a <__ssvfiscanf_r+0x142>
 8005224:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005226:	06c3      	lsls	r3, r0, #27
 8005228:	f53f af2e 	bmi.w	8005088 <__ssvfiscanf_r+0x60>
 800522c:	9b00      	ldr	r3, [sp, #0]
 800522e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005230:	1d19      	adds	r1, r3, #4
 8005232:	9100      	str	r1, [sp, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	07c0      	lsls	r0, r0, #31
 8005238:	bf4c      	ite	mi
 800523a:	801a      	strhmi	r2, [r3, #0]
 800523c:	601a      	strpl	r2, [r3, #0]
 800523e:	e723      	b.n	8005088 <__ssvfiscanf_r+0x60>
 8005240:	2305      	movs	r3, #5
 8005242:	e792      	b.n	800516a <__ssvfiscanf_r+0x142>
 8005244:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005246:	4621      	mov	r1, r4
 8005248:	4630      	mov	r0, r6
 800524a:	4798      	blx	r3
 800524c:	2800      	cmp	r0, #0
 800524e:	d090      	beq.n	8005172 <__ssvfiscanf_r+0x14a>
 8005250:	e7c8      	b.n	80051e4 <__ssvfiscanf_r+0x1bc>
 8005252:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005254:	3201      	adds	r2, #1
 8005256:	9245      	str	r2, [sp, #276]	; 0x114
 8005258:	6862      	ldr	r2, [r4, #4]
 800525a:	3a01      	subs	r2, #1
 800525c:	2a00      	cmp	r2, #0
 800525e:	6062      	str	r2, [r4, #4]
 8005260:	dd02      	ble.n	8005268 <__ssvfiscanf_r+0x240>
 8005262:	3301      	adds	r3, #1
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	e787      	b.n	8005178 <__ssvfiscanf_r+0x150>
 8005268:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800526a:	4621      	mov	r1, r4
 800526c:	4630      	mov	r0, r6
 800526e:	4798      	blx	r3
 8005270:	2800      	cmp	r0, #0
 8005272:	d081      	beq.n	8005178 <__ssvfiscanf_r+0x150>
 8005274:	e7b6      	b.n	80051e4 <__ssvfiscanf_r+0x1bc>
 8005276:	2b04      	cmp	r3, #4
 8005278:	dc06      	bgt.n	8005288 <__ssvfiscanf_r+0x260>
 800527a:	466b      	mov	r3, sp
 800527c:	4622      	mov	r2, r4
 800527e:	a941      	add	r1, sp, #260	; 0x104
 8005280:	4630      	mov	r0, r6
 8005282:	f000 f883 	bl	800538c <_scanf_i>
 8005286:	e788      	b.n	800519a <__ssvfiscanf_r+0x172>
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <__ssvfiscanf_r+0x29c>)
 800528a:	2b00      	cmp	r3, #0
 800528c:	f43f aefc 	beq.w	8005088 <__ssvfiscanf_r+0x60>
 8005290:	466b      	mov	r3, sp
 8005292:	4622      	mov	r2, r4
 8005294:	a941      	add	r1, sp, #260	; 0x104
 8005296:	4630      	mov	r0, r6
 8005298:	f3af 8000 	nop.w
 800529c:	e77d      	b.n	800519a <__ssvfiscanf_r+0x172>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052a4:	bf18      	it	ne
 80052a6:	f04f 30ff 	movne.w	r0, #4294967295
 80052aa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80052ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80052b4:	e7f9      	b.n	80052aa <__ssvfiscanf_r+0x282>
 80052b6:	bf00      	nop
 80052b8:	08004f75 	.word	0x08004f75
 80052bc:	08004fef 	.word	0x08004fef
 80052c0:	08005d8a 	.word	0x08005d8a
 80052c4:	00000000 	.word	0x00000000

080052c8 <_scanf_chars>:
 80052c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052cc:	4615      	mov	r5, r2
 80052ce:	688a      	ldr	r2, [r1, #8]
 80052d0:	4680      	mov	r8, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	b932      	cbnz	r2, 80052e4 <_scanf_chars+0x1c>
 80052d6:	698a      	ldr	r2, [r1, #24]
 80052d8:	2a00      	cmp	r2, #0
 80052da:	bf14      	ite	ne
 80052dc:	f04f 32ff 	movne.w	r2, #4294967295
 80052e0:	2201      	moveq	r2, #1
 80052e2:	608a      	str	r2, [r1, #8]
 80052e4:	2600      	movs	r6, #0
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	06d1      	lsls	r1, r2, #27
 80052ea:	bf5f      	itttt	pl
 80052ec:	681a      	ldrpl	r2, [r3, #0]
 80052ee:	1d11      	addpl	r1, r2, #4
 80052f0:	6019      	strpl	r1, [r3, #0]
 80052f2:	6817      	ldrpl	r7, [r2, #0]
 80052f4:	69a3      	ldr	r3, [r4, #24]
 80052f6:	b1db      	cbz	r3, 8005330 <_scanf_chars+0x68>
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <_scanf_chars+0x44>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	6962      	ldr	r2, [r4, #20]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	5cd3      	ldrb	r3, [r2, r3]
 8005304:	b9a3      	cbnz	r3, 8005330 <_scanf_chars+0x68>
 8005306:	2e00      	cmp	r6, #0
 8005308:	d131      	bne.n	800536e <_scanf_chars+0xa6>
 800530a:	e006      	b.n	800531a <_scanf_chars+0x52>
 800530c:	2b02      	cmp	r3, #2
 800530e:	d007      	beq.n	8005320 <_scanf_chars+0x58>
 8005310:	2e00      	cmp	r6, #0
 8005312:	d12c      	bne.n	800536e <_scanf_chars+0xa6>
 8005314:	69a3      	ldr	r3, [r4, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d129      	bne.n	800536e <_scanf_chars+0xa6>
 800531a:	2001      	movs	r0, #1
 800531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005320:	f000 fab0 	bl	8005884 <__locale_ctype_ptr>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4418      	add	r0, r3
 800532a:	7843      	ldrb	r3, [r0, #1]
 800532c:	071b      	lsls	r3, r3, #28
 800532e:	d4ef      	bmi.n	8005310 <_scanf_chars+0x48>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	3601      	adds	r6, #1
 8005334:	06da      	lsls	r2, r3, #27
 8005336:	bf5e      	ittt	pl
 8005338:	682b      	ldrpl	r3, [r5, #0]
 800533a:	781b      	ldrbpl	r3, [r3, #0]
 800533c:	703b      	strbpl	r3, [r7, #0]
 800533e:	682a      	ldr	r2, [r5, #0]
 8005340:	686b      	ldr	r3, [r5, #4]
 8005342:	f102 0201 	add.w	r2, r2, #1
 8005346:	602a      	str	r2, [r5, #0]
 8005348:	68a2      	ldr	r2, [r4, #8]
 800534a:	f103 33ff 	add.w	r3, r3, #4294967295
 800534e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005352:	606b      	str	r3, [r5, #4]
 8005354:	bf58      	it	pl
 8005356:	3701      	addpl	r7, #1
 8005358:	60a2      	str	r2, [r4, #8]
 800535a:	b142      	cbz	r2, 800536e <_scanf_chars+0xa6>
 800535c:	2b00      	cmp	r3, #0
 800535e:	dcc9      	bgt.n	80052f4 <_scanf_chars+0x2c>
 8005360:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005364:	4629      	mov	r1, r5
 8005366:	4640      	mov	r0, r8
 8005368:	4798      	blx	r3
 800536a:	2800      	cmp	r0, #0
 800536c:	d0c2      	beq.n	80052f4 <_scanf_chars+0x2c>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f013 0310 	ands.w	r3, r3, #16
 8005374:	d105      	bne.n	8005382 <_scanf_chars+0xba>
 8005376:	68e2      	ldr	r2, [r4, #12]
 8005378:	3201      	adds	r2, #1
 800537a:	60e2      	str	r2, [r4, #12]
 800537c:	69a2      	ldr	r2, [r4, #24]
 800537e:	b102      	cbz	r2, 8005382 <_scanf_chars+0xba>
 8005380:	703b      	strb	r3, [r7, #0]
 8005382:	6923      	ldr	r3, [r4, #16]
 8005384:	2000      	movs	r0, #0
 8005386:	441e      	add	r6, r3
 8005388:	6126      	str	r6, [r4, #16]
 800538a:	e7c7      	b.n	800531c <_scanf_chars+0x54>

0800538c <_scanf_i>:
 800538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005390:	460c      	mov	r4, r1
 8005392:	469a      	mov	sl, r3
 8005394:	4b74      	ldr	r3, [pc, #464]	; (8005568 <_scanf_i+0x1dc>)
 8005396:	b087      	sub	sp, #28
 8005398:	4683      	mov	fp, r0
 800539a:	4616      	mov	r6, r2
 800539c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053a0:	ab03      	add	r3, sp, #12
 80053a2:	68a7      	ldr	r7, [r4, #8]
 80053a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80053a8:	4b70      	ldr	r3, [pc, #448]	; (800556c <_scanf_i+0x1e0>)
 80053aa:	69a1      	ldr	r1, [r4, #24]
 80053ac:	4a70      	ldr	r2, [pc, #448]	; (8005570 <_scanf_i+0x1e4>)
 80053ae:	f104 091c 	add.w	r9, r4, #28
 80053b2:	2903      	cmp	r1, #3
 80053b4:	bf08      	it	eq
 80053b6:	461a      	moveq	r2, r3
 80053b8:	1e7b      	subs	r3, r7, #1
 80053ba:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80053be:	bf84      	itt	hi
 80053c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80053c4:	60a3      	strhi	r3, [r4, #8]
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	bf88      	it	hi
 80053ca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80053ce:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	bf98      	it	ls
 80053d6:	2700      	movls	r7, #0
 80053d8:	464b      	mov	r3, r9
 80053da:	f04f 0800 	mov.w	r8, #0
 80053de:	9200      	str	r2, [sp, #0]
 80053e0:	bf88      	it	hi
 80053e2:	197f      	addhi	r7, r7, r5
 80053e4:	6831      	ldr	r1, [r6, #0]
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	ab03      	add	r3, sp, #12
 80053ea:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80053ee:	2202      	movs	r2, #2
 80053f0:	7809      	ldrb	r1, [r1, #0]
 80053f2:	f000 fa67 	bl	80058c4 <memchr>
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	b330      	cbz	r0, 8005448 <_scanf_i+0xbc>
 80053fa:	f1b8 0f01 	cmp.w	r8, #1
 80053fe:	d15a      	bne.n	80054b6 <_scanf_i+0x12a>
 8005400:	6862      	ldr	r2, [r4, #4]
 8005402:	b92a      	cbnz	r2, 8005410 <_scanf_i+0x84>
 8005404:	2108      	movs	r1, #8
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	6061      	str	r1, [r4, #4]
 800540a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540e:	6022      	str	r2, [r4, #0]
 8005410:	6822      	ldr	r2, [r4, #0]
 8005412:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005416:	6022      	str	r2, [r4, #0]
 8005418:	68a2      	ldr	r2, [r4, #8]
 800541a:	1e51      	subs	r1, r2, #1
 800541c:	60a1      	str	r1, [r4, #8]
 800541e:	b19a      	cbz	r2, 8005448 <_scanf_i+0xbc>
 8005420:	6832      	ldr	r2, [r6, #0]
 8005422:	1c5d      	adds	r5, r3, #1
 8005424:	1c51      	adds	r1, r2, #1
 8005426:	6031      	str	r1, [r6, #0]
 8005428:	7812      	ldrb	r2, [r2, #0]
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	6873      	ldr	r3, [r6, #4]
 800542e:	3b01      	subs	r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	6073      	str	r3, [r6, #4]
 8005434:	dc07      	bgt.n	8005446 <_scanf_i+0xba>
 8005436:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800543a:	4631      	mov	r1, r6
 800543c:	4658      	mov	r0, fp
 800543e:	4798      	blx	r3
 8005440:	2800      	cmp	r0, #0
 8005442:	f040 8087 	bne.w	8005554 <_scanf_i+0x1c8>
 8005446:	462b      	mov	r3, r5
 8005448:	f108 0801 	add.w	r8, r8, #1
 800544c:	f1b8 0f03 	cmp.w	r8, #3
 8005450:	d1c8      	bne.n	80053e4 <_scanf_i+0x58>
 8005452:	6862      	ldr	r2, [r4, #4]
 8005454:	b90a      	cbnz	r2, 800545a <_scanf_i+0xce>
 8005456:	220a      	movs	r2, #10
 8005458:	6062      	str	r2, [r4, #4]
 800545a:	6862      	ldr	r2, [r4, #4]
 800545c:	4945      	ldr	r1, [pc, #276]	; (8005574 <_scanf_i+0x1e8>)
 800545e:	6960      	ldr	r0, [r4, #20]
 8005460:	1a89      	subs	r1, r1, r2
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	f000 f888 	bl	8005578 <__sccl>
 8005468:	9b01      	ldr	r3, [sp, #4]
 800546a:	f04f 0800 	mov.w	r8, #0
 800546e:	461d      	mov	r5, r3
 8005470:	68a3      	ldr	r3, [r4, #8]
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d03b      	beq.n	80054f0 <_scanf_i+0x164>
 8005478:	6831      	ldr	r1, [r6, #0]
 800547a:	6960      	ldr	r0, [r4, #20]
 800547c:	f891 c000 	ldrb.w	ip, [r1]
 8005480:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005484:	2800      	cmp	r0, #0
 8005486:	d033      	beq.n	80054f0 <_scanf_i+0x164>
 8005488:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800548c:	d121      	bne.n	80054d2 <_scanf_i+0x146>
 800548e:	0510      	lsls	r0, r2, #20
 8005490:	d51f      	bpl.n	80054d2 <_scanf_i+0x146>
 8005492:	f108 0801 	add.w	r8, r8, #1
 8005496:	b117      	cbz	r7, 800549e <_scanf_i+0x112>
 8005498:	3301      	adds	r3, #1
 800549a:	3f01      	subs	r7, #1
 800549c:	60a3      	str	r3, [r4, #8]
 800549e:	6873      	ldr	r3, [r6, #4]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	6073      	str	r3, [r6, #4]
 80054a6:	dd1c      	ble.n	80054e2 <_scanf_i+0x156>
 80054a8:	6833      	ldr	r3, [r6, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	68a3      	ldr	r3, [r4, #8]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	60a3      	str	r3, [r4, #8]
 80054b4:	e7dc      	b.n	8005470 <_scanf_i+0xe4>
 80054b6:	f1b8 0f02 	cmp.w	r8, #2
 80054ba:	d1ad      	bne.n	8005418 <_scanf_i+0x8c>
 80054bc:	6822      	ldr	r2, [r4, #0]
 80054be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80054c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80054c6:	d1bf      	bne.n	8005448 <_scanf_i+0xbc>
 80054c8:	2110      	movs	r1, #16
 80054ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ce:	6061      	str	r1, [r4, #4]
 80054d0:	e7a1      	b.n	8005416 <_scanf_i+0x8a>
 80054d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80054d6:	6022      	str	r2, [r4, #0]
 80054d8:	780b      	ldrb	r3, [r1, #0]
 80054da:	3501      	adds	r5, #1
 80054dc:	f805 3c01 	strb.w	r3, [r5, #-1]
 80054e0:	e7dd      	b.n	800549e <_scanf_i+0x112>
 80054e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054e6:	4631      	mov	r1, r6
 80054e8:	4658      	mov	r0, fp
 80054ea:	4798      	blx	r3
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d0de      	beq.n	80054ae <_scanf_i+0x122>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	05d9      	lsls	r1, r3, #23
 80054f4:	d50c      	bpl.n	8005510 <_scanf_i+0x184>
 80054f6:	454d      	cmp	r5, r9
 80054f8:	d908      	bls.n	800550c <_scanf_i+0x180>
 80054fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80054fe:	1e6f      	subs	r7, r5, #1
 8005500:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005504:	4632      	mov	r2, r6
 8005506:	4658      	mov	r0, fp
 8005508:	4798      	blx	r3
 800550a:	463d      	mov	r5, r7
 800550c:	454d      	cmp	r5, r9
 800550e:	d029      	beq.n	8005564 <_scanf_i+0x1d8>
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	f012 0210 	ands.w	r2, r2, #16
 8005516:	d113      	bne.n	8005540 <_scanf_i+0x1b4>
 8005518:	702a      	strb	r2, [r5, #0]
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	4649      	mov	r1, r9
 800551e:	4658      	mov	r0, fp
 8005520:	9e00      	ldr	r6, [sp, #0]
 8005522:	47b0      	blx	r6
 8005524:	f8da 3000 	ldr.w	r3, [sl]
 8005528:	6821      	ldr	r1, [r4, #0]
 800552a:	1d1a      	adds	r2, r3, #4
 800552c:	f8ca 2000 	str.w	r2, [sl]
 8005530:	f011 0f20 	tst.w	r1, #32
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	d010      	beq.n	800555a <_scanf_i+0x1ce>
 8005538:	6018      	str	r0, [r3, #0]
 800553a:	68e3      	ldr	r3, [r4, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60e3      	str	r3, [r4, #12]
 8005540:	2000      	movs	r0, #0
 8005542:	eba5 0509 	sub.w	r5, r5, r9
 8005546:	44a8      	add	r8, r5
 8005548:	6925      	ldr	r5, [r4, #16]
 800554a:	4445      	add	r5, r8
 800554c:	6125      	str	r5, [r4, #16]
 800554e:	b007      	add	sp, #28
 8005550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005554:	f04f 0800 	mov.w	r8, #0
 8005558:	e7ca      	b.n	80054f0 <_scanf_i+0x164>
 800555a:	07ca      	lsls	r2, r1, #31
 800555c:	bf4c      	ite	mi
 800555e:	8018      	strhmi	r0, [r3, #0]
 8005560:	6018      	strpl	r0, [r3, #0]
 8005562:	e7ea      	b.n	800553a <_scanf_i+0x1ae>
 8005564:	2001      	movs	r0, #1
 8005566:	e7f2      	b.n	800554e <_scanf_i+0x1c2>
 8005568:	08005b18 	.word	0x08005b18
 800556c:	080056d1 	.word	0x080056d1
 8005570:	080057e9 	.word	0x080057e9
 8005574:	08005d9e 	.word	0x08005d9e

08005578 <__sccl>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	780b      	ldrb	r3, [r1, #0]
 800557c:	1e44      	subs	r4, r0, #1
 800557e:	2b5e      	cmp	r3, #94	; 0x5e
 8005580:	bf13      	iteet	ne
 8005582:	1c4a      	addne	r2, r1, #1
 8005584:	1c8a      	addeq	r2, r1, #2
 8005586:	784b      	ldrbeq	r3, [r1, #1]
 8005588:	2100      	movne	r1, #0
 800558a:	bf08      	it	eq
 800558c:	2101      	moveq	r1, #1
 800558e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8005592:	f804 1f01 	strb.w	r1, [r4, #1]!
 8005596:	42ac      	cmp	r4, r5
 8005598:	d1fb      	bne.n	8005592 <__sccl+0x1a>
 800559a:	b913      	cbnz	r3, 80055a2 <__sccl+0x2a>
 800559c:	3a01      	subs	r2, #1
 800559e:	4610      	mov	r0, r2
 80055a0:	bd70      	pop	{r4, r5, r6, pc}
 80055a2:	f081 0401 	eor.w	r4, r1, #1
 80055a6:	54c4      	strb	r4, [r0, r3]
 80055a8:	1c51      	adds	r1, r2, #1
 80055aa:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80055ae:	1e4e      	subs	r6, r1, #1
 80055b0:	2d2d      	cmp	r5, #45	; 0x2d
 80055b2:	460a      	mov	r2, r1
 80055b4:	d006      	beq.n	80055c4 <__sccl+0x4c>
 80055b6:	2d5d      	cmp	r5, #93	; 0x5d
 80055b8:	d0f1      	beq.n	800559e <__sccl+0x26>
 80055ba:	b90d      	cbnz	r5, 80055c0 <__sccl+0x48>
 80055bc:	4632      	mov	r2, r6
 80055be:	e7ee      	b.n	800559e <__sccl+0x26>
 80055c0:	462b      	mov	r3, r5
 80055c2:	e7f0      	b.n	80055a6 <__sccl+0x2e>
 80055c4:	780e      	ldrb	r6, [r1, #0]
 80055c6:	2e5d      	cmp	r6, #93	; 0x5d
 80055c8:	d0fa      	beq.n	80055c0 <__sccl+0x48>
 80055ca:	42b3      	cmp	r3, r6
 80055cc:	dcf8      	bgt.n	80055c0 <__sccl+0x48>
 80055ce:	3301      	adds	r3, #1
 80055d0:	429e      	cmp	r6, r3
 80055d2:	54c4      	strb	r4, [r0, r3]
 80055d4:	dcfb      	bgt.n	80055ce <__sccl+0x56>
 80055d6:	3102      	adds	r1, #2
 80055d8:	e7e7      	b.n	80055aa <__sccl+0x32>

080055da <_strtol_l.isra.0>:
 80055da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055de:	4680      	mov	r8, r0
 80055e0:	4689      	mov	r9, r1
 80055e2:	4692      	mov	sl, r2
 80055e4:	461e      	mov	r6, r3
 80055e6:	460f      	mov	r7, r1
 80055e8:	463d      	mov	r5, r7
 80055ea:	9808      	ldr	r0, [sp, #32]
 80055ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055f0:	f000 f944 	bl	800587c <__locale_ctype_ptr_l>
 80055f4:	4420      	add	r0, r4
 80055f6:	7843      	ldrb	r3, [r0, #1]
 80055f8:	f013 0308 	ands.w	r3, r3, #8
 80055fc:	d132      	bne.n	8005664 <_strtol_l.isra.0+0x8a>
 80055fe:	2c2d      	cmp	r4, #45	; 0x2d
 8005600:	d132      	bne.n	8005668 <_strtol_l.isra.0+0x8e>
 8005602:	2201      	movs	r2, #1
 8005604:	787c      	ldrb	r4, [r7, #1]
 8005606:	1cbd      	adds	r5, r7, #2
 8005608:	2e00      	cmp	r6, #0
 800560a:	d05d      	beq.n	80056c8 <_strtol_l.isra.0+0xee>
 800560c:	2e10      	cmp	r6, #16
 800560e:	d109      	bne.n	8005624 <_strtol_l.isra.0+0x4a>
 8005610:	2c30      	cmp	r4, #48	; 0x30
 8005612:	d107      	bne.n	8005624 <_strtol_l.isra.0+0x4a>
 8005614:	782b      	ldrb	r3, [r5, #0]
 8005616:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800561a:	2b58      	cmp	r3, #88	; 0x58
 800561c:	d14f      	bne.n	80056be <_strtol_l.isra.0+0xe4>
 800561e:	2610      	movs	r6, #16
 8005620:	786c      	ldrb	r4, [r5, #1]
 8005622:	3502      	adds	r5, #2
 8005624:	2a00      	cmp	r2, #0
 8005626:	bf14      	ite	ne
 8005628:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800562c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005630:	2700      	movs	r7, #0
 8005632:	fbb1 fcf6 	udiv	ip, r1, r6
 8005636:	4638      	mov	r0, r7
 8005638:	fb06 1e1c 	mls	lr, r6, ip, r1
 800563c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005640:	2b09      	cmp	r3, #9
 8005642:	d817      	bhi.n	8005674 <_strtol_l.isra.0+0x9a>
 8005644:	461c      	mov	r4, r3
 8005646:	42a6      	cmp	r6, r4
 8005648:	dd23      	ble.n	8005692 <_strtol_l.isra.0+0xb8>
 800564a:	1c7b      	adds	r3, r7, #1
 800564c:	d007      	beq.n	800565e <_strtol_l.isra.0+0x84>
 800564e:	4584      	cmp	ip, r0
 8005650:	d31c      	bcc.n	800568c <_strtol_l.isra.0+0xb2>
 8005652:	d101      	bne.n	8005658 <_strtol_l.isra.0+0x7e>
 8005654:	45a6      	cmp	lr, r4
 8005656:	db19      	blt.n	800568c <_strtol_l.isra.0+0xb2>
 8005658:	2701      	movs	r7, #1
 800565a:	fb00 4006 	mla	r0, r0, r6, r4
 800565e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005662:	e7eb      	b.n	800563c <_strtol_l.isra.0+0x62>
 8005664:	462f      	mov	r7, r5
 8005666:	e7bf      	b.n	80055e8 <_strtol_l.isra.0+0xe>
 8005668:	2c2b      	cmp	r4, #43	; 0x2b
 800566a:	bf04      	itt	eq
 800566c:	1cbd      	addeq	r5, r7, #2
 800566e:	787c      	ldrbeq	r4, [r7, #1]
 8005670:	461a      	mov	r2, r3
 8005672:	e7c9      	b.n	8005608 <_strtol_l.isra.0+0x2e>
 8005674:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005678:	2b19      	cmp	r3, #25
 800567a:	d801      	bhi.n	8005680 <_strtol_l.isra.0+0xa6>
 800567c:	3c37      	subs	r4, #55	; 0x37
 800567e:	e7e2      	b.n	8005646 <_strtol_l.isra.0+0x6c>
 8005680:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005684:	2b19      	cmp	r3, #25
 8005686:	d804      	bhi.n	8005692 <_strtol_l.isra.0+0xb8>
 8005688:	3c57      	subs	r4, #87	; 0x57
 800568a:	e7dc      	b.n	8005646 <_strtol_l.isra.0+0x6c>
 800568c:	f04f 37ff 	mov.w	r7, #4294967295
 8005690:	e7e5      	b.n	800565e <_strtol_l.isra.0+0x84>
 8005692:	1c7b      	adds	r3, r7, #1
 8005694:	d108      	bne.n	80056a8 <_strtol_l.isra.0+0xce>
 8005696:	2322      	movs	r3, #34	; 0x22
 8005698:	4608      	mov	r0, r1
 800569a:	f8c8 3000 	str.w	r3, [r8]
 800569e:	f1ba 0f00 	cmp.w	sl, #0
 80056a2:	d107      	bne.n	80056b4 <_strtol_l.isra.0+0xda>
 80056a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a8:	b102      	cbz	r2, 80056ac <_strtol_l.isra.0+0xd2>
 80056aa:	4240      	negs	r0, r0
 80056ac:	f1ba 0f00 	cmp.w	sl, #0
 80056b0:	d0f8      	beq.n	80056a4 <_strtol_l.isra.0+0xca>
 80056b2:	b10f      	cbz	r7, 80056b8 <_strtol_l.isra.0+0xde>
 80056b4:	f105 39ff 	add.w	r9, r5, #4294967295
 80056b8:	f8ca 9000 	str.w	r9, [sl]
 80056bc:	e7f2      	b.n	80056a4 <_strtol_l.isra.0+0xca>
 80056be:	2430      	movs	r4, #48	; 0x30
 80056c0:	2e00      	cmp	r6, #0
 80056c2:	d1af      	bne.n	8005624 <_strtol_l.isra.0+0x4a>
 80056c4:	2608      	movs	r6, #8
 80056c6:	e7ad      	b.n	8005624 <_strtol_l.isra.0+0x4a>
 80056c8:	2c30      	cmp	r4, #48	; 0x30
 80056ca:	d0a3      	beq.n	8005614 <_strtol_l.isra.0+0x3a>
 80056cc:	260a      	movs	r6, #10
 80056ce:	e7a9      	b.n	8005624 <_strtol_l.isra.0+0x4a>

080056d0 <_strtol_r>:
 80056d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056d2:	4c06      	ldr	r4, [pc, #24]	; (80056ec <_strtol_r+0x1c>)
 80056d4:	4d06      	ldr	r5, [pc, #24]	; (80056f0 <_strtol_r+0x20>)
 80056d6:	6824      	ldr	r4, [r4, #0]
 80056d8:	6a24      	ldr	r4, [r4, #32]
 80056da:	2c00      	cmp	r4, #0
 80056dc:	bf08      	it	eq
 80056de:	462c      	moveq	r4, r5
 80056e0:	9400      	str	r4, [sp, #0]
 80056e2:	f7ff ff7a 	bl	80055da <_strtol_l.isra.0>
 80056e6:	b003      	add	sp, #12
 80056e8:	bd30      	pop	{r4, r5, pc}
 80056ea:	bf00      	nop
 80056ec:	200000ec 	.word	0x200000ec
 80056f0:	20000150 	.word	0x20000150

080056f4 <_strtoul_l.isra.0>:
 80056f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f8:	4680      	mov	r8, r0
 80056fa:	4689      	mov	r9, r1
 80056fc:	4692      	mov	sl, r2
 80056fe:	461e      	mov	r6, r3
 8005700:	460f      	mov	r7, r1
 8005702:	463d      	mov	r5, r7
 8005704:	9808      	ldr	r0, [sp, #32]
 8005706:	f815 4b01 	ldrb.w	r4, [r5], #1
 800570a:	f000 f8b7 	bl	800587c <__locale_ctype_ptr_l>
 800570e:	4420      	add	r0, r4
 8005710:	7843      	ldrb	r3, [r0, #1]
 8005712:	f013 0308 	ands.w	r3, r3, #8
 8005716:	d130      	bne.n	800577a <_strtoul_l.isra.0+0x86>
 8005718:	2c2d      	cmp	r4, #45	; 0x2d
 800571a:	d130      	bne.n	800577e <_strtoul_l.isra.0+0x8a>
 800571c:	2101      	movs	r1, #1
 800571e:	787c      	ldrb	r4, [r7, #1]
 8005720:	1cbd      	adds	r5, r7, #2
 8005722:	2e00      	cmp	r6, #0
 8005724:	d05c      	beq.n	80057e0 <_strtoul_l.isra.0+0xec>
 8005726:	2e10      	cmp	r6, #16
 8005728:	d109      	bne.n	800573e <_strtoul_l.isra.0+0x4a>
 800572a:	2c30      	cmp	r4, #48	; 0x30
 800572c:	d107      	bne.n	800573e <_strtoul_l.isra.0+0x4a>
 800572e:	782b      	ldrb	r3, [r5, #0]
 8005730:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005734:	2b58      	cmp	r3, #88	; 0x58
 8005736:	d14e      	bne.n	80057d6 <_strtoul_l.isra.0+0xe2>
 8005738:	2610      	movs	r6, #16
 800573a:	786c      	ldrb	r4, [r5, #1]
 800573c:	3502      	adds	r5, #2
 800573e:	f04f 32ff 	mov.w	r2, #4294967295
 8005742:	fbb2 f2f6 	udiv	r2, r2, r6
 8005746:	2300      	movs	r3, #0
 8005748:	fb06 fc02 	mul.w	ip, r6, r2
 800574c:	4618      	mov	r0, r3
 800574e:	ea6f 0c0c 	mvn.w	ip, ip
 8005752:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005756:	2f09      	cmp	r7, #9
 8005758:	d817      	bhi.n	800578a <_strtoul_l.isra.0+0x96>
 800575a:	463c      	mov	r4, r7
 800575c:	42a6      	cmp	r6, r4
 800575e:	dd23      	ble.n	80057a8 <_strtoul_l.isra.0+0xb4>
 8005760:	2b00      	cmp	r3, #0
 8005762:	db1e      	blt.n	80057a2 <_strtoul_l.isra.0+0xae>
 8005764:	4282      	cmp	r2, r0
 8005766:	d31c      	bcc.n	80057a2 <_strtoul_l.isra.0+0xae>
 8005768:	d101      	bne.n	800576e <_strtoul_l.isra.0+0x7a>
 800576a:	45a4      	cmp	ip, r4
 800576c:	db19      	blt.n	80057a2 <_strtoul_l.isra.0+0xae>
 800576e:	2301      	movs	r3, #1
 8005770:	fb00 4006 	mla	r0, r0, r6, r4
 8005774:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005778:	e7eb      	b.n	8005752 <_strtoul_l.isra.0+0x5e>
 800577a:	462f      	mov	r7, r5
 800577c:	e7c1      	b.n	8005702 <_strtoul_l.isra.0+0xe>
 800577e:	2c2b      	cmp	r4, #43	; 0x2b
 8005780:	bf04      	itt	eq
 8005782:	1cbd      	addeq	r5, r7, #2
 8005784:	787c      	ldrbeq	r4, [r7, #1]
 8005786:	4619      	mov	r1, r3
 8005788:	e7cb      	b.n	8005722 <_strtoul_l.isra.0+0x2e>
 800578a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800578e:	2f19      	cmp	r7, #25
 8005790:	d801      	bhi.n	8005796 <_strtoul_l.isra.0+0xa2>
 8005792:	3c37      	subs	r4, #55	; 0x37
 8005794:	e7e2      	b.n	800575c <_strtoul_l.isra.0+0x68>
 8005796:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800579a:	2f19      	cmp	r7, #25
 800579c:	d804      	bhi.n	80057a8 <_strtoul_l.isra.0+0xb4>
 800579e:	3c57      	subs	r4, #87	; 0x57
 80057a0:	e7dc      	b.n	800575c <_strtoul_l.isra.0+0x68>
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295
 80057a6:	e7e5      	b.n	8005774 <_strtoul_l.isra.0+0x80>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da09      	bge.n	80057c0 <_strtoul_l.isra.0+0xcc>
 80057ac:	2322      	movs	r3, #34	; 0x22
 80057ae:	f04f 30ff 	mov.w	r0, #4294967295
 80057b2:	f8c8 3000 	str.w	r3, [r8]
 80057b6:	f1ba 0f00 	cmp.w	sl, #0
 80057ba:	d107      	bne.n	80057cc <_strtoul_l.isra.0+0xd8>
 80057bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c0:	b101      	cbz	r1, 80057c4 <_strtoul_l.isra.0+0xd0>
 80057c2:	4240      	negs	r0, r0
 80057c4:	f1ba 0f00 	cmp.w	sl, #0
 80057c8:	d0f8      	beq.n	80057bc <_strtoul_l.isra.0+0xc8>
 80057ca:	b10b      	cbz	r3, 80057d0 <_strtoul_l.isra.0+0xdc>
 80057cc:	f105 39ff 	add.w	r9, r5, #4294967295
 80057d0:	f8ca 9000 	str.w	r9, [sl]
 80057d4:	e7f2      	b.n	80057bc <_strtoul_l.isra.0+0xc8>
 80057d6:	2430      	movs	r4, #48	; 0x30
 80057d8:	2e00      	cmp	r6, #0
 80057da:	d1b0      	bne.n	800573e <_strtoul_l.isra.0+0x4a>
 80057dc:	2608      	movs	r6, #8
 80057de:	e7ae      	b.n	800573e <_strtoul_l.isra.0+0x4a>
 80057e0:	2c30      	cmp	r4, #48	; 0x30
 80057e2:	d0a4      	beq.n	800572e <_strtoul_l.isra.0+0x3a>
 80057e4:	260a      	movs	r6, #10
 80057e6:	e7aa      	b.n	800573e <_strtoul_l.isra.0+0x4a>

080057e8 <_strtoul_r>:
 80057e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057ea:	4c06      	ldr	r4, [pc, #24]	; (8005804 <_strtoul_r+0x1c>)
 80057ec:	4d06      	ldr	r5, [pc, #24]	; (8005808 <_strtoul_r+0x20>)
 80057ee:	6824      	ldr	r4, [r4, #0]
 80057f0:	6a24      	ldr	r4, [r4, #32]
 80057f2:	2c00      	cmp	r4, #0
 80057f4:	bf08      	it	eq
 80057f6:	462c      	moveq	r4, r5
 80057f8:	9400      	str	r4, [sp, #0]
 80057fa:	f7ff ff7b 	bl	80056f4 <_strtoul_l.isra.0>
 80057fe:	b003      	add	sp, #12
 8005800:	bd30      	pop	{r4, r5, pc}
 8005802:	bf00      	nop
 8005804:	200000ec 	.word	0x200000ec
 8005808:	20000150 	.word	0x20000150

0800580c <__submore>:
 800580c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005810:	460c      	mov	r4, r1
 8005812:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005818:	4299      	cmp	r1, r3
 800581a:	d11b      	bne.n	8005854 <__submore+0x48>
 800581c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005820:	f000 f8b6 	bl	8005990 <_malloc_r>
 8005824:	b918      	cbnz	r0, 800582e <__submore+0x22>
 8005826:	f04f 30ff 	mov.w	r0, #4294967295
 800582a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800582e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005832:	63a3      	str	r3, [r4, #56]	; 0x38
 8005834:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005838:	6360      	str	r0, [r4, #52]	; 0x34
 800583a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800583e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005842:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005846:	7043      	strb	r3, [r0, #1]
 8005848:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800584c:	7003      	strb	r3, [r0, #0]
 800584e:	6020      	str	r0, [r4, #0]
 8005850:	2000      	movs	r0, #0
 8005852:	e7ea      	b.n	800582a <__submore+0x1e>
 8005854:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005856:	0077      	lsls	r7, r6, #1
 8005858:	463a      	mov	r2, r7
 800585a:	f000 f8f3 	bl	8005a44 <_realloc_r>
 800585e:	4605      	mov	r5, r0
 8005860:	2800      	cmp	r0, #0
 8005862:	d0e0      	beq.n	8005826 <__submore+0x1a>
 8005864:	eb00 0806 	add.w	r8, r0, r6
 8005868:	4601      	mov	r1, r0
 800586a:	4632      	mov	r2, r6
 800586c:	4640      	mov	r0, r8
 800586e:	f000 f837 	bl	80058e0 <memcpy>
 8005872:	f8c4 8000 	str.w	r8, [r4]
 8005876:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800587a:	e7e9      	b.n	8005850 <__submore+0x44>

0800587c <__locale_ctype_ptr_l>:
 800587c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005880:	4770      	bx	lr
	...

08005884 <__locale_ctype_ptr>:
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <__locale_ctype_ptr+0x14>)
 8005886:	4a05      	ldr	r2, [pc, #20]	; (800589c <__locale_ctype_ptr+0x18>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf08      	it	eq
 8005890:	4613      	moveq	r3, r2
 8005892:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005896:	4770      	bx	lr
 8005898:	200000ec 	.word	0x200000ec
 800589c:	20000150 	.word	0x20000150

080058a0 <__ascii_mbtowc>:
 80058a0:	b082      	sub	sp, #8
 80058a2:	b901      	cbnz	r1, 80058a6 <__ascii_mbtowc+0x6>
 80058a4:	a901      	add	r1, sp, #4
 80058a6:	b142      	cbz	r2, 80058ba <__ascii_mbtowc+0x1a>
 80058a8:	b14b      	cbz	r3, 80058be <__ascii_mbtowc+0x1e>
 80058aa:	7813      	ldrb	r3, [r2, #0]
 80058ac:	600b      	str	r3, [r1, #0]
 80058ae:	7812      	ldrb	r2, [r2, #0]
 80058b0:	1c10      	adds	r0, r2, #0
 80058b2:	bf18      	it	ne
 80058b4:	2001      	movne	r0, #1
 80058b6:	b002      	add	sp, #8
 80058b8:	4770      	bx	lr
 80058ba:	4610      	mov	r0, r2
 80058bc:	e7fb      	b.n	80058b6 <__ascii_mbtowc+0x16>
 80058be:	f06f 0001 	mvn.w	r0, #1
 80058c2:	e7f8      	b.n	80058b6 <__ascii_mbtowc+0x16>

080058c4 <memchr>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	b2c9      	uxtb	r1, r1
 80058c8:	4402      	add	r2, r0
 80058ca:	4290      	cmp	r0, r2
 80058cc:	4603      	mov	r3, r0
 80058ce:	d101      	bne.n	80058d4 <memchr+0x10>
 80058d0:	2300      	movs	r3, #0
 80058d2:	e003      	b.n	80058dc <memchr+0x18>
 80058d4:	781c      	ldrb	r4, [r3, #0]
 80058d6:	3001      	adds	r0, #1
 80058d8:	428c      	cmp	r4, r1
 80058da:	d1f6      	bne.n	80058ca <memchr+0x6>
 80058dc:	4618      	mov	r0, r3
 80058de:	bd10      	pop	{r4, pc}

080058e0 <memcpy>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	1e43      	subs	r3, r0, #1
 80058e4:	440a      	add	r2, r1
 80058e6:	4291      	cmp	r1, r2
 80058e8:	d100      	bne.n	80058ec <memcpy+0xc>
 80058ea:	bd10      	pop	{r4, pc}
 80058ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058f4:	e7f7      	b.n	80058e6 <memcpy+0x6>
	...

080058f8 <_free_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4605      	mov	r5, r0
 80058fc:	2900      	cmp	r1, #0
 80058fe:	d043      	beq.n	8005988 <_free_r+0x90>
 8005900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005904:	1f0c      	subs	r4, r1, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	bfb8      	it	lt
 800590a:	18e4      	addlt	r4, r4, r3
 800590c:	f000 f8dd 	bl	8005aca <__malloc_lock>
 8005910:	4a1e      	ldr	r2, [pc, #120]	; (800598c <_free_r+0x94>)
 8005912:	6813      	ldr	r3, [r2, #0]
 8005914:	4610      	mov	r0, r2
 8005916:	b933      	cbnz	r3, 8005926 <_free_r+0x2e>
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	6014      	str	r4, [r2, #0]
 800591c:	4628      	mov	r0, r5
 800591e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005922:	f000 b8d3 	b.w	8005acc <__malloc_unlock>
 8005926:	42a3      	cmp	r3, r4
 8005928:	d90b      	bls.n	8005942 <_free_r+0x4a>
 800592a:	6821      	ldr	r1, [r4, #0]
 800592c:	1862      	adds	r2, r4, r1
 800592e:	4293      	cmp	r3, r2
 8005930:	bf01      	itttt	eq
 8005932:	681a      	ldreq	r2, [r3, #0]
 8005934:	685b      	ldreq	r3, [r3, #4]
 8005936:	1852      	addeq	r2, r2, r1
 8005938:	6022      	streq	r2, [r4, #0]
 800593a:	6063      	str	r3, [r4, #4]
 800593c:	6004      	str	r4, [r0, #0]
 800593e:	e7ed      	b.n	800591c <_free_r+0x24>
 8005940:	4613      	mov	r3, r2
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	b10a      	cbz	r2, 800594a <_free_r+0x52>
 8005946:	42a2      	cmp	r2, r4
 8005948:	d9fa      	bls.n	8005940 <_free_r+0x48>
 800594a:	6819      	ldr	r1, [r3, #0]
 800594c:	1858      	adds	r0, r3, r1
 800594e:	42a0      	cmp	r0, r4
 8005950:	d10b      	bne.n	800596a <_free_r+0x72>
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	4401      	add	r1, r0
 8005956:	1858      	adds	r0, r3, r1
 8005958:	4282      	cmp	r2, r0
 800595a:	6019      	str	r1, [r3, #0]
 800595c:	d1de      	bne.n	800591c <_free_r+0x24>
 800595e:	6810      	ldr	r0, [r2, #0]
 8005960:	6852      	ldr	r2, [r2, #4]
 8005962:	4401      	add	r1, r0
 8005964:	6019      	str	r1, [r3, #0]
 8005966:	605a      	str	r2, [r3, #4]
 8005968:	e7d8      	b.n	800591c <_free_r+0x24>
 800596a:	d902      	bls.n	8005972 <_free_r+0x7a>
 800596c:	230c      	movs	r3, #12
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	e7d4      	b.n	800591c <_free_r+0x24>
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	1821      	adds	r1, r4, r0
 8005976:	428a      	cmp	r2, r1
 8005978:	bf01      	itttt	eq
 800597a:	6811      	ldreq	r1, [r2, #0]
 800597c:	6852      	ldreq	r2, [r2, #4]
 800597e:	1809      	addeq	r1, r1, r0
 8005980:	6021      	streq	r1, [r4, #0]
 8005982:	6062      	str	r2, [r4, #4]
 8005984:	605c      	str	r4, [r3, #4]
 8005986:	e7c9      	b.n	800591c <_free_r+0x24>
 8005988:	bd38      	pop	{r3, r4, r5, pc}
 800598a:	bf00      	nop
 800598c:	200002dc 	.word	0x200002dc

08005990 <_malloc_r>:
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	1ccd      	adds	r5, r1, #3
 8005994:	f025 0503 	bic.w	r5, r5, #3
 8005998:	3508      	adds	r5, #8
 800599a:	2d0c      	cmp	r5, #12
 800599c:	bf38      	it	cc
 800599e:	250c      	movcc	r5, #12
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	4606      	mov	r6, r0
 80059a4:	db01      	blt.n	80059aa <_malloc_r+0x1a>
 80059a6:	42a9      	cmp	r1, r5
 80059a8:	d903      	bls.n	80059b2 <_malloc_r+0x22>
 80059aa:	230c      	movs	r3, #12
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	2000      	movs	r0, #0
 80059b0:	bd70      	pop	{r4, r5, r6, pc}
 80059b2:	f000 f88a 	bl	8005aca <__malloc_lock>
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <_malloc_r+0xac>)
 80059b8:	6814      	ldr	r4, [r2, #0]
 80059ba:	4621      	mov	r1, r4
 80059bc:	b991      	cbnz	r1, 80059e4 <_malloc_r+0x54>
 80059be:	4c20      	ldr	r4, [pc, #128]	; (8005a40 <_malloc_r+0xb0>)
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	b91b      	cbnz	r3, 80059cc <_malloc_r+0x3c>
 80059c4:	4630      	mov	r0, r6
 80059c6:	f000 f863 	bl	8005a90 <_sbrk_r>
 80059ca:	6020      	str	r0, [r4, #0]
 80059cc:	4629      	mov	r1, r5
 80059ce:	4630      	mov	r0, r6
 80059d0:	f000 f85e 	bl	8005a90 <_sbrk_r>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d124      	bne.n	8005a22 <_malloc_r+0x92>
 80059d8:	230c      	movs	r3, #12
 80059da:	4630      	mov	r0, r6
 80059dc:	6033      	str	r3, [r6, #0]
 80059de:	f000 f875 	bl	8005acc <__malloc_unlock>
 80059e2:	e7e4      	b.n	80059ae <_malloc_r+0x1e>
 80059e4:	680b      	ldr	r3, [r1, #0]
 80059e6:	1b5b      	subs	r3, r3, r5
 80059e8:	d418      	bmi.n	8005a1c <_malloc_r+0x8c>
 80059ea:	2b0b      	cmp	r3, #11
 80059ec:	d90f      	bls.n	8005a0e <_malloc_r+0x7e>
 80059ee:	600b      	str	r3, [r1, #0]
 80059f0:	18cc      	adds	r4, r1, r3
 80059f2:	50cd      	str	r5, [r1, r3]
 80059f4:	4630      	mov	r0, r6
 80059f6:	f000 f869 	bl	8005acc <__malloc_unlock>
 80059fa:	f104 000b 	add.w	r0, r4, #11
 80059fe:	1d23      	adds	r3, r4, #4
 8005a00:	f020 0007 	bic.w	r0, r0, #7
 8005a04:	1ac3      	subs	r3, r0, r3
 8005a06:	d0d3      	beq.n	80059b0 <_malloc_r+0x20>
 8005a08:	425a      	negs	r2, r3
 8005a0a:	50e2      	str	r2, [r4, r3]
 8005a0c:	e7d0      	b.n	80059b0 <_malloc_r+0x20>
 8005a0e:	684b      	ldr	r3, [r1, #4]
 8005a10:	428c      	cmp	r4, r1
 8005a12:	bf16      	itet	ne
 8005a14:	6063      	strne	r3, [r4, #4]
 8005a16:	6013      	streq	r3, [r2, #0]
 8005a18:	460c      	movne	r4, r1
 8005a1a:	e7eb      	b.n	80059f4 <_malloc_r+0x64>
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	6849      	ldr	r1, [r1, #4]
 8005a20:	e7cc      	b.n	80059bc <_malloc_r+0x2c>
 8005a22:	1cc4      	adds	r4, r0, #3
 8005a24:	f024 0403 	bic.w	r4, r4, #3
 8005a28:	42a0      	cmp	r0, r4
 8005a2a:	d005      	beq.n	8005a38 <_malloc_r+0xa8>
 8005a2c:	1a21      	subs	r1, r4, r0
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f000 f82e 	bl	8005a90 <_sbrk_r>
 8005a34:	3001      	adds	r0, #1
 8005a36:	d0cf      	beq.n	80059d8 <_malloc_r+0x48>
 8005a38:	6025      	str	r5, [r4, #0]
 8005a3a:	e7db      	b.n	80059f4 <_malloc_r+0x64>
 8005a3c:	200002dc 	.word	0x200002dc
 8005a40:	200002e0 	.word	0x200002e0

08005a44 <_realloc_r>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	4607      	mov	r7, r0
 8005a48:	4614      	mov	r4, r2
 8005a4a:	460e      	mov	r6, r1
 8005a4c:	b921      	cbnz	r1, 8005a58 <_realloc_r+0x14>
 8005a4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a52:	4611      	mov	r1, r2
 8005a54:	f7ff bf9c 	b.w	8005990 <_malloc_r>
 8005a58:	b922      	cbnz	r2, 8005a64 <_realloc_r+0x20>
 8005a5a:	f7ff ff4d 	bl	80058f8 <_free_r>
 8005a5e:	4625      	mov	r5, r4
 8005a60:	4628      	mov	r0, r5
 8005a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a64:	f000 f833 	bl	8005ace <_malloc_usable_size_r>
 8005a68:	42a0      	cmp	r0, r4
 8005a6a:	d20f      	bcs.n	8005a8c <_realloc_r+0x48>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4638      	mov	r0, r7
 8005a70:	f7ff ff8e 	bl	8005990 <_malloc_r>
 8005a74:	4605      	mov	r5, r0
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d0f2      	beq.n	8005a60 <_realloc_r+0x1c>
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	f7ff ff2f 	bl	80058e0 <memcpy>
 8005a82:	4631      	mov	r1, r6
 8005a84:	4638      	mov	r0, r7
 8005a86:	f7ff ff37 	bl	80058f8 <_free_r>
 8005a8a:	e7e9      	b.n	8005a60 <_realloc_r+0x1c>
 8005a8c:	4635      	mov	r5, r6
 8005a8e:	e7e7      	b.n	8005a60 <_realloc_r+0x1c>

08005a90 <_sbrk_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	2300      	movs	r3, #0
 8005a94:	4c05      	ldr	r4, [pc, #20]	; (8005aac <_sbrk_r+0x1c>)
 8005a96:	4605      	mov	r5, r0
 8005a98:	4608      	mov	r0, r1
 8005a9a:	6023      	str	r3, [r4, #0]
 8005a9c:	f7fc f87e 	bl	8001b9c <_sbrk>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d102      	bne.n	8005aaa <_sbrk_r+0x1a>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	b103      	cbz	r3, 8005aaa <_sbrk_r+0x1a>
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	20000484 	.word	0x20000484

08005ab0 <__ascii_wctomb>:
 8005ab0:	b149      	cbz	r1, 8005ac6 <__ascii_wctomb+0x16>
 8005ab2:	2aff      	cmp	r2, #255	; 0xff
 8005ab4:	bf8b      	itete	hi
 8005ab6:	238a      	movhi	r3, #138	; 0x8a
 8005ab8:	700a      	strbls	r2, [r1, #0]
 8005aba:	6003      	strhi	r3, [r0, #0]
 8005abc:	2001      	movls	r0, #1
 8005abe:	bf88      	it	hi
 8005ac0:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ac4:	4770      	bx	lr
 8005ac6:	4608      	mov	r0, r1
 8005ac8:	4770      	bx	lr

08005aca <__malloc_lock>:
 8005aca:	4770      	bx	lr

08005acc <__malloc_unlock>:
 8005acc:	4770      	bx	lr

08005ace <_malloc_usable_size_r>:
 8005ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ad2:	1f18      	subs	r0, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bfbc      	itt	lt
 8005ad8:	580b      	ldrlt	r3, [r1, r0]
 8005ada:	18c0      	addlt	r0, r0, r3
 8005adc:	4770      	bx	lr
	...

08005ae0 <_init>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	bf00      	nop
 8005ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae6:	bc08      	pop	{r3}
 8005ae8:	469e      	mov	lr, r3
 8005aea:	4770      	bx	lr

08005aec <_fini>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr
