
Esclava.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000546c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800592c  0800592c  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  0800592c  0800592c  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800592c  0800592c  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08005934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000238  08005b6c  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08005b6c  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c8b  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003834  00000000  00000000  00035eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008ab2  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ab8  00000000  00000000  000421d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001038  00000000  00000000  00042c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015cdb  00000000  00000000  00043cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ea81  00000000  00000000  000599a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00070c74  00000000  00000000  00068424  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d9098  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026f4  00000000  00000000  000d9114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	08005564 	.word	0x08005564

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	08005564 	.word	0x08005564

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <MX_ADC1_Init+0x48>)
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_ADC1_Init+0x4c>)
{
 80005ec:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	2400      	movs	r4, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005f0:	2501      	movs	r5, #1
  hadc1.Instance = ADC1;
 80005f2:	6003      	str	r3, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
{
 80005f8:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80005fe:	9403      	str	r4, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000600:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000602:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000604:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000606:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000608:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800060a:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060c:	f001 fc26 	bl	8001e5c <HAL_ADC_Init>
 8000610:	b108      	cbz	r0, 8000616 <MX_ADC1_Init+0x2e>
  {
    Error_Handler();
 8000612:	f000 fd89 	bl	8001128 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000616:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	a901      	add	r1, sp, #4
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_ADC1_Init+0x48>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061c:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000620:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000622:	f001 fa8b 	bl	8001b3c <HAL_ADC_ConfigChannel>
 8000626:	b108      	cbz	r0, 800062c <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 8000628:	f000 fd7e 	bl	8001128 <Error_Handler>
  }

}
 800062c:	b005      	add	sp, #20
 800062e:	bd30      	pop	{r4, r5, pc}
 8000630:	20000260 	.word	0x20000260
 8000634:	40012400 	.word	0x40012400

08000638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000638:	b530      	push	{r4, r5, lr}
 800063a:	4605      	mov	r5, r0
 800063c:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	2210      	movs	r2, #16
 8000640:	2100      	movs	r1, #0
 8000642:	a802      	add	r0, sp, #8
 8000644:	f004 f9a4 	bl	8004990 <memset>
  if(adcHandle->Instance==ADC1)
 8000648:	682a      	ldr	r2, [r5, #0]
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <HAL_ADC_MspInit+0x98>)
 800064c:	429a      	cmp	r2, r3
 800064e:	d13d      	bne.n	80006cc <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000650:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000654:	699a      	ldr	r2, [r3, #24]
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = FASE1_SENSOR_Pin|FASE2_SENSOR_Pin|FASE3_SENSOR_Pin|FASE4_SENSOR_Pin 
                          |FASE5_SENSOR_Pin|FASE6_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800065c:	619a      	str	r2, [r3, #24]
 800065e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	481c      	ldr	r0, [pc, #112]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000666:	9200      	str	r2, [sp, #0]
 8000668:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800066c:	4c1a      	ldr	r4, [pc, #104]	; (80006d8 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	f042 0204 	orr.w	r2, r2, #4
 8000672:	619a      	str	r2, [r3, #24]
 8000674:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000676:	223f      	movs	r2, #63	; 0x3f
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000680:	2303      	movs	r3, #3
 8000682:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f001 ff15 	bl	80024b4 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800068a:	2080      	movs	r0, #128	; 0x80
 800068c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000690:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000692:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000696:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069a:	4910      	ldr	r1, [pc, #64]	; (80006dc <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800069c:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069e:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006a2:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80006a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006aa:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80006ac:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006ae:	f001 fd3f 	bl	8002130 <HAL_DMA_Init>
 80006b2:	b108      	cbz	r0, 80006b8 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80006b4:	f000 fd38 	bl	8001128 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ba:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006bc:	2012      	movs	r0, #18
 80006be:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006c0:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006c2:	f001 fcc7 	bl	8002054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006c6:	2012      	movs	r0, #18
 80006c8:	f001 fd08 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006cc:	b007      	add	sp, #28
 80006ce:	bd30      	pop	{r4, r5, pc}
 80006d0:	40012400 	.word	0x40012400
 80006d4:	40010800 	.word	0x40010800
 80006d8:	20000290 	.word	0x20000290
 80006dc:	40020008 	.word	0x40020008

080006e0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_DMA_Init+0x3c>)
{
 80006e2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e4:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006e6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e8:	f042 0201 	orr.w	r2, r2, #1
 80006ec:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f0:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006f2:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006fc:	f001 fcaa 	bl	8002054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000700:	200b      	movs	r0, #11
 8000702:	f001 fceb 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2011      	movs	r0, #17
 800070a:	4611      	mov	r1, r2
 800070c:	f001 fca2 	bl	8002054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000710:	2011      	movs	r0, #17

}
 8000712:	b003      	add	sp, #12
 8000714:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000718:	f001 bce0 	b.w	80020dc <HAL_NVIC_EnableIRQ>
 800071c:	40021000 	.word	0x40021000

08000720 <Corrige_Med16>:

}


void Corrige_Med16(uint32_t *arreglo, uint32_t tamano)/* Función para        */
 {									/* eliminar los 16 bits altos de la      */
 8000720:	1f03      	subs	r3, r0, #4
 8000722:	3034      	adds	r0, #52	; 0x34
	for(uint8_t indice = 0; indice <= BUFFER_ADC; indice++)/* medición del   */
	{								/* ADC. 								 */
		arreglo[indice] &= 0x0000ffff;/* Borra los 16 bits más altos del
 8000724:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000728:	b292      	uxth	r2, r2
	for(uint8_t indice = 0; indice <= BUFFER_ADC; indice++)/* medición del   */
 800072a:	4283      	cmp	r3, r0
		arreglo[indice] &= 0x0000ffff;/* Borra los 16 bits más altos del
 800072c:	601a      	str	r2, [r3, #0]
	for(uint8_t indice = 0; indice <= BUFFER_ADC; indice++)/* medición del   */
 800072e:	d1f9      	bne.n	8000724 <Corrige_Med16+0x4>
									 * registro ya que tienen el dato
									 * repetido.							 */
	}
 }
 8000730:	4770      	bx	lr

08000732 <Valor_Max>:

uint16_t Valor_Max(uint32_t *arreglo, uint8_t tamano)/* Función para calcular el valor máximo*/
{									 /* de cualquier arreglo.                */
	uint16_t max = 0;
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000732:	2300      	movs	r3, #0
	uint16_t max = 0;
 8000734:	461a      	mov	r2, r3
{									 /* de cualquier arreglo.                */
 8000736:	b510      	push	{r4, lr}
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000738:	b2dc      	uxtb	r4, r3
 800073a:	42a1      	cmp	r1, r4
 800073c:	d801      	bhi.n	8000742 <Valor_Max+0x10>
		{
			max = arreglo[cont];
		}
	}
	return max;
}
 800073e:	4610      	mov	r0, r2
 8000740:	bd10      	pop	{r4, pc}
		if(max < arreglo[cont])
 8000742:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8000746:	3301      	adds	r3, #1
 8000748:	42a2      	cmp	r2, r4
			max = arreglo[cont];
 800074a:	bf38      	it	cc
 800074c:	b2a2      	uxthcc	r2, r4
 800074e:	e7f3      	b.n	8000738 <Valor_Max+0x6>

08000750 <Valor_Min>:

uint32_t Valor_Min(uint32_t *arreglo, uint8_t tamano)/* Función para calcular*/
{									 /* el valor mínimo de cualquier arreglo.*/
	uint32_t min = arreglo[0];
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000750:	2300      	movs	r3, #0
{									 /* el valor mínimo de cualquier arreglo.*/
 8000752:	b510      	push	{r4, lr}
	uint32_t min = arreglo[0];
 8000754:	6802      	ldr	r2, [r0, #0]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000756:	b2dc      	uxtb	r4, r3
 8000758:	42a1      	cmp	r1, r4
 800075a:	d801      	bhi.n	8000760 <Valor_Min+0x10>
		{
			min = arreglo[cont];
		}
	}
	return min;
}
 800075c:	4610      	mov	r0, r2
 800075e:	bd10      	pop	{r4, pc}
 8000760:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8000764:	3301      	adds	r3, #1
 8000766:	42a2      	cmp	r2, r4
 8000768:	bf28      	it	cs
 800076a:	4622      	movcs	r2, r4
 800076c:	e7f3      	b.n	8000756 <Valor_Min+0x6>

0800076e <Valor_Prom>:

uint32_t Valor_Prom(uint32_t *arreglo, uint8_t tamano)/* Función para		 */
{									/* calcular el valor promedio de cualquier arreglo.		 */
	uint32_t promedio = 0;
	for(uint8_t cont = 1; cont < tamano; cont++)
 800076e:	2300      	movs	r3, #0
	uint32_t promedio = 0;
 8000770:	461a      	mov	r2, r3
{									/* calcular el valor promedio de cualquier arreglo.		 */
 8000772:	b510      	push	{r4, lr}
 8000774:	3301      	adds	r3, #1
	for(uint8_t cont = 1; cont < tamano; cont++)
 8000776:	b2dc      	uxtb	r4, r3
 8000778:	42a1      	cmp	r1, r4
 800077a:	d802      	bhi.n	8000782 <Valor_Prom+0x14>
	{
		promedio += arreglo[cont];
	}
	return promedio/tamano;
}
 800077c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000780:	bd10      	pop	{r4, pc}
		promedio += arreglo[cont];
 8000782:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8000786:	4422      	add	r2, r4
 8000788:	e7f4      	b.n	8000774 <Valor_Prom+0x6>
 800078a:	0000      	movs	r0, r0
 800078c:	0000      	movs	r0, r0
	...

08000790 <Verif_Ten>:

uint32_t Verif_Ten(uint32_t *arreglo, uint8_t tamano, _Bool medic)/* Función  */
{   								/* para verificar si la señal medida está*/
									/* dentro de los parámetros correctos.   */
	switch(medic)
 8000790:	2a01      	cmp	r2, #1
{   								/* para verificar si la señal medida está*/
 8000792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000794:	4605      	mov	r5, r0
 8000796:	4614      	mov	r4, r2
	switch(medic)
 8000798:	d017      	beq.n	80007ca <Verif_Ten+0x3a>
	{
	case 0:							/* En caso de que la fase esté apagada,  */
	{								/* se debe verificar que la corriente sea*/
		if (((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||/* cero.         */
 800079a:	f7ff ffe8 	bl	800076e <Valor_Prom>
 800079e:	f7ff fe21 	bl	80003e4 <__aeabi_ui2d>
 80007a2:	a31f      	add	r3, pc, #124	; (adr r3, 8000820 <Verif_Ten+0x90>)
 80007a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a8:	4604      	mov	r4, r0
 80007aa:	460d      	mov	r5, r1
 80007ac:	f7ff ff12 	bl	80005d4 <__aeabi_dcmpgt>
 80007b0:	bb88      	cbnz	r0, 8000816 <Verif_Ten+0x86>
 80007b2:	a31d      	add	r3, pc, #116	; (adr r3, 8000828 <Verif_Ten+0x98>)
 80007b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007b8:	4620      	mov	r0, r4
 80007ba:	4629      	mov	r1, r5
 80007bc:	f7ff feec 	bl	8000598 <__aeabi_dcmplt>
 80007c0:	1c04      	adds	r4, r0, #0
 80007c2:	bf18      	it	ne
 80007c4:	2401      	movne	r4, #1
			return HAL_OK;
		}
	}
	break;
	}
}
 80007c6:	4620      	mov	r0, r4
 80007c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((Valor_Max(arreglo, tamano)) > VIMAX ||/* esté entre los valores */
 80007ca:	f7ff ffb2 	bl	8000732 <Valor_Max>
 80007ce:	f640 03b6 	movw	r3, #2230	; 0x8b6
 80007d2:	4298      	cmp	r0, r3
 80007d4:	d8f7      	bhi.n	80007c6 <Verif_Ten+0x36>
			((Valor_Min(arreglo, tamano)) < VIMIN) ||/* permitidos.			 */
 80007d6:	4628      	mov	r0, r5
 80007d8:	f7ff ffba 	bl	8000750 <Valor_Min>
		if ((Valor_Max(arreglo, tamano)) > VIMAX ||/* esté entre los valores */
 80007dc:	f240 7343 	movw	r3, #1859	; 0x743
 80007e0:	4298      	cmp	r0, r3
 80007e2:	d9f0      	bls.n	80007c6 <Verif_Ten+0x36>
			((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff ffc2 	bl	800076e <Valor_Prom>
 80007ea:	f7ff fdfb 	bl	80003e4 <__aeabi_ui2d>
			((Valor_Min(arreglo, tamano)) < VIMIN) ||/* permitidos.			 */
 80007ee:	a30c      	add	r3, pc, #48	; (adr r3, 8000820 <Verif_Ten+0x90>)
 80007f0:	e9d3 2300 	ldrd	r2, r3, [r3]
			((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||
 80007f4:	4606      	mov	r6, r0
 80007f6:	460f      	mov	r7, r1
			((Valor_Min(arreglo, tamano)) < VIMIN) ||/* permitidos.			 */
 80007f8:	f7ff feec 	bl	80005d4 <__aeabi_dcmpgt>
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d1e2      	bne.n	80007c6 <Verif_Ten+0x36>
			((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||
 8000800:	a309      	add	r3, pc, #36	; (adr r3, 8000828 <Verif_Ten+0x98>)
 8000802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000806:	4630      	mov	r0, r6
 8000808:	4639      	mov	r1, r7
 800080a:	f7ff fec5 	bl	8000598 <__aeabi_dcmplt>
 800080e:	2800      	cmp	r0, #0
 8000810:	bf08      	it	eq
 8000812:	2400      	moveq	r4, #0
 8000814:	e7d7      	b.n	80007c6 <Verif_Ten+0x36>
			return HAL_ERROR;
 8000816:	2401      	movs	r4, #1
 8000818:	e7d5      	b.n	80007c6 <Verif_Ten+0x36>
 800081a:	bf00      	nop
 800081c:	f3af 8000 	nop.w
 8000820:	9999999a 	.word	0x9999999a
 8000824:	40a19999 	.word	0x40a19999
 8000828:	cccccccd 	.word	0xcccccccd
 800082c:	409ccccc 	.word	0x409ccccc

08000830 <Verif_Temp>:

uint32_t Verif_Temp(uint32_t *arreglo, uint8_t tamano)/* Función para		 */
{									/* verificar si la temperatura medida	 */
	uint32_t promTemp = 0;			/* está entre los parámetros correctos.  */
	for(uint8_t cTemp = 1; cTemp <= tamano; cTemp++)
 8000830:	2201      	movs	r2, #1
	uint32_t promTemp = 0;			/* está entre los parámetros correctos.  */
 8000832:	2300      	movs	r3, #0
{									/* verificar si la temperatura medida	 */
 8000834:	b510      	push	{r4, lr}
	for(uint8_t cTemp = 1; cTemp <= tamano; cTemp++)
 8000836:	428a      	cmp	r2, r1
 8000838:	d907      	bls.n	800084a <Verif_Temp+0x1a>
	{
		promTemp += arreglo[cTemp];
	}
	promTemp /= tamano;
 800083a:	fbb3 f0f1 	udiv	r0, r3, r1
	return(((promTemp > TMIN) && (promTemp < TMAX)) ?	HAL_OK: HAL_ERROR);
 800083e:	3801      	subs	r0, #1
}
 8000840:	2844      	cmp	r0, #68	; 0x44
 8000842:	bf94      	ite	ls
 8000844:	2000      	movls	r0, #0
 8000846:	2001      	movhi	r0, #1
 8000848:	bd10      	pop	{r4, pc}
		promTemp += arreglo[cTemp];
 800084a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
	for(uint8_t cTemp = 1; cTemp <= tamano; cTemp++)
 800084e:	3201      	adds	r2, #1
		promTemp += arreglo[cTemp];
 8000850:	4423      	add	r3, r4
	for(uint8_t cTemp = 1; cTemp <= tamano; cTemp++)
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	e7ef      	b.n	8000836 <Verif_Temp+0x6>

08000856 <Verif_Tiempo>:

/* Función para determinar si la hora    */
/* actual es la hora para iniciar el     */
/* cambio de estado de una fase.		 */
uint32_t Verif_Tiempo(RTC_TimeTypeDef *hActual, RTC_TimeTypeDef *hInicio)
{
 8000856:	b510      	push	{r4, lr}
	if((hActual->Hours == hInicio->Hours) && (hActual->Minutes == hInicio->Minutes)
 8000858:	780b      	ldrb	r3, [r1, #0]
 800085a:	7802      	ldrb	r2, [r0, #0]
 800085c:	429a      	cmp	r2, r3
 800085e:	d107      	bne.n	8000870 <Verif_Tiempo+0x1a>
 8000860:	7844      	ldrb	r4, [r0, #1]
 8000862:	784a      	ldrb	r2, [r1, #1]
 8000864:	4294      	cmp	r4, r2
 8000866:	d103      	bne.n	8000870 <Verif_Tiempo+0x1a>
			&& (hActual->Seconds == hInicio->Seconds))
 8000868:	7880      	ldrb	r0, [r0, #2]
 800086a:	788a      	ldrb	r2, [r1, #2]
 800086c:	4290      	cmp	r0, r2
 800086e:	d00a      	beq.n	8000886 <Verif_Tiempo+0x30>
	{								/* Con este comando inicia el conteo para*/
		return HAL_OK;				/* el programa específico de fase.	     */
	}
	else if((hInicio->Hours == 24) && (hInicio->Minutes == 60) &&
 8000870:	2b18      	cmp	r3, #24
 8000872:	d10a      	bne.n	800088a <Verif_Tiempo+0x34>
 8000874:	784b      	ldrb	r3, [r1, #1]
 8000876:	2b3c      	cmp	r3, #60	; 0x3c
 8000878:	d107      	bne.n	800088a <Verif_Tiempo+0x34>
 800087a:	788b      	ldrb	r3, [r1, #2]
 800087c:	2b3c      	cmp	r3, #60	; 0x3c
			(hInicio->Seconds == 60))/* Si se envía este comando entonces se */
	{								/* debe apagar la fase respectiva.		 */
		return HAL_TIMEOUT;
 800087e:	bf14      	ite	ne
 8000880:	2002      	movne	r0, #2
 8000882:	2003      	moveq	r0, #3
	}
	else							/* A implementar el uso externo con este */
	{								/* comando.								 */
		return HAL_BUSY;
	}
}
 8000884:	bd10      	pop	{r4, pc}
		return HAL_OK;				/* el programa específico de fase.	     */
 8000886:	2000      	movs	r0, #0
 8000888:	e7fc      	b.n	8000884 <Verif_Tiempo+0x2e>
		return HAL_BUSY;
 800088a:	2002      	movs	r0, #2
 800088c:	e7fa      	b.n	8000884 <Verif_Tiempo+0x2e>
	...

08000890 <Fases_Auto>:
{
 8000890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000894:	460f      	mov	r7, r1
 8000896:	4604      	mov	r4, r0
	if(Verif_Tiempo(aHora, &iHora->tFase1) == HAL_OK)
 8000898:	1cd1      	adds	r1, r2, #3
 800089a:	4638      	mov	r0, r7
{
 800089c:	4690      	mov	r8, r2
	if(Verif_Tiempo(aHora, &iHora->tFase1) == HAL_OK)
 800089e:	f7ff ffda 	bl	8000856 <Verif_Tiempo>
 80008a2:	4dce      	ldr	r5, [pc, #824]	; (8000bdc <Fases_Auto+0x34c>)
 80008a4:	2800      	cmp	r0, #0
 80008a6:	f040 815d 	bne.w	8000b64 <Fases_Auto+0x2d4>
		c1Fase = 0;
 80008aa:	4bcd      	ldr	r3, [pc, #820]	; (8000be0 <Fases_Auto+0x350>)
 80008ac:	7018      	strb	r0, [r3, #0]
		bFases[0] = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	702b      	strb	r3, [r5, #0]
	if(bFases[0] == 1)
 80008b2:	f895 b000 	ldrb.w	fp, [r5]
 80008b6:	f1bb 0f01 	cmp.w	fp, #1
 80008ba:	d12b      	bne.n	8000914 <Fases_Auto+0x84>
		switch(f1Actual)
 80008bc:	f8df a344 	ldr.w	sl, [pc, #836]	; 8000c04 <Fases_Auto+0x374>
 80008c0:	4ec7      	ldr	r6, [pc, #796]	; (8000be0 <Fases_Auto+0x350>)
 80008c2:	f89a 9000 	ldrb.w	r9, [sl]
 80008c6:	fa5f f989 	uxtb.w	r9, r9
 80008ca:	f1b9 0f02 	cmp.w	r9, #2
 80008ce:	f000 8152 	beq.w	8000b76 <Fases_Auto+0x2e6>
 80008d2:	f1b9 0f03 	cmp.w	r9, #3
 80008d6:	f000 8161 	beq.w	8000b9c <Fases_Auto+0x30c>
 80008da:	f1b9 0f01 	cmp.w	r9, #1
 80008de:	f040 8171 	bne.w	8000bc4 <Fases_Auto+0x334>
			HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e8:	48be      	ldr	r0, [pc, #760]	; (8000be4 <Fases_Auto+0x354>)
 80008ea:	f001 ff3f 	bl	800276c <HAL_GPIO_WritePin>
			if(c1Fase == tiempos[0])
 80008ee:	7833      	ldrb	r3, [r6, #0]
 80008f0:	7822      	ldrb	r2, [r4, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d10a      	bne.n	800090c <Fases_Auto+0x7c>
				HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,GPIO_PIN_SET);
 80008f6:	464a      	mov	r2, r9
 80008f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fc:	48b9      	ldr	r0, [pc, #740]	; (8000be4 <Fases_Auto+0x354>)
 80008fe:	f001 ff35 	bl	800276c <HAL_GPIO_WritePin>
				f1Actual = 2;
 8000902:	2302      	movs	r3, #2
				f1Actual = 3;
 8000904:	f88a 3000 	strb.w	r3, [sl]
				c1Fase = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	7033      	strb	r3, [r6, #0]
		c1Fase++;
 800090c:	7833      	ldrb	r3, [r6, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7033      	strb	r3, [r6, #0]
	if(Verif_Tiempo(aHora, &iHora->tFase2) == HAL_OK)
 8000914:	f108 0106 	add.w	r1, r8, #6
 8000918:	4638      	mov	r0, r7
 800091a:	f7ff ff9c 	bl	8000856 <Verif_Tiempo>
 800091e:	2800      	cmp	r0, #0
 8000920:	f040 8153 	bne.w	8000bca <Fases_Auto+0x33a>
		c2Fase = 0;
 8000924:	4bb0      	ldr	r3, [pc, #704]	; (8000be8 <Fases_Auto+0x358>)
 8000926:	7018      	strb	r0, [r3, #0]
		bFases[1] = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	706b      	strb	r3, [r5, #1]
	if(bFases[1] == 1)
 800092c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8000930:	f1bb 0f01 	cmp.w	fp, #1
 8000934:	d12b      	bne.n	800098e <Fases_Auto+0xfe>
		switch(f2Actual)
 8000936:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8000c08 <Fases_Auto+0x378>
 800093a:	4eab      	ldr	r6, [pc, #684]	; (8000be8 <Fases_Auto+0x358>)
 800093c:	f89a 9000 	ldrb.w	r9, [sl]
 8000940:	fa5f f989 	uxtb.w	r9, r9
 8000944:	f1b9 0f02 	cmp.w	r9, #2
 8000948:	f000 8166 	beq.w	8000c18 <Fases_Auto+0x388>
 800094c:	f1b9 0f03 	cmp.w	r9, #3
 8000950:	f000 8175 	beq.w	8000c3e <Fases_Auto+0x3ae>
 8000954:	f1b9 0f01 	cmp.w	r9, #1
 8000958:	f040 8185 	bne.w	8000c66 <Fases_Auto+0x3d6>
			HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin,GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	48a2      	ldr	r0, [pc, #648]	; (8000bec <Fases_Auto+0x35c>)
 8000964:	f001 ff02 	bl	800276c <HAL_GPIO_WritePin>
			if(c2Fase == tiempos[3])
 8000968:	7833      	ldrb	r3, [r6, #0]
 800096a:	78e2      	ldrb	r2, [r4, #3]
 800096c:	429a      	cmp	r2, r3
 800096e:	d10a      	bne.n	8000986 <Fases_Auto+0xf6>
				HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin,GPIO_PIN_SET);
 8000970:	464a      	mov	r2, r9
 8000972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000976:	489d      	ldr	r0, [pc, #628]	; (8000bec <Fases_Auto+0x35c>)
 8000978:	f001 fef8 	bl	800276c <HAL_GPIO_WritePin>
				f2Actual = 2;
 800097c:	2302      	movs	r3, #2
				f2Actual = 3;
 800097e:	f88a 3000 	strb.w	r3, [sl]
				c2Fase = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	7033      	strb	r3, [r6, #0]
		c2Fase++;
 8000986:	7833      	ldrb	r3, [r6, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	7033      	strb	r3, [r6, #0]
	if(Verif_Tiempo(aHora, &iHora->tFase3) == HAL_OK)
 800098e:	f108 0109 	add.w	r1, r8, #9
 8000992:	4638      	mov	r0, r7
 8000994:	f7ff ff5f 	bl	8000856 <Verif_Tiempo>
 8000998:	2800      	cmp	r0, #0
 800099a:	f040 8167 	bne.w	8000c6c <Fases_Auto+0x3dc>
		bFases[2] = 1;
 800099e:	2301      	movs	r3, #1
		c3Fase = 0;
 80009a0:	4a93      	ldr	r2, [pc, #588]	; (8000bf0 <Fases_Auto+0x360>)
		bFases[2] = 1;
 80009a2:	70ab      	strb	r3, [r5, #2]
		c3Fase = 0;
 80009a4:	7010      	strb	r0, [r2, #0]
	if(bFases[2] == 1)
 80009a6:	f895 b002 	ldrb.w	fp, [r5, #2]
 80009aa:	f1bb 0f01 	cmp.w	fp, #1
 80009ae:	d129      	bne.n	8000a04 <Fases_Auto+0x174>
		switch(f3Actual)
 80009b0:	f8df a258 	ldr.w	sl, [pc, #600]	; 8000c0c <Fases_Auto+0x37c>
 80009b4:	4e8e      	ldr	r6, [pc, #568]	; (8000bf0 <Fases_Auto+0x360>)
 80009b6:	f89a 9000 	ldrb.w	r9, [sl]
 80009ba:	fa5f f989 	uxtb.w	r9, r9
 80009be:	f1b9 0f02 	cmp.w	r9, #2
 80009c2:	f000 815b 	beq.w	8000c7c <Fases_Auto+0x3ec>
 80009c6:	f1b9 0f03 	cmp.w	r9, #3
 80009ca:	f000 816a 	beq.w	8000ca2 <Fases_Auto+0x412>
 80009ce:	f1b9 0f01 	cmp.w	r9, #1
 80009d2:	f040 817a 	bne.w	8000cca <Fases_Auto+0x43a>
			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin,GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2104      	movs	r1, #4
 80009da:	4882      	ldr	r0, [pc, #520]	; (8000be4 <Fases_Auto+0x354>)
 80009dc:	f001 fec6 	bl	800276c <HAL_GPIO_WritePin>
			if(c3Fase == tiempos[6])
 80009e0:	7833      	ldrb	r3, [r6, #0]
 80009e2:	79a2      	ldrb	r2, [r4, #6]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d109      	bne.n	80009fc <Fases_Auto+0x16c>
				HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin,GPIO_PIN_SET);
 80009e8:	464a      	mov	r2, r9
 80009ea:	2104      	movs	r1, #4
 80009ec:	487d      	ldr	r0, [pc, #500]	; (8000be4 <Fases_Auto+0x354>)
 80009ee:	f001 febd 	bl	800276c <HAL_GPIO_WritePin>
				f3Actual = 2;
 80009f2:	2302      	movs	r3, #2
				f3Actual = 3;
 80009f4:	f88a 3000 	strb.w	r3, [sl]
				c3Fase = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	7033      	strb	r3, [r6, #0]
		c3Fase++;
 80009fc:	7833      	ldrb	r3, [r6, #0]
 80009fe:	3301      	adds	r3, #1
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	7033      	strb	r3, [r6, #0]
	if(Verif_Tiempo(aHora, &iHora->tFase4) == HAL_OK)
 8000a04:	f108 010c 	add.w	r1, r8, #12
 8000a08:	4638      	mov	r0, r7
 8000a0a:	f7ff ff24 	bl	8000856 <Verif_Tiempo>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	f040 815e 	bne.w	8000cd0 <Fases_Auto+0x440>
		c4Fase = 0;
 8000a14:	4b77      	ldr	r3, [pc, #476]	; (8000bf4 <Fases_Auto+0x364>)
 8000a16:	7018      	strb	r0, [r3, #0]
		bFases[3] = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	70eb      	strb	r3, [r5, #3]
	if(bFases[3] == 1)
 8000a1c:	f895 b003 	ldrb.w	fp, [r5, #3]
 8000a20:	f1bb 0f01 	cmp.w	fp, #1
 8000a24:	d129      	bne.n	8000a7a <Fases_Auto+0x1ea>
		switch(f4Actual)
 8000a26:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8000c10 <Fases_Auto+0x380>
 8000a2a:	4e72      	ldr	r6, [pc, #456]	; (8000bf4 <Fases_Auto+0x364>)
 8000a2c:	f89a 9000 	ldrb.w	r9, [sl]
 8000a30:	fa5f f989 	uxtb.w	r9, r9
 8000a34:	f1b9 0f02 	cmp.w	r9, #2
 8000a38:	f000 8153 	beq.w	8000ce2 <Fases_Auto+0x452>
 8000a3c:	f1b9 0f03 	cmp.w	r9, #3
 8000a40:	f000 8160 	beq.w	8000d04 <Fases_Auto+0x474>
 8000a44:	f1b9 0f01 	cmp.w	r9, #1
 8000a48:	f040 816e 	bne.w	8000d28 <Fases_Auto+0x498>
			HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin,GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2108      	movs	r1, #8
 8000a50:	4864      	ldr	r0, [pc, #400]	; (8000be4 <Fases_Auto+0x354>)
 8000a52:	f001 fe8b 	bl	800276c <HAL_GPIO_WritePin>
			if(c4Fase == tiempos[9])
 8000a56:	7833      	ldrb	r3, [r6, #0]
 8000a58:	7a62      	ldrb	r2, [r4, #9]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d109      	bne.n	8000a72 <Fases_Auto+0x1e2>
				HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin,GPIO_PIN_SET);
 8000a5e:	464a      	mov	r2, r9
 8000a60:	2108      	movs	r1, #8
 8000a62:	4860      	ldr	r0, [pc, #384]	; (8000be4 <Fases_Auto+0x354>)
 8000a64:	f001 fe82 	bl	800276c <HAL_GPIO_WritePin>
				f4Actual = 2;
 8000a68:	2302      	movs	r3, #2
				f4Actual = 3;
 8000a6a:	f88a 3000 	strb.w	r3, [sl]
				c4Fase = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	7033      	strb	r3, [r6, #0]
		c4Fase++;
 8000a72:	7833      	ldrb	r3, [r6, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	7033      	strb	r3, [r6, #0]
	if(Verif_Tiempo(aHora, &iHora->tFase5) == HAL_OK)
 8000a7a:	f108 010f 	add.w	r1, r8, #15
 8000a7e:	4638      	mov	r0, r7
 8000a80:	f7ff fee9 	bl	8000856 <Verif_Tiempo>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	f040 8152 	bne.w	8000d2e <Fases_Auto+0x49e>
		c5Fase = 0;
 8000a8a:	4b5b      	ldr	r3, [pc, #364]	; (8000bf8 <Fases_Auto+0x368>)
 8000a8c:	7018      	strb	r0, [r3, #0]
		bFases[4] = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	712b      	strb	r3, [r5, #4]
	if(bFases[4] == 1)
 8000a92:	f895 b004 	ldrb.w	fp, [r5, #4]
 8000a96:	f1bb 0f01 	cmp.w	fp, #1
 8000a9a:	d12b      	bne.n	8000af4 <Fases_Auto+0x264>
		switch(f5Actual)
 8000a9c:	f8df a174 	ldr.w	sl, [pc, #372]	; 8000c14 <Fases_Auto+0x384>
 8000aa0:	4e55      	ldr	r6, [pc, #340]	; (8000bf8 <Fases_Auto+0x368>)
 8000aa2:	f89a 9000 	ldrb.w	r9, [sl]
 8000aa6:	fa5f f989 	uxtb.w	r9, r9
 8000aaa:	f1b9 0f02 	cmp.w	r9, #2
 8000aae:	f000 8147 	beq.w	8000d40 <Fases_Auto+0x4b0>
 8000ab2:	f1b9 0f03 	cmp.w	r9, #3
 8000ab6:	f000 8156 	beq.w	8000d66 <Fases_Auto+0x4d6>
 8000aba:	f1b9 0f01 	cmp.w	r9, #1
 8000abe:	f040 8166 	bne.w	8000d8e <Fases_Auto+0x4fe>
			HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin,GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	4846      	ldr	r0, [pc, #280]	; (8000be4 <Fases_Auto+0x354>)
 8000aca:	f001 fe4f 	bl	800276c <HAL_GPIO_WritePin>
			if(c5Fase == tiempos[12])
 8000ace:	7833      	ldrb	r3, [r6, #0]
 8000ad0:	7b22      	ldrb	r2, [r4, #12]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d10a      	bne.n	8000aec <Fases_Auto+0x25c>
				HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin,GPIO_PIN_SET);
 8000ad6:	464a      	mov	r2, r9
 8000ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000adc:	4841      	ldr	r0, [pc, #260]	; (8000be4 <Fases_Auto+0x354>)
 8000ade:	f001 fe45 	bl	800276c <HAL_GPIO_WritePin>
				f5Actual = 2;
 8000ae2:	2302      	movs	r3, #2
				f5Actual = 3;
 8000ae4:	f88a 3000 	strb.w	r3, [sl]
				c5Fase = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	7033      	strb	r3, [r6, #0]
		c5Fase++;
 8000aec:	7833      	ldrb	r3, [r6, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	7033      	strb	r3, [r6, #0]
	if(Verif_Tiempo(aHora, &iHora->tFase6) == HAL_OK)
 8000af4:	f108 0112 	add.w	r1, r8, #18
 8000af8:	4638      	mov	r0, r7
 8000afa:	f7ff feac 	bl	8000856 <Verif_Tiempo>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	f040 8148 	bne.w	8000d94 <Fases_Auto+0x504>
		c6Fase = 0;
 8000b04:	4b3d      	ldr	r3, [pc, #244]	; (8000bfc <Fases_Auto+0x36c>)
 8000b06:	7018      	strb	r0, [r3, #0]
		bFases[5] = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	716b      	strb	r3, [r5, #5]
	if(bFases[5] == 1)
 8000b0c:	f895 8005 	ldrb.w	r8, [r5, #5]
 8000b10:	f1b8 0f01 	cmp.w	r8, #1
 8000b14:	d124      	bne.n	8000b60 <Fases_Auto+0x2d0>
		switch(f6Actual)
 8000b16:	4f3a      	ldr	r7, [pc, #232]	; (8000c00 <Fases_Auto+0x370>)
 8000b18:	4d38      	ldr	r5, [pc, #224]	; (8000bfc <Fases_Auto+0x36c>)
 8000b1a:	783e      	ldrb	r6, [r7, #0]
 8000b1c:	b2f6      	uxtb	r6, r6
 8000b1e:	2e02      	cmp	r6, #2
 8000b20:	f000 8141 	beq.w	8000da6 <Fases_Auto+0x516>
 8000b24:	2e03      	cmp	r6, #3
 8000b26:	f000 8151 	beq.w	8000dcc <Fases_Auto+0x53c>
 8000b2a:	2e01      	cmp	r6, #1
 8000b2c:	f040 8160 	bne.w	8000df0 <Fases_Auto+0x560>
			HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin,GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b36:	482b      	ldr	r0, [pc, #172]	; (8000be4 <Fases_Auto+0x354>)
 8000b38:	f001 fe18 	bl	800276c <HAL_GPIO_WritePin>
			if(c6Fase == tiempos[15])
 8000b3c:	782b      	ldrb	r3, [r5, #0]
 8000b3e:	7be2      	ldrb	r2, [r4, #15]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d109      	bne.n	8000b58 <Fases_Auto+0x2c8>
				HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin,GPIO_PIN_SET);
 8000b44:	4632      	mov	r2, r6
 8000b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4a:	4826      	ldr	r0, [pc, #152]	; (8000be4 <Fases_Auto+0x354>)
 8000b4c:	f001 fe0e 	bl	800276c <HAL_GPIO_WritePin>
				f6Actual = 2;
 8000b50:	2302      	movs	r3, #2
				f6Actual = 3;
 8000b52:	703b      	strb	r3, [r7, #0]
				c6Fase = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	702b      	strb	r3, [r5, #0]
		c6Fase++;
 8000b58:	782b      	ldrb	r3, [r5, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	702b      	strb	r3, [r5, #0]
}
 8000b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if(Verif_Tiempo(aHora, &iHora->tFase1) == HAL_TIMEOUT)
 8000b64:	2803      	cmp	r0, #3
 8000b66:	f47f aea4 	bne.w	80008b2 <Fases_Auto+0x22>
		bFases[0] = 0;
 8000b6a:	2300      	movs	r3, #0
		Apaga_Fase(1);
 8000b6c:	2001      	movs	r0, #1
		bFases[0] = 0;
 8000b6e:	702b      	strb	r3, [r5, #0]
		Apaga_Fase(1);
 8000b70:	f000 f9d0 	bl	8000f14 <Apaga_Fase>
 8000b74:	e69d      	b.n	80008b2 <Fases_Auto+0x22>
			HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	481b      	ldr	r0, [pc, #108]	; (8000bec <Fases_Auto+0x35c>)
 8000b7e:	f001 fdf5 	bl	800276c <HAL_GPIO_WritePin>
			if(c1Fase == tiempos[1])
 8000b82:	7833      	ldrb	r3, [r6, #0]
 8000b84:	7862      	ldrb	r2, [r4, #1]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	f47f aec0 	bne.w	800090c <Fases_Auto+0x7c>
				HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,GPIO_PIN_SET);
 8000b8c:	465a      	mov	r2, fp
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	4816      	ldr	r0, [pc, #88]	; (8000bec <Fases_Auto+0x35c>)
 8000b94:	f001 fdea 	bl	800276c <HAL_GPIO_WritePin>
				f1Actual = 3;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e6b3      	b.n	8000904 <Fases_Auto+0x74>
			HAL_GPIO_WritePin(GPIOA,FASE1_ROJO_Pin,GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	4812      	ldr	r0, [pc, #72]	; (8000bec <Fases_Auto+0x35c>)
 8000ba4:	f001 fde2 	bl	800276c <HAL_GPIO_WritePin>
			if(c1Fase == tiempos[2])
 8000ba8:	7833      	ldrb	r3, [r6, #0]
 8000baa:	78a2      	ldrb	r2, [r4, #2]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	f47f aead 	bne.w	800090c <Fases_Auto+0x7c>
				HAL_GPIO_WritePin(GPIOA,FASE1_ROJO_Pin,GPIO_PIN_SET);
 8000bb2:	465a      	mov	r2, fp
 8000bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <Fases_Auto+0x35c>)
 8000bba:	f001 fdd7 	bl	800276c <HAL_GPIO_WritePin>
				f1Actual = 1;
 8000bbe:	f88a b000 	strb.w	fp, [sl]
 8000bc2:	e6a1      	b.n	8000908 <Fases_Auto+0x78>
			Error_Handler();
 8000bc4:	f000 fab0 	bl	8001128 <Error_Handler>
		break;
 8000bc8:	e6a0      	b.n	800090c <Fases_Auto+0x7c>
	else if(Verif_Tiempo(aHora, &iHora->tFase2) == HAL_TIMEOUT)
 8000bca:	2803      	cmp	r0, #3
 8000bcc:	f47f aeae 	bne.w	800092c <Fases_Auto+0x9c>
		bFases[1] = 0;
 8000bd0:	2300      	movs	r3, #0
		Apaga_Fase(2);
 8000bd2:	2002      	movs	r0, #2
		bFases[1] = 0;
 8000bd4:	706b      	strb	r3, [r5, #1]
		Apaga_Fase(2);
 8000bd6:	f000 f99d 	bl	8000f14 <Apaga_Fase>
 8000bda:	e6a7      	b.n	800092c <Fases_Auto+0x9c>
 8000bdc:	200002d4 	.word	0x200002d4
 8000be0:	20000000 	.word	0x20000000
 8000be4:	40010c00 	.word	0x40010c00
 8000be8:	20000001 	.word	0x20000001
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	20000002 	.word	0x20000002
 8000bf4:	20000003 	.word	0x20000003
 8000bf8:	20000004 	.word	0x20000004
 8000bfc:	20000005 	.word	0x20000005
 8000c00:	2000000b 	.word	0x2000000b
 8000c04:	20000006 	.word	0x20000006
 8000c08:	20000007 	.word	0x20000007
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000009 	.word	0x20000009
 8000c14:	2000000a 	.word	0x2000000a
			HAL_GPIO_WritePin(GPIOA,FASE2_AMA_Pin,GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1e:	4876      	ldr	r0, [pc, #472]	; (8000df8 <Fases_Auto+0x568>)
 8000c20:	f001 fda4 	bl	800276c <HAL_GPIO_WritePin>
			if(c2Fase == tiempos[4])
 8000c24:	7833      	ldrb	r3, [r6, #0]
 8000c26:	7922      	ldrb	r2, [r4, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f47f aeac 	bne.w	8000986 <Fases_Auto+0xf6>
				HAL_GPIO_WritePin(GPIOA,FASE2_AMA_Pin,GPIO_PIN_SET);
 8000c2e:	465a      	mov	r2, fp
 8000c30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c34:	4870      	ldr	r0, [pc, #448]	; (8000df8 <Fases_Auto+0x568>)
 8000c36:	f001 fd99 	bl	800276c <HAL_GPIO_WritePin>
				f2Actual = 3;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e69f      	b.n	800097e <Fases_Auto+0xee>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c44:	486c      	ldr	r0, [pc, #432]	; (8000df8 <Fases_Auto+0x568>)
 8000c46:	f001 fd91 	bl	800276c <HAL_GPIO_WritePin>
			if(c2Fase == tiempos[5])
 8000c4a:	7833      	ldrb	r3, [r6, #0]
 8000c4c:	7962      	ldrb	r2, [r4, #5]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	f47f ae99 	bne.w	8000986 <Fases_Auto+0xf6>
				HAL_GPIO_WritePin(GPIOA,FASE2_ROJO_Pin,GPIO_PIN_SET);
 8000c54:	465a      	mov	r2, fp
 8000c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5a:	4867      	ldr	r0, [pc, #412]	; (8000df8 <Fases_Auto+0x568>)
 8000c5c:	f001 fd86 	bl	800276c <HAL_GPIO_WritePin>
				f2Actual = 1;
 8000c60:	f88a b000 	strb.w	fp, [sl]
 8000c64:	e68d      	b.n	8000982 <Fases_Auto+0xf2>
			Error_Handler();
 8000c66:	f000 fa5f 	bl	8001128 <Error_Handler>
		break;
 8000c6a:	e68c      	b.n	8000986 <Fases_Auto+0xf6>
	else if(Verif_Tiempo(aHora, &iHora->tFase3) == HAL_TIMEOUT)
 8000c6c:	2803      	cmp	r0, #3
 8000c6e:	f47f ae9a 	bne.w	80009a6 <Fases_Auto+0x116>
		bFases[2] = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	70ab      	strb	r3, [r5, #2]
		Apaga_Fase(3);
 8000c76:	f000 f94d 	bl	8000f14 <Apaga_Fase>
 8000c7a:	e694      	b.n	80009a6 <Fases_Auto+0x116>
			HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin,GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c82:	485e      	ldr	r0, [pc, #376]	; (8000dfc <Fases_Auto+0x56c>)
 8000c84:	f001 fd72 	bl	800276c <HAL_GPIO_WritePin>
			if(c3Fase == tiempos[7])
 8000c88:	7833      	ldrb	r3, [r6, #0]
 8000c8a:	79e2      	ldrb	r2, [r4, #7]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f47f aeb5 	bne.w	80009fc <Fases_Auto+0x16c>
				HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin,GPIO_PIN_SET);
 8000c92:	465a      	mov	r2, fp
 8000c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c98:	4858      	ldr	r0, [pc, #352]	; (8000dfc <Fases_Auto+0x56c>)
 8000c9a:	f001 fd67 	bl	800276c <HAL_GPIO_WritePin>
				f3Actual = 3;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e6a8      	b.n	80009f4 <Fases_Auto+0x164>
			HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca8:	4853      	ldr	r0, [pc, #332]	; (8000df8 <Fases_Auto+0x568>)
 8000caa:	f001 fd5f 	bl	800276c <HAL_GPIO_WritePin>
			if(c3Fase == tiempos[8])
 8000cae:	7833      	ldrb	r3, [r6, #0]
 8000cb0:	7a22      	ldrb	r2, [r4, #8]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	f47f aea2 	bne.w	80009fc <Fases_Auto+0x16c>
				HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,GPIO_PIN_SET);
 8000cb8:	465a      	mov	r2, fp
 8000cba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cbe:	484e      	ldr	r0, [pc, #312]	; (8000df8 <Fases_Auto+0x568>)
 8000cc0:	f001 fd54 	bl	800276c <HAL_GPIO_WritePin>
				f3Actual = 1;
 8000cc4:	f88a b000 	strb.w	fp, [sl]
 8000cc8:	e696      	b.n	80009f8 <Fases_Auto+0x168>
			Error_Handler();
 8000cca:	f000 fa2d 	bl	8001128 <Error_Handler>
		break;
 8000cce:	e695      	b.n	80009fc <Fases_Auto+0x16c>
	else if(Verif_Tiempo(aHora, &iHora->tFase4) == HAL_TIMEOUT)
 8000cd0:	2803      	cmp	r0, #3
 8000cd2:	f47f aea3 	bne.w	8000a1c <Fases_Auto+0x18c>
		bFases[3] = 0;
 8000cd6:	2300      	movs	r3, #0
		Apaga_Fase(4);
 8000cd8:	2004      	movs	r0, #4
		bFases[3] = 0;
 8000cda:	70eb      	strb	r3, [r5, #3]
		Apaga_Fase(4);
 8000cdc:	f000 f91a 	bl	8000f14 <Apaga_Fase>
 8000ce0:	e69c      	b.n	8000a1c <Fases_Auto+0x18c>
			HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin,GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	4845      	ldr	r0, [pc, #276]	; (8000dfc <Fases_Auto+0x56c>)
 8000ce8:	f001 fd40 	bl	800276c <HAL_GPIO_WritePin>
			if(c4Fase == tiempos[10])
 8000cec:	7833      	ldrb	r3, [r6, #0]
 8000cee:	7aa2      	ldrb	r2, [r4, #10]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f47f aebe 	bne.w	8000a72 <Fases_Auto+0x1e2>
				HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin,GPIO_PIN_SET);
 8000cf6:	465a      	mov	r2, fp
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	4840      	ldr	r0, [pc, #256]	; (8000dfc <Fases_Auto+0x56c>)
 8000cfc:	f001 fd36 	bl	800276c <HAL_GPIO_WritePin>
				f4Actual = 3;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e6b2      	b.n	8000a6a <Fases_Auto+0x1da>
			HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin,GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2120      	movs	r1, #32
 8000d08:	483c      	ldr	r0, [pc, #240]	; (8000dfc <Fases_Auto+0x56c>)
 8000d0a:	f001 fd2f 	bl	800276c <HAL_GPIO_WritePin>
			if(c4Fase == tiempos[11])
 8000d0e:	7833      	ldrb	r3, [r6, #0]
 8000d10:	7ae2      	ldrb	r2, [r4, #11]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	f47f aead 	bne.w	8000a72 <Fases_Auto+0x1e2>
				HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin,GPIO_PIN_SET);
 8000d18:	465a      	mov	r2, fp
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	4837      	ldr	r0, [pc, #220]	; (8000dfc <Fases_Auto+0x56c>)
 8000d1e:	f001 fd25 	bl	800276c <HAL_GPIO_WritePin>
				f4Actual = 1;
 8000d22:	f88a b000 	strb.w	fp, [sl]
 8000d26:	e6a2      	b.n	8000a6e <Fases_Auto+0x1de>
			Error_Handler();
 8000d28:	f000 f9fe 	bl	8001128 <Error_Handler>
		break;
 8000d2c:	e6a1      	b.n	8000a72 <Fases_Auto+0x1e2>
	else if(Verif_Tiempo(aHora, &iHora->tFase5) == HAL_TIMEOUT)
 8000d2e:	2803      	cmp	r0, #3
 8000d30:	f47f aeaf 	bne.w	8000a92 <Fases_Auto+0x202>
		bFases[4] = 0;
 8000d34:	2300      	movs	r3, #0
		Apaga_Fase(5);
 8000d36:	2005      	movs	r0, #5
		bFases[4] = 0;
 8000d38:	712b      	strb	r3, [r5, #4]
		Apaga_Fase(5);
 8000d3a:	f000 f8eb 	bl	8000f14 <Apaga_Fase>
 8000d3e:	e6a8      	b.n	8000a92 <Fases_Auto+0x202>
			HAL_GPIO_WritePin(GPIOB,FASE5_AMA_Pin,GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d46:	482d      	ldr	r0, [pc, #180]	; (8000dfc <Fases_Auto+0x56c>)
 8000d48:	f001 fd10 	bl	800276c <HAL_GPIO_WritePin>
			if(c5Fase == tiempos[13])
 8000d4c:	7833      	ldrb	r3, [r6, #0]
 8000d4e:	7b62      	ldrb	r2, [r4, #13]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f47f aecb 	bne.w	8000aec <Fases_Auto+0x25c>
				HAL_GPIO_WritePin(GPIOB,FASE5_AMA_Pin,GPIO_PIN_SET);
 8000d56:	465a      	mov	r2, fp
 8000d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5c:	4827      	ldr	r0, [pc, #156]	; (8000dfc <Fases_Auto+0x56c>)
 8000d5e:	f001 fd05 	bl	800276c <HAL_GPIO_WritePin>
				f5Actual = 3;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e6be      	b.n	8000ae4 <Fases_Auto+0x254>
			HAL_GPIO_WritePin(GPIOB,FASE5_ROJO_Pin,GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6c:	4823      	ldr	r0, [pc, #140]	; (8000dfc <Fases_Auto+0x56c>)
 8000d6e:	f001 fcfd 	bl	800276c <HAL_GPIO_WritePin>
			if(c5Fase == tiempos[14])
 8000d72:	7833      	ldrb	r3, [r6, #0]
 8000d74:	7ba2      	ldrb	r2, [r4, #14]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	f47f aeb8 	bne.w	8000aec <Fases_Auto+0x25c>
				HAL_GPIO_WritePin(GPIOB,FASE5_ROJO_Pin,GPIO_PIN_SET);
 8000d7c:	465a      	mov	r2, fp
 8000d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d82:	481e      	ldr	r0, [pc, #120]	; (8000dfc <Fases_Auto+0x56c>)
 8000d84:	f001 fcf2 	bl	800276c <HAL_GPIO_WritePin>
				f5Actual = 1;
 8000d88:	f88a b000 	strb.w	fp, [sl]
 8000d8c:	e6ac      	b.n	8000ae8 <Fases_Auto+0x258>
			Error_Handler();
 8000d8e:	f000 f9cb 	bl	8001128 <Error_Handler>
		break;
 8000d92:	e6ab      	b.n	8000aec <Fases_Auto+0x25c>
	else if(Verif_Tiempo(aHora, &iHora->tFase6) == HAL_TIMEOUT)
 8000d94:	2803      	cmp	r0, #3
 8000d96:	f47f aeb9 	bne.w	8000b0c <Fases_Auto+0x27c>
		bFases[5] = 0;
 8000d9a:	2300      	movs	r3, #0
		Apaga_Fase(6);
 8000d9c:	2006      	movs	r0, #6
		bFases[5] = 0;
 8000d9e:	716b      	strb	r3, [r5, #5]
		Apaga_Fase(6);
 8000da0:	f000 f8b8 	bl	8000f14 <Apaga_Fase>
 8000da4:	e6b2      	b.n	8000b0c <Fases_Auto+0x27c>
			HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin,GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dac:	4813      	ldr	r0, [pc, #76]	; (8000dfc <Fases_Auto+0x56c>)
 8000dae:	f001 fcdd 	bl	800276c <HAL_GPIO_WritePin>
			if(c6Fase == tiempos[16])
 8000db2:	782b      	ldrb	r3, [r5, #0]
 8000db4:	7c22      	ldrb	r2, [r4, #16]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	f47f aece 	bne.w	8000b58 <Fases_Auto+0x2c8>
				HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin,GPIO_PIN_SET);
 8000dbc:	4642      	mov	r2, r8
 8000dbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <Fases_Auto+0x56c>)
 8000dc4:	f001 fcd2 	bl	800276c <HAL_GPIO_WritePin>
				f6Actual = 3;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e6c2      	b.n	8000b52 <Fases_Auto+0x2c2>
			HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <Fases_Auto+0x568>)
 8000dd2:	f001 fccb 	bl	800276c <HAL_GPIO_WritePin>
			if(c6Fase == tiempos[17])
 8000dd6:	782b      	ldrb	r3, [r5, #0]
 8000dd8:	7c62      	ldrb	r2, [r4, #17]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	f47f aebc 	bne.w	8000b58 <Fases_Auto+0x2c8>
				HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,GPIO_PIN_SET);
 8000de0:	4642      	mov	r2, r8
 8000de2:	2180      	movs	r1, #128	; 0x80
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <Fases_Auto+0x568>)
 8000de6:	f001 fcc1 	bl	800276c <HAL_GPIO_WritePin>
				f6Actual = 1;
 8000dea:	f887 8000 	strb.w	r8, [r7]
 8000dee:	e6b1      	b.n	8000b54 <Fases_Auto+0x2c4>
			Error_Handler();
 8000df0:	f000 f99a 	bl	8001128 <Error_Handler>
		break;
 8000df4:	e6b0      	b.n	8000b58 <Fases_Auto+0x2c8>
 8000df6:	bf00      	nop
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	40010c00 	.word	0x40010c00

08000e00 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	2210      	movs	r2, #16
{
 8000e02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e06:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	eb0d 0002 	add.w	r0, sp, r2
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f003 fdbf 	bl	8004990 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000e14:	4e3a      	ldr	r6, [pc, #232]	; (8000f00 <MX_GPIO_Init+0x100>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	699a      	ldr	r2, [r3, #24]
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin|FASE3_ROJO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 8000e18:	4d3a      	ldr	r5, [pc, #232]	; (8000f04 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	f042 0210 	orr.w	r2, r2, #16
 8000e1e:	619a      	str	r2, [r3, #24]
 8000e20:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000e22:	4630      	mov	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	f002 0210 	and.w	r2, r2, #16
 8000e28:	9200      	str	r2, [sp, #0]
 8000e2a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000e2e:	f649 7180 	movw	r1, #40832	; 0x9f80
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	f042 0220 	orr.w	r2, r2, #32
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	699a      	ldr	r2, [r3, #24]
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3a:	2403      	movs	r4, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	f002 0220 	and.w	r2, r2, #32
 8000e40:	9201      	str	r2, [sp, #4]
 8000e42:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin|FASE3_ROJO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	f042 0204 	orr.w	r2, r2, #4
 8000e4e:	619a      	str	r2, [r3, #24]
 8000e50:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	f002 0204 	and.w	r2, r2, #4
 8000e5a:	9202      	str	r2, [sp, #8]
 8000e5c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	f042 0208 	orr.w	r2, r2, #8
 8000e66:	619a      	str	r2, [r3, #24]
 8000e68:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000e6a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	9303      	str	r3, [sp, #12]
 8000e72:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000e74:	f001 fc7a 	bl	800276c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	f24f 713f 	movw	r1, #63295	; 0xf73f
 8000e80:	f001 fc74 	bl	800276c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e88:	a904      	add	r1, sp, #16
 8000e8a:	481f      	ldr	r0, [pc, #124]	; (8000f08 <MX_GPIO_Init+0x108>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f001 fb10 	bl	80024b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e94:	a904      	add	r1, sp, #16
 8000e96:	481d      	ldr	r0, [pc, #116]	; (8000f0c <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e98:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9c:	f001 fb0a 	bl	80024b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ea0:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	a904      	add	r1, sp, #16
 8000ea4:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f001 fb03 	bl	80024b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	f649 7380 	movw	r3, #40832	; 0x9f80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	a904      	add	r1, sp, #16
 8000eb4:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	e9cd 3904 	strd	r3, r9, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	e9cd 8706 	strd	r8, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f001 faf9 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 8000ec2:	f24f 733f 	movw	r3, #63295	; 0xf73f
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	a904      	add	r1, sp, #16
 8000ec8:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	e9cd 3904 	strd	r3, r9, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	e9cd 8706 	strd	r8, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f001 faef 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ed6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	a904      	add	r1, sp, #16
 8000edc:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f001 fae7 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <MX_GPIO_Init+0x110>)
 8000ee8:	6853      	ldr	r3, [r2, #4]
 8000eea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef2:	6053      	str	r3, [r2, #4]

}
 8000ef4:	b009      	add	sp, #36	; 0x24
 8000ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40011400 	.word	0x40011400
 8000f10:	40010000 	.word	0x40010000

08000f14 <Apaga_Fase>:

/* USER CODE BEGIN 2 */
void Apaga_Fase(uint8_t numero)		/* Función para apagar completamente una */
{									/* fase.								 */
	switch(numero)
 8000f14:	3801      	subs	r0, #1
{									/* fase.								 */
 8000f16:	b508      	push	{r3, lr}
	switch(numero)
 8000f18:	2805      	cmp	r0, #5
 8000f1a:	d832      	bhi.n	8000f82 <Apaga_Fase+0x6e>
 8000f1c:	e8df f000 	tbb	[pc, r0]
 8000f20:	1c120e03 	.word	0x1c120e03
 8000f24:	2723      	.short	0x2723
	{
	case 1:
	{
		HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2c:	4815      	ldr	r0, [pc, #84]	; (8000f84 <Apaga_Fase+0x70>)
 8000f2e:	f001 fc1d 	bl	800276c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin | FASE1_ROJO_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 7140 	mov.w	r1, #768	; 0x300
	}
	break;
	case 6:
	{
		HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin | FASE6_AMA_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin | FASE6_ROJO_Pin, GPIO_PIN_SET);
 8000f38:	4813      	ldr	r0, [pc, #76]	; (8000f88 <Apaga_Fase+0x74>)
 8000f3a:	e010      	b.n	8000f5e <Apaga_Fase+0x4a>
		HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin | FASE2_AMA_Pin | FASE2_ROJO_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f42:	e7f9      	b.n	8000f38 <Apaga_Fase+0x24>
		HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE3_AMA_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f241 0104 	movw	r1, #4100	; 0x1004
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <Apaga_Fase+0x70>)
 8000f4c:	f001 fc0e 	bl	800276c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f56:	e7ef      	b.n	8000f38 <Apaga_Fase+0x24>
		HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin | FASE4_AMA_Pin | FASE4_ROJO_Pin, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2138      	movs	r1, #56	; 0x38
		HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin | FASE5_AMA_Pin | FASE5_ROJO_Pin, GPIO_PIN_SET);
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <Apaga_Fase+0x70>)
	}
	break;
	}
}
 8000f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin | FASE6_ROJO_Pin, GPIO_PIN_SET);
 8000f62:	f001 bc03 	b.w	800276c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin | FASE5_AMA_Pin | FASE5_ROJO_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000f6c:	e7f6      	b.n	8000f5c <Apaga_Fase+0x48>
		HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin | FASE6_AMA_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <Apaga_Fase+0x70>)
 8000f76:	f001 fbf9 	bl	800276c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin | FASE6_ROJO_Pin, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000f80:	e7da      	b.n	8000f38 <Apaga_Fase+0x24>
}
 8000f82:	bd08      	pop	{r3, pc}
 8000f84:	40010c00 	.word	0x40010c00
 8000f88:	40010800 	.word	0x40010800

08000f8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f8c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8000f90:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <MX_I2C1_Init+0x38>)
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_I2C1_Init+0x3c>)
 8000f94:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 68;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	2244      	movs	r2, #68	; 0x44
 8000f9c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa8:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fac:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fae:	f001 fc83 	bl	80028b8 <HAL_I2C_Init>
 8000fb2:	b118      	cbz	r0, 8000fbc <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8000fb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000fb8:	f000 b8b6 	b.w	8001128 <Error_Handler>
}
 8000fbc:	bd08      	pop	{r3, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002dc 	.word	0x200002dc
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	000186a0 	.word	0x000186a0

08000fcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fcc:	b530      	push	{r4, r5, lr}
 8000fce:	4605      	mov	r5, r0
 8000fd0:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	a802      	add	r0, sp, #8
 8000fd8:	f003 fcda 	bl	8004990 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fdc:	682a      	ldr	r2, [r5, #0]
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_I2C_MspInit+0xa4>)
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d142      	bne.n	800106a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4c23      	ldr	r4, [pc, #140]	; (8001074 <HAL_I2C_MspInit+0xa8>)
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe6:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fea:	2101      	movs	r1, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	61a3      	str	r3, [r4, #24]
 8000ff2:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	4820      	ldr	r0, [pc, #128]	; (8001078 <HAL_I2C_MspInit+0xac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffe:	2312      	movs	r3, #18
 8001000:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	a902      	add	r1, sp, #8
 800100c:	f001 fa52 	bl	80024b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001010:	69e3      	ldr	r3, [r4, #28]
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001012:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001014:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001018:	61e3      	str	r3, [r4, #28]
 800101a:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101c:	4817      	ldr	r0, [pc, #92]	; (800107c <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001026:	2300      	movs	r3, #0
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001028:	4c15      	ldr	r4, [pc, #84]	; (8001080 <HAL_I2C_MspInit+0xb4>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102a:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800102e:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001032:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001036:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800103a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800103c:	f001 f878 	bl	8002130 <HAL_DMA_Init>
 8001040:	b108      	cbz	r0, 8001046 <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8001042:	f000 f871 	bl	8001128 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	201f      	movs	r0, #31
 800104a:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800104c:	63ac      	str	r4, [r5, #56]	; 0x38
 800104e:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001050:	f001 f800 	bl	8002054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001054:	201f      	movs	r0, #31
 8001056:	f001 f841 	bl	80020dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2020      	movs	r0, #32
 800105e:	4611      	mov	r1, r2
 8001060:	f000 fff8 	bl	8002054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001064:	2020      	movs	r0, #32
 8001066:	f001 f839 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800106a:	b007      	add	sp, #28
 800106c:	bd30      	pop	{r4, r5, pc}
 800106e:	bf00      	nop
 8001070:	40005400 	.word	0x40005400
 8001074:	40021000 	.word	0x40021000
 8001078:	40010c00 	.word	0x40010c00
 800107c:	40020080 	.word	0x40020080
 8001080:	20000330 	.word	0x20000330

08001084 <reg_Esp>:
}

/* USER CODE BEGIN 4 */
void reg_Esp(void)
{
	_CFSR = (*((volatile unsigned long *)(0xE000ED28)));
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <reg_Esp+0x5c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <reg_Esp+0x60>)
 800108a:	601a      	str	r2, [r3, #0]
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C)));
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <reg_Esp+0x64>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <reg_Esp+0x68>)
 8001092:	601a      	str	r2, [r3, #0]
	_DFSR = (*((volatile unsigned long *)(0xE000ED30)));
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <reg_Esp+0x6c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <reg_Esp+0x70>)
 800109a:	601a      	str	r2, [r3, #0]
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C)));
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <reg_Esp+0x74>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <reg_Esp+0x78>)
 80010a2:	601a      	str	r2, [r3, #0]
	_MMAR = (*((volatile unsigned long *)(0xE000ED34)));
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <reg_Esp+0x7c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <reg_Esp+0x80>)
 80010aa:	601a      	str	r2, [r3, #0]
	_BFAR = (*((volatile unsigned long *)(0xE000ED38)));
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <reg_Esp+0x84>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <reg_Esp+0x88>)
 80010b2:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80010b4:	f3ef 8205 	mrs	r2, IPSR
	_IPSR = __get_IPSR();
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <reg_Esp+0x8c>)
 80010ba:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80010bc:	f3ef 8211 	mrs	r2, BASEPRI
	_BASEPRI = __get_BASEPRI();
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <reg_Esp+0x90>)
 80010c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010c4:	f3ef 8210 	mrs	r2, PRIMASK
	_PRIMASK = __get_PRIMASK();
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <reg_Esp+0x94>)
 80010ca:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 80010cc:	f3ef 8213 	mrs	r2, FAULTMASK
	_FAULTMASK = __get_FAULTMASK();
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <reg_Esp+0x98>)
 80010d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80010d4:	f3ef 8205 	mrs	r2, IPSR
	_ISPR0 = __get_IPSR();
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <reg_Esp+0x9c>)
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed28 	.word	0xe000ed28
 80010e4:	200003c4 	.word	0x200003c4
 80010e8:	e000ed2c 	.word	0xe000ed2c
 80010ec:	20000414 	.word	0x20000414
 80010f0:	e000ed30 	.word	0xe000ed30
 80010f4:	20000420 	.word	0x20000420
 80010f8:	e000ed3c 	.word	0xe000ed3c
 80010fc:	2000041c 	.word	0x2000041c
 8001100:	e000ed34 	.word	0xe000ed34
 8001104:	20000410 	.word	0x20000410
 8001108:	e000ed38 	.word	0xe000ed38
 800110c:	20000378 	.word	0x20000378
 8001110:	20000408 	.word	0x20000408
 8001114:	200003fc 	.word	0x200003fc
 8001118:	20000418 	.word	0x20000418
 800111c:	200003c0 	.word	0x200003c0
 8001120:	20000380 	.word	0x20000380

08001124 <HAL_I2C_SlaveRxCpltCallback>:
	}
}

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c1)
{
	__asm("nop");
 8001124:	bf00      	nop
}
 8001126:	4770      	bx	lr

08001128 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB,LED_FALLA_Pin,GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2102      	movs	r1, #2
 800112c:	4801      	ldr	r0, [pc, #4]	; (8001134 <Error_Handler+0xc>)
 800112e:	f001 bb1d 	b.w	800276c <HAL_GPIO_WritePin>
 8001132:	bf00      	nop
 8001134:	40010c00 	.word	0x40010c00

08001138 <SystemClock_Config>:
{
 8001138:	b510      	push	{r4, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113c:	2224      	movs	r2, #36	; 0x24
 800113e:	2100      	movs	r1, #0
 8001140:	a80b      	add	r0, sp, #44	; 0x2c
 8001142:	f003 fc25 	bl	8004990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001146:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	2410      	movs	r4, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114a:	2100      	movs	r1, #0
 800114c:	eb0d 0002 	add.w	r0, sp, r2
 8001150:	f003 fc1e 	bl	8004990 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001154:	4622      	mov	r2, r4
 8001156:	2100      	movs	r1, #0
 8001158:	a801      	add	r0, sp, #4
 800115a:	f003 fc19 	bl	8004990 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800115e:	2306      	movs	r3, #6
 8001160:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001162:	2301      	movs	r3, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001164:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001166:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116a:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f002 fb0e 	bl	800378c <HAL_RCC_OscConfig>
 8001170:	b108      	cbz	r0, 8001176 <SystemClock_Config+0x3e>
    Error_Handler();
 8001172:	f7ff ffd9 	bl	8001128 <Error_Handler>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001176:	230f      	movs	r3, #15
 8001178:	2100      	movs	r1, #0
 800117a:	e9cd 3105 	strd	r3, r1, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800117e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001182:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001184:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001188:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800118a:	f002 fd47 	bl	8003c1c <HAL_RCC_ClockConfig>
 800118e:	b108      	cbz	r0, 8001194 <SystemClock_Config+0x5c>
    Error_Handler();
 8001190:	f7ff ffca 	bl	8001128 <Error_Handler>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001198:	2203      	movs	r2, #3
 800119a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800119e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a2:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80011a4:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	f002 fe4d 	bl	8003e44 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	b108      	cbz	r0, 80011b0 <SystemClock_Config+0x78>
    Error_Handler();
 80011ac:	f7ff ffbc 	bl	8001128 <Error_Handler>
}
 80011b0:	b014      	add	sp, #80	; 0x50
 80011b2:	bd10      	pop	{r4, pc}

080011b4 <main>:
{
 80011b4:	b508      	push	{r3, lr}
	Selec_Opera((char *) tramaEntrada);
 80011b6:	482d      	ldr	r0, [pc, #180]	; (800126c <main+0xb8>)
 80011b8:	f000 f936 	bl	8001428 <Selec_Opera>
	reg_Esp();
 80011bc:	f7ff ff62 	bl	8001084 <reg_Esp>
	fasesTiempo[1] = 3;				/* debe eliminar esta asignación y tomar */
 80011c0:	2103      	movs	r1, #3
	fasesTiempo[2] = 4;				/* los valores del comando recibido una  */
 80011c2:	2204      	movs	r2, #4
	fasesTiempo[0] = 6;				/* Tiempos de encendido de la fase 1, se */
 80011c4:	2006      	movs	r0, #6
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <main+0xbc>)
  HAL_RTC_MspInit(&hrtc);			/* Inicializando el RTC.                 */
 80011c8:	4c2a      	ldr	r4, [pc, #168]	; (8001274 <main+0xc0>)
	fasesTiempo[1] = 3;				/* debe eliminar esta asignación y tomar */
 80011ca:	7059      	strb	r1, [r3, #1]
	fasesTiempo[2] = 4;				/* los valores del comando recibido una  */
 80011cc:	709a      	strb	r2, [r3, #2]
	fasesTiempo[4] = 3;				/* debe eliminar esta asignación y tomar */
 80011ce:	7119      	strb	r1, [r3, #4]
	fasesTiempo[5] = 4;				/* los valores del comando recibido una  */
 80011d0:	715a      	strb	r2, [r3, #5]
	fasesTiempo[7] = 3;				/* debe eliminar esta asignación y tomar */
 80011d2:	71d9      	strb	r1, [r3, #7]
	fasesTiempo[8] = 4;				/* los valores del comando recibido una  */
 80011d4:	721a      	strb	r2, [r3, #8]
	fasesTiempo[10] = 3;			/* debe eliminar esta asignación y tomar */
 80011d6:	7299      	strb	r1, [r3, #10]
	fasesTiempo[11] = 4;			/* los valores del comando recibido una  */
 80011d8:	72da      	strb	r2, [r3, #11]
	fasesTiempo[13] = 3;			/* debe eliminar esta asignación y tomar */
 80011da:	7359      	strb	r1, [r3, #13]
	fasesTiempo[14] = 4;			/* los valores del comando recibido una  */
 80011dc:	739a      	strb	r2, [r3, #14]
	fasesTiempo[16] = 3;			/* debe eliminar esta asignación y tomar */
 80011de:	7419      	strb	r1, [r3, #16]
	fasesTiempo[17] = 4;			/* los valores del comando recibido una  */
 80011e0:	745a      	strb	r2, [r3, #17]
	fasesTiempo[0] = 6;				/* Tiempos de encendido de la fase 1, se */
 80011e2:	7018      	strb	r0, [r3, #0]
	fasesTiempo[3] = 6;				/* Tiempos de encendido de la fase 2, se */
 80011e4:	70d8      	strb	r0, [r3, #3]
	fasesTiempo[6] = 6;				/* Tiempos de encendido de la fase 3, se */
 80011e6:	7198      	strb	r0, [r3, #6]
	fasesTiempo[9] = 6;				/* Tiempos de encendido de la fase 4, se */
 80011e8:	7258      	strb	r0, [r3, #9]
	fasesTiempo[12] = 6;			/* Tiempos de encendido de la fase 5, se */
 80011ea:	7318      	strb	r0, [r3, #12]
	fasesTiempo[15] = 6;			/* Tiempos de encendido de la fase 6, se */
 80011ec:	73d8      	strb	r0, [r3, #15]
  HAL_Init();
 80011ee:	f000 fb9b 	bl	8001928 <HAL_Init>
  SystemClock_Config();
 80011f2:	f7ff ffa1 	bl	8001138 <SystemClock_Config>
  MX_GPIO_Init();
 80011f6:	f7ff fe03 	bl	8000e00 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fa:	f7ff fa71 	bl	80006e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80011fe:	f7ff f9f3 	bl	80005e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001202:	f7ff fec3 	bl	8000f8c <MX_I2C1_Init>
  MX_RTC_Init();
 8001206:	f000 f9a7 	bl	8001558 <MX_RTC_Init>
  HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin | FASE1_AMA_Pin | FASE1_ROJO_Pin |
 800120a:	2201      	movs	r2, #1
 800120c:	f649 7180 	movw	r1, #40832	; 0x9f80
 8001210:	4819      	ldr	r0, [pc, #100]	; (8001278 <main+0xc4>)
 8001212:	f001 faab 	bl	800276c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,LED_STATUS_Pin | LED_FALLA_Pin | FASE3_VERDE_Pin |
 8001216:	2201      	movs	r2, #1
 8001218:	f24f 713f 	movw	r1, #63295	; 0xf73f
 800121c:	4817      	ldr	r0, [pc, #92]	; (800127c <main+0xc8>)
 800121e:	f001 faa5 	bl	800276c <HAL_GPIO_WritePin>
  HAL_RTC_MspInit(&hrtc);			/* Inicializando el RTC.                 */
 8001222:	4620      	mov	r0, r4
 8001224:	f000 f9cc 	bl	80015c0 <HAL_RTC_MspInit>
  HAL_I2C_MspInit(&hi2c1);			/* Inicializando el modo I2C.            */
 8001228:	4815      	ldr	r0, [pc, #84]	; (8001280 <main+0xcc>)
 800122a:	f7ff fecf 	bl	8000fcc <HAL_I2C_MspInit>
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_SEC);/* Se habilita la interrupción */
 800122e:	6822      	ldr	r2, [r4, #0]
	  if(HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) tramaEntrada, T_TRAMA, HAL_MAX_DELAY)
 8001230:	4d13      	ldr	r5, [pc, #76]	; (8001280 <main+0xcc>)
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_SEC);/* Se habilita la interrupción */
 8001232:	6813      	ldr	r3, [r2, #0]
	  if(HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) tramaEntrada, T_TRAMA, HAL_MAX_DELAY)
 8001234:	4c0d      	ldr	r4, [pc, #52]	; (800126c <main+0xb8>)
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_SEC);/* Se habilita la interrupción */
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);	/* del RTC cada segundo y luego se       */
 800123c:	4a11      	ldr	r2, [pc, #68]	; (8001284 <main+0xd0>)
		  codigoError = 20;
 800123e:	4e12      	ldr	r6, [pc, #72]	; (8001288 <main+0xd4>)
  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);	/* del RTC cada segundo y luego se       */
 8001240:	6853      	ldr	r3, [r2, #4]
 8001242:	f023 0310 	bic.w	r3, r3, #16
 8001246:	6053      	str	r3, [r2, #4]
	  if(HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) tramaEntrada, T_TRAMA, HAL_MAX_DELAY)
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	220a      	movs	r2, #10
 800124e:	4907      	ldr	r1, [pc, #28]	; (800126c <main+0xb8>)
 8001250:	4628      	mov	r0, r5
 8001252:	f001 fc31 	bl	8002ab8 <HAL_I2C_Slave_Receive>
 8001256:	b120      	cbz	r0, 8001262 <main+0xae>
		  codigoError = 20;
 8001258:	2314      	movs	r3, #20
 800125a:	6033      	str	r3, [r6, #0]
		  Error_Handler();
 800125c:	f7ff ff64 	bl	8001128 <Error_Handler>
 8001260:	e7f2      	b.n	8001248 <main+0x94>
		  Selec_Opera((char *) tramaEntrada);
 8001262:	4620      	mov	r0, r4
 8001264:	f000 f8e0 	bl	8001428 <Selec_Opera>
 8001268:	e7ee      	b.n	8001248 <main+0x94>
 800126a:	bf00      	nop
 800126c:	20000024 	.word	0x20000024
 8001270:	2000000c 	.word	0x2000000c
 8001274:	20000424 	.word	0x20000424
 8001278:	40010800 	.word	0x40010800
 800127c:	40010c00 	.word	0x40010c00
 8001280:	200002dc 	.word	0x200002dc
 8001284:	40002800 	.word	0x40002800
 8001288:	20000020 	.word	0x20000020

0800128c <HAL_RTCEx_RTCEventCallback>:
{									/* una interrupción por evento de segundo*/
 800128c:	b510      	push	{r4, lr}
 800128e:	4604      	mov	r4, r0
	HAL_RTC_GetTime(hrtc,&horaLeida, RTC_FORMAT_BCD);
 8001290:	2201      	movs	r2, #1
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <HAL_RTCEx_RTCEventCallback+0x40>)
 8001294:	f003 f83a 	bl	800430c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc,&fechaLeida, RTC_FORMAT_BCD);
 8001298:	2201      	movs	r2, #1
 800129a:	490d      	ldr	r1, [pc, #52]	; (80012d0 <HAL_RTCEx_RTCEventCallback+0x44>)
 800129c:	4620      	mov	r0, r4
 800129e:	f003 f997 	bl	80045d0 <HAL_RTC_GetDate>
	Fases_Auto(fasesTiempo, &horaLeida, &fTiempo);/* Manejo de fases en
 80012a2:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_RTCEx_RTCEventCallback+0x48>)
 80012a4:	4909      	ldr	r1, [pc, #36]	; (80012cc <HAL_RTCEx_RTCEventCallback+0x40>)
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <HAL_RTCEx_RTCEventCallback+0x4c>)
 80012a8:	f7ff faf2 	bl	8000890 <Fases_Auto>
  	if(HAL_ADC_Start_DMA(&hadc1,sensorLeido,2*BUFFER_ADC) != HAL_OK)
 80012ac:	221a      	movs	r2, #26
 80012ae:	490b      	ldr	r1, [pc, #44]	; (80012dc <HAL_RTCEx_RTCEventCallback+0x50>)
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <HAL_RTCEx_RTCEventCallback+0x54>)
 80012b2:	f000 fd21 	bl	8001cf8 <HAL_ADC_Start_DMA>
 80012b6:	b120      	cbz	r0, 80012c2 <HAL_RTCEx_RTCEventCallback+0x36>
  	    codigoError = 1;			/* Se inicia la conversión de los sensores*/
 80012b8:	2201      	movs	r2, #1
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_RTCEx_RTCEventCallback+0x58>)
 80012bc:	601a      	str	r2, [r3, #0]
  		Error_Handler();	  		/* por DMA para poder almacenar los       */
 80012be:	f7ff ff33 	bl	8001128 <Error_Handler>
	canalADC = 0;   				/* veces que se van a enviar datos es     */
 80012c2:	2200      	movs	r2, #0
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_RTCEx_RTCEventCallback+0x5c>)
 80012c6:	701a      	strb	r2, [r3, #0]
}
 80012c8:	bd10      	pop	{r4, pc}
 80012ca:	bf00      	nop
 80012cc:	2000037c 	.word	0x2000037c
 80012d0:	2000040c 	.word	0x2000040c
 80012d4:	200003cb 	.word	0x200003cb
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	20000384 	.word	0x20000384
 80012e0:	20000260 	.word	0x20000260
 80012e4:	20000020 	.word	0x20000020
 80012e8:	2000001e 	.word	0x2000001e

080012ec <HAL_ADC_ConvCpltCallback>:
{
 80012ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ADC_ChannelConfTypeDef sConfig = {0};
 80012ee:	2300      	movs	r3, #0
	canalADC++;						/* Para configurar el canal ADC a medir. */
 80012f0:	4e3b      	ldr	r6, [pc, #236]	; (80013e0 <HAL_ADC_ConvCpltCallback+0xf4>)
	ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80012f6:	9303      	str	r3, [sp, #12]
	canalADC++;						/* Para configurar el canal ADC a medir. */
 80012f8:	7833      	ldrb	r3, [r6, #0]
{
 80012fa:	4605      	mov	r5, r0
	canalADC++;						/* Para configurar el canal ADC a medir. */
 80012fc:	3301      	adds	r3, #1
	Corrige_Med16(sensorLeido, tam);
 80012fe:	210d      	movs	r1, #13
 8001300:	4838      	ldr	r0, [pc, #224]	; (80013e4 <HAL_ADC_ConvCpltCallback+0xf8>)
	canalADC++;						/* Para configurar el canal ADC a medir. */
 8001302:	7033      	strb	r3, [r6, #0]
	Corrige_Med16(sensorLeido, tam);
 8001304:	f7ff fa0c 	bl	8000720 <Corrige_Med16>
	if(canalADC < 7)				/* Verifica si la señal está entre los   */
 8001308:	7833      	ldrb	r3, [r6, #0]
 800130a:	2b06      	cmp	r3, #6
 800130c:	d81c      	bhi.n	8001348 <HAL_ADC_ConvCpltCallback+0x5c>
		if(bFases[canalADC - 1] == 1)/* Solo si hay fases encendidas se		 */
 800130e:	4a36      	ldr	r2, [pc, #216]	; (80013e8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001310:	4413      	add	r3, r2
 8001312:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8001316:	2a01      	cmp	r2, #1
 8001318:	d10a      	bne.n	8001330 <HAL_ADC_ConvCpltCallback+0x44>
			if(Verif_Ten(sensorLeido, tam, 1) != HAL_OK)/* Si está midiendo  */
 800131a:	210d      	movs	r1, #13
 800131c:	4831      	ldr	r0, [pc, #196]	; (80013e4 <HAL_ADC_ConvCpltCallback+0xf8>)
 800131e:	f7ff fa37 	bl	8000790 <Verif_Ten>
 8001322:	b138      	cbz	r0, 8001334 <HAL_ADC_ConvCpltCallback+0x48>
				codigoError = 2;	/* condición de error.				 	 */
 8001324:	2202      	movs	r2, #2
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <HAL_ADC_ConvCpltCallback+0x100>)
			codigoError = 12;
 8001328:	601a      	str	r2, [r3, #0]
			Error_Handler();
 800132a:	f7ff fefd 	bl	8001128 <Error_Handler>
 800132e:	e001      	b.n	8001334 <HAL_ADC_ConvCpltCallback+0x48>
		else if(bFases[canalADC - 1] == 0)/* Solo si hay fases apagadas se   */
 8001330:	2a00      	cmp	r2, #0
 8001332:	d0f2      	beq.n	800131a <HAL_ADC_ConvCpltCallback+0x2e>
	switch(canalADC)				/* Se cambia al sensor de fasea medir, el*/
 8001334:	7833      	ldrb	r3, [r6, #0]
 8001336:	3b01      	subs	r3, #1
 8001338:	2b06      	cmp	r3, #6
 800133a:	d842      	bhi.n	80013c2 <HAL_ADC_ConvCpltCallback+0xd6>
 800133c:	e8df f003 	tbb	[pc, r3]
 8001340:	4745430f 	.word	0x4745430f
 8001344:	4b49      	.short	0x4b49
 8001346:	4d          	.byte	0x4d
 8001347:	00          	.byte	0x00
	else if(canalADC == 7)			/* Si se está midiendo el sensor de      */
 8001348:	2b07      	cmp	r3, #7
 800134a:	d1f3      	bne.n	8001334 <HAL_ADC_ConvCpltCallback+0x48>
		if(Verif_Temp(sensorLeido,tam))
 800134c:	210d      	movs	r1, #13
 800134e:	4825      	ldr	r0, [pc, #148]	; (80013e4 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001350:	f7ff fa6e 	bl	8000830 <Verif_Temp>
 8001354:	2800      	cmp	r0, #0
 8001356:	d0ed      	beq.n	8001334 <HAL_ADC_ConvCpltCallback+0x48>
			codigoError = 12;
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_ADC_ConvCpltCallback+0x100>)
 800135a:	220c      	movs	r2, #12
 800135c:	e7e4      	b.n	8001328 <HAL_ADC_ConvCpltCallback+0x3c>
		sConfig.Channel = ADC_CHANNEL_1;
 800135e:	2301      	movs	r3, #1
	  hadc1.Instance = ADC1;
 8001360:	4823      	ldr	r0, [pc, #140]	; (80013f0 <HAL_ADC_ConvCpltCallback+0x104>)
		sConfig.Channel = ADC_CHANNEL_0;/* la fase 1 nuevamente.			 */
 8001362:	9301      	str	r3, [sp, #4]
	  hadc1.Instance = ADC1;
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x108>)
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001366:	2401      	movs	r4, #1
	  hadc1.Instance = ADC1;
 8001368:	6003      	str	r3, [r0, #0]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800136a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800136e:	2300      	movs	r3, #0
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001370:	7304      	strb	r4, [r0, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001372:	6083      	str	r3, [r0, #8]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001374:	7503      	strb	r3, [r0, #20]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001376:	61c2      	str	r2, [r0, #28]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001378:	6043      	str	r3, [r0, #4]
	  hadc1.Init.NbrOfConversion = 1;
 800137a:	6104      	str	r4, [r0, #16]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137c:	f000 fd6e 	bl	8001e5c <HAL_ADC_Init>
 8001380:	b108      	cbz	r0, 8001386 <HAL_ADC_ConvCpltCallback+0x9a>
	    Error_Handler();
 8001382:	f7ff fed1 	bl	8001128 <Error_Handler>
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;/* muestrear.           */
 8001386:	2306      	movs	r3, #6
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001388:	a901      	add	r1, sp, #4
 800138a:	4819      	ldr	r0, [pc, #100]	; (80013f0 <HAL_ADC_ConvCpltCallback+0x104>)
	sConfig.Rank = ADC_REGULAR_RANK_1;/* Se configura el proximo canal a     */
 800138c:	9402      	str	r4, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;/* muestrear.           */
 800138e:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	f000 fbd4 	bl	8001b3c <HAL_ADC_ConfigChannel>
 8001394:	b120      	cbz	r0, 80013a0 <HAL_ADC_ConvCpltCallback+0xb4>
		codigoError = 3;
 8001396:	2203      	movs	r2, #3
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_ADC_ConvCpltCallback+0x100>)
 800139a:	601a      	str	r2, [r3, #0]
		Error_Handler();
 800139c:	f7ff fec4 	bl	8001128 <Error_Handler>
	HAL_ADC_MspInit(hadc);
 80013a0:	4628      	mov	r0, r5
 80013a2:	f7ff f949 	bl	8000638 <HAL_ADC_MspInit>
	if(canalADC <=6)				/* Se inicia la conversión por DMA       */
 80013a6:	7833      	ldrb	r3, [r6, #0]
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	d80a      	bhi.n	80013c2 <HAL_ADC_ConvCpltCallback+0xd6>
		if(HAL_ADC_Start_DMA(&hadc1,sensorLeido,2*BUFFER_ADC) != HAL_OK)
 80013ac:	221a      	movs	r2, #26
 80013ae:	490d      	ldr	r1, [pc, #52]	; (80013e4 <HAL_ADC_ConvCpltCallback+0xf8>)
 80013b0:	480f      	ldr	r0, [pc, #60]	; (80013f0 <HAL_ADC_ConvCpltCallback+0x104>)
 80013b2:	f000 fca1 	bl	8001cf8 <HAL_ADC_Start_DMA>
 80013b6:	b120      	cbz	r0, 80013c2 <HAL_ADC_ConvCpltCallback+0xd6>
			codigoError = 4;
 80013b8:	2204      	movs	r2, #4
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_ADC_ConvCpltCallback+0x100>)
 80013bc:	601a      	str	r2, [r3, #0]
			Error_Handler();
 80013be:	f7ff feb3 	bl	8001128 <Error_Handler>
}
 80013c2:	b004      	add	sp, #16
 80013c4:	bd70      	pop	{r4, r5, r6, pc}
		sConfig.Channel = ADC_CHANNEL_2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	e7ca      	b.n	8001360 <HAL_ADC_ConvCpltCallback+0x74>
		sConfig.Channel = ADC_CHANNEL_3;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e7c8      	b.n	8001360 <HAL_ADC_ConvCpltCallback+0x74>
		sConfig.Channel = ADC_CHANNEL_4;
 80013ce:	2304      	movs	r3, #4
 80013d0:	e7c6      	b.n	8001360 <HAL_ADC_ConvCpltCallback+0x74>
		sConfig.Channel = ADC_CHANNEL_5;
 80013d2:	2305      	movs	r3, #5
 80013d4:	e7c4      	b.n	8001360 <HAL_ADC_ConvCpltCallback+0x74>
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013d6:	2310      	movs	r3, #16
 80013d8:	e7c2      	b.n	8001360 <HAL_ADC_ConvCpltCallback+0x74>
		sConfig.Channel = ADC_CHANNEL_0;/* la fase 1 nuevamente.			 */
 80013da:	2300      	movs	r3, #0
 80013dc:	e7c0      	b.n	8001360 <HAL_ADC_ConvCpltCallback+0x74>
 80013de:	bf00      	nop
 80013e0:	2000001e 	.word	0x2000001e
 80013e4:	20000384 	.word	0x20000384
 80013e8:	200002d4 	.word	0x200002d4
 80013ec:	20000020 	.word	0x20000020
 80013f0:	20000260 	.word	0x20000260
 80013f4:	40012400 	.word	0x40012400

080013f8 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80013f8:	4770      	bx	lr

080013fa <strindex>:
	}
}


volatile uint8_t strindex(char s[], char t[])/*Determnina la posición en la  */
{									/* que comienza el arreglo t[] dentro del*/
 80013fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t i, j, k;				/* arreglo s[], si el arreglo t[] no se  */
	for (i = 0; s[i] != '\0'; i++)	/* encuentra dentro de s[] entonces		 */
 80013fc:	2400      	movs	r4, #0
 80013fe:	b2e3      	uxtb	r3, r4
 8001400:	5cc2      	ldrb	r2, [r0, r3]
 8001402:	b912      	cbnz	r2, 800140a <strindex+0x10>
	{								/* devuelve 0xff.						 */
		for (j=i, k=0; t[k]!='\0' && s[j]==t[k]; j++, k++);
		if (k > 0 && t[k] == '\0')
		return i;
	}
	return 0xff;
 8001404:	23ff      	movs	r3, #255	; 0xff
}
 8001406:	4618      	mov	r0, r3
 8001408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140a:	2600      	movs	r6, #0
 800140c:	b2f2      	uxtb	r2, r6
		for (j=i, k=0; t[k]!='\0' && s[j]==t[k]; j++, k++);
 800140e:	5c8f      	ldrb	r7, [r1, r2]
 8001410:	189d      	adds	r5, r3, r2
 8001412:	b2ed      	uxtb	r5, r5
 8001414:	b12f      	cbz	r7, 8001422 <strindex+0x28>
 8001416:	5d42      	ldrb	r2, [r0, r5]
 8001418:	3601      	adds	r6, #1
 800141a:	42ba      	cmp	r2, r7
 800141c:	d0f6      	beq.n	800140c <strindex+0x12>
 800141e:	3401      	adds	r4, #1
 8001420:	e7ed      	b.n	80013fe <strindex+0x4>
		if (k > 0 && t[k] == '\0')
 8001422:	2a00      	cmp	r2, #0
 8001424:	d0fb      	beq.n	800141e <strindex+0x24>
 8001426:	e7ee      	b.n	8001406 <strindex+0xc>

08001428 <Selec_Opera>:
	volatile uint8_t pos = 0;
 8001428:	2300      	movs	r3, #0
{
 800142a:	b570      	push	{r4, r5, r6, lr}
 800142c:	4604      	mov	r4, r0
 800142e:	b094      	sub	sp, #80	; 0x50
	int hora = 0, minuto = 0, segundo = 0, dia = 0, mes = 0, semana = 0, ano = 0;
 8001430:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001434:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8001438:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	volatile uint8_t pos = 0;
 800143c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	uint8_t eComando[T_COMANDO + 1] = {0};
 8001440:	9312      	str	r3, [sp, #72]	; 0x48
 8001442:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	int hora = 0, minuto = 0, segundo = 0, dia = 0, mes = 0, semana = 0, ano = 0;
 8001446:	9311      	str	r3, [sp, #68]	; 0x44
	while(pos < T_COMANDO)			/* Extrae el comando de la trama recibida*/
 8001448:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800144c:	2b03      	cmp	r3, #3
 800144e:	d915      	bls.n	800147c <Selec_Opera+0x54>
	pos = strindex(comandos, (char *) eComando);/* Verifica si el comando    */
 8001450:	a912      	add	r1, sp, #72	; 0x48
 8001452:	483c      	ldr	r0, [pc, #240]	; (8001544 <Selec_Opera+0x11c>)
 8001454:	f7ff ffd1 	bl	80013fa <strindex>
 8001458:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
	switch(pos)
 800145c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d066      	beq.n	8001534 <Selec_Opera+0x10c>
 8001466:	d819      	bhi.n	800149c <Selec_Opera+0x74>
 8001468:	2b04      	cmp	r3, #4
 800146a:	d01f      	beq.n	80014ac <Selec_Opera+0x84>
 800146c:	2b08      	cmp	r3, #8
 800146e:	d05f      	beq.n	8001530 <Selec_Opera+0x108>
 8001470:	2b00      	cmp	r3, #0
 8001472:	d165      	bne.n	8001540 <Selec_Opera+0x118>
		pos = 1;
 8001474:	2301      	movs	r3, #1
		 pos = 25;
 8001476:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
}
 800147a:	e057      	b.n	800152c <Selec_Opera+0x104>
		eComando[pos] = ent[pos];
 800147c:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8001480:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8001484:	a914      	add	r1, sp, #80	; 0x50
 8001486:	5ca2      	ldrb	r2, [r4, r2]
 8001488:	440b      	add	r3, r1
 800148a:	f803 2c08 	strb.w	r2, [r3, #-8]
		pos++;
 800148e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8001492:	3301      	adds	r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800149a:	e7d5      	b.n	8001448 <Selec_Opera+0x20>
	switch(pos)
 800149c:	2b14      	cmp	r3, #20
 800149e:	d04b      	beq.n	8001538 <Selec_Opera+0x110>
 80014a0:	2b18      	cmp	r3, #24
 80014a2:	d04b      	beq.n	800153c <Selec_Opera+0x114>
 80014a4:	2b10      	cmp	r3, #16
 80014a6:	d14b      	bne.n	8001540 <Selec_Opera+0x118>
		pos = 5;
 80014a8:	2305      	movs	r3, #5
 80014aa:	e7e4      	b.n	8001476 <Selec_Opera+0x4e>
		pos = sscanf(ent, "%s %d %d %d %d %d %d %d", eComando, &hora, &minuto,
 80014ac:	ab10      	add	r3, sp, #64	; 0x40
 80014ae:	9305      	str	r3, [sp, #20]
 80014b0:	ab11      	add	r3, sp, #68	; 0x44
 80014b2:	9304      	str	r3, [sp, #16]
 80014b4:	ab0f      	add	r3, sp, #60	; 0x3c
 80014b6:	9303      	str	r3, [sp, #12]
 80014b8:	ab0e      	add	r3, sp, #56	; 0x38
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	ab0d      	add	r3, sp, #52	; 0x34
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	ab0c      	add	r3, sp, #48	; 0x30
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	aa12      	add	r2, sp, #72	; 0x48
 80014c6:	ab0b      	add	r3, sp, #44	; 0x2c
 80014c8:	4620      	mov	r0, r4
 80014ca:	491f      	ldr	r1, [pc, #124]	; (8001548 <Selec_Opera+0x120>)
 80014cc:	f003 fa68 	bl	80049a0 <siscanf>
		fTiempo.hSistema.Hours = (uint8_t) hora;
 80014d0:	4c1e      	ldr	r4, [pc, #120]	; (800154c <Selec_Opera+0x124>)
 80014d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		fFecha.dSistema.Date = (uint8_t) dia;
 80014d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		fTiempo.hSistema.Hours = (uint8_t) hora;
 80014d6:	7023      	strb	r3, [r4, #0]
		fTiempo.hSistema.Minutes = (uint8_t) minuto;
 80014d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		pos = sscanf(ent, "%s %d %d %d %d %d %d %d", eComando, &hora, &minuto,
 80014da:	b2c0      	uxtb	r0, r0
		fTiempo.hSistema.Minutes = (uint8_t) minuto;
 80014dc:	7063      	strb	r3, [r4, #1]
		fTiempo.hSistema.Seconds = (uint8_t) segundo;
 80014de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		pos = sscanf(ent, "%s %d %d %d %d %d %d %d", eComando, &hora, &minuto,
 80014e0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
		fTiempo.hSistema.Seconds = (uint8_t) segundo;
 80014e4:	70a3      	strb	r3, [r4, #2]
		fFecha.dSistema.Date = (uint8_t) dia;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <Selec_Opera+0x128>)
 80014e8:	709a      	strb	r2, [r3, #2]
		fFecha.dSistema.Month = (uint8_t) mes;
 80014ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		SEC_RTC_Init(fTiempo, fFecha);
 80014ec:	f103 0618 	add.w	r6, r3, #24
		fFecha.dSistema.Month = (uint8_t) mes;
 80014f0:	705a      	strb	r2, [r3, #1]
		fFecha.dSistema.Year = (uint8_t) ano;
 80014f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80014f4:	70da      	strb	r2, [r3, #3]
		fFecha.dSistema.WeekDay = (uint8_t) semana;
 80014f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80014f8:	701a      	strb	r2, [r3, #0]
		SEC_RTC_Init(fTiempo, fFecha);
 80014fa:	aa02      	add	r2, sp, #8
 80014fc:	4615      	mov	r5, r2
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	6859      	ldr	r1, [r3, #4]
 8001502:	3308      	adds	r3, #8
 8001504:	c503      	stmia	r5!, {r0, r1}
 8001506:	42b3      	cmp	r3, r6
 8001508:	462a      	mov	r2, r5
 800150a:	d1f7      	bne.n	80014fc <Selec_Opera+0xd4>
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	6028      	str	r0, [r5, #0]
 8001510:	6825      	ldr	r5, [r4, #0]
 8001512:	6861      	ldr	r1, [r4, #4]
 8001514:	68a2      	ldr	r2, [r4, #8]
 8001516:	68e3      	ldr	r3, [r4, #12]
 8001518:	4c0e      	ldr	r4, [pc, #56]	; (8001554 <Selec_Opera+0x12c>)
 800151a:	6820      	ldr	r0, [r4, #0]
 800151c:	9000      	str	r0, [sp, #0]
 800151e:	7920      	ldrb	r0, [r4, #4]
 8001520:	f88d 0004 	strb.w	r0, [sp, #4]
 8001524:	4628      	mov	r0, r5
 8001526:	f000 f87b 	bl	8001620 <SEC_RTC_Init>
		 __asm("nop");
 800152a:	bf00      	nop
}
 800152c:	b014      	add	sp, #80	; 0x50
 800152e:	bd70      	pop	{r4, r5, r6, pc}
		pos = 3;
 8001530:	2303      	movs	r3, #3
 8001532:	e7a0      	b.n	8001476 <Selec_Opera+0x4e>
		pos = 4;
 8001534:	2304      	movs	r3, #4
 8001536:	e79e      	b.n	8001476 <Selec_Opera+0x4e>
		pos = 6;
 8001538:	2306      	movs	r3, #6
 800153a:	e79c      	b.n	8001476 <Selec_Opera+0x4e>
		pos = 7;
 800153c:	2307      	movs	r3, #7
 800153e:	e79a      	b.n	8001476 <Selec_Opera+0x4e>
		 pos = 25;
 8001540:	2319      	movs	r3, #25
 8001542:	e798      	b.n	8001476 <Selec_Opera+0x4e>
 8001544:	2000003e 	.word	0x2000003e
 8001548:	080055a8 	.word	0x080055a8
 800154c:	200003cb 	.word	0x200003cb
 8001550:	200003e0 	.word	0x200003e0
 8001554:	200003db 	.word	0x200003db

08001558 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001558:	b513      	push	{r0, r1, r4, lr}
  RTC_DateTypeDef DateToUpdate = {0};

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
  RTC_TimeTypeDef sTime = {0};
 800155e:	2400      	movs	r4, #0
  hrtc.Instance = RTC;
 8001560:	4814      	ldr	r0, [pc, #80]	; (80015b4 <MX_RTC_Init+0x5c>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001562:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <MX_RTC_Init+0x60>)
  RTC_TimeTypeDef sTime = {0};
 8001564:	f8ad 4000 	strh.w	r4, [sp]
 8001568:	f88d 4002 	strb.w	r4, [sp, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800156c:	9401      	str	r4, [sp, #4]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800156e:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001572:	6084      	str	r4, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001574:	f003 f94c 	bl	8004810 <HAL_RTC_Init>
 8001578:	b108      	cbz	r0, 800157e <MX_RTC_Init+0x26>
  {
    Error_Handler();
 800157a:	f7ff fdd5 	bl	8001128 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x2;
 800157e:	f242 0302 	movw	r3, #8194	; 0x2002
  sTime.Minutes = 0x20;
  sTime.Seconds = 0x0;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001582:	2201      	movs	r2, #1
 8001584:	4669      	mov	r1, sp
 8001586:	480b      	ldr	r0, [pc, #44]	; (80015b4 <MX_RTC_Init+0x5c>)
  sTime.Hours = 0x2;
 8001588:	f8ad 3000 	strh.w	r3, [sp]
  sTime.Minutes = 0x20;
 800158c:	f88d 4002 	strb.w	r4, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001590:	f002 fe26 	bl	80041e0 <HAL_RTC_SetTime>
 8001594:	b108      	cbz	r0, 800159a <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8001596:	f7ff fdc7 	bl	8001128 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_RTC_Init+0x64>)
 800159c:	a902      	add	r1, sp, #8
 800159e:	f841 3d04 	str.w	r3, [r1, #-4]!
  DateToUpdate.Month = RTC_MONTH_AUGUST;
  DateToUpdate.Date = 0x1;
  DateToUpdate.Year = 0x20;

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80015a2:	2201      	movs	r2, #1
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_RTC_Init+0x5c>)
 80015a6:	f002 ff71 	bl	800448c <HAL_RTC_SetDate>
 80015aa:	b108      	cbz	r0, 80015b0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80015ac:	f7ff fdbc 	bl	8001128 <Error_Handler>
  }

}
 80015b0:	b002      	add	sp, #8
 80015b2:	bd10      	pop	{r4, pc}
 80015b4:	20000424 	.word	0x20000424
 80015b8:	40002800 	.word	0x40002800
 80015bc:	20010806 	.word	0x20010806

080015c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80015c0:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_RTC_MspInit+0x54>)
 80015c4:	6802      	ldr	r2, [r0, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d121      	bne.n	800160e <HAL_RTC_MspInit+0x4e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80015ca:	f002 f8d9 	bl	8003780 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_RTC_MspInit+0x58>)
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80015d0:	2003      	movs	r0, #3
    __HAL_RCC_BKP_CLK_ENABLE();
 80015d2:	69da      	ldr	r2, [r3, #28]
 80015d4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80015d8:	61da      	str	r2, [r3, #28]
    __HAL_RCC_RTC_ENABLE();
 80015da:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_RTC_MspInit+0x5c>)
 80015e8:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	4611      	mov	r1, r2
 80015ee:	f000 fd31 	bl	8002054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80015f2:	2003      	movs	r0, #3
 80015f4:	f000 fd72 	bl	80020dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2029      	movs	r0, #41	; 0x29
 80015fc:	4611      	mov	r1, r2
 80015fe:	f000 fd29 	bl	8002054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001602:	2029      	movs	r0, #41	; 0x29
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001604:	b003      	add	sp, #12
 8001606:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800160a:	f000 bd67 	b.w	80020dc <HAL_NVIC_EnableIRQ>
}
 800160e:	b003      	add	sp, #12
 8001610:	f85d fb04 	ldr.w	pc, [sp], #4
 8001614:	40002800 	.word	0x40002800
 8001618:	40021000 	.word	0x40021000
 800161c:	4242043c 	.word	0x4242043c

08001620 <SEC_RTC_Init>:
  }
} 

/* USER CODE BEGIN 1 */
void SEC_RTC_Init(tFases sTiempo, dFases sFecha)
{									/* Función para inicio secundario del    */
 8001620:	b084      	sub	sp, #16
 8001622:	b508      	push	{r3, lr}
 8001624:	f10d 0c08 	add.w	ip, sp, #8
 8001628:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
									/* RTC.									 */
	  /** Inicializa solo el RTC. */
	   hrtc.Instance = RTC;			/* Instancia el manejador del RTC. 		 */
	   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
	   hrtc.Instance = RTC;			/* Instancia el manejador del RTC. 		 */
 8001630:	480f      	ldr	r0, [pc, #60]	; (8001670 <SEC_RTC_Init+0x50>)
	   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001632:	4a10      	ldr	r2, [pc, #64]	; (8001674 <SEC_RTC_Init+0x54>)
 8001634:	e9c0 2300 	strd	r2, r3, [r0]
	   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001638:	2300      	movs	r3, #0
 800163a:	6083      	str	r3, [r0, #8]
	   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800163c:	f003 f8e8 	bl	8004810 <HAL_RTC_Init>
 8001640:	b108      	cbz	r0, 8001646 <SEC_RTC_Init+0x26>
	   {
	     Error_Handler();
 8001642:	f7ff fd71 	bl	8001128 <Error_Handler>
	   }
	   /** Configura la hora con los parámetros obtenidos del puntero
	    *  sTiempo. */
	   if (HAL_RTC_SetTime(&hrtc, &sTiempo.hSistema, RTC_FORMAT_BCD) != HAL_OK)
 8001646:	2201      	movs	r2, #1
 8001648:	a902      	add	r1, sp, #8
 800164a:	4809      	ldr	r0, [pc, #36]	; (8001670 <SEC_RTC_Init+0x50>)
 800164c:	f002 fdc8 	bl	80041e0 <HAL_RTC_SetTime>
 8001650:	b108      	cbz	r0, 8001656 <SEC_RTC_Init+0x36>
	   {
	     Error_Handler();
 8001652:	f7ff fd69 	bl	8001128 <Error_Handler>
	   }
	   /** Configura la fecha con los parámetros obtenidos del puntero
	    *  sFecha. */
	   if (HAL_RTC_SetDate(&hrtc, &sFecha.dSistema, RTC_FORMAT_BCD) != HAL_OK)
 8001656:	2201      	movs	r2, #1
 8001658:	a908      	add	r1, sp, #32
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <SEC_RTC_Init+0x50>)
 800165c:	f002 ff16 	bl	800448c <HAL_RTC_SetDate>
 8001660:	b108      	cbz	r0, 8001666 <SEC_RTC_Init+0x46>
	   {
	     Error_Handler();
 8001662:	f7ff fd61 	bl	8001128 <Error_Handler>
	   }
}
 8001666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800166a:	b004      	add	sp, #16
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000424 	.word	0x20000424
 8001674:	40002800 	.word	0x40002800

08001678 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_MspInit+0x54>)
{
 800167a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800167c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800167e:	2007      	movs	r0, #7
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	619a      	str	r2, [r3, #24]
 8001686:	699a      	ldr	r2, [r3, #24]
 8001688:	f002 0201 	and.w	r2, r2, #1
 800168c:	9200      	str	r2, [sp, #0]
 800168e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	69da      	ldr	r2, [r3, #28]
 8001692:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001696:	61da      	str	r2, [r3, #28]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a2:	f000 fcb9 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2005      	movs	r0, #5
 80016aa:	4611      	mov	r1, r2
 80016ac:	f000 fcd2 	bl	8002054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016b0:	2005      	movs	r0, #5
 80016b2:	f000 fd13 	bl	80020dc <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_MspInit+0x58>)
 80016b8:	6853      	ldr	r3, [r2, #4]
 80016ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016c2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c4:	b003      	add	sp, #12
 80016c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000

080016d4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016d4:	4770      	bx	lr
	...

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b500      	push	{lr}
 80016da:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN HardFault_IRQn 0 */
	reg_Esp();
 80016dc:	f7ff fcd2 	bl	8001084 <reg_Esp>
		volatile unsigned long _CFSR = (*((volatile unsigned long *)(0xE000ED28)));
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HardFault_Handler+0x5c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	9301      	str	r3, [sp, #4]
		volatile unsigned long _HFSR = (*((volatile unsigned long *)(0xE000ED2C)));
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HardFault_Handler+0x60>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	9302      	str	r3, [sp, #8]
		volatile unsigned long _DFSR = (*((volatile unsigned long *)(0xE000ED30)));
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <HardFault_Handler+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	9303      	str	r3, [sp, #12]
		volatile unsigned long _AFSR = (*((volatile unsigned long *)(0xE000ED3C)));
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HardFault_Handler+0x68>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	9304      	str	r3, [sp, #16]
		volatile unsigned long _MMAR = (*((volatile unsigned long *)(0xE000ED34)));
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HardFault_Handler+0x6c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	9305      	str	r3, [sp, #20]
		volatile unsigned long _BFAR = (*((volatile unsigned long *)(0xE000ED38)));
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HardFault_Handler+0x70>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	9306      	str	r3, [sp, #24]
 8001704:	f3ef 8305 	mrs	r3, IPSR
		volatile unsigned long _IPSR = __get_IPSR();
 8001708:	9307      	str	r3, [sp, #28]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800170a:	f3ef 8311 	mrs	r3, BASEPRI
		volatile unsigned long _BASEPRI = __get_BASEPRI();
 800170e:	9308      	str	r3, [sp, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001710:	f3ef 8310 	mrs	r3, PRIMASK
		volatile unsigned long _PRIMASK = __get_PRIMASK();
 8001714:	9309      	str	r3, [sp, #36]	; 0x24
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 8001716:	f3ef 8313 	mrs	r3, FAULTMASK
		volatile unsigned long _FAULTMASK = __get_FAULTMASK();
 800171a:	930a      	str	r3, [sp, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800171c:	f3ef 8305 	mrs	r3, IPSR
		volatile unsigned long _ISPR0 = __get_IPSR();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, LED_STATUS_Pin);/* El led de estado se queda */
 8001720:	4c0a      	ldr	r4, [pc, #40]	; (800174c <HardFault_Handler+0x74>)
		volatile unsigned long _ISPR0 = __get_IPSR();
 8001722:	930b      	str	r3, [sp, #44]	; 0x2c
	  HAL_GPIO_TogglePin(GPIOB, LED_STATUS_Pin);/* El led de estado se queda */
 8001724:	4620      	mov	r0, r4
 8001726:	2101      	movs	r1, #1
 8001728:	f001 f83a 	bl	80027a0 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);				/* titilando si hay una hard fault.      */
 800172c:	20c8      	movs	r0, #200	; 0xc8
 800172e:	f000 f91f 	bl	8001970 <HAL_Delay>
 8001732:	e7f7      	b.n	8001724 <HardFault_Handler+0x4c>
 8001734:	e000ed28 	.word	0xe000ed28
 8001738:	e000ed2c 	.word	0xe000ed2c
 800173c:	e000ed30 	.word	0xe000ed30
 8001740:	e000ed3c 	.word	0xe000ed3c
 8001744:	e000ed34 	.word	0xe000ed34
 8001748:	e000ed38 	.word	0xe000ed38
 800174c:	40010c00 	.word	0x40010c00

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	e7fe      	b.n	8001752 <BusFault_Handler>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler>

08001756 <SVC_Handler>:
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 b8f6 	b.w	800194c <HAL_IncTick>

08001760 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001760:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <RTC_IRQHandler+0x14>)
 8001764:	f003 f8cd 	bl	8004902 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);	/* Para salir del modo de configuración  */
 8001768:	4a03      	ldr	r2, [pc, #12]	; (8001778 <RTC_IRQHandler+0x18>)
 800176a:	6853      	ldr	r3, [r2, #4]
 800176c:	f023 0310 	bic.w	r3, r3, #16
 8001770:	6053      	str	r3, [r2, #4]
  	  	  	  	  	  	  	  	  	/* del RTC.								 */
  /* USER CODE END RTC_IRQn 1 */
}
 8001772:	bd08      	pop	{r3, pc}
 8001774:	20000424 	.word	0x20000424
 8001778:	40002800 	.word	0x40002800

0800177c <RCC_IRQHandler>:
 800177c:	4770      	bx	lr
	...

08001780 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001780:	4801      	ldr	r0, [pc, #4]	; (8001788 <DMA1_Channel1_IRQHandler+0x8>)
 8001782:	f000 bdff 	b.w	8002384 <HAL_DMA_IRQHandler>
 8001786:	bf00      	nop
 8001788:	20000290 	.word	0x20000290

0800178c <DMA1_Channel7_IRQHandler>:
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
//	uint8_t prueba;

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800178c:	4801      	ldr	r0, [pc, #4]	; (8001794 <DMA1_Channel7_IRQHandler+0x8>)
 800178e:	f000 bdf9 	b.w	8002384 <HAL_DMA_IRQHandler>
 8001792:	bf00      	nop
 8001794:	20000330 	.word	0x20000330

08001798 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001798:	4801      	ldr	r0, [pc, #4]	; (80017a0 <ADC1_2_IRQHandler+0x8>)
 800179a:	f000 b929 	b.w	80019f0 <HAL_ADC_IRQHandler>
 800179e:	bf00      	nop
 80017a0:	20000260 	.word	0x20000260

080017a4 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017a4:	4801      	ldr	r0, [pc, #4]	; (80017ac <I2C1_EV_IRQHandler+0x8>)
 80017a6:	f001 bb29 	b.w	8002dfc <HAL_I2C_EV_IRQHandler>
 80017aa:	bf00      	nop
 80017ac:	200002dc 	.word	0x200002dc

080017b0 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017b0:	4801      	ldr	r0, [pc, #4]	; (80017b8 <I2C1_ER_IRQHandler+0x8>)
 80017b2:	f001 bf4b 	b.w	800364c <HAL_I2C_ER_IRQHandler>
 80017b6:	bf00      	nop
 80017b8:	200002dc 	.word	0x200002dc

080017bc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017bc:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017be:	4c11      	ldr	r4, [pc, #68]	; (8001804 <RTC_Alarm_IRQHandler+0x48>)
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
    HAL_RTC_AlarmIRQHandler(&hrtc);
    HAL_RTC_WaitForSynchro(&hrtc);
	  HAL_RTC_GetTime(&hrtc,&horaLeida, RTC_FORMAT_BCD);
 80017c0:	4d11      	ldr	r5, [pc, #68]	; (8001808 <RTC_Alarm_IRQHandler+0x4c>)
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017c2:	4620      	mov	r0, r4
 80017c4:	f002 fff0 	bl	80047a8 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_AlarmIRQHandler(&hrtc);
 80017c8:	4620      	mov	r0, r4
 80017ca:	f002 ffed 	bl	80047a8 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_WaitForSynchro(&hrtc);
 80017ce:	4620      	mov	r0, r4
 80017d0:	f003 f802 	bl	80047d8 <HAL_RTC_WaitForSynchro>
	  HAL_RTC_GetTime(&hrtc,&horaLeida, RTC_FORMAT_BCD);
 80017d4:	4629      	mov	r1, r5
 80017d6:	2201      	movs	r2, #1
 80017d8:	4620      	mov	r0, r4
 80017da:	f002 fd97 	bl	800430c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&fechaLeida, RTC_FORMAT_BCD);
 80017de:	2201      	movs	r2, #1
 80017e0:	490a      	ldr	r1, [pc, #40]	; (800180c <RTC_Alarm_IRQHandler+0x50>)
 80017e2:	4620      	mov	r0, r4
 80017e4:	f002 fef4 	bl	80045d0 <HAL_RTC_GetDate>
    intAlarma.AlarmTime.Hours = horaLeida.Hours;
 80017e8:	4909      	ldr	r1, [pc, #36]	; (8001810 <RTC_Alarm_IRQHandler+0x54>)
 80017ea:	782b      	ldrb	r3, [r5, #0]
    intAlarma.AlarmTime.Minutes = horaLeida.Minutes;
    intAlarma.AlarmTime.Seconds = horaLeida.Seconds + 2;
    HAL_RTC_SetAlarm_IT(&hrtc, &intAlarma, RTC_FORMAT_BCD);
 80017ec:	4620      	mov	r0, r4
    intAlarma.AlarmTime.Hours = horaLeida.Hours;
 80017ee:	700b      	strb	r3, [r1, #0]
    intAlarma.AlarmTime.Minutes = horaLeida.Minutes;
 80017f0:	786b      	ldrb	r3, [r5, #1]
    HAL_RTC_SetAlarm_IT(&hrtc, &intAlarma, RTC_FORMAT_BCD);
 80017f2:	2201      	movs	r2, #1
    intAlarma.AlarmTime.Minutes = horaLeida.Minutes;
 80017f4:	704b      	strb	r3, [r1, #1]
    intAlarma.AlarmTime.Seconds = horaLeida.Seconds + 2;
 80017f6:	78ab      	ldrb	r3, [r5, #2]
 80017f8:	3302      	adds	r3, #2
 80017fa:	708b      	strb	r3, [r1, #2]
    //HAL_RTC_GetAlarm(&hrtc,&alarmaLeida,RTC_ALARM_A, RTC_FORMAT_BCD);
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_RTC_SetAlarm_IT(&hrtc, &intAlarma, RTC_FORMAT_BCD);
 8001800:	f002 bf1e 	b.w	8004640 <HAL_RTC_SetAlarm_IT>
 8001804:	20000424 	.word	0x20000424
 8001808:	2000037c 	.word	0x2000037c
 800180c:	2000040c 	.word	0x2000040c
 8001810:	200003b8 	.word	0x200003b8

08001814 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001814:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <_sbrk+0x2c>)
{
 8001818:	4602      	mov	r2, r0
	if (heap_end == 0)
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	b909      	cbnz	r1, 8001822 <_sbrk+0xe>
		heap_end = &end;
 800181e:	4909      	ldr	r1, [pc, #36]	; (8001844 <_sbrk+0x30>)
 8001820:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001822:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001824:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001826:	4402      	add	r2, r0
 8001828:	428a      	cmp	r2, r1
 800182a:	d906      	bls.n	800183a <_sbrk+0x26>
	{
		errno = ENOMEM;
 800182c:	f003 f886 	bl	800493c <__errno>
 8001830:	230c      	movs	r3, #12
 8001832:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001838:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800183a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800183c:	e7fc      	b.n	8001838 <_sbrk+0x24>
 800183e:	bf00      	nop
 8001840:	20000254 	.word	0x20000254
 8001844:	20000440 	.word	0x20000440

08001848 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <SystemInit+0x40>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <SystemInit+0x44>)
 8001856:	400a      	ands	r2, r1
 8001858:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001864:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800186c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001874:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001876:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800187a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800187c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <SystemInit+0x48>)
 8001882:	609a      	str	r2, [r3, #8]
#endif 
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	f8ff0000 	.word	0xf8ff0000
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001894:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001896:	e003      	b.n	80018a0 <LoopCopyDataInit>

08001898 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800189a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800189c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800189e:	3104      	adds	r1, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018a0:	480a      	ldr	r0, [pc, #40]	; (80018cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018a8:	d3f6      	bcc.n	8001898 <CopyDataInit>
  ldr r2, =_sbss
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018ac:	e002      	b.n	80018b4 <LoopFillZerobss>

080018ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018b0:	f842 3b04 	str.w	r3, [r2], #4

080018b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018b8:	d3f9      	bcc.n	80018ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ba:	f7ff ffc5 	bl	8001848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018be:	f003 f843 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018c2:	f7ff fc77 	bl	80011b4 <main>
  bx lr
 80018c6:	4770      	bx	lr
  ldr r3, =_sidata
 80018c8:	08005934 	.word	0x08005934
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018d0:	20000238 	.word	0x20000238
  ldr r2, =_sbss
 80018d4:	20000238 	.word	0x20000238
  ldr r3, = _ebss
 80018d8:	20000440 	.word	0x20000440

080018dc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <CAN1_RX1_IRQHandler>
	...

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_InitTick+0x3c>)
{
 80018e4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e6:	7818      	ldrb	r0, [r3, #0]
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80018f0:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_InitTick+0x40>)
 80018f2:	6810      	ldr	r0, [r2, #0]
 80018f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80018f8:	f000 fc04 	bl	8002104 <HAL_SYSTICK_Config>
 80018fc:	4604      	mov	r4, r0
 80018fe:	b958      	cbnz	r0, 8001918 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001900:	2d0f      	cmp	r5, #15
 8001902:	d809      	bhi.n	8001918 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	4602      	mov	r2, r0
 8001906:	4629      	mov	r1, r5
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f000 fba2 	bl	8002054 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4620      	mov	r0, r4
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <HAL_InitTick+0x44>)
 8001914:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001916:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001918:	2001      	movs	r0, #1
 800191a:	e7fc      	b.n	8001916 <HAL_InitTick+0x36>
 800191c:	20000060 	.word	0x20000060
 8001920:	2000005c 	.word	0x2000005c
 8001924:	20000064 	.word	0x20000064

08001928 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_Init+0x20>)
{
 800192a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001930:	f043 0310 	orr.w	r3, r3, #16
 8001934:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001936:	f000 fb6f 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff ffd0 	bl	80018e0 <HAL_InitTick>
  HAL_MspInit();
 8001940:	f7ff fe9a 	bl	8001678 <HAL_MspInit>
}
 8001944:	2000      	movs	r0, #0
 8001946:	bd08      	pop	{r3, pc}
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_IncTick+0x10>)
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_IncTick+0x14>)
 8001950:	6811      	ldr	r1, [r2, #0]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	440b      	add	r3, r1
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000438 	.word	0x20000438
 8001960:	20000060 	.word	0x20000060

08001964 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001964:	4b01      	ldr	r3, [pc, #4]	; (800196c <HAL_GetTick+0x8>)
 8001966:	6818      	ldr	r0, [r3, #0]
}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000438 	.word	0x20000438

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b538      	push	{r3, r4, r5, lr}
 8001972:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fff6 	bl	8001964 <HAL_GetTick>
 8001978:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800197c:	bf1e      	ittt	ne
 800197e:	4b04      	ldrne	r3, [pc, #16]	; (8001990 <HAL_Delay+0x20>)
 8001980:	781b      	ldrbne	r3, [r3, #0]
 8001982:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001984:	f7ff ffee 	bl	8001964 <HAL_GetTick>
 8001988:	1b40      	subs	r0, r0, r5
 800198a:	42a0      	cmp	r0, r4
 800198c:	d3fa      	bcc.n	8001984 <HAL_Delay+0x14>
  {
  }
}
 800198e:	bd38      	pop	{r3, r4, r5, pc}
 8001990:	20000060 	.word	0x20000060

08001994 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001994:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001996:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800199a:	f012 0f50 	tst.w	r2, #80	; 0x50
 800199e:	d11b      	bne.n	80019d8 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	6892      	ldr	r2, [r2, #8]
 80019ac:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80019b0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80019b4:	d10c      	bne.n	80019d0 <ADC_DMAConvCplt+0x3c>
 80019b6:	7b1a      	ldrb	r2, [r3, #12]
 80019b8:	b952      	cbnz	r2, 80019d0 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c4:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c6:	bf5e      	ittt	pl
 80019c8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80019ca:	f042 0201 	orrpl.w	r2, r2, #1
 80019ce:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fc8b 	bl	80012ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019d6:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019d8:	6a1b      	ldr	r3, [r3, #32]
}
 80019da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	4718      	bx	r3

080019e2 <HAL_ADC_ConvHalfCpltCallback>:
 80019e2:	4770      	bx	lr

080019e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019e4:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80019e8:	f7ff fffb 	bl	80019e2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ec:	bd08      	pop	{r3, pc}

080019ee <HAL_ADC_LevelOutOfWindowCallback>:
 80019ee:	4770      	bx	lr

080019f0 <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80019f0:	6803      	ldr	r3, [r0, #0]
 80019f2:	4a49      	ldr	r2, [pc, #292]	; (8001b18 <HAL_ADC_IRQHandler+0x128>)
{
 80019f4:	b510      	push	{r4, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80019f6:	4293      	cmp	r3, r2
{
 80019f8:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80019fa:	d008      	beq.n	8001a0e <HAL_ADC_IRQHandler+0x1e>
 80019fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d004      	beq.n	8001a0e <HAL_ADC_IRQHandler+0x1e>
 8001a04:	f240 61f1 	movw	r1, #1777	; 0x6f1
 8001a08:	4844      	ldr	r0, [pc, #272]	; (8001b1c <HAL_ADC_IRQHandler+0x12c>)
 8001a0a:	f7ff fcf5 	bl	80013f8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001a0e:	7b23      	ldrb	r3, [r4, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d904      	bls.n	8001a1e <HAL_ADC_IRQHandler+0x2e>
 8001a14:	f240 61f2 	movw	r1, #1778	; 0x6f2
 8001a18:	4840      	ldr	r0, [pc, #256]	; (8001b1c <HAL_ADC_IRQHandler+0x12c>)
 8001a1a:	f7ff fced 	bl	80013f8 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001a1e:	6923      	ldr	r3, [r4, #16]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	d904      	bls.n	8001a30 <HAL_ADC_IRQHandler+0x40>
 8001a26:	f240 61f3 	movw	r1, #1779	; 0x6f3
 8001a2a:	483c      	ldr	r0, [pc, #240]	; (8001b1c <HAL_ADC_IRQHandler+0x12c>)
 8001a2c:	f7ff fce4 	bl	80013f8 <assert_failed>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	0690      	lsls	r0, r2, #26
 8001a36:	d527      	bpl.n	8001a88 <HAL_ADC_IRQHandler+0x98>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	0791      	lsls	r1, r2, #30
 8001a3c:	d524      	bpl.n	8001a88 <HAL_ADC_IRQHandler+0x98>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a40:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a42:	bf5e      	ittt	pl
 8001a44:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001a46:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001a4a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001a52:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001a56:	d110      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x8a>
 8001a58:	7b22      	ldrb	r2, [r4, #12]
 8001a5a:	b972      	cbnz	r2, 8001a7a <HAL_ADC_IRQHandler+0x8a>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	f022 0220 	bic.w	r2, r2, #32
 8001a62:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a6a:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a6e:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a70:	bf5e      	ittt	pl
 8001a72:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001a74:	f043 0301 	orrpl.w	r3, r3, #1
 8001a78:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff fc36 	bl	80012ec <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a80:	f06f 0212 	mvn.w	r2, #18
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	0610      	lsls	r0, r2, #24
 8001a8e:	d530      	bpl.n	8001af2 <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	0751      	lsls	r1, r2, #29
 8001a94:	d52d      	bpl.n	8001af2 <HAL_ADC_IRQHandler+0x102>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a98:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a9a:	bf5e      	ittt	pl
 8001a9c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001a9e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001aa2:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001aaa:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001aae:	d00a      	beq.n	8001ac6 <HAL_ADC_IRQHandler+0xd6>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ab0:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ab2:	0550      	lsls	r0, r2, #21
 8001ab4:	d416      	bmi.n	8001ae4 <HAL_ADC_IRQHandler+0xf4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001abc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001ac0:	d110      	bne.n	8001ae4 <HAL_ADC_IRQHandler+0xf4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ac2:	7b22      	ldrb	r2, [r4, #12]
 8001ac4:	b972      	cbnz	r2, 8001ae4 <HAL_ADC_IRQHandler+0xf4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001acc:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ace:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ad4:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ad8:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ada:	bf5e      	ittt	pl
 8001adc:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001ade:	f043 0301 	orrpl.w	r3, r3, #1
 8001ae2:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f000 fa95 	bl	8002014 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001aea:	f06f 020c 	mvn.w	r2, #12
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	0652      	lsls	r2, r2, #25
 8001af8:	d50d      	bpl.n	8001b16 <HAL_ADC_IRQHandler+0x126>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	07db      	lsls	r3, r3, #31
 8001afe:	d50a      	bpl.n	8001b16 <HAL_ADC_IRQHandler+0x126>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b02:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b0a:	f7ff ff70 	bl	80019ee <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b0e:	f06f 0201 	mvn.w	r2, #1
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	601a      	str	r2, [r3, #0]
}
 8001b16:	bd10      	pop	{r4, pc}
 8001b18:	40012400 	.word	0x40012400
 8001b1c:	080055d8 	.word	0x080055d8

08001b20 <HAL_ADC_ErrorCallback>:
 8001b20:	4770      	bx	lr

08001b22 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b22:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001b24:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2c:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b36:	f7ff fff3 	bl	8001b20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b3a:	bd08      	pop	{r3, pc}

08001b3c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001b3c:	2300      	movs	r3, #0
{ 
 8001b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001b40:	4a4d      	ldr	r2, [pc, #308]	; (8001c78 <HAL_ADC_ConfigChannel+0x13c>)
  __IO uint32_t wait_loop_index = 0U;
 8001b42:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001b44:	6803      	ldr	r3, [r0, #0]
{ 
 8001b46:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001b48:	4293      	cmp	r3, r2
{ 
 8001b4a:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001b4c:	d008      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x24>
 8001b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x24>
 8001b56:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8001b5a:	4848      	ldr	r0, [pc, #288]	; (8001c7c <HAL_ADC_ConfigChannel+0x140>)
 8001b5c:	f7ff fc4c 	bl	80013f8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001b60:	682b      	ldr	r3, [r5, #0]
 8001b62:	2b11      	cmp	r3, #17
 8001b64:	d904      	bls.n	8001b70 <HAL_ADC_ConfigChannel+0x34>
 8001b66:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8001b6a:	4844      	ldr	r0, [pc, #272]	; (8001c7c <HAL_ADC_ConfigChannel+0x140>)
 8001b6c:	f7ff fc44 	bl	80013f8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001b70:	686b      	ldr	r3, [r5, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d904      	bls.n	8001b82 <HAL_ADC_ConfigChannel+0x46>
 8001b78:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b7c:	483f      	ldr	r0, [pc, #252]	; (8001c7c <HAL_ADC_ConfigChannel+0x140>)
 8001b7e:	f7ff fc3b 	bl	80013f8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001b82:	68ab      	ldr	r3, [r5, #8]
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	d904      	bls.n	8001b92 <HAL_ADC_ConfigChannel+0x56>
 8001b88:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8001b8c:	483b      	ldr	r0, [pc, #236]	; (8001c7c <HAL_ADC_ConfigChannel+0x140>)
 8001b8e:	f7ff fc33 	bl	80013f8 <assert_failed>
  __HAL_LOCK(hadc);
 8001b92:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d06c      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0x138>
 8001b9a:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001b9c:	6868      	ldr	r0, [r5, #4]
  __HAL_LOCK(hadc);
 8001b9e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001ba2:	2806      	cmp	r0, #6
 8001ba4:	6822      	ldr	r2, [r4, #0]
 8001ba6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001baa:	6829      	ldr	r1, [r5, #0]
 8001bac:	d822      	bhi.n	8001bf4 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bae:	261f      	movs	r6, #31
 8001bb0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8001bb2:	3b05      	subs	r3, #5
 8001bb4:	409e      	lsls	r6, r3
 8001bb6:	ea20 0006 	bic.w	r0, r0, r6
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	4303      	orrs	r3, r0
 8001bc0:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bc2:	2909      	cmp	r1, #9
 8001bc4:	68ab      	ldr	r3, [r5, #8]
 8001bc6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001bca:	f04f 0507 	mov.w	r5, #7
 8001bce:	d929      	bls.n	8001c24 <HAL_ADC_ConfigChannel+0xe8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bd0:	68d6      	ldr	r6, [r2, #12]
 8001bd2:	381e      	subs	r0, #30
 8001bd4:	4085      	lsls	r5, r0
 8001bd6:	ea26 0505 	bic.w	r5, r6, r5
 8001bda:	4083      	lsls	r3, r0
 8001bdc:	432b      	orrs	r3, r5
 8001bde:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001be0:	f1a1 0310 	sub.w	r3, r1, #16
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d925      	bls.n	8001c34 <HAL_ADC_ConfigChannel+0xf8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001bea:	2300      	movs	r3, #0
 8001bec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001bf4:	280c      	cmp	r0, #12
 8001bf6:	f04f 001f 	mov.w	r0, #31
 8001bfa:	d809      	bhi.n	8001c10 <HAL_ADC_ConfigChannel+0xd4>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bfc:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001bfe:	3b23      	subs	r3, #35	; 0x23
 8001c00:	4098      	lsls	r0, r3
 8001c02:	ea26 0000 	bic.w	r0, r6, r0
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	4303      	orrs	r3, r0
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	e7d8      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c10:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001c12:	3b41      	subs	r3, #65	; 0x41
 8001c14:	4098      	lsls	r0, r3
 8001c16:	ea26 0000 	bic.w	r0, r6, r0
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001c22:	e7ce      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c24:	6916      	ldr	r6, [r2, #16]
 8001c26:	4085      	lsls	r5, r0
 8001c28:	ea26 0505 	bic.w	r5, r6, r5
 8001c2c:	4083      	lsls	r3, r0
 8001c2e:	432b      	orrs	r3, r5
 8001c30:	6113      	str	r3, [r2, #16]
 8001c32:	e7d5      	b.n	8001be0 <HAL_ADC_ConfigChannel+0xa4>
    if (hadc->Instance == ADC1)
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_ADC_ConfigChannel+0x13c>)
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d116      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x12c>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c3a:	6893      	ldr	r3, [r2, #8]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	d4d3      	bmi.n	8001be8 <HAL_ADC_ConfigChannel+0xac>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c40:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c42:	2910      	cmp	r1, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c48:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c4a:	d1cd      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0xac>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_ADC_ConfigChannel+0x144>)
 8001c4e:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <HAL_ADC_ConfigChannel+0x148>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c56:	230a      	movs	r3, #10
 8001c58:	4353      	muls	r3, r2
            wait_loop_index--;
 8001c5a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001c5c:	9b01      	ldr	r3, [sp, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0c2      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0xac>
            wait_loop_index--;
 8001c62:	9b01      	ldr	r3, [sp, #4]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	e7f8      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x11e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c6c:	f043 0320 	orr.w	r3, r3, #32
 8001c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c72:	e7ba      	b.n	8001bea <HAL_ADC_ConfigChannel+0xae>
  __HAL_LOCK(hadc);
 8001c74:	2002      	movs	r0, #2
 8001c76:	e7bb      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0xb4>
 8001c78:	40012400 	.word	0x40012400
 8001c7c:	080055d8 	.word	0x080055d8
 8001c80:	2000005c 	.word	0x2000005c
 8001c84:	000f4240 	.word	0x000f4240

08001c88 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001c88:	2300      	movs	r3, #0
{
 8001c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001c8c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c8e:	6803      	ldr	r3, [r0, #0]
{
 8001c90:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	07d2      	lsls	r2, r2, #31
 8001c96:	d502      	bpl.n	8001c9e <ADC_Enable+0x16>
  return HAL_OK;
 8001c98:	2000      	movs	r0, #0
}
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <ADC_Enable+0x68>)
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <ADC_Enable+0x6c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001cb0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001cb2:	9b01      	ldr	r3, [sp, #4]
 8001cb4:	b9c3      	cbnz	r3, 8001ce8 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001cb6:	f7ff fe55 	bl	8001964 <HAL_GetTick>
 8001cba:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	689d      	ldr	r5, [r3, #8]
 8001cc0:	f015 0501 	ands.w	r5, r5, #1
 8001cc4:	d1e8      	bne.n	8001c98 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cc6:	f7ff fe4d 	bl	8001964 <HAL_GetTick>
 8001cca:	1b80      	subs	r0, r0, r6
 8001ccc:	2802      	cmp	r0, #2
 8001cce:	d9f5      	bls.n	8001cbc <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001cd2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	f043 0310 	orr.w	r3, r3, #16
 8001cda:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001cde:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ce6:	e7d8      	b.n	8001c9a <ADC_Enable+0x12>
      wait_loop_index--;
 8001ce8:	9b01      	ldr	r3, [sp, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	e7e0      	b.n	8001cb0 <ADC_Enable+0x28>
 8001cee:	bf00      	nop
 8001cf0:	2000005c 	.word	0x2000005c
 8001cf4:	000f4240 	.word	0x000f4240

08001cf8 <HAL_ADC_Start_DMA>:
{
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	4617      	mov	r7, r2
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8001cfc:	4d40      	ldr	r5, [pc, #256]	; (8001e00 <HAL_ADC_Start_DMA+0x108>)
 8001cfe:	6802      	ldr	r2, [r0, #0]
{
 8001d00:	4604      	mov	r4, r0
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8001d02:	42aa      	cmp	r2, r5
{
 8001d04:	460e      	mov	r6, r1
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8001d06:	d004      	beq.n	8001d12 <HAL_ADC_Start_DMA+0x1a>
 8001d08:	f240 6114 	movw	r1, #1556	; 0x614
 8001d0c:	483d      	ldr	r0, [pc, #244]	; (8001e04 <HAL_ADC_Start_DMA+0x10c>)
 8001d0e:	f7ff fb73 	bl	80013f8 <assert_failed>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	42ab      	cmp	r3, r5
 8001d16:	d002      	beq.n	8001d1e <HAL_ADC_Start_DMA+0x26>
 8001d18:	4a3b      	ldr	r2, [pc, #236]	; (8001e08 <HAL_ADC_Start_DMA+0x110>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d104      	bne.n	8001d28 <HAL_ADC_Start_DMA+0x30>
 8001d1e:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <HAL_ADC_Start_DMA+0x108>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001d26:	d167      	bne.n	8001df8 <HAL_ADC_Start_DMA+0x100>
    __HAL_LOCK(hadc);
 8001d28:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d065      	beq.n	8001dfc <HAL_ADC_Start_DMA+0x104>
 8001d30:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001d32:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001d34:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001d38:	f7ff ffa6 	bl	8001c88 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001d3c:	4605      	mov	r5, r0
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d156      	bne.n	8001df0 <HAL_ADC_Start_DMA+0xf8>
      ADC_STATE_CLR_SET(hadc->State,
 8001d42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d44:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8001d46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d52:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <HAL_ADC_Start_DMA+0x110>)
 8001d56:	4299      	cmp	r1, r3
 8001d58:	d104      	bne.n	8001d64 <HAL_ADC_Start_DMA+0x6c>
 8001d5a:	4a29      	ldr	r2, [pc, #164]	; (8001e00 <HAL_ADC_Start_DMA+0x108>)
 8001d5c:	6853      	ldr	r3, [r2, #4]
 8001d5e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001d62:	d13f      	bne.n	8001de4 <HAL_ADC_Start_DMA+0xec>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d6a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d6c:	684b      	ldr	r3, [r1, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d6e:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d70:	bf48      	it	mi
 8001d72:	6aa3      	ldrmi	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d74:	6a20      	ldr	r0, [r4, #32]
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d76:	bf42      	ittt	mi
 8001d78:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8001d7c:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8001d80:	62a3      	strmi	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d84:	4632      	mov	r2, r6
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d86:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d8a:	bf18      	it	ne
 8001d8c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d8e:	f101 014c 	add.w	r1, r1, #76	; 0x4c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d92:	bf18      	it	ne
 8001d94:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_ADC_Start_DMA+0x114>)
 8001da2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <HAL_ADC_Start_DMA+0x118>)
 8001da6:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_ADC_Start_DMA+0x11c>)
 8001daa:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dac:	f06f 0302 	mvn.w	r3, #2
 8001db0:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001db4:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	f000 fa45 	bl	8002250 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001dce:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	bf0c      	ite	eq
 8001dd6:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001dda:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001dde:	609a      	str	r2, [r3, #8]
}
 8001de0:	4628      	mov	r0, r5
 8001de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dea:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dec:	6853      	ldr	r3, [r2, #4]
 8001dee:	e7be      	b.n	8001d6e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001df0:	2300      	movs	r3, #0
 8001df2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001df6:	e7f3      	b.n	8001de0 <HAL_ADC_Start_DMA+0xe8>
    tmp_hal_status = HAL_ERROR;
 8001df8:	2501      	movs	r5, #1
 8001dfa:	e7f1      	b.n	8001de0 <HAL_ADC_Start_DMA+0xe8>
    __HAL_LOCK(hadc);
 8001dfc:	2502      	movs	r5, #2
 8001dfe:	e7ef      	b.n	8001de0 <HAL_ADC_Start_DMA+0xe8>
 8001e00:	40012400 	.word	0x40012400
 8001e04:	080055d8 	.word	0x080055d8
 8001e08:	40012800 	.word	0x40012800
 8001e0c:	08001995 	.word	0x08001995
 8001e10:	080019e5 	.word	0x080019e5
 8001e14:	08001b23 	.word	0x08001b23

08001e18 <ADC_ConversionStop_Disable>:
{
 8001e18:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e1a:	6803      	ldr	r3, [r0, #0]
{
 8001e1c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	07d2      	lsls	r2, r2, #31
 8001e22:	d401      	bmi.n	8001e28 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001e24:	2000      	movs	r0, #0
}
 8001e26:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001e30:	f7ff fd98 	bl	8001964 <HAL_GetTick>
 8001e34:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	07db      	lsls	r3, r3, #31
 8001e3c:	d5f2      	bpl.n	8001e24 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e3e:	f7ff fd91 	bl	8001964 <HAL_GetTick>
 8001e42:	1b40      	subs	r0, r0, r5
 8001e44:	2802      	cmp	r0, #2
 8001e46:	d9f6      	bls.n	8001e36 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4c:	f043 0310 	orr.w	r3, r3, #16
 8001e50:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e5a:	e7e4      	b.n	8001e26 <ADC_ConversionStop_Disable+0xe>

08001e5c <HAL_ADC_Init>:
{
 8001e5c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001e5e:	4604      	mov	r4, r0
 8001e60:	2800      	cmp	r0, #0
 8001e62:	f000 80c8 	beq.w	8001ff6 <HAL_ADC_Init+0x19a>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001e66:	6803      	ldr	r3, [r0, #0]
 8001e68:	4a66      	ldr	r2, [pc, #408]	; (8002004 <HAL_ADC_Init+0x1a8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d008      	beq.n	8001e80 <HAL_ADC_Init+0x24>
 8001e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d004      	beq.n	8001e80 <HAL_ADC_Init+0x24>
 8001e76:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001e7a:	4863      	ldr	r0, [pc, #396]	; (8002008 <HAL_ADC_Init+0x1ac>)
 8001e7c:	f7ff fabc 	bl	80013f8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001e80:	6863      	ldr	r3, [r4, #4]
 8001e82:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8001e86:	d004      	beq.n	8001e92 <HAL_ADC_Init+0x36>
 8001e88:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8001e8c:	485e      	ldr	r0, [pc, #376]	; (8002008 <HAL_ADC_Init+0x1ac>)
 8001e8e:	f7ff fab3 	bl	80013f8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001e92:	68a3      	ldr	r3, [r4, #8]
 8001e94:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_Init+0x48>
 8001e9a:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001e9e:	485a      	ldr	r0, [pc, #360]	; (8002008 <HAL_ADC_Init+0x1ac>)
 8001ea0:	f7ff faaa 	bl	80013f8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001ea4:	7b23      	ldrb	r3, [r4, #12]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d904      	bls.n	8001eb4 <HAL_ADC_Init+0x58>
 8001eaa:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001eae:	4856      	ldr	r0, [pc, #344]	; (8002008 <HAL_ADC_Init+0x1ac>)
 8001eb0:	f7ff faa2 	bl	80013f8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001eb4:	69e3      	ldr	r3, [r4, #28]
 8001eb6:	f433 2220 	bics.w	r2, r3, #655360	; 0xa0000
 8001eba:	d00c      	beq.n	8001ed6 <HAL_ADC_Init+0x7a>
 8001ebc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001ec0:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
 8001ec4:	d007      	beq.n	8001ed6 <HAL_ADC_Init+0x7a>
 8001ec6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001eca:	d004      	beq.n	8001ed6 <HAL_ADC_Init+0x7a>
 8001ecc:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001ed0:	484d      	ldr	r0, [pc, #308]	; (8002008 <HAL_ADC_Init+0x1ac>)
 8001ed2:	f7ff fa91 	bl	80013f8 <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ed6:	68a3      	ldr	r3, [r4, #8]
 8001ed8:	b1db      	cbz	r3, 8001f12 <HAL_ADC_Init+0xb6>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001eda:	6923      	ldr	r3, [r4, #16]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	d904      	bls.n	8001eec <HAL_ADC_Init+0x90>
 8001ee2:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001ee6:	4848      	ldr	r0, [pc, #288]	; (8002008 <HAL_ADC_Init+0x1ac>)
 8001ee8:	f7ff fa86 	bl	80013f8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001eec:	7d23      	ldrb	r3, [r4, #20]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d904      	bls.n	8001efc <HAL_ADC_Init+0xa0>
 8001ef2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001ef6:	4844      	ldr	r0, [pc, #272]	; (8002008 <HAL_ADC_Init+0x1ac>)
 8001ef8:	f7ff fa7e 	bl	80013f8 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001efc:	7d23      	ldrb	r3, [r4, #20]
 8001efe:	b143      	cbz	r3, 8001f12 <HAL_ADC_Init+0xb6>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001f00:	69a3      	ldr	r3, [r4, #24]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	2b07      	cmp	r3, #7
 8001f06:	d904      	bls.n	8001f12 <HAL_ADC_Init+0xb6>
 8001f08:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001f0c:	483e      	ldr	r0, [pc, #248]	; (8002008 <HAL_ADC_Init+0x1ac>)
 8001f0e:	f7ff fa73 	bl	80013f8 <assert_failed>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f14:	b92b      	cbnz	r3, 8001f22 <HAL_ADC_Init+0xc6>
    ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001f18:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7fe fb8b 	bl	8000638 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff ff78 	bl	8001e18 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f2a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f30:	d163      	bne.n	8001ffa <HAL_ADC_Init+0x19e>
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d161      	bne.n	8001ffa <HAL_ADC_Init+0x19e>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f36:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001f38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f3c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001f3e:	f023 0302 	bic.w	r3, r3, #2
 8001f42:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f46:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f48:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001f4a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f4c:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f4e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f52:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f56:	d037      	beq.n	8001fc8 <HAL_ADC_Init+0x16c>
 8001f58:	2901      	cmp	r1, #1
 8001f5a:	bf14      	ite	ne
 8001f5c:	4606      	movne	r6, r0
 8001f5e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f62:	7d25      	ldrb	r5, [r4, #20]
 8001f64:	2d01      	cmp	r5, #1
 8001f66:	d106      	bne.n	8001f76 <HAL_ADC_Init+0x11a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f68:	bb83      	cbnz	r3, 8001fcc <HAL_ADC_Init+0x170>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f6a:	69a3      	ldr	r3, [r4, #24]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001f72:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001f76:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f78:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001f7c:	685d      	ldr	r5, [r3, #4]
 8001f7e:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001f82:	ea45 0506 	orr.w	r5, r5, r6
 8001f86:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001f88:	689e      	ldr	r6, [r3, #8]
 8001f8a:	4d20      	ldr	r5, [pc, #128]	; (800200c <HAL_ADC_Init+0x1b0>)
 8001f8c:	ea05 0506 	and.w	r5, r5, r6
 8001f90:	ea45 0502 	orr.w	r5, r5, r2
 8001f94:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f96:	d001      	beq.n	8001f9c <HAL_ADC_Init+0x140>
 8001f98:	2901      	cmp	r1, #1
 8001f9a:	d120      	bne.n	8001fde <HAL_ADC_Init+0x182>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f9c:	6921      	ldr	r1, [r4, #16]
 8001f9e:	3901      	subs	r1, #1
 8001fa0:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001fa2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001fa4:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001fa8:	4329      	orrs	r1, r5
 8001faa:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_ADC_Init+0x1b4>)
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d115      	bne.n	8001fe2 <HAL_ADC_Init+0x186>
      ADC_CLEAR_ERRORCODE(hadc);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fbc:	f023 0303 	bic.w	r3, r3, #3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fc8:	460e      	mov	r6, r1
 8001fca:	e7ca      	b.n	8001f62 <HAL_ADC_Init+0x106>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fce:	f043 0320 	orr.w	r3, r3, #32
 8001fd2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fdc:	e7cb      	b.n	8001f76 <HAL_ADC_Init+0x11a>
  uint32_t tmp_sqr1 = 0U;
 8001fde:	2100      	movs	r1, #0
 8001fe0:	e7df      	b.n	8001fa2 <HAL_ADC_Init+0x146>
      ADC_STATE_CLR_SET(hadc->State,
 8001fe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fe4:	f023 0312 	bic.w	r3, r3, #18
 8001fe8:	f043 0310 	orr.w	r3, r3, #16
 8001fec:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	e7e5      	b.n	8001fc6 <HAL_ADC_Init+0x16a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffa:	f043 0310 	orr.w	r3, r3, #16
 8001ffe:	62a3      	str	r3, [r4, #40]	; 0x28
 8002000:	e7f9      	b.n	8001ff6 <HAL_ADC_Init+0x19a>
 8002002:	bf00      	nop
 8002004:	40012400 	.word	0x40012400
 8002008:	080055d8 	.word	0x080055d8
 800200c:	ffe1f7fd 	.word	0xffe1f7fd
 8002010:	ff1f0efe 	.word	0xff1f0efe

08002014 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002014:	4770      	bx	lr
	...

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002018:	1ec3      	subs	r3, r0, #3
 800201a:	2b04      	cmp	r3, #4
{
 800201c:	b510      	push	{r4, lr}
 800201e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002020:	d903      	bls.n	800202a <HAL_NVIC_SetPriorityGrouping+0x12>
 8002022:	2192      	movs	r1, #146	; 0x92
 8002024:	4809      	ldr	r0, [pc, #36]	; (800204c <HAL_NVIC_SetPriorityGrouping+0x34>)
 8002026:	f7ff f9e7 	bl	80013f8 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800202c:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202e:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002030:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002034:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002044:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8002046:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002048:	bd10      	pop	{r4, pc}
 800204a:	bf00      	nop
 800204c:	08005610 	.word	0x08005610
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002054:	2a0f      	cmp	r2, #15
{ 
 8002056:	b570      	push	{r4, r5, r6, lr}
 8002058:	4605      	mov	r5, r0
 800205a:	460c      	mov	r4, r1
 800205c:	4616      	mov	r6, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800205e:	d903      	bls.n	8002068 <HAL_NVIC_SetPriority+0x14>
 8002060:	21aa      	movs	r1, #170	; 0xaa
 8002062:	481b      	ldr	r0, [pc, #108]	; (80020d0 <HAL_NVIC_SetPriority+0x7c>)
 8002064:	f7ff f9c8 	bl	80013f8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002068:	2c0f      	cmp	r4, #15
 800206a:	d903      	bls.n	8002074 <HAL_NVIC_SetPriority+0x20>
 800206c:	21ab      	movs	r1, #171	; 0xab
 800206e:	4818      	ldr	r0, [pc, #96]	; (80020d0 <HAL_NVIC_SetPriority+0x7c>)
 8002070:	f7ff f9c2 	bl	80013f8 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_NVIC_SetPriority+0x80>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207c:	f1c2 0307 	rsb	r3, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002080:	1d11      	adds	r1, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002082:	2b04      	cmp	r3, #4
 8002084:	bf28      	it	cs
 8002086:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002088:	2906      	cmp	r1, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208a:	f04f 31ff 	mov.w	r1, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	bf98      	it	ls
 8002090:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	bf88      	it	hi
 8002098:	3a03      	subhi	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209a:	ea24 0303 	bic.w	r3, r4, r3
 800209e:	4093      	lsls	r3, r2
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	ea26 0602 	bic.w	r6, r6, r2
  if ((int32_t)(IRQn) >= 0)
 80020a8:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020aa:	ea43 0306 	orr.w	r3, r3, r6
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	bfa8      	it	ge
 80020b0:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
 80020b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	bfb8      	it	lt
 80020ba:	4a07      	ldrlt	r2, [pc, #28]	; (80020d8 <HAL_NVIC_SetPriority+0x84>)
 80020bc:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	bfab      	itete	ge
 80020c0:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	f885 3300 	strbge.w	r3, [r5, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	5553      	strblt	r3, [r2, r5]
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	08005610 	.word	0x08005610
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	e000ed14 	.word	0xe000ed14

080020dc <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80020dc:	2800      	cmp	r0, #0
 80020de:	da03      	bge.n	80020e8 <HAL_NVIC_EnableIRQ+0xc>
 80020e0:	21be      	movs	r1, #190	; 0xbe
 80020e2:	4806      	ldr	r0, [pc, #24]	; (80020fc <HAL_NVIC_EnableIRQ+0x20>)
 80020e4:	f7ff b988 	b.w	80013f8 <assert_failed>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e8:	2301      	movs	r3, #1
 80020ea:	0942      	lsrs	r2, r0, #5
 80020ec:	f000 001f 	and.w	r0, r0, #31
 80020f0:	fa03 f000 	lsl.w	r0, r3, r0
 80020f4:	4b02      	ldr	r3, [pc, #8]	; (8002100 <HAL_NVIC_EnableIRQ+0x24>)
 80020f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020fa:	4770      	bx	lr
 80020fc:	08005610 	.word	0x08005610
 8002100:	e000e100 	.word	0xe000e100

08002104 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	3801      	subs	r0, #1
 8002106:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800210a:	d20a      	bcs.n	8002122 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002122:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002130:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002132:	4604      	mov	r4, r0
 8002134:	2800      	cmp	r0, #0
 8002136:	f000 8081 	beq.w	800223c <HAL_DMA_Init+0x10c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800213a:	6803      	ldr	r3, [r0, #0]
 800213c:	4a40      	ldr	r2, [pc, #256]	; (8002240 <HAL_DMA_Init+0x110>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d015      	beq.n	800216e <HAL_DMA_Init+0x3e>
 8002142:	3214      	adds	r2, #20
 8002144:	4293      	cmp	r3, r2
 8002146:	d012      	beq.n	800216e <HAL_DMA_Init+0x3e>
 8002148:	3214      	adds	r2, #20
 800214a:	4293      	cmp	r3, r2
 800214c:	d00f      	beq.n	800216e <HAL_DMA_Init+0x3e>
 800214e:	3214      	adds	r2, #20
 8002150:	4293      	cmp	r3, r2
 8002152:	d00c      	beq.n	800216e <HAL_DMA_Init+0x3e>
 8002154:	3214      	adds	r2, #20
 8002156:	4293      	cmp	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_DMA_Init+0x3e>
 800215a:	3214      	adds	r2, #20
 800215c:	4293      	cmp	r3, r2
 800215e:	d006      	beq.n	800216e <HAL_DMA_Init+0x3e>
 8002160:	3214      	adds	r2, #20
 8002162:	4293      	cmp	r3, r2
 8002164:	d003      	beq.n	800216e <HAL_DMA_Init+0x3e>
 8002166:	219a      	movs	r1, #154	; 0x9a
 8002168:	4836      	ldr	r0, [pc, #216]	; (8002244 <HAL_DMA_Init+0x114>)
 800216a:	f7ff f945 	bl	80013f8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800216e:	6863      	ldr	r3, [r4, #4]
 8002170:	f033 0210 	bics.w	r2, r3, #16
 8002174:	d006      	beq.n	8002184 <HAL_DMA_Init+0x54>
 8002176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800217a:	d003      	beq.n	8002184 <HAL_DMA_Init+0x54>
 800217c:	219b      	movs	r1, #155	; 0x9b
 800217e:	4831      	ldr	r0, [pc, #196]	; (8002244 <HAL_DMA_Init+0x114>)
 8002180:	f7ff f93a 	bl	80013f8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002184:	68a3      	ldr	r3, [r4, #8]
 8002186:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800218a:	d003      	beq.n	8002194 <HAL_DMA_Init+0x64>
 800218c:	219c      	movs	r1, #156	; 0x9c
 800218e:	482d      	ldr	r0, [pc, #180]	; (8002244 <HAL_DMA_Init+0x114>)
 8002190:	f7ff f932 	bl	80013f8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002194:	68e3      	ldr	r3, [r4, #12]
 8002196:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800219a:	d003      	beq.n	80021a4 <HAL_DMA_Init+0x74>
 800219c:	219d      	movs	r1, #157	; 0x9d
 800219e:	4829      	ldr	r0, [pc, #164]	; (8002244 <HAL_DMA_Init+0x114>)
 80021a0:	f7ff f92a 	bl	80013f8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80021a4:	6923      	ldr	r3, [r4, #16]
 80021a6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80021aa:	d006      	beq.n	80021ba <HAL_DMA_Init+0x8a>
 80021ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b0:	d003      	beq.n	80021ba <HAL_DMA_Init+0x8a>
 80021b2:	219e      	movs	r1, #158	; 0x9e
 80021b4:	4823      	ldr	r0, [pc, #140]	; (8002244 <HAL_DMA_Init+0x114>)
 80021b6:	f7ff f91f 	bl	80013f8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80021ba:	6963      	ldr	r3, [r4, #20]
 80021bc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80021c0:	d006      	beq.n	80021d0 <HAL_DMA_Init+0xa0>
 80021c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021c6:	d003      	beq.n	80021d0 <HAL_DMA_Init+0xa0>
 80021c8:	219f      	movs	r1, #159	; 0x9f
 80021ca:	481e      	ldr	r0, [pc, #120]	; (8002244 <HAL_DMA_Init+0x114>)
 80021cc:	f7ff f914 	bl	80013f8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80021d0:	69a3      	ldr	r3, [r4, #24]
 80021d2:	f033 0320 	bics.w	r3, r3, #32
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_Init+0xb0>
 80021d8:	21a0      	movs	r1, #160	; 0xa0
 80021da:	481a      	ldr	r0, [pc, #104]	; (8002244 <HAL_DMA_Init+0x114>)
 80021dc:	f7ff f90c 	bl	80013f8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80021e0:	69e3      	ldr	r3, [r4, #28]
 80021e2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80021e6:	d003      	beq.n	80021f0 <HAL_DMA_Init+0xc0>
 80021e8:	21a1      	movs	r1, #161	; 0xa1
 80021ea:	4816      	ldr	r0, [pc, #88]	; (8002244 <HAL_DMA_Init+0x114>)
 80021ec:	f7ff f904 	bl	80013f8 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021f0:	2214      	movs	r2, #20
 80021f2:	6821      	ldr	r1, [r4, #0]
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_DMA_Init+0x118>)
 80021f6:	440b      	add	r3, r1
 80021f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_DMA_Init+0x11c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002202:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8002204:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002206:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800220a:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220c:	68e0      	ldr	r0, [r4, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800220e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002212:	4303      	orrs	r3, r0
 8002214:	6920      	ldr	r0, [r4, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002216:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221a:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221c:	6960      	ldr	r0, [r4, #20]
 800221e:	4303      	orrs	r3, r0
 8002220:	69a0      	ldr	r0, [r4, #24]
 8002222:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002224:	69e0      	ldr	r0, [r4, #28]
 8002226:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002228:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800222a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222c:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800222e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002230:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002232:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002236:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 800223a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
 800223e:	e7fc      	b.n	800223a <HAL_DMA_Init+0x10a>
 8002240:	40020008 	.word	0x40020008
 8002244:	0800564b 	.word	0x0800564b
 8002248:	bffdfff8 	.word	0xbffdfff8
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002254:	4617      	mov	r7, r2
 8002256:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800225e:	429a      	cmp	r2, r3
{
 8002260:	4604      	mov	r4, r0
 8002262:	460e      	mov	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002264:	d904      	bls.n	8002270 <HAL_DMA_Start_IT+0x20>
 8002266:	f240 116f 	movw	r1, #367	; 0x16f
 800226a:	4821      	ldr	r0, [pc, #132]	; (80022f0 <HAL_DMA_Start_IT+0xa0>)
 800226c:	f7ff f8c4 	bl	80013f8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002270:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d038      	beq.n	80022ea <HAL_DMA_Start_IT+0x9a>
 8002278:	2301      	movs	r3, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800227a:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 800227e:	f884 3020 	strb.w	r3, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002282:	429d      	cmp	r5, r3
 8002284:	f04f 0002 	mov.w	r0, #2
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	d12a      	bne.n	80022e4 <HAL_DMA_Start_IT+0x94>
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800228e:	6821      	ldr	r1, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002290:	63a3      	str	r3, [r4, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8002292:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8002296:	6808      	ldr	r0, [r1, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002298:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800229c:	f020 0001 	bic.w	r0, r0, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022a0:	4095      	lsls	r5, r2
    __HAL_DMA_DISABLE(hdma);
 80022a2:	6008      	str	r0, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022a4:	605d      	str	r5, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022a6:	6863      	ldr	r3, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 80022a8:	f8c1 8004 	str.w	r8, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ac:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80022ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022b0:	6822      	ldr	r2, [r4, #0]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022b2:	bf0b      	itete	eq
 80022b4:	608f      	streq	r7, [r1, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80022b6:	608e      	strne	r6, [r1, #8]
    hdma->Instance->CMAR = SrcAddress;
 80022b8:	60ce      	streq	r6, [r1, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80022ba:	60cf      	strne	r7, [r1, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80022bc:	b153      	cbz	r3, 80022d4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022be:	680b      	ldr	r3, [r1, #0]
 80022c0:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80022c4:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022c6:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 80022c8:	6813      	ldr	r3, [r2, #0]
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022d4:	680b      	ldr	r3, [r1, #0]
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	600b      	str	r3, [r1, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022dc:	680b      	ldr	r3, [r1, #0]
 80022de:	f043 030a 	orr.w	r3, r3, #10
 80022e2:	e7ef      	b.n	80022c4 <HAL_DMA_Start_IT+0x74>
    __HAL_UNLOCK(hdma); 
 80022e4:	f884 3020 	strb.w	r3, [r4, #32]
 80022e8:	e7f2      	b.n	80022d0 <HAL_DMA_Start_IT+0x80>
  __HAL_LOCK(hdma);
 80022ea:	2002      	movs	r0, #2
 80022ec:	e7f0      	b.n	80022d0 <HAL_DMA_Start_IT+0x80>
 80022ee:	bf00      	nop
 80022f0:	0800564b 	.word	0x0800564b

080022f4 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022f4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80022f8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d003      	beq.n	8002306 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fe:	2304      	movs	r3, #4
 8002300:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002302:	2001      	movs	r0, #1
}
 8002304:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002306:	6803      	ldr	r3, [r0, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	f022 020e 	bic.w	r2, r2, #14
 800230e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002318:	4a18      	ldr	r2, [pc, #96]	; (800237c <HAL_DMA_Abort_IT+0x88>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01f      	beq.n	800235e <HAL_DMA_Abort_IT+0x6a>
 800231e:	3214      	adds	r2, #20
 8002320:	4293      	cmp	r3, r2
 8002322:	d01e      	beq.n	8002362 <HAL_DMA_Abort_IT+0x6e>
 8002324:	3214      	adds	r2, #20
 8002326:	4293      	cmp	r3, r2
 8002328:	d01d      	beq.n	8002366 <HAL_DMA_Abort_IT+0x72>
 800232a:	3214      	adds	r2, #20
 800232c:	4293      	cmp	r3, r2
 800232e:	d01d      	beq.n	800236c <HAL_DMA_Abort_IT+0x78>
 8002330:	3214      	adds	r2, #20
 8002332:	4293      	cmp	r3, r2
 8002334:	d01d      	beq.n	8002372 <HAL_DMA_Abort_IT+0x7e>
 8002336:	3214      	adds	r2, #20
 8002338:	4293      	cmp	r3, r2
 800233a:	bf0c      	ite	eq
 800233c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002340:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002344:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002346:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002348:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800234a:	2301      	movs	r3, #1
 800234c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002350:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002352:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002356:	b17b      	cbz	r3, 8002378 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002358:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	4620      	mov	r0, r4
 800235c:	e7d2      	b.n	8002304 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800235e:	2301      	movs	r3, #1
 8002360:	e7f0      	b.n	8002344 <HAL_DMA_Abort_IT+0x50>
 8002362:	2310      	movs	r3, #16
 8002364:	e7ee      	b.n	8002344 <HAL_DMA_Abort_IT+0x50>
 8002366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236a:	e7eb      	b.n	8002344 <HAL_DMA_Abort_IT+0x50>
 800236c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002370:	e7e8      	b.n	8002344 <HAL_DMA_Abort_IT+0x50>
 8002372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002376:	e7e5      	b.n	8002344 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	4618      	mov	r0, r3
 800237a:	e7c3      	b.n	8002304 <HAL_DMA_Abort_IT+0x10>
 800237c:	40020008 	.word	0x40020008
 8002380:	40020000 	.word	0x40020000

08002384 <HAL_DMA_IRQHandler>:
{
 8002384:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002386:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002388:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800238a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800238c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800238e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002390:	4095      	lsls	r5, r2
 8002392:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002394:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002396:	d032      	beq.n	80023fe <HAL_DMA_IRQHandler+0x7a>
 8002398:	074d      	lsls	r5, r1, #29
 800239a:	d530      	bpl.n	80023fe <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023a0:	bf5e      	ittt	pl
 80023a2:	681a      	ldrpl	r2, [r3, #0]
 80023a4:	f022 0204 	bicpl.w	r2, r2, #4
 80023a8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80023aa:	4a3e      	ldr	r2, [pc, #248]	; (80024a4 <HAL_DMA_IRQHandler+0x120>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d019      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x60>
 80023b0:	3214      	adds	r2, #20
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d018      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x64>
 80023b6:	3214      	adds	r2, #20
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d017      	beq.n	80023ec <HAL_DMA_IRQHandler+0x68>
 80023bc:	3214      	adds	r2, #20
 80023be:	4293      	cmp	r3, r2
 80023c0:	d017      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x6e>
 80023c2:	3214      	adds	r2, #20
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d017      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x74>
 80023c8:	3214      	adds	r2, #20
 80023ca:	4293      	cmp	r3, r2
 80023cc:	bf0c      	ite	eq
 80023ce:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80023d2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80023d6:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <HAL_DMA_IRQHandler+0x124>)
 80023d8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80023da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d05e      	beq.n	800249e <HAL_DMA_IRQHandler+0x11a>
}
 80023e0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80023e2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80023e4:	2304      	movs	r3, #4
 80023e6:	e7f6      	b.n	80023d6 <HAL_DMA_IRQHandler+0x52>
 80023e8:	2340      	movs	r3, #64	; 0x40
 80023ea:	e7f4      	b.n	80023d6 <HAL_DMA_IRQHandler+0x52>
 80023ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f0:	e7f1      	b.n	80023d6 <HAL_DMA_IRQHandler+0x52>
 80023f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023f6:	e7ee      	b.n	80023d6 <HAL_DMA_IRQHandler+0x52>
 80023f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023fc:	e7eb      	b.n	80023d6 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023fe:	2502      	movs	r5, #2
 8002400:	4095      	lsls	r5, r2
 8002402:	4225      	tst	r5, r4
 8002404:	d035      	beq.n	8002472 <HAL_DMA_IRQHandler+0xee>
 8002406:	078d      	lsls	r5, r1, #30
 8002408:	d533      	bpl.n	8002472 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	0694      	lsls	r4, r2, #26
 800240e:	d406      	bmi.n	800241e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	f022 020a 	bic.w	r2, r2, #10
 8002416:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002418:	2201      	movs	r2, #1
 800241a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <HAL_DMA_IRQHandler+0x120>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d019      	beq.n	8002458 <HAL_DMA_IRQHandler+0xd4>
 8002424:	3214      	adds	r2, #20
 8002426:	4293      	cmp	r3, r2
 8002428:	d018      	beq.n	800245c <HAL_DMA_IRQHandler+0xd8>
 800242a:	3214      	adds	r2, #20
 800242c:	4293      	cmp	r3, r2
 800242e:	d017      	beq.n	8002460 <HAL_DMA_IRQHandler+0xdc>
 8002430:	3214      	adds	r2, #20
 8002432:	4293      	cmp	r3, r2
 8002434:	d017      	beq.n	8002466 <HAL_DMA_IRQHandler+0xe2>
 8002436:	3214      	adds	r2, #20
 8002438:	4293      	cmp	r3, r2
 800243a:	d017      	beq.n	800246c <HAL_DMA_IRQHandler+0xe8>
 800243c:	3214      	adds	r2, #20
 800243e:	4293      	cmp	r3, r2
 8002440:	bf0c      	ite	eq
 8002442:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002446:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800244a:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <HAL_DMA_IRQHandler+0x124>)
 800244c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800244e:	2300      	movs	r3, #0
 8002450:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002454:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002456:	e7c1      	b.n	80023dc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002458:	2302      	movs	r3, #2
 800245a:	e7f6      	b.n	800244a <HAL_DMA_IRQHandler+0xc6>
 800245c:	2320      	movs	r3, #32
 800245e:	e7f4      	b.n	800244a <HAL_DMA_IRQHandler+0xc6>
 8002460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002464:	e7f1      	b.n	800244a <HAL_DMA_IRQHandler+0xc6>
 8002466:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246a:	e7ee      	b.n	800244a <HAL_DMA_IRQHandler+0xc6>
 800246c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002470:	e7eb      	b.n	800244a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002472:	2508      	movs	r5, #8
 8002474:	4095      	lsls	r5, r2
 8002476:	4225      	tst	r5, r4
 8002478:	d011      	beq.n	800249e <HAL_DMA_IRQHandler+0x11a>
 800247a:	0709      	lsls	r1, r1, #28
 800247c:	d50f      	bpl.n	800249e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	f021 010e 	bic.w	r1, r1, #14
 8002484:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002486:	2301      	movs	r3, #1
 8002488:	fa03 f202 	lsl.w	r2, r3, r2
 800248c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800248e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002490:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002494:	2300      	movs	r3, #0
 8002496:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800249a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800249c:	e79e      	b.n	80023dc <HAL_DMA_IRQHandler+0x58>
}
 800249e:	bc70      	pop	{r4, r5, r6}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40020008 	.word	0x40020008
 80024a8:	40020000 	.word	0x40020000

080024ac <HAL_DMA_GetState>:
}
 80024ac:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80024b8:	4aa2      	ldr	r2, [pc, #648]	; (8002744 <HAL_GPIO_Init+0x290>)
{
 80024ba:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80024bc:	4290      	cmp	r0, r2
{
 80024be:	4604      	mov	r4, r0
 80024c0:	468b      	mov	fp, r1
 80024c2:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80024c4:	d00f      	beq.n	80024e6 <HAL_GPIO_Init+0x32>
 80024c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ca:	4290      	cmp	r0, r2
 80024cc:	d00b      	beq.n	80024e6 <HAL_GPIO_Init+0x32>
 80024ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024d2:	4290      	cmp	r0, r2
 80024d4:	d007      	beq.n	80024e6 <HAL_GPIO_Init+0x32>
 80024d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024da:	4290      	cmp	r0, r2
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x32>
 80024de:	21bd      	movs	r1, #189	; 0xbd
 80024e0:	4899      	ldr	r0, [pc, #612]	; (8002748 <HAL_GPIO_Init+0x294>)
 80024e2:	f7fe ff89 	bl	80013f8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80024e6:	f8db 2000 	ldr.w	r2, [fp]
 80024ea:	b291      	uxth	r1, r2
 80024ec:	b111      	cbz	r1, 80024f4 <HAL_GPIO_Init+0x40>
 80024ee:	0c12      	lsrs	r2, r2, #16
 80024f0:	0412      	lsls	r2, r2, #16
 80024f2:	b11a      	cbz	r2, 80024fc <HAL_GPIO_Init+0x48>
 80024f4:	21be      	movs	r1, #190	; 0xbe
 80024f6:	4894      	ldr	r0, [pc, #592]	; (8002748 <HAL_GPIO_Init+0x294>)
 80024f8:	f7fe ff7e 	bl	80013f8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80024fc:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002500:	2a03      	cmp	r2, #3
 8002502:	d917      	bls.n	8002534 <HAL_GPIO_Init+0x80>
 8002504:	f1a2 0111 	sub.w	r1, r2, #17
 8002508:	2901      	cmp	r1, #1
 800250a:	d913      	bls.n	8002534 <HAL_GPIO_Init+0x80>
 800250c:	488f      	ldr	r0, [pc, #572]	; (800274c <HAL_GPIO_Init+0x298>)
 800250e:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8002512:	4281      	cmp	r1, r0
 8002514:	d00e      	beq.n	8002534 <HAL_GPIO_Init+0x80>
 8002516:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800251a:	4282      	cmp	r2, r0
 800251c:	d00a      	beq.n	8002534 <HAL_GPIO_Init+0x80>
 800251e:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 8002522:	4281      	cmp	r1, r0
 8002524:	d006      	beq.n	8002534 <HAL_GPIO_Init+0x80>
 8002526:	498a      	ldr	r1, [pc, #552]	; (8002750 <HAL_GPIO_Init+0x29c>)
 8002528:	428a      	cmp	r2, r1
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x80>
 800252c:	21bf      	movs	r1, #191	; 0xbf
 800252e:	4886      	ldr	r0, [pc, #536]	; (8002748 <HAL_GPIO_Init+0x294>)
 8002530:	f7fe ff62 	bl	80013f8 <assert_failed>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002534:	2500      	movs	r5, #0
 8002536:	46a8      	mov	r8, r5
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002538:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002768 <HAL_GPIO_Init+0x2b4>
 800253c:	4e85      	ldr	r6, [pc, #532]	; (8002754 <HAL_GPIO_Init+0x2a0>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253e:	f8db 7000 	ldr.w	r7, [fp]
 8002542:	fa37 f308 	lsrs.w	r3, r7, r8
 8002546:	d102      	bne.n	800254e <HAL_GPIO_Init+0x9a>
      }
    }

	position++;
  }
}
 8002548:	b005      	add	sp, #20
 800254a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800254e:	2201      	movs	r2, #1
 8002550:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002554:	ea07 0709 	and.w	r7, r7, r9
    if (iocurrent == ioposition)
 8002558:	45b9      	cmp	r9, r7
 800255a:	f040 8086 	bne.w	800266a <HAL_GPIO_Init+0x1b6>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800255e:	9b01      	ldr	r3, [sp, #4]
 8002560:	429c      	cmp	r4, r3
 8002562:	d00d      	beq.n	8002580 <HAL_GPIO_Init+0xcc>
 8002564:	497c      	ldr	r1, [pc, #496]	; (8002758 <HAL_GPIO_Init+0x2a4>)
 8002566:	428c      	cmp	r4, r1
 8002568:	d00a      	beq.n	8002580 <HAL_GPIO_Init+0xcc>
 800256a:	4b7c      	ldr	r3, [pc, #496]	; (800275c <HAL_GPIO_Init+0x2a8>)
 800256c:	429c      	cmp	r4, r3
 800256e:	d007      	beq.n	8002580 <HAL_GPIO_Init+0xcc>
 8002570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002574:	428c      	cmp	r4, r1
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0xcc>
 8002578:	21cd      	movs	r1, #205	; 0xcd
 800257a:	4873      	ldr	r0, [pc, #460]	; (8002748 <HAL_GPIO_Init+0x294>)
 800257c:	f7fe ff3c 	bl	80013f8 <assert_failed>
      switch (GPIO_Init->Mode)
 8002580:	f8db 1004 	ldr.w	r1, [fp, #4]
 8002584:	2912      	cmp	r1, #18
 8002586:	f000 80c7 	beq.w	8002718 <HAL_GPIO_Init+0x264>
 800258a:	f200 8082 	bhi.w	8002692 <HAL_GPIO_Init+0x1de>
 800258e:	2902      	cmp	r1, #2
 8002590:	f000 80b5 	beq.w	80026fe <HAL_GPIO_Init+0x24a>
 8002594:	d86c      	bhi.n	8002670 <HAL_GPIO_Init+0x1bc>
 8002596:	2900      	cmp	r1, #0
 8002598:	f000 8088 	beq.w	80026ac <HAL_GPIO_Init+0x1f8>
 800259c:	2901      	cmp	r1, #1
 800259e:	f000 80a2 	beq.w	80026e6 <HAL_GPIO_Init+0x232>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025a2:	2fff      	cmp	r7, #255	; 0xff
 80025a4:	bf82      	ittt	hi
 80025a6:	f108 4c80 	addhi.w	ip, r8, #1073741824	; 0x40000000
 80025aa:	f1ac 0c08 	subhi.w	ip, ip, #8
 80025ae:	ea4f 028c 	movhi.w	r2, ip, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025b2:	f04f 0c0f 	mov.w	ip, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025b6:	bf9d      	ittte	ls
 80025b8:	4620      	movls	r0, r4
 80025ba:	6821      	ldrls	r1, [r4, #0]
 80025bc:	ea4f 0288 	movls.w	r2, r8, lsl #2
 80025c0:	6861      	ldrhi	r1, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025c2:	fa0c fe02 	lsl.w	lr, ip, r2
 80025c6:	ea21 010e 	bic.w	r1, r1, lr
 80025ca:	fa05 f202 	lsl.w	r2, r5, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025ce:	bf88      	it	hi
 80025d0:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025d2:	430a      	orrs	r2, r1
 80025d4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025d6:	f8db 0004 	ldr.w	r0, [fp, #4]
 80025da:	00c3      	lsls	r3, r0, #3
 80025dc:	d545      	bpl.n	800266a <HAL_GPIO_Init+0x1b6>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025de:	f8da 2018 	ldr.w	r2, [sl, #24]
 80025e2:	f028 0103 	bic.w	r1, r8, #3
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	f8ca 2018 	str.w	r2, [sl, #24]
 80025ee:	f8da 2018 	ldr.w	r2, [sl, #24]
 80025f2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80025f6:	f002 0201 	and.w	r2, r2, #1
 80025fa:	9203      	str	r2, [sp, #12]
 80025fc:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002600:	f008 0e03 	and.w	lr, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002604:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002606:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002608:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800260c:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800260e:	fa0c fc0e 	lsl.w	ip, ip, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002612:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002614:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002618:	f000 808f 	beq.w	800273a <HAL_GPIO_Init+0x286>
 800261c:	4a4e      	ldr	r2, [pc, #312]	; (8002758 <HAL_GPIO_Init+0x2a4>)
 800261e:	4294      	cmp	r4, r2
 8002620:	f000 808d 	beq.w	800273e <HAL_GPIO_Init+0x28a>
 8002624:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_GPIO_Init+0x2a8>)
 8002626:	429c      	cmp	r4, r3
 8002628:	bf14      	ite	ne
 800262a:	2203      	movne	r2, #3
 800262c:	2202      	moveq	r2, #2
 800262e:	fa02 f20e 	lsl.w	r2, r2, lr
 8002632:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8002636:	608a      	str	r2, [r1, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002638:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800263a:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 800263c:	bf4c      	ite	mi
 800263e:	433a      	orrmi	r2, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002640:	43ba      	bicpl	r2, r7
 8002642:	6032      	str	r2, [r6, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002644:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002646:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8002648:	bf4c      	ite	mi
 800264a:	433a      	orrmi	r2, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800264c:	43ba      	bicpl	r2, r7
 800264e:	6072      	str	r2, [r6, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002650:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002652:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8002654:	bf4c      	ite	mi
 8002656:	433a      	orrmi	r2, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002658:	43ba      	bicpl	r2, r7
 800265a:	60b2      	str	r2, [r6, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800265c:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800265e:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8002660:	bf4c      	ite	mi
 8002662:	4317      	orrmi	r7, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002664:	ea22 0707 	bicpl.w	r7, r2, r7
 8002668:	60f7      	str	r7, [r6, #12]
	position++;
 800266a:	f108 0801 	add.w	r8, r8, #1
 800266e:	e766      	b.n	800253e <HAL_GPIO_Init+0x8a>
      switch (GPIO_Init->Mode)
 8002670:	2903      	cmp	r1, #3
 8002672:	d05e      	beq.n	8002732 <HAL_GPIO_Init+0x27e>
 8002674:	2911      	cmp	r1, #17
 8002676:	d194      	bne.n	80025a2 <HAL_GPIO_Init+0xee>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002678:	f8db 200c 	ldr.w	r2, [fp, #12]
 800267c:	3a01      	subs	r2, #1
 800267e:	2a02      	cmp	r2, #2
 8002680:	d903      	bls.n	800268a <HAL_GPIO_Init+0x1d6>
 8002682:	21dc      	movs	r1, #220	; 0xdc
 8002684:	4830      	ldr	r0, [pc, #192]	; (8002748 <HAL_GPIO_Init+0x294>)
 8002686:	f7fe feb7 	bl	80013f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800268a:	f8db 500c 	ldr.w	r5, [fp, #12]
 800268e:	3504      	adds	r5, #4
          break;
 8002690:	e787      	b.n	80025a2 <HAL_GPIO_Init+0xee>
      switch (GPIO_Init->Mode)
 8002692:	4833      	ldr	r0, [pc, #204]	; (8002760 <HAL_GPIO_Init+0x2ac>)
 8002694:	4281      	cmp	r1, r0
 8002696:	d009      	beq.n	80026ac <HAL_GPIO_Init+0x1f8>
 8002698:	d81b      	bhi.n	80026d2 <HAL_GPIO_Init+0x21e>
 800269a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800269e:	4281      	cmp	r1, r0
 80026a0:	d004      	beq.n	80026ac <HAL_GPIO_Init+0x1f8>
 80026a2:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80026a6:	4281      	cmp	r1, r0
 80026a8:	f47f af7b 	bne.w	80025a2 <HAL_GPIO_Init+0xee>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80026ac:	f8db 1008 	ldr.w	r1, [fp, #8]
 80026b0:	2902      	cmp	r1, #2
 80026b2:	d903      	bls.n	80026bc <HAL_GPIO_Init+0x208>
 80026b4:	21f7      	movs	r1, #247	; 0xf7
 80026b6:	4824      	ldr	r0, [pc, #144]	; (8002748 <HAL_GPIO_Init+0x294>)
 80026b8:	f7fe fe9e 	bl	80013f8 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026bc:	f8db 1008 	ldr.w	r1, [fp, #8]
 80026c0:	b3c9      	cbz	r1, 8002736 <HAL_GPIO_Init+0x282>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026c2:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 80026c4:	bf0c      	ite	eq
 80026c6:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 80026ca:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ce:	2508      	movs	r5, #8
 80026d0:	e767      	b.n	80025a2 <HAL_GPIO_Init+0xee>
      switch (GPIO_Init->Mode)
 80026d2:	4824      	ldr	r0, [pc, #144]	; (8002764 <HAL_GPIO_Init+0x2b0>)
 80026d4:	4281      	cmp	r1, r0
 80026d6:	d0e9      	beq.n	80026ac <HAL_GPIO_Init+0x1f8>
 80026d8:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80026dc:	4281      	cmp	r1, r0
 80026de:	d0e5      	beq.n	80026ac <HAL_GPIO_Init+0x1f8>
 80026e0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80026e4:	e7df      	b.n	80026a6 <HAL_GPIO_Init+0x1f2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80026e6:	f8db 200c 	ldr.w	r2, [fp, #12]
 80026ea:	3a01      	subs	r2, #1
 80026ec:	2a02      	cmp	r2, #2
 80026ee:	d903      	bls.n	80026f8 <HAL_GPIO_Init+0x244>
 80026f0:	21d5      	movs	r1, #213	; 0xd5
 80026f2:	4815      	ldr	r0, [pc, #84]	; (8002748 <HAL_GPIO_Init+0x294>)
 80026f4:	f7fe fe80 	bl	80013f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026f8:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 80026fc:	e751      	b.n	80025a2 <HAL_GPIO_Init+0xee>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80026fe:	f8db 200c 	ldr.w	r2, [fp, #12]
 8002702:	3a01      	subs	r2, #1
 8002704:	2a02      	cmp	r2, #2
 8002706:	d903      	bls.n	8002710 <HAL_GPIO_Init+0x25c>
 8002708:	21e3      	movs	r1, #227	; 0xe3
 800270a:	480f      	ldr	r0, [pc, #60]	; (8002748 <HAL_GPIO_Init+0x294>)
 800270c:	f7fe fe74 	bl	80013f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002710:	f8db 500c 	ldr.w	r5, [fp, #12]
 8002714:	3508      	adds	r5, #8
          break;
 8002716:	e744      	b.n	80025a2 <HAL_GPIO_Init+0xee>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002718:	f8db 200c 	ldr.w	r2, [fp, #12]
 800271c:	3a01      	subs	r2, #1
 800271e:	2a02      	cmp	r2, #2
 8002720:	d903      	bls.n	800272a <HAL_GPIO_Init+0x276>
 8002722:	21ea      	movs	r1, #234	; 0xea
 8002724:	4808      	ldr	r0, [pc, #32]	; (8002748 <HAL_GPIO_Init+0x294>)
 8002726:	f7fe fe67 	bl	80013f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800272a:	f8db 500c 	ldr.w	r5, [fp, #12]
 800272e:	350c      	adds	r5, #12
          break;
 8002730:	e737      	b.n	80025a2 <HAL_GPIO_Init+0xee>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002732:	2500      	movs	r5, #0
 8002734:	e735      	b.n	80025a2 <HAL_GPIO_Init+0xee>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002736:	2504      	movs	r5, #4
 8002738:	e733      	b.n	80025a2 <HAL_GPIO_Init+0xee>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800273a:	2200      	movs	r2, #0
 800273c:	e777      	b.n	800262e <HAL_GPIO_Init+0x17a>
 800273e:	2201      	movs	r2, #1
 8002740:	e775      	b.n	800262e <HAL_GPIO_Init+0x17a>
 8002742:	bf00      	nop
 8002744:	40010800 	.word	0x40010800
 8002748:	08005683 	.word	0x08005683
 800274c:	10110000 	.word	0x10110000
 8002750:	10220000 	.word	0x10220000
 8002754:	40010400 	.word	0x40010400
 8002758:	40010c00 	.word	0x40010c00
 800275c:	40011000 	.word	0x40011000
 8002760:	10210000 	.word	0x10210000
 8002764:	10310000 	.word	0x10310000
 8002768:	40021000 	.word	0x40021000

0800276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	4605      	mov	r5, r0
 8002770:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002772:	460c      	mov	r4, r1
 8002774:	b921      	cbnz	r1, 8002780 <HAL_GPIO_WritePin+0x14>
 8002776:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800277a:	4808      	ldr	r0, [pc, #32]	; (800279c <HAL_GPIO_WritePin+0x30>)
 800277c:	f7fe fe3c 	bl	80013f8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002780:	2e01      	cmp	r6, #1
 8002782:	d906      	bls.n	8002792 <HAL_GPIO_WritePin+0x26>
 8002784:	f240 11d5 	movw	r1, #469	; 0x1d5
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <HAL_GPIO_WritePin+0x30>)
 800278a:	f7fe fe35 	bl	80013f8 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800278e:	612c      	str	r4, [r5, #16]
  }
}
 8002790:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 8002792:	2e00      	cmp	r6, #0
 8002794:	d1fb      	bne.n	800278e <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002796:	0424      	lsls	r4, r4, #16
 8002798:	e7f9      	b.n	800278e <HAL_GPIO_WritePin+0x22>
 800279a:	bf00      	nop
 800279c:	08005683 	.word	0x08005683

080027a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80027a4:	460c      	mov	r4, r1
 80027a6:	b921      	cbnz	r1, 80027b2 <HAL_GPIO_TogglePin+0x12>
 80027a8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80027ac:	4804      	ldr	r0, [pc, #16]	; (80027c0 <HAL_GPIO_TogglePin+0x20>)
 80027ae:	f7fe fe23 	bl	80013f8 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80027b2:	68eb      	ldr	r3, [r5, #12]
 80027b4:	4223      	tst	r3, r4
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027b6:	bf14      	ite	ne
 80027b8:	616c      	strne	r4, [r5, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ba:	612c      	streq	r4, [r5, #16]
  }
}
 80027bc:	bd38      	pop	{r3, r4, r5, pc}
 80027be:	bf00      	nop
 80027c0:	08005683 	.word	0x08005683

080027c4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c4:	6801      	ldr	r1, [r0, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	694b      	ldr	r3, [r1, #20]
 80027ca:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80027ce:	d010      	beq.n	80027f2 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80027d4:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80027d6:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80027d8:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027de:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027e2:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80027ee:	2001      	movs	r0, #1
 80027f0:	4770      	bx	lr
  }
  return HAL_OK;
 80027f2:	4618      	mov	r0, r3
}
 80027f4:	4770      	bx	lr

080027f6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80027f6:	b570      	push	{r4, r5, r6, lr}
 80027f8:	4604      	mov	r4, r0
 80027fa:	460d      	mov	r5, r1
 80027fc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027fe:	6820      	ldr	r0, [r4, #0]
 8002800:	6943      	ldr	r3, [r0, #20]
 8002802:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002806:	d001      	beq.n	800280c <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002808:	2000      	movs	r0, #0
 800280a:	e010      	b.n	800282e <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800280c:	6942      	ldr	r2, [r0, #20]
 800280e:	06d2      	lsls	r2, r2, #27
 8002810:	d50e      	bpl.n	8002830 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002812:	f06f 0210 	mvn.w	r2, #16
 8002816:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002818:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800281a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800281c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002820:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002824:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002826:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002828:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800282a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800282e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002830:	f7ff f898 	bl	8001964 <HAL_GetTick>
 8002834:	1b80      	subs	r0, r0, r6
 8002836:	42a8      	cmp	r0, r5
 8002838:	d801      	bhi.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800283a:	2d00      	cmp	r5, #0
 800283c:	d1df      	bne.n	80027fe <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800283e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002840:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002842:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002844:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002848:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800284c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800284e:	f042 0220 	orr.w	r2, r2, #32
 8002852:	e7e8      	b.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08002854 <I2C_WaitOnFlagUntilTimeout>:
{
 8002854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002858:	4604      	mov	r4, r0
 800285a:	4690      	mov	r8, r2
 800285c:	461f      	mov	r7, r3
 800285e:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002860:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8002864:	b28d      	uxth	r5, r1
 8002866:	6821      	ldr	r1, [r4, #0]
 8002868:	f1b9 0f01 	cmp.w	r9, #1
 800286c:	bf0c      	ite	eq
 800286e:	694b      	ldreq	r3, [r1, #20]
 8002870:	698b      	ldrne	r3, [r1, #24]
 8002872:	ea35 0303 	bics.w	r3, r5, r3
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	4598      	cmp	r8, r3
 800287e:	d001      	beq.n	8002884 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002880:	2000      	movs	r0, #0
 8002882:	e016      	b.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002884:	1c7b      	adds	r3, r7, #1
 8002886:	d0ef      	beq.n	8002868 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002888:	f7ff f86c 	bl	8001964 <HAL_GetTick>
 800288c:	1b80      	subs	r0, r0, r6
 800288e:	42b8      	cmp	r0, r7
 8002890:	d801      	bhi.n	8002896 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002892:	2f00      	cmp	r7, #0
 8002894:	d1e7      	bne.n	8002866 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002896:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002898:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 800289a:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 800289c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800289e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80028a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	f042 0220 	orr.w	r2, r2, #32
 80028b0:	6422      	str	r2, [r4, #64]	; 0x40
}
 80028b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080028b8 <HAL_I2C_Init>:
{
 80028b8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80028ba:	4604      	mov	r4, r0
 80028bc:	b908      	cbnz	r0, 80028c2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80028be:	2001      	movs	r0, #1
}
 80028c0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80028c2:	6802      	ldr	r2, [r0, #0]
 80028c4:	4b75      	ldr	r3, [pc, #468]	; (8002a9c <HAL_I2C_Init+0x1e4>)
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d004      	beq.n	80028d4 <HAL_I2C_Init+0x1c>
 80028ca:	f240 11cd 	movw	r1, #461	; 0x1cd
 80028ce:	4874      	ldr	r0, [pc, #464]	; (8002aa0 <HAL_I2C_Init+0x1e8>)
 80028d0:	f7fe fd92 	bl	80013f8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80028d4:	6863      	ldr	r3, [r4, #4]
 80028d6:	4a73      	ldr	r2, [pc, #460]	; (8002aa4 <HAL_I2C_Init+0x1ec>)
 80028d8:	3b01      	subs	r3, #1
 80028da:	4293      	cmp	r3, r2
 80028dc:	d904      	bls.n	80028e8 <HAL_I2C_Init+0x30>
 80028de:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80028e2:	486f      	ldr	r0, [pc, #444]	; (8002aa0 <HAL_I2C_Init+0x1e8>)
 80028e4:	f7fe fd88 	bl	80013f8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80028e8:	68a3      	ldr	r3, [r4, #8]
 80028ea:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80028ee:	d004      	beq.n	80028fa <HAL_I2C_Init+0x42>
 80028f0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80028f4:	486a      	ldr	r0, [pc, #424]	; (8002aa0 <HAL_I2C_Init+0x1e8>)
 80028f6:	f7fe fd7f 	bl	80013f8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80028fa:	68e3      	ldr	r3, [r4, #12]
 80028fc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002900:	f023 0303 	bic.w	r3, r3, #3
 8002904:	b123      	cbz	r3, 8002910 <HAL_I2C_Init+0x58>
 8002906:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800290a:	4865      	ldr	r0, [pc, #404]	; (8002aa0 <HAL_I2C_Init+0x1e8>)
 800290c:	f7fe fd74 	bl	80013f8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002910:	6923      	ldr	r3, [r4, #16]
 8002912:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800291a:	d004      	beq.n	8002926 <HAL_I2C_Init+0x6e>
 800291c:	f240 11d1 	movw	r1, #465	; 0x1d1
 8002920:	485f      	ldr	r0, [pc, #380]	; (8002aa0 <HAL_I2C_Init+0x1e8>)
 8002922:	f7fe fd69 	bl	80013f8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002926:	6963      	ldr	r3, [r4, #20]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d904      	bls.n	8002936 <HAL_I2C_Init+0x7e>
 800292c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8002930:	485b      	ldr	r0, [pc, #364]	; (8002aa0 <HAL_I2C_Init+0x1e8>)
 8002932:	f7fe fd61 	bl	80013f8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002936:	69a3      	ldr	r3, [r4, #24]
 8002938:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 800293c:	d004      	beq.n	8002948 <HAL_I2C_Init+0x90>
 800293e:	f240 11d3 	movw	r1, #467	; 0x1d3
 8002942:	4857      	ldr	r0, [pc, #348]	; (8002aa0 <HAL_I2C_Init+0x1e8>)
 8002944:	f7fe fd58 	bl	80013f8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002948:	69e3      	ldr	r3, [r4, #28]
 800294a:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800294e:	d004      	beq.n	800295a <HAL_I2C_Init+0xa2>
 8002950:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8002954:	4852      	ldr	r0, [pc, #328]	; (8002aa0 <HAL_I2C_Init+0x1e8>)
 8002956:	f7fe fd4f 	bl	80013f8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800295a:	6a23      	ldr	r3, [r4, #32]
 800295c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002960:	d004      	beq.n	800296c <HAL_I2C_Init+0xb4>
 8002962:	f240 11d5 	movw	r1, #469	; 0x1d5
 8002966:	484e      	ldr	r0, [pc, #312]	; (8002aa0 <HAL_I2C_Init+0x1e8>)
 8002968:	f7fe fd46 	bl	80013f8 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002970:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002974:	b923      	cbnz	r3, 8002980 <HAL_I2C_Init+0xc8>
    hi2c->Lock = HAL_UNLOCKED;
 8002976:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800297a:	4620      	mov	r0, r4
 800297c:	f7fe fb26 	bl	8000fcc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002980:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002982:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002984:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002988:	6813      	ldr	r3, [r2, #0]
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002990:	f001 fa38 	bl	8003e04 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002994:	6863      	ldr	r3, [r4, #4]
 8002996:	4a44      	ldr	r2, [pc, #272]	; (8002aa8 <HAL_I2C_Init+0x1f0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d84d      	bhi.n	8002a38 <HAL_I2C_Init+0x180>
 800299c:	4a43      	ldr	r2, [pc, #268]	; (8002aac <HAL_I2C_Init+0x1f4>)
 800299e:	4290      	cmp	r0, r2
 80029a0:	d98d      	bls.n	80028be <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80029a2:	4943      	ldr	r1, [pc, #268]	; (8002ab0 <HAL_I2C_Init+0x1f8>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029a4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80029a6:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029aa:	6855      	ldr	r5, [r2, #4]
 80029ac:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80029b0:	430d      	orrs	r5, r1
 80029b2:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029b4:	6a15      	ldr	r5, [r2, #32]
 80029b6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80029ba:	3101      	adds	r1, #1
 80029bc:	4329      	orrs	r1, r5
 80029be:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c0:	69d1      	ldr	r1, [r2, #28]
 80029c2:	4d39      	ldr	r5, [pc, #228]	; (8002aa8 <HAL_I2C_Init+0x1f0>)
 80029c4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80029c8:	42ab      	cmp	r3, r5
 80029ca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80029ce:	f100 30ff 	add.w	r0, r0, #4294967295
 80029d2:	d849      	bhi.n	8002a68 <HAL_I2C_Init+0x1b0>
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80029da:	1c43      	adds	r3, r0, #1
 80029dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	bf38      	it	cc
 80029e4:	2304      	movcc	r3, #4
 80029e6:	430b      	orrs	r3, r1
 80029e8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029ea:	6811      	ldr	r1, [r2, #0]
 80029ec:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80029f0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80029f4:	4303      	orrs	r3, r0
 80029f6:	430b      	orrs	r3, r1
 80029f8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029fa:	6891      	ldr	r1, [r2, #8]
 80029fc:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002a00:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002a04:	4303      	orrs	r3, r0
 8002a06:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a0e:	68d1      	ldr	r1, [r2, #12]
 8002a10:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002a14:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002a18:	4303      	orrs	r3, r0
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002a1e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a20:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a30:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a32:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002a36:	e743      	b.n	80028c0 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a38:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_I2C_Init+0x1fc>)
 8002a3a:	4290      	cmp	r0, r2
 8002a3c:	f67f af3f 	bls.w	80028be <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8002a40:	4e1b      	ldr	r6, [pc, #108]	; (8002ab0 <HAL_I2C_Init+0x1f8>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a42:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002a46:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a4a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a4c:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a4e:	6855      	ldr	r5, [r2, #4]
 8002a50:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002a54:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a56:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a5a:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a5c:	6a15      	ldr	r5, [r2, #32]
 8002a5e:	fbb1 f1f6 	udiv	r1, r1, r6
 8002a62:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002a66:	e7a8      	b.n	80029ba <HAL_I2C_Init+0x102>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a68:	68a5      	ldr	r5, [r4, #8]
 8002a6a:	b955      	cbnz	r5, 8002a82 <HAL_I2C_Init+0x1ca>
 8002a6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a70:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a74:	1c43      	adds	r3, r0, #1
 8002a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7a:	b16b      	cbz	r3, 8002a98 <HAL_I2C_Init+0x1e0>
 8002a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a80:	e7b1      	b.n	80029e6 <HAL_I2C_Init+0x12e>
 8002a82:	2519      	movs	r5, #25
 8002a84:	436b      	muls	r3, r5
 8002a86:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a8a:	1c43      	adds	r3, r0, #1
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	b113      	cbz	r3, 8002a98 <HAL_I2C_Init+0x1e0>
 8002a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a96:	e7a6      	b.n	80029e6 <HAL_I2C_Init+0x12e>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e7a4      	b.n	80029e6 <HAL_I2C_Init+0x12e>
 8002a9c:	40005400 	.word	0x40005400
 8002aa0:	080056bc 	.word	0x080056bc
 8002aa4:	00061a7f 	.word	0x00061a7f
 8002aa8:	000186a0 	.word	0x000186a0
 8002aac:	001e847f 	.word	0x001e847f
 8002ab0:	000f4240 	.word	0x000f4240
 8002ab4:	003d08ff 	.word	0x003d08ff

08002ab8 <HAL_I2C_Slave_Receive>:
{
 8002ab8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002abc:	4604      	mov	r4, r0
 8002abe:	461e      	mov	r6, r3
 8002ac0:	460d      	mov	r5, r1
 8002ac2:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7fe ff4e 	bl	8001964 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002acc:	4607      	mov	r7, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	f040 80a7 	bne.w	8002c22 <HAL_I2C_Slave_Receive+0x16a>
    if ((pData == NULL) || (Size == (uint16_t)0))
 8002ad4:	b925      	cbnz	r5, 8002ae0 <HAL_I2C_Slave_Receive+0x28>
        return HAL_ERROR;
 8002ad6:	2501      	movs	r5, #1
}
 8002ad8:	4628      	mov	r0, r5
 8002ada:	b004      	add	sp, #16
 8002adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((pData == NULL) || (Size == (uint16_t)0))
 8002ae0:	f1b8 0f00 	cmp.w	r8, #0
 8002ae4:	d0f7      	beq.n	8002ad6 <HAL_I2C_Slave_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8002ae6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	f000 8099 	beq.w	8002c22 <HAL_I2C_Slave_Receive+0x16a>
 8002af0:	2301      	movs	r3, #1
 8002af2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	07d2      	lsls	r2, r2, #31
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002afc:	f04f 0222 	mov.w	r2, #34	; 0x22
      __HAL_I2C_ENABLE(hi2c);
 8002b00:	bf5e      	ittt	pl
 8002b02:	6818      	ldrpl	r0, [r3, #0]
 8002b04:	f040 0001 	orrpl.w	r0, r0, #1
 8002b08:	6018      	strpl	r0, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8002b10:	6018      	str	r0, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002b16:	2220      	movs	r2, #32
 8002b18:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002b20:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b24:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002b26:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002b28:	8521      	strh	r1, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b2a:	493f      	ldr	r1, [pc, #252]	; (8002c28 <HAL_I2C_Slave_Receive+0x170>)
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002b2c:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b2e:	62e1      	str	r1, [r4, #44]	; 0x2c
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002b36:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002b38:	9700      	str	r7, [sp, #0]
 8002b3a:	4633      	mov	r3, r6
 8002b3c:	493b      	ldr	r1, [pc, #236]	; (8002c2c <HAL_I2C_Slave_Receive+0x174>)
 8002b3e:	f7ff fe89 	bl	8002854 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4605      	mov	r5, r0
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d1c6      	bne.n	8002ad6 <HAL_I2C_Slave_Receive+0x1e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	9002      	str	r0, [sp, #8]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	9202      	str	r2, [sp, #8]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	9302      	str	r3, [sp, #8]
 8002b54:	9b02      	ldr	r3, [sp, #8]
    while (hi2c->XferSize > 0U)
 8002b56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b58:	b9c3      	cbnz	r3, 8002b8c <HAL_I2C_Slave_Receive+0xd4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	06d2      	lsls	r2, r2, #27
 8002b60:	d541      	bpl.n	8002be6 <HAL_I2C_Slave_Receive+0x12e>
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002b62:	2200      	movs	r2, #0
 8002b64:	9203      	str	r2, [sp, #12]
 8002b66:	6959      	ldr	r1, [r3, #20]
 8002b68:	9103      	str	r1, [sp, #12]
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	f041 0101 	orr.w	r1, r1, #1
 8002b70:	6019      	str	r1, [r3, #0]
 8002b72:	9903      	ldr	r1, [sp, #12]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002b7a:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002b7e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b86:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 8002b8a:	e7a5      	b.n	8002ad8 <HAL_I2C_Slave_Receive+0x20>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8c:	463a      	mov	r2, r7
 8002b8e:	4631      	mov	r1, r6
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7ff fe30 	bl	80027f6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	b120      	cbz	r0, 8002ba4 <HAL_I2C_Slave_Receive+0xec>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e798      	b.n	8002ad6 <HAL_I2C_Slave_Receive+0x1e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ba8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002baa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002bac:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002bae:	3a01      	subs	r2, #1
 8002bb0:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8002bb2:	1c4b      	adds	r3, r1, #1
      hi2c->XferCount--;
 8002bb4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bb6:	6822      	ldr	r2, [r4, #0]
      hi2c->pBuffPtr++;
 8002bb8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002bba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bbc:	6950      	ldr	r0, [r2, #20]
      hi2c->XferSize--;
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29b      	uxth	r3, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bc2:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 8002bc4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bc6:	d5c6      	bpl.n	8002b56 <HAL_I2C_Slave_Receive+0x9e>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0c4      	beq.n	8002b56 <HAL_I2C_Slave_Receive+0x9e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bcc:	6913      	ldr	r3, [r2, #16]
 8002bce:	704b      	strb	r3, [r1, #1]
        hi2c->pBuffPtr++;
 8002bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002bd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002bdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002be4:	e7b7      	b.n	8002b56 <HAL_I2C_Slave_Receive+0x9e>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7ff fdec 	bl	80027c4 <I2C_IsAcknowledgeFailed>
 8002bec:	b998      	cbnz	r0, 8002c16 <HAL_I2C_Slave_Receive+0x15e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bee:	f7fe feb9 	bl	8001964 <HAL_GetTick>
 8002bf2:	1bc0      	subs	r0, r0, r7
 8002bf4:	4286      	cmp	r6, r0
 8002bf6:	d301      	bcc.n	8002bfc <HAL_I2C_Slave_Receive+0x144>
 8002bf8:	2e00      	cmp	r6, #0
 8002bfa:	d1ae      	bne.n	8002b5a <HAL_I2C_Slave_Receive+0xa2>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfc:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bfe:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c00:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002c0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	f042 0220 	orr.w	r2, r2, #32
 8002c14:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	6813      	ldr	r3, [r2, #0]
 8002c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e759      	b.n	8002ad6 <HAL_I2C_Slave_Receive+0x1e>
    return HAL_BUSY;
 8002c22:	2502      	movs	r5, #2
 8002c24:	e758      	b.n	8002ad8 <HAL_I2C_Slave_Receive+0x20>
 8002c26:	bf00      	nop
 8002c28:	ffff0000 	.word	0xffff0000
 8002c2c:	00010002 	.word	0x00010002

08002c30 <HAL_I2C_MasterTxCpltCallback>:
 8002c30:	4770      	bx	lr

08002c32 <HAL_I2C_MasterRxCpltCallback>:
 8002c32:	4770      	bx	lr

08002c34 <HAL_I2C_SlaveTxCpltCallback>:
 8002c34:	4770      	bx	lr

08002c36 <HAL_I2C_AddrCallback>:
}
 8002c36:	4770      	bx	lr

08002c38 <HAL_I2C_ListenCpltCallback>:
 8002c38:	4770      	bx	lr

08002c3a <HAL_I2C_MemTxCpltCallback>:
 8002c3a:	4770      	bx	lr

08002c3c <HAL_I2C_MemRxCpltCallback>:
 8002c3c:	4770      	bx	lr

08002c3e <HAL_I2C_ErrorCallback>:
 8002c3e:	4770      	bx	lr

08002c40 <HAL_I2C_AbortCpltCallback>:
 8002c40:	4770      	bx	lr

08002c42 <I2C_DMAAbort>:
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002c42:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c44:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002c46:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c48:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c4a:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4e:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002c50:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002c52:	6b85      	ldr	r5, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c54:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002c58:	62b3      	str	r3, [r6, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002c5a:	62ab      	str	r3, [r5, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5c:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8002c5e:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 8002c60:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002c62:	6373      	str	r3, [r6, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8002c64:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002c68:	636b      	str	r3, [r5, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8002c6a:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c6c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c70:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c72:	2c60      	cmp	r4, #96	; 0x60
 8002c74:	d108      	bne.n	8002c88 <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c76:	2220      	movs	r2, #32
 8002c78:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c7c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002c80:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c82:	f7ff ffdd 	bl	8002c40 <HAL_I2C_AbortCpltCallback>
}
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c88:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8002c8c:	2928      	cmp	r1, #40	; 0x28
 8002c8e:	d10d      	bne.n	8002cac <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 8002c90:	6814      	ldr	r4, [r2, #0]
 8002c92:	f044 0401 	orr.w	r4, r4, #1
 8002c96:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c98:	6814      	ldr	r4, [r2, #0]
 8002c9a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8002c9e:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ca0:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ca2:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8002ca6:	f7ff ffca 	bl	8002c3e <HAL_I2C_ErrorCallback>
}
 8002caa:	e7ec      	b.n	8002c86 <I2C_DMAAbort+0x44>
      hi2c->State = HAL_I2C_STATE_READY;
 8002cac:	2220      	movs	r2, #32
 8002cae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002cb6:	e7f6      	b.n	8002ca6 <I2C_DMAAbort+0x64>

08002cb8 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cb8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cbc:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8002cc0:	b510      	push	{r4, lr}
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cc2:	2910      	cmp	r1, #16
{
 8002cc4:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cca:	d105      	bne.n	8002cd8 <I2C_ITError+0x20>
 8002ccc:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002cce:	bf02      	ittt	eq
 8002cd0:	6819      	ldreq	r1, [r3, #0]
 8002cd2:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 8002cd6:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cd8:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8002cdc:	2928      	cmp	r1, #40	; 0x28
 8002cde:	d13a      	bne.n	8002d56 <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ce4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002cee:	d059      	beq.n	8002da4 <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002cf0:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002cf2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf8:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002cfa:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	4b3c      	ldr	r3, [pc, #240]	; (8002df4 <I2C_ITError+0x13c>)
 8002d02:	d035      	beq.n	8002d70 <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d04:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d06:	f7ff faf5 	bl	80022f4 <HAL_DMA_Abort_IT>
 8002d0a:	b150      	cbz	r0, 8002d22 <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8002d0c:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d0e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002d10:	6813      	ldr	r3, [r2, #0]
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d20:	4798      	blx	r3
  CurrentState = hi2c->State;
 8002d22:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d26:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8002d28:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d2a:	0752      	lsls	r2, r2, #29
 8002d2c:	d512      	bpl.n	8002d54 <I2C_ITError+0x9c>
 8002d2e:	2b28      	cmp	r3, #40	; 0x28
 8002d30:	d110      	bne.n	8002d54 <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d32:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d34:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d36:	6853      	ldr	r3, [r2, #4]
 8002d38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d3c:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <I2C_ITError+0x140>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d40:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d42:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d48:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d50:	f7ff ff72 	bl	8002c38 <HAL_I2C_ListenCpltCallback>
}
 8002d54:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	0509      	lsls	r1, r1, #20
 8002d5a:	d404      	bmi.n	8002d66 <I2C_ITError+0xae>
 8002d5c:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	bf1c      	itt	ne
 8002d60:	2220      	movne	r2, #32
 8002d62:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d66:	2200      	movs	r2, #0
 8002d68:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8002d6e:	e7bb      	b.n	8002ce8 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d70:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002d72:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d74:	f7ff fabe 	bl	80022f4 <HAL_DMA_Abort_IT>
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d0d2      	beq.n	8002d22 <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	0652      	lsls	r2, r2, #25
 8002d82:	d505      	bpl.n	8002d90 <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d88:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8002d90:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002d94:	6813      	ldr	r3, [r2, #0]
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002da2:	e7bc      	b.n	8002d1e <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002da4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002da8:	2960      	cmp	r1, #96	; 0x60
 8002daa:	d115      	bne.n	8002dd8 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	2120      	movs	r1, #32
 8002dae:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db2:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	0650      	lsls	r0, r2, #25
 8002db8:	d505      	bpl.n	8002dc6 <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dbe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002dc6:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002dc8:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002dd2:	f7ff ff35 	bl	8002c40 <HAL_I2C_AbortCpltCallback>
 8002dd6:	e7a4      	b.n	8002d22 <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	0651      	lsls	r1, r2, #25
 8002ddc:	d505      	bpl.n	8002dea <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002de2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002de6:	3301      	adds	r3, #1
 8002de8:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7ff ff27 	bl	8002c3e <HAL_I2C_ErrorCallback>
 8002df0:	e797      	b.n	8002d22 <I2C_ITError+0x6a>
 8002df2:	bf00      	nop
 8002df4:	08002c43 	.word	0x08002c43
 8002df8:	ffff0000 	.word	0xffff0000

08002dfc <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002dfc:	6803      	ldr	r3, [r0, #0]
{
 8002dfe:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002e00:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e02:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e04:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8002e08:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e0a:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e0c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e10:	2910      	cmp	r1, #16
{
 8002e12:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e14:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e16:	d002      	beq.n	8002e1e <HAL_I2C_EV_IRQHandler+0x22>
 8002e18:	2940      	cmp	r1, #64	; 0x40
 8002e1a:	f040 82b9 	bne.w	8003390 <HAL_I2C_EV_IRQHandler+0x594>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e1e:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e20:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e22:	f010 0f01 	tst.w	r0, #1
 8002e26:	d107      	bne.n	8002e38 <HAL_I2C_EV_IRQHandler+0x3c>
 8002e28:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8002e2c:	d002      	beq.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
 8002e2e:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8002e32:	d152      	bne.n	8002eda <HAL_I2C_EV_IRQHandler+0xde>
}
 8002e34:	b00d      	add	sp, #52	; 0x34
 8002e36:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e38:	0595      	lsls	r5, r2, #22
 8002e3a:	d54e      	bpl.n	8002eda <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002e3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e3e:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8002e42:	d10c      	bne.n	8002e5e <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002e44:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002e46:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e48:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002e4c:	2a40      	cmp	r2, #64	; 0x40
 8002e4e:	d111      	bne.n	8002e74 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8002e50:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002e52:	b952      	cbnz	r2, 8002e6a <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e54:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002e56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e5a:	611a      	str	r2, [r3, #16]
 8002e5c:	e7ea      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002e5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e60:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8002e64:	d1f0      	bne.n	8002e48 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002e66:	2208      	movs	r2, #8
 8002e68:	e7ed      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	e7f2      	b.n	8002e5a <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e74:	6922      	ldr	r2, [r4, #16]
 8002e76:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e7c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002e80:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e82:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e84:	d112      	bne.n	8002eac <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e8a:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002e8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002e8e:	b912      	cbnz	r2, 8002e96 <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002e90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002e92:	2900      	cmp	r1, #0
 8002e94:	d0ce      	beq.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002e96:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e98:	b91a      	cbnz	r2, 8002ea2 <HAL_I2C_EV_IRQHandler+0xa6>
 8002e9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	d0c8      	beq.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	e7c3      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	e7ea      	b.n	8002e8a <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8002eb4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002eb6:	b932      	cbnz	r2, 8002ec6 <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002eb8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002eba:	11d2      	asrs	r2, r2, #7
 8002ebc:	f002 0206 	and.w	r2, r2, #6
 8002ec0:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002ec4:	e7c9      	b.n	8002e5a <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8002ec6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002ec8:	2a01      	cmp	r2, #1
 8002eca:	d1b3      	bne.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002ecc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ece:	11d2      	asrs	r2, r2, #7
 8002ed0:	f002 0206 	and.w	r2, r2, #6
 8002ed4:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8002ed8:	e7bf      	b.n	8002e5a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eda:	0705      	lsls	r5, r0, #28
 8002edc:	d503      	bpl.n	8002ee6 <HAL_I2C_EV_IRQHandler+0xea>
 8002ede:	0595      	lsls	r5, r2, #22
 8002ee0:	d501      	bpl.n	8002ee6 <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002ee2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ee4:	e7e4      	b.n	8002eb0 <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ee6:	0785      	lsls	r5, r0, #30
 8002ee8:	f140 80e6 	bpl.w	80030b8 <HAL_I2C_EV_IRQHandler+0x2bc>
 8002eec:	0595      	lsls	r5, r2, #22
 8002eee:	f140 80e3 	bpl.w	80030b8 <HAL_I2C_EV_IRQHandler+0x2bc>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ef2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ef6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ef8:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002efa:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002efe:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f00:	2822      	cmp	r0, #34	; 0x22
 8002f02:	f040 80d1 	bne.w	80030a8 <HAL_I2C_EV_IRQHandler+0x2ac>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002f06:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002f08:	b940      	cbnz	r0, 8002f1c <HAL_I2C_EV_IRQHandler+0x120>
 8002f0a:	2940      	cmp	r1, #64	; 0x40
 8002f0c:	d106      	bne.n	8002f1c <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0e:	9000      	str	r0, [sp, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	9200      	str	r2, [sp, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	9b00      	ldr	r3, [sp, #0]
 8002f1a:	e78b      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f1c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002f1e:	b981      	cbnz	r1, 8002f42 <HAL_I2C_EV_IRQHandler+0x146>
 8002f20:	6920      	ldr	r0, [r4, #16]
 8002f22:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8002f26:	d10c      	bne.n	8002f42 <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f28:	9101      	str	r1, [sp, #4]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	9201      	str	r2, [sp, #4]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	9201      	str	r2, [sp, #4]
 8002f32:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3a:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 8002f3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f3e:	3301      	adds	r3, #1
 8002f40:	e028      	b.n	8002f94 <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 8002f42:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002f44:	b289      	uxth	r1, r1
 8002f46:	b951      	cbnz	r1, 8002f5e <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f48:	9102      	str	r1, [sp, #8]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	9202      	str	r2, [sp, #8]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	9202      	str	r2, [sp, #8]
 8002f52:	9a02      	ldr	r2, [sp, #8]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e019      	b.n	8002f92 <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8002f5e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002f60:	b289      	uxth	r1, r1
 8002f62:	2901      	cmp	r1, #1
 8002f64:	d14a      	bne.n	8002ffc <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002f66:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002f6a:	d11c      	bne.n	8002fa6 <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f72:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002f7a:	d00d      	beq.n	8002f98 <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f82:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f84:	2200      	movs	r2, #0
 8002f86:	9203      	str	r2, [sp, #12]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	9203      	str	r2, [sp, #12]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	9303      	str	r3, [sp, #12]
 8002f90:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	6523      	str	r3, [r4, #80]	; 0x50
 8002f96:	e74d      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f98:	9204      	str	r2, [sp, #16]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	9204      	str	r2, [sp, #16]
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	9204      	str	r2, [sp, #16]
 8002fa2:	9a04      	ldr	r2, [sp, #16]
 8002fa4:	e7d6      	b.n	8002f54 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002fa6:	2a08      	cmp	r2, #8
 8002fa8:	d01c      	beq.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x1e8>
 8002faa:	2a20      	cmp	r2, #32
 8002fac:	d01a      	beq.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002fae:	2d12      	cmp	r5, #18
 8002fb0:	d10d      	bne.n	8002fce <HAL_I2C_EV_IRQHandler+0x1d2>
 8002fb2:	2a01      	cmp	r2, #1
 8002fb4:	d116      	bne.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fbc:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	9205      	str	r2, [sp, #20]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	9205      	str	r2, [sp, #20]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	9305      	str	r3, [sp, #20]
 8002fca:	9b05      	ldr	r3, [sp, #20]
 8002fcc:	e7e1      	b.n	8002f92 <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002fce:	2a10      	cmp	r2, #16
 8002fd0:	d8f1      	bhi.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x1ba>
 8002fd2:	4990      	ldr	r1, [pc, #576]	; (8003214 <HAL_I2C_EV_IRQHandler+0x418>)
 8002fd4:	fa21 f202 	lsr.w	r2, r1, r2
 8002fd8:	07d2      	lsls	r2, r2, #31
 8002fda:	d5ec      	bpl.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fe2:	e7eb      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fea:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fec:	2200      	movs	r2, #0
 8002fee:	9206      	str	r2, [sp, #24]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	9206      	str	r2, [sp, #24]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	9206      	str	r2, [sp, #24]
 8002ff8:	9a06      	ldr	r2, [sp, #24]
 8002ffa:	e7ab      	b.n	8002f54 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8002ffc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002ffe:	b289      	uxth	r1, r1
 8003000:	2902      	cmp	r1, #2
 8003002:	d133      	bne.n	800306c <HAL_I2C_EV_IRQHandler+0x270>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003004:	2a10      	cmp	r2, #16
 8003006:	d805      	bhi.n	8003014 <HAL_I2C_EV_IRQHandler+0x218>
 8003008:	4982      	ldr	r1, [pc, #520]	; (8003214 <HAL_I2C_EV_IRQHandler+0x418>)
 800300a:	40d1      	lsrs	r1, r2
 800300c:	43c9      	mvns	r1, r1
 800300e:	f011 0101 	ands.w	r1, r1, #1
 8003012:	d020      	beq.n	8003056 <HAL_I2C_EV_IRQHandler+0x25a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800301a:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301c:	2100      	movs	r1, #0
 800301e:	9107      	str	r1, [sp, #28]
 8003020:	6959      	ldr	r1, [r3, #20]
 8003022:	9107      	str	r1, [sp, #28]
 8003024:	6999      	ldr	r1, [r3, #24]
 8003026:	9107      	str	r1, [sp, #28]
 8003028:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302a:	6819      	ldr	r1, [r3, #0]
 800302c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003030:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	050d      	lsls	r5, r1, #20
 8003036:	d5ac      	bpl.n	8002f92 <HAL_I2C_EV_IRQHandler+0x196>
 8003038:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800303c:	d006      	beq.n	800304c <HAL_I2C_EV_IRQHandler+0x250>
 800303e:	1e51      	subs	r1, r2, #1
 8003040:	291f      	cmp	r1, #31
 8003042:	d8a6      	bhi.n	8002f92 <HAL_I2C_EV_IRQHandler+0x196>
 8003044:	4a74      	ldr	r2, [pc, #464]	; (8003218 <HAL_I2C_EV_IRQHandler+0x41c>)
 8003046:	40ca      	lsrs	r2, r1
 8003048:	07d0      	lsls	r0, r2, #31
 800304a:	d5a2      	bpl.n	8002f92 <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	e79d      	b.n	8002f92 <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 800305c:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305e:	9108      	str	r1, [sp, #32]
 8003060:	6959      	ldr	r1, [r3, #20]
 8003062:	9108      	str	r1, [sp, #32]
 8003064:	6999      	ldr	r1, [r3, #24]
 8003066:	9108      	str	r1, [sp, #32]
 8003068:	9908      	ldr	r1, [sp, #32]
 800306a:	e7e2      	b.n	8003032 <HAL_I2C_EV_IRQHandler+0x236>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306c:	6819      	ldr	r1, [r3, #0]
 800306e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003072:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003074:	6859      	ldr	r1, [r3, #4]
 8003076:	0509      	lsls	r1, r1, #20
 8003078:	d50e      	bpl.n	8003098 <HAL_I2C_EV_IRQHandler+0x29c>
 800307a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800307e:	d007      	beq.n	8003090 <HAL_I2C_EV_IRQHandler+0x294>
 8003080:	3a01      	subs	r2, #1
 8003082:	2a1f      	cmp	r2, #31
 8003084:	d808      	bhi.n	8003098 <HAL_I2C_EV_IRQHandler+0x29c>
 8003086:	4964      	ldr	r1, [pc, #400]	; (8003218 <HAL_I2C_EV_IRQHandler+0x41c>)
 8003088:	fa21 f202 	lsr.w	r2, r1, r2
 800308c:	07d2      	lsls	r2, r2, #31
 800308e:	d503      	bpl.n	8003098 <HAL_I2C_EV_IRQHandler+0x29c>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003096:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003098:	2200      	movs	r2, #0
 800309a:	9209      	str	r2, [sp, #36]	; 0x24
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	9209      	str	r2, [sp, #36]	; 0x24
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	9309      	str	r3, [sp, #36]	; 0x24
 80030a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a6:	e774      	b.n	8002f92 <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a8:	2200      	movs	r2, #0
 80030aa:	920a      	str	r2, [sp, #40]	; 0x28
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	920a      	str	r2, [sp, #40]	; 0x28
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	930a      	str	r3, [sp, #40]	; 0x28
 80030b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030b6:	e6bd      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030b8:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030bc:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030be:	f000 80ad 	beq.w	800321c <HAL_I2C_EV_IRQHandler+0x420>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030c2:	050d      	lsls	r5, r1, #20
 80030c4:	f53f aeb6 	bmi.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
 80030c8:	f3c0 0180 	ubfx	r1, r0, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030cc:	0600      	lsls	r0, r0, #24
 80030ce:	d569      	bpl.n	80031a4 <HAL_I2C_EV_IRQHandler+0x3a8>
 80030d0:	0555      	lsls	r5, r2, #21
 80030d2:	d567      	bpl.n	80031a4 <HAL_I2C_EV_IRQHandler+0x3a8>
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d168      	bne.n	80031aa <HAL_I2C_EV_IRQHandler+0x3ae>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030d8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030dc:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030de:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030e2:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030e4:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030e8:	b9c5      	cbnz	r5, 800311c <HAL_I2C_EV_IRQHandler+0x320>
 80030ea:	2a21      	cmp	r2, #33	; 0x21
 80030ec:	d118      	bne.n	8003120 <HAL_I2C_EV_IRQHandler+0x324>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030ee:	2808      	cmp	r0, #8
 80030f0:	d078      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x3e8>
 80030f2:	2820      	cmp	r0, #32
 80030f4:	d076      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x3e8>
 80030f6:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80030fa:	d073      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x3e8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003102:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003104:	2311      	movs	r3, #17
 8003106:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	2300      	movs	r3, #0
 800310a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800310e:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003110:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003112:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003116:	f7ff fd8b 	bl	8002c30 <HAL_I2C_MasterTxCpltCallback>
 800311a:	e68b      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800311c:	2a21      	cmp	r2, #33	; 0x21
 800311e:	d005      	beq.n	800312c <HAL_I2C_EV_IRQHandler+0x330>
 8003120:	2940      	cmp	r1, #64	; 0x40
 8003122:	f47f ae87 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003126:	2a22      	cmp	r2, #34	; 0x22
 8003128:	f47f ae84 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 800312c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800312e:	b292      	uxth	r2, r2
 8003130:	b91a      	cbnz	r2, 800313a <HAL_I2C_EV_IRQHandler+0x33e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003138:	e6b6      	b.n	8002ea8 <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800313a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800313e:	2a40      	cmp	r2, #64	; 0x40
 8003140:	d126      	bne.n	8003190 <HAL_I2C_EV_IRQHandler+0x394>
        if (hi2c->EventCount == 0U)
 8003142:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003144:	b962      	cbnz	r2, 8003160 <HAL_I2C_EV_IRQHandler+0x364>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003146:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003148:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800314a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800314c:	d104      	bne.n	8003158 <HAL_I2C_EV_IRQHandler+0x35c>
 800314e:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003150:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8003152:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003154:	3302      	adds	r3, #2
 8003156:	e71d      	b.n	8002f94 <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003158:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800315c:	611a      	str	r2, [r3, #16]
 800315e:	e6ed      	b.n	8002f3c <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 8003160:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003162:	2a01      	cmp	r2, #1
 8003164:	d102      	bne.n	800316c <HAL_I2C_EV_IRQHandler+0x370>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003166:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	e7f7      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x360>
        else if (hi2c->EventCount == 2U)
 800316c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800316e:	2a02      	cmp	r2, #2
 8003170:	f47f ae60 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003174:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003178:	2a22      	cmp	r2, #34	; 0x22
 800317a:	d104      	bne.n	8003186 <HAL_I2C_EV_IRQHandler+0x38a>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e656      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003186:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800318a:	2a21      	cmp	r2, #33	; 0x21
 800318c:	f47f ae52 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003190:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003192:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003196:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8003198:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800319a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800319c:	3b01      	subs	r3, #1
 800319e:	b29b      	uxth	r3, r3
 80031a0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80031a2:	e647      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a4:	2900      	cmp	r1, #0
 80031a6:	f43f ae45 	beq.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
 80031aa:	0590      	lsls	r0, r2, #22
 80031ac:	f57f ae42 	bpl.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031b2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80031b6:	2a21      	cmp	r2, #33	; 0x21
 80031b8:	f47f ae3c 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80031bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031be:	b292      	uxth	r2, r2
 80031c0:	2a00      	cmp	r2, #0
 80031c2:	d1e5      	bne.n	8003190 <HAL_I2C_EV_IRQHandler+0x394>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031c4:	2908      	cmp	r1, #8
 80031c6:	d00d      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x3e8>
 80031c8:	2920      	cmp	r1, #32
 80031ca:	d00b      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x3e8>
 80031cc:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80031d0:	d008      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x3e8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80031d8:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031da:	2311      	movs	r3, #17
 80031dc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031de:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80031e2:	e794      	b.n	800310e <HAL_I2C_EV_IRQHandler+0x312>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031e4:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 80031e6:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ec:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80031f6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80031fa:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003200:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003204:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003208:	2a40      	cmp	r2, #64	; 0x40
 800320a:	d184      	bne.n	8003116 <HAL_I2C_EV_IRQHandler+0x31a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800320c:	f7ff fd15 	bl	8002c3a <HAL_I2C_MemTxCpltCallback>
 8003210:	e610      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
 8003212:	bf00      	nop
 8003214:	00010014 	.word	0x00010014
 8003218:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800321c:	0509      	lsls	r1, r1, #20
 800321e:	f53f ae09 	bmi.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003222:	0645      	lsls	r5, r0, #25
 8003224:	f3c0 0180 	ubfx	r1, r0, #2, #1
 8003228:	d548      	bpl.n	80032bc <HAL_I2C_EV_IRQHandler+0x4c0>
 800322a:	0550      	lsls	r0, r2, #21
 800322c:	d546      	bpl.n	80032bc <HAL_I2C_EV_IRQHandler+0x4c0>
 800322e:	2900      	cmp	r1, #0
 8003230:	d147      	bne.n	80032c2 <HAL_I2C_EV_IRQHandler+0x4c6>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003232:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003236:	2a22      	cmp	r2, #34	; 0x22
 8003238:	f47f adfc 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 800323c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800323e:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8003240:	2a03      	cmp	r2, #3
 8003242:	d914      	bls.n	800326e <HAL_I2C_EV_IRQHandler+0x472>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003248:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800324a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800324c:	3301      	adds	r3, #1
 800324e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003250:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003252:	3b01      	subs	r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003258:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b03      	cmp	r3, #3
 800325e:	f47f ade9 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003262:	6822      	ldr	r2, [r4, #0]
 8003264:	6853      	ldr	r3, [r2, #4]
 8003266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800326a:	6053      	str	r3, [r2, #4]
 800326c:	e5e2      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800326e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003270:	2802      	cmp	r0, #2
 8003272:	f43f addf 	beq.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
 8003276:	2a01      	cmp	r2, #1
 8003278:	f63f addc 	bhi.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003282:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800328a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003290:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003294:	3301      	adds	r3, #1
 8003296:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003298:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800329a:	3b01      	subs	r3, #1
 800329c:	b29b      	uxth	r3, r3
 800329e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	2320      	movs	r3, #32
 80032a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032a6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032aa:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d168      	bne.n	8003384 <HAL_I2C_EV_IRQHandler+0x588>
        hi2c->PreviousState = I2C_STATE_NONE;
 80032b2:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032b4:	4620      	mov	r0, r4
 80032b6:	f7ff fcc1 	bl	8002c3c <HAL_I2C_MemRxCpltCallback>
 80032ba:	e5bb      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032bc:	2900      	cmp	r1, #0
 80032be:	f43f adb9 	beq.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
 80032c2:	0592      	lsls	r2, r2, #22
 80032c4:	f57f adb6 	bpl.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80032ca:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80032cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80032ce:	b280      	uxth	r0, r0
 80032d0:	2804      	cmp	r0, #4
 80032d2:	d109      	bne.n	80032e8 <HAL_I2C_EV_IRQHandler+0x4ec>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032da:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80032e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032e2:	3301      	adds	r3, #1
 80032e4:	6263      	str	r3, [r4, #36]	; 0x24
 80032e6:	e758      	b.n	800319a <HAL_I2C_EV_IRQHandler+0x39e>
  else if (hi2c->XferCount == 3U)
 80032e8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80032ea:	b280      	uxth	r0, r0
 80032ec:	2803      	cmp	r0, #3
 80032ee:	d10c      	bne.n	800330a <HAL_I2C_EV_IRQHandler+0x50e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032f0:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032f2:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032f4:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80032f8:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032fa:	d0ef      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0x4e0>
 80032fc:	2a02      	cmp	r2, #2
 80032fe:	d0ed      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0x4e0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e7e8      	b.n	80032dc <HAL_I2C_EV_IRQHandler+0x4e0>
  else if (hi2c->XferCount == 2U)
 800330a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800330c:	b280      	uxth	r0, r0
 800330e:	2802      	cmp	r0, #2
 8003310:	d1e4      	bne.n	80032dc <HAL_I2C_EV_IRQHandler+0x4e0>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003312:	2a01      	cmp	r2, #1
 8003314:	d001      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x51e>
 8003316:	2a10      	cmp	r2, #16
 8003318:	d128      	bne.n	800336c <HAL_I2C_EV_IRQHandler+0x570>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003320:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003326:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003328:	1c53      	adds	r3, r2, #1
 800332a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800332c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800332e:	3b01      	subs	r3, #1
 8003330:	b29b      	uxth	r3, r3
 8003332:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 800333a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800333c:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 800333e:	3301      	adds	r3, #1
 8003340:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003342:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003344:	3b01      	subs	r3, #1
 8003346:	b29b      	uxth	r3, r3
 8003348:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800334a:	6853      	ldr	r3, [r2, #4]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003352:	2320      	movs	r3, #32
 8003354:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003358:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003362:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003366:	d10d      	bne.n	8003384 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003368:	6323      	str	r3, [r4, #48]	; 0x30
 800336a:	e7a3      	b.n	80032b4 <HAL_I2C_EV_IRQHandler+0x4b8>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800336c:	2a04      	cmp	r2, #4
 800336e:	d001      	beq.n	8003374 <HAL_I2C_EV_IRQHandler+0x578>
 8003370:	2a02      	cmp	r2, #2
 8003372:	d103      	bne.n	800337c <HAL_I2C_EV_IRQHandler+0x580>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800337a:	e7d1      	b.n	8003320 <HAL_I2C_EV_IRQHandler+0x524>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003382:	e7cd      	b.n	8003320 <HAL_I2C_EV_IRQHandler+0x524>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003384:	2312      	movs	r3, #18
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003386:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003388:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800338a:	f7ff fc52 	bl	8002c32 <HAL_I2C_MasterRxCpltCallback>
 800338e:	e551      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003390:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003392:	b321      	cbz	r1, 80033de <HAL_I2C_EV_IRQHandler+0x5e2>
  uint32_t sr2itflags               = 0U;
 8003394:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003396:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003398:	f011 0f02 	tst.w	r1, #2
 800339c:	d029      	beq.n	80033f2 <HAL_I2C_EV_IRQHandler+0x5f6>
 800339e:	f412 7f00 	tst.w	r2, #512	; 0x200
 80033a2:	d026      	beq.n	80033f2 <HAL_I2C_EV_IRQHandler+0x5f6>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80033a6:	b102      	cbz	r2, 80033aa <HAL_I2C_EV_IRQHandler+0x5ae>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033a8:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033aa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80033ae:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80033b2:	2a28      	cmp	r2, #40	; 0x28
 80033b4:	d116      	bne.n	80033e4 <HAL_I2C_EV_IRQHandler+0x5e8>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80033b6:	685a      	ldr	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80033b8:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80033bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c0:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80033c2:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 80033c4:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80033c8:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80033cc:	bf54      	ite	pl
 80033ce:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80033d0:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80033d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7ff fc2d 	bl	8002c36 <HAL_I2C_AddrCallback>
 80033dc:	e52a      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033de:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033e0:	6959      	ldr	r1, [r3, #20]
 80033e2:	e7d9      	b.n	8003398 <HAL_I2C_EV_IRQHandler+0x59c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033e4:	f06f 0202 	mvn.w	r2, #2
 80033e8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80033ea:	2300      	movs	r3, #0
 80033ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80033f0:	e520      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f2:	06cd      	lsls	r5, r1, #27
 80033f4:	f140 80b1 	bpl.w	800355a <HAL_I2C_EV_IRQHandler+0x75e>
 80033f8:	0595      	lsls	r5, r2, #22
 80033fa:	f140 80ae 	bpl.w	800355a <HAL_I2C_EV_IRQHandler+0x75e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033fe:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003402:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003404:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340a:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800340c:	2200      	movs	r2, #0
 800340e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	920b      	str	r2, [sp, #44]	; 0x2c
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003424:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	0511      	lsls	r1, r2, #20
 800342a:	d520      	bpl.n	800346e <HAL_I2C_EV_IRQHandler+0x672>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800342c:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8003430:	2a22      	cmp	r2, #34	; 0x22
 8003432:	d14a      	bne.n	80034ca <HAL_I2C_EV_IRQHandler+0x6ce>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003434:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003436:	6802      	ldr	r2, [r0, #0]
 8003438:	6852      	ldr	r2, [r2, #4]
 800343a:	b292      	uxth	r2, r2
 800343c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800343e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003440:	b292      	uxth	r2, r2
 8003442:	b11a      	cbz	r2, 800344c <HAL_I2C_EV_IRQHandler+0x650>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003444:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003446:	f042 0204 	orr.w	r2, r2, #4
 800344a:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003452:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003454:	f7ff f82a 	bl	80024ac <HAL_DMA_GetState>
 8003458:	2801      	cmp	r0, #1
 800345a:	d008      	beq.n	800346e <HAL_I2C_EV_IRQHandler+0x672>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800345c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800345e:	4b79      	ldr	r3, [pc, #484]	; (8003644 <HAL_I2C_EV_IRQHandler+0x848>)
 8003460:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003462:	f7fe ff47 	bl	80022f4 <HAL_DMA_Abort_IT>
 8003466:	b110      	cbz	r0, 800346e <HAL_I2C_EV_IRQHandler+0x672>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003468:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800346a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800346c:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 800346e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	b313      	cbz	r3, 80034ba <HAL_I2C_EV_IRQHandler+0x6be>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	0752      	lsls	r2, r2, #29
 800347a:	d509      	bpl.n	8003490 <HAL_I2C_EV_IRQHandler+0x694>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003480:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003484:	3301      	adds	r3, #1
 8003486:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003488:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800348a:	3b01      	subs	r3, #1
 800348c:	b29b      	uxth	r3, r3
 800348e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	0650      	lsls	r0, r2, #25
 8003496:	d509      	bpl.n	80034ac <HAL_I2C_EV_IRQHandler+0x6b0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800349c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800349e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034a0:	3301      	adds	r3, #1
 80034a2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80034a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80034ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	b11b      	cbz	r3, 80034ba <HAL_I2C_EV_IRQHandler+0x6be>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034bc:	b313      	cbz	r3, 8003504 <HAL_I2C_EV_IRQHandler+0x708>
    I2C_ITError(hi2c);
 80034be:	4620      	mov	r0, r4
}
 80034c0:	b00d      	add	sp, #52	; 0x34
 80034c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c);
 80034c6:	f7ff bbf7 	b.w	8002cb8 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80034ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80034cc:	6802      	ldr	r2, [r0, #0]
 80034ce:	6852      	ldr	r2, [r2, #4]
 80034d0:	b292      	uxth	r2, r2
 80034d2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80034d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80034d6:	b292      	uxth	r2, r2
 80034d8:	b11a      	cbz	r2, 80034e2 <HAL_I2C_EV_IRQHandler+0x6e6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034dc:	f042 0204 	orr.w	r2, r2, #4
 80034e0:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034ea:	f7fe ffdf 	bl	80024ac <HAL_DMA_GetState>
 80034ee:	2801      	cmp	r0, #1
 80034f0:	d0bd      	beq.n	800346e <HAL_I2C_EV_IRQHandler+0x672>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_I2C_EV_IRQHandler+0x848>)
 80034f6:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034f8:	f7fe fefc 	bl	80022f4 <HAL_DMA_Abort_IT>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d0b6      	beq.n	800346e <HAL_I2C_EV_IRQHandler+0x672>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003500:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003502:	e7b2      	b.n	800346a <HAL_I2C_EV_IRQHandler+0x66e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003504:	2d2a      	cmp	r5, #42	; 0x2a
 8003506:	d106      	bne.n	8003516 <HAL_I2C_EV_IRQHandler+0x71a>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003508:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800350a:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800350c:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800350e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003512:	f7fd fe07 	bl	8001124 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003516:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800351a:	2b28      	cmp	r3, #40	; 0x28
 800351c:	d10c      	bne.n	8003538 <HAL_I2C_EV_IRQHandler+0x73c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351e:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <HAL_I2C_EV_IRQHandler+0x84c>)
      hi2c->State = HAL_I2C_STATE_READY;
 8003520:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003522:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003524:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 8003526:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8003528:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800352a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800352e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003532:	f7ff fb81 	bl	8002c38 <HAL_I2C_ListenCpltCallback>
 8003536:	e47d      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003538:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800353a:	2b22      	cmp	r3, #34	; 0x22
 800353c:	d002      	beq.n	8003544 <HAL_I2C_EV_IRQHandler+0x748>
 800353e:	2d22      	cmp	r5, #34	; 0x22
 8003540:	f47f ac78 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003544:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003546:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003548:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800354a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800354e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003552:	4620      	mov	r0, r4
 8003554:	f7fd fde6 	bl	8001124 <HAL_I2C_SlaveRxCpltCallback>
 8003558:	e46c      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800355a:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 800355e:	2821      	cmp	r0, #33	; 0x21
 8003560:	f3c1 0580 	ubfx	r5, r1, #2, #1
 8003564:	d135      	bne.n	80035d2 <HAL_I2C_EV_IRQHandler+0x7d6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003566:	0609      	lsls	r1, r1, #24
 8003568:	d527      	bpl.n	80035ba <HAL_I2C_EV_IRQHandler+0x7be>
 800356a:	0551      	lsls	r1, r2, #21
 800356c:	d525      	bpl.n	80035ba <HAL_I2C_EV_IRQHandler+0x7be>
 800356e:	bb3d      	cbnz	r5, 80035c0 <HAL_I2C_EV_IRQHandler+0x7c4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003570:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003574:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003576:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8003578:	b292      	uxth	r2, r2
 800357a:	2a00      	cmp	r2, #0
 800357c:	f43f ac5a 	beq.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003580:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003582:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003586:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8003588:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800358a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800358c:	3a01      	subs	r2, #1
 800358e:	b292      	uxth	r2, r2
 8003590:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003592:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003594:	b292      	uxth	r2, r2
 8003596:	2a00      	cmp	r2, #0
 8003598:	f47f ac4c 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
 800359c:	2929      	cmp	r1, #41	; 0x29
 800359e:	f47f ac49 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a8:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035aa:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035ac:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035b2:	4620      	mov	r0, r4
 80035b4:	f7ff fb3e 	bl	8002c34 <HAL_I2C_SlaveTxCpltCallback>
 80035b8:	e43c      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ba:	2d00      	cmp	r5, #0
 80035bc:	f43f ac3a 	beq.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
 80035c0:	0595      	lsls	r5, r2, #22
 80035c2:	f57f ac37 	bpl.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80035c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80035c8:	b292      	uxth	r2, r2
 80035ca:	2a00      	cmp	r2, #0
 80035cc:	f47f ade0 	bne.w	8003190 <HAL_I2C_EV_IRQHandler+0x394>
 80035d0:	e430      	b.n	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035d2:	0648      	lsls	r0, r1, #25
 80035d4:	d527      	bpl.n	8003626 <HAL_I2C_EV_IRQHandler+0x82a>
 80035d6:	0551      	lsls	r1, r2, #21
 80035d8:	d525      	bpl.n	8003626 <HAL_I2C_EV_IRQHandler+0x82a>
 80035da:	bb3d      	cbnz	r5, 800362c <HAL_I2C_EV_IRQHandler+0x830>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035dc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80035e0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035e2:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 80035e4:	b289      	uxth	r1, r1
 80035e6:	2900      	cmp	r1, #0
 80035e8:	f43f ac24 	beq.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ec:	6919      	ldr	r1, [r3, #16]
 80035ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035f0:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80035f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035f4:	3301      	adds	r3, #1
 80035f6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80035f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003600:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	f47f ac15 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
 800360a:	2a2a      	cmp	r2, #42	; 0x2a
 800360c:	f47f ac12 	bne.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003610:	6822      	ldr	r2, [r4, #0]
 8003612:	6853      	ldr	r3, [r2, #4]
 8003614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003618:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800361a:	2322      	movs	r3, #34	; 0x22
 800361c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800361e:	2328      	movs	r3, #40	; 0x28
 8003620:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003624:	e795      	b.n	8003552 <HAL_I2C_EV_IRQHandler+0x756>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003626:	2d00      	cmp	r5, #0
 8003628:	f43f ac04 	beq.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
 800362c:	0592      	lsls	r2, r2, #22
 800362e:	f57f ac01 	bpl.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8003632:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003634:	b292      	uxth	r2, r2
 8003636:	2a00      	cmp	r2, #0
 8003638:	f43f abfc 	beq.w	8002e34 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e64d      	b.n	80032e0 <HAL_I2C_EV_IRQHandler+0x4e4>
 8003644:	08002c43 	.word	0x08002c43
 8003648:	ffff0000 	.word	0xffff0000

0800364c <HAL_I2C_ER_IRQHandler>:
{
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800364e:	6803      	ldr	r3, [r0, #0]
{
 8003650:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003652:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003654:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003656:	f3c7 2500 	ubfx	r5, r7, #8, #1
 800365a:	b155      	cbz	r5, 8003672 <HAL_I2C_ER_IRQHandler+0x26>
 800365c:	f3c6 2500 	ubfx	r5, r6, #8, #1
 8003660:	b13d      	cbz	r5, 8003672 <HAL_I2C_ER_IRQHandler+0x26>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003662:	f46f 7280 	mvn.w	r2, #256	; 0x100
    error |= HAL_I2C_ERROR_BERR;
 8003666:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003668:	615a      	str	r2, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003670:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003672:	05b9      	lsls	r1, r7, #22
 8003674:	d506      	bpl.n	8003684 <HAL_I2C_ER_IRQHandler+0x38>
 8003676:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003678:	bf42      	ittt	mi
 800367a:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 800367e:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003682:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003684:	0578      	lsls	r0, r7, #21
 8003686:	d537      	bpl.n	80036f8 <HAL_I2C_ER_IRQHandler+0xac>
 8003688:	05f1      	lsls	r1, r6, #23
 800368a:	d535      	bpl.n	80036f8 <HAL_I2C_ER_IRQHandler+0xac>
    tmp1 = hi2c->Mode;
 800368c:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8003690:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8003692:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003696:	f1bc 0f20 	cmp.w	ip, #32
    tmp2 = hi2c->XferCount;
 800369a:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 800369c:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 800369e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80036a0:	d15a      	bne.n	8003758 <HAL_I2C_ER_IRQHandler+0x10c>
 80036a2:	2900      	cmp	r1, #0
 80036a4:	d158      	bne.n	8003758 <HAL_I2C_ER_IRQHandler+0x10c>
 80036a6:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 80036aa:	2921      	cmp	r1, #33	; 0x21
 80036ac:	d003      	beq.n	80036b6 <HAL_I2C_ER_IRQHandler+0x6a>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80036ae:	2a28      	cmp	r2, #40	; 0x28
 80036b0:	d152      	bne.n	8003758 <HAL_I2C_ER_IRQHandler+0x10c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80036b2:	2821      	cmp	r0, #33	; 0x21
 80036b4:	d150      	bne.n	8003758 <HAL_I2C_ER_IRQHandler+0x10c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036b6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036bc:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80036be:	2908      	cmp	r1, #8
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_ER_IRQHandler+0x7a>
 80036c2:	2920      	cmp	r1, #32
 80036c4:	d12a      	bne.n	800371c <HAL_I2C_ER_IRQHandler+0xd0>
 80036c6:	2a28      	cmp	r2, #40	; 0x28
 80036c8:	d128      	bne.n	800371c <HAL_I2C_ER_IRQHandler+0xd0>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ca:	4a2c      	ldr	r2, [pc, #176]	; (800377c <HAL_I2C_ER_IRQHandler+0x130>)
    HAL_I2C_ListenCpltCallback(hi2c);
 80036cc:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ce:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036d6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e4:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80036e6:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80036e8:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80036ea:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80036f4:	f7ff faa0 	bl	8002c38 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036f8:	053a      	lsls	r2, r7, #20
 80036fa:	d53b      	bpl.n	8003774 <HAL_I2C_ER_IRQHandler+0x128>
 80036fc:	05f3      	lsls	r3, r6, #23
 80036fe:	d539      	bpl.n	8003774 <HAL_I2C_ER_IRQHandler+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003700:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003704:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8003706:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800370a:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 800370c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 800370e:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 8003710:	431d      	orrs	r5, r3
 8003712:	6425      	str	r5, [r4, #64]	; 0x40
}
 8003714:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8003718:	f7ff bace 	b.w	8002cb8 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800371c:	2a21      	cmp	r2, #33	; 0x21
 800371e:	d117      	bne.n	8003750 <HAL_I2C_ER_IRQHandler+0x104>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003720:	4916      	ldr	r1, [pc, #88]	; (800377c <HAL_I2C_ER_IRQHandler+0x130>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003722:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003724:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003726:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003728:	2220      	movs	r2, #32
 800372a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800372e:	2200      	movs	r2, #0
 8003730:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800373a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003740:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003748:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800374a:	f7ff fa73 	bl	8002c34 <HAL_I2C_SlaveTxCpltCallback>
 800374e:	e7d3      	b.n	80036f8 <HAL_I2C_ER_IRQHandler+0xac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003750:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003754:	615a      	str	r2, [r3, #20]
 8003756:	e7cf      	b.n	80036f8 <HAL_I2C_ER_IRQHandler+0xac>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003758:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800375c:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 800375e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
      error |= HAL_I2C_ERROR_AF;
 8003762:	f045 0504 	orr.w	r5, r5, #4
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003766:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003768:	bf02      	ittt	eq
 800376a:	681a      	ldreq	r2, [r3, #0]
 800376c:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 8003770:	601a      	streq	r2, [r3, #0]
 8003772:	e7c1      	b.n	80036f8 <HAL_I2C_ER_IRQHandler+0xac>
  if (error != HAL_I2C_ERROR_NONE)
 8003774:	2d00      	cmp	r5, #0
 8003776:	d1c9      	bne.n	800370c <HAL_I2C_ER_IRQHandler+0xc0>
}
 8003778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800377a:	bf00      	nop
 800377c:	ffff0000 	.word	0xffff0000

08003780 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003780:	2201      	movs	r2, #1
 8003782:	4b01      	ldr	r3, [pc, #4]	; (8003788 <HAL_PWR_EnableBkUpAccess+0x8>)
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	4770      	bx	lr
 8003788:	420e0020 	.word	0x420e0020

0800378c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003790:	4604      	mov	r4, r0
 8003792:	b908      	cbnz	r0, 8003798 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8003794:	2001      	movs	r0, #1
 8003796:	e059      	b.n	800384c <HAL_RCC_OscConfig+0xc0>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003798:	6803      	ldr	r3, [r0, #0]
 800379a:	b133      	cbz	r3, 80037aa <HAL_RCC_OscConfig+0x1e>
 800379c:	071a      	lsls	r2, r3, #28
 800379e:	d104      	bne.n	80037aa <HAL_RCC_OscConfig+0x1e>
 80037a0:	f240 1167 	movw	r1, #359	; 0x167
 80037a4:	48a0      	ldr	r0, [pc, #640]	; (8003a28 <HAL_RCC_OscConfig+0x29c>)
 80037a6:	f7fd fe27 	bl	80013f8 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	07db      	lsls	r3, r3, #31
 80037ae:	d418      	bmi.n	80037e2 <HAL_RCC_OscConfig+0x56>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	079f      	lsls	r7, r3, #30
 80037b4:	d471      	bmi.n	800389a <HAL_RCC_OscConfig+0x10e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	0719      	lsls	r1, r3, #28
 80037ba:	f100 80b9 	bmi.w	8003930 <HAL_RCC_OscConfig+0x1a4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	075a      	lsls	r2, r3, #29
 80037c2:	f100 80eb 	bmi.w	800399c <HAL_RCC_OscConfig+0x210>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80037c6:	69e3      	ldr	r3, [r4, #28]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d904      	bls.n	80037d6 <HAL_RCC_OscConfig+0x4a>
 80037cc:	f240 21af 	movw	r1, #687	; 0x2af
 80037d0:	4895      	ldr	r0, [pc, #596]	; (8003a28 <HAL_RCC_OscConfig+0x29c>)
 80037d2:	f7fd fe11 	bl	80013f8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d6:	69e0      	ldr	r0, [r4, #28]
 80037d8:	2800      	cmp	r0, #0
 80037da:	f040 815d 	bne.w	8003a98 <HAL_RCC_OscConfig+0x30c>
        }
      }
    }
  }

  return HAL_OK;
 80037de:	2000      	movs	r0, #0
 80037e0:	e034      	b.n	800384c <HAL_RCC_OscConfig+0xc0>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80037e2:	6863      	ldr	r3, [r4, #4]
 80037e4:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80037e8:	d007      	beq.n	80037fa <HAL_RCC_OscConfig+0x6e>
 80037ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ee:	d004      	beq.n	80037fa <HAL_RCC_OscConfig+0x6e>
 80037f0:	f240 116d 	movw	r1, #365	; 0x16d
 80037f4:	488c      	ldr	r0, [pc, #560]	; (8003a28 <HAL_RCC_OscConfig+0x29c>)
 80037f6:	f7fd fdff 	bl	80013f8 <assert_failed>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037fa:	4d8c      	ldr	r5, [pc, #560]	; (8003a2c <HAL_RCC_OscConfig+0x2a0>)
 80037fc:	686b      	ldr	r3, [r5, #4]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b04      	cmp	r3, #4
 8003804:	d007      	beq.n	8003816 <HAL_RCC_OscConfig+0x8a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003806:	686b      	ldr	r3, [r5, #4]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b08      	cmp	r3, #8
 800380e:	d109      	bne.n	8003824 <HAL_RCC_OscConfig+0x98>
 8003810:	686b      	ldr	r3, [r5, #4]
 8003812:	03de      	lsls	r6, r3, #15
 8003814:	d506      	bpl.n	8003824 <HAL_RCC_OscConfig+0x98>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003816:	682b      	ldr	r3, [r5, #0]
 8003818:	039d      	lsls	r5, r3, #14
 800381a:	d5c9      	bpl.n	80037b0 <HAL_RCC_OscConfig+0x24>
 800381c:	6863      	ldr	r3, [r4, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1c6      	bne.n	80037b0 <HAL_RCC_OscConfig+0x24>
 8003822:	e7b7      	b.n	8003794 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003824:	6863      	ldr	r3, [r4, #4]
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382a:	d112      	bne.n	8003852 <HAL_RCC_OscConfig+0xc6>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003832:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003834:	f7fe f896 	bl	8001964 <HAL_GetTick>
 8003838:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	0398      	lsls	r0, r3, #14
 800383e:	d4b7      	bmi.n	80037b0 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe f890 	bl	8001964 <HAL_GetTick>
 8003844:	1b80      	subs	r0, r0, r6
 8003846:	2864      	cmp	r0, #100	; 0x64
 8003848:	d9f7      	bls.n	800383a <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 800384a:	2003      	movs	r0, #3
}
 800384c:	b002      	add	sp, #8
 800384e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003852:	b99b      	cbnz	r3, 800387c <HAL_RCC_OscConfig+0xf0>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385a:	602b      	str	r3, [r5, #0]
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003862:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003864:	f7fe f87e 	bl	8001964 <HAL_GetTick>
 8003868:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	0399      	lsls	r1, r3, #14
 800386e:	d59f      	bpl.n	80037b0 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7fe f878 	bl	8001964 <HAL_GetTick>
 8003874:	1b80      	subs	r0, r0, r6
 8003876:	2864      	cmp	r0, #100	; 0x64
 8003878:	d9f7      	bls.n	800386a <HAL_RCC_OscConfig+0xde>
 800387a:	e7e6      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	d103      	bne.n	800388c <HAL_RCC_OscConfig+0x100>
 8003884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003888:	602b      	str	r3, [r5, #0]
 800388a:	e7cf      	b.n	800382c <HAL_RCC_OscConfig+0xa0>
 800388c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003890:	602b      	str	r3, [r5, #0]
 8003892:	682b      	ldr	r3, [r5, #0]
 8003894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003898:	e7cb      	b.n	8003832 <HAL_RCC_OscConfig+0xa6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d904      	bls.n	80038aa <HAL_RCC_OscConfig+0x11e>
 80038a0:	f240 11a1 	movw	r1, #417	; 0x1a1
 80038a4:	4860      	ldr	r0, [pc, #384]	; (8003a28 <HAL_RCC_OscConfig+0x29c>)
 80038a6:	f7fd fda7 	bl	80013f8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80038aa:	6963      	ldr	r3, [r4, #20]
 80038ac:	2b1f      	cmp	r3, #31
 80038ae:	d904      	bls.n	80038ba <HAL_RCC_OscConfig+0x12e>
 80038b0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80038b4:	485c      	ldr	r0, [pc, #368]	; (8003a28 <HAL_RCC_OscConfig+0x29c>)
 80038b6:	f7fd fd9f 	bl	80013f8 <assert_failed>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ba:	4d5c      	ldr	r5, [pc, #368]	; (8003a2c <HAL_RCC_OscConfig+0x2a0>)
 80038bc:	686b      	ldr	r3, [r5, #4]
 80038be:	f013 0f0c 	tst.w	r3, #12
 80038c2:	d007      	beq.n	80038d4 <HAL_RCC_OscConfig+0x148>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038c4:	686b      	ldr	r3, [r5, #4]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d111      	bne.n	80038f2 <HAL_RCC_OscConfig+0x166>
 80038ce:	686b      	ldr	r3, [r5, #4]
 80038d0:	03da      	lsls	r2, r3, #15
 80038d2:	d40e      	bmi.n	80038f2 <HAL_RCC_OscConfig+0x166>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	079b      	lsls	r3, r3, #30
 80038d8:	d503      	bpl.n	80038e2 <HAL_RCC_OscConfig+0x156>
 80038da:	6923      	ldr	r3, [r4, #16]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	f47f af59 	bne.w	8003794 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e2:	682b      	ldr	r3, [r5, #0]
 80038e4:	6962      	ldr	r2, [r4, #20]
 80038e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80038ee:	602b      	str	r3, [r5, #0]
 80038f0:	e761      	b.n	80037b6 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f2:	6922      	ldr	r2, [r4, #16]
 80038f4:	4b4e      	ldr	r3, [pc, #312]	; (8003a30 <HAL_RCC_OscConfig+0x2a4>)
 80038f6:	b16a      	cbz	r2, 8003914 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_ENABLE();
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038fc:	f7fe f832 	bl	8001964 <HAL_GetTick>
 8003900:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	682b      	ldr	r3, [r5, #0]
 8003904:	079f      	lsls	r7, r3, #30
 8003906:	d4ec      	bmi.n	80038e2 <HAL_RCC_OscConfig+0x156>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003908:	f7fe f82c 	bl	8001964 <HAL_GetTick>
 800390c:	1b80      	subs	r0, r0, r6
 800390e:	2802      	cmp	r0, #2
 8003910:	d9f7      	bls.n	8003902 <HAL_RCC_OscConfig+0x176>
 8003912:	e79a      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_DISABLE();
 8003914:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003916:	f7fe f825 	bl	8001964 <HAL_GetTick>
 800391a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	0798      	lsls	r0, r3, #30
 8003920:	f57f af49 	bpl.w	80037b6 <HAL_RCC_OscConfig+0x2a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003924:	f7fe f81e 	bl	8001964 <HAL_GetTick>
 8003928:	1b80      	subs	r0, r0, r6
 800392a:	2802      	cmp	r0, #2
 800392c:	d9f6      	bls.n	800391c <HAL_RCC_OscConfig+0x190>
 800392e:	e78c      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003930:	69a3      	ldr	r3, [r4, #24]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d904      	bls.n	8003940 <HAL_RCC_OscConfig+0x1b4>
 8003936:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800393a:	483b      	ldr	r0, [pc, #236]	; (8003a28 <HAL_RCC_OscConfig+0x29c>)
 800393c:	f7fd fd5c 	bl	80013f8 <assert_failed>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003940:	69a2      	ldr	r2, [r4, #24]
 8003942:	4d3a      	ldr	r5, [pc, #232]	; (8003a2c <HAL_RCC_OscConfig+0x2a0>)
 8003944:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <HAL_RCC_OscConfig+0x2a8>)
 8003946:	b1da      	cbz	r2, 8003980 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800394c:	f7fe f80a 	bl	8001964 <HAL_GetTick>
 8003950:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003954:	079b      	lsls	r3, r3, #30
 8003956:	d50d      	bpl.n	8003974 <HAL_RCC_OscConfig+0x1e8>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003958:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800395c:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	fbb3 f3f2 	udiv	r3, r3, r2
 8003964:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003966:	bf00      	nop
  }
  while (Delay --);
 8003968:	9b01      	ldr	r3, [sp, #4]
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	9201      	str	r2, [sp, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f9      	bne.n	8003966 <HAL_RCC_OscConfig+0x1da>
 8003972:	e724      	b.n	80037be <HAL_RCC_OscConfig+0x32>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003974:	f7fd fff6 	bl	8001964 <HAL_GetTick>
 8003978:	1b80      	subs	r0, r0, r6
 800397a:	2802      	cmp	r0, #2
 800397c:	d9e9      	bls.n	8003952 <HAL_RCC_OscConfig+0x1c6>
 800397e:	e764      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_LSI_DISABLE();
 8003980:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003982:	f7fd ffef 	bl	8001964 <HAL_GetTick>
 8003986:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800398a:	079f      	lsls	r7, r3, #30
 800398c:	f57f af17 	bpl.w	80037be <HAL_RCC_OscConfig+0x32>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003990:	f7fd ffe8 	bl	8001964 <HAL_GetTick>
 8003994:	1b80      	subs	r0, r0, r6
 8003996:	2802      	cmp	r0, #2
 8003998:	d9f6      	bls.n	8003988 <HAL_RCC_OscConfig+0x1fc>
 800399a:	e756      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800399c:	68e3      	ldr	r3, [r4, #12]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d906      	bls.n	80039b0 <HAL_RCC_OscConfig+0x224>
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d004      	beq.n	80039b0 <HAL_RCC_OscConfig+0x224>
 80039a6:	f240 2111 	movw	r1, #529	; 0x211
 80039aa:	481f      	ldr	r0, [pc, #124]	; (8003a28 <HAL_RCC_OscConfig+0x29c>)
 80039ac:	f7fd fd24 	bl	80013f8 <assert_failed>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b0:	4d1e      	ldr	r5, [pc, #120]	; (8003a2c <HAL_RCC_OscConfig+0x2a0>)
 80039b2:	69eb      	ldr	r3, [r5, #28]
 80039b4:	00d8      	lsls	r0, r3, #3
 80039b6:	d424      	bmi.n	8003a02 <HAL_RCC_OscConfig+0x276>
      pwrclkchanged = SET;
 80039b8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ba:	69eb      	ldr	r3, [r5, #28]
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	61eb      	str	r3, [r5, #28]
 80039c2:	69eb      	ldr	r3, [r5, #28]
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4e1b      	ldr	r6, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x2b0>)
 80039ce:	6833      	ldr	r3, [r6, #0]
 80039d0:	05d9      	lsls	r1, r3, #23
 80039d2:	d518      	bpl.n	8003a06 <HAL_RCC_OscConfig+0x27a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d4:	68e3      	ldr	r3, [r4, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d132      	bne.n	8003a40 <HAL_RCC_OscConfig+0x2b4>
 80039da:	6a2b      	ldr	r3, [r5, #32]
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80039e2:	f7fd ffbf 	bl	8001964 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80039ea:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ec:	6a2b      	ldr	r3, [r5, #32]
 80039ee:	079b      	lsls	r3, r3, #30
 80039f0:	d54b      	bpl.n	8003a8a <HAL_RCC_OscConfig+0x2fe>
    if (pwrclkchanged == SET)
 80039f2:	2f00      	cmp	r7, #0
 80039f4:	f43f aee7 	beq.w	80037c6 <HAL_RCC_OscConfig+0x3a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f8:	69eb      	ldr	r3, [r5, #28]
 80039fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fe:	61eb      	str	r3, [r5, #28]
 8003a00:	e6e1      	b.n	80037c6 <HAL_RCC_OscConfig+0x3a>
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2700      	movs	r7, #0
 8003a04:	e7e2      	b.n	80039cc <HAL_RCC_OscConfig+0x240>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a06:	6833      	ldr	r3, [r6, #0]
 8003a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003a0e:	f7fd ffa9 	bl	8001964 <HAL_GetTick>
 8003a12:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	6833      	ldr	r3, [r6, #0]
 8003a16:	05da      	lsls	r2, r3, #23
 8003a18:	d4dc      	bmi.n	80039d4 <HAL_RCC_OscConfig+0x248>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fd ffa3 	bl	8001964 <HAL_GetTick>
 8003a1e:	eba0 0008 	sub.w	r0, r0, r8
 8003a22:	2864      	cmp	r0, #100	; 0x64
 8003a24:	d9f6      	bls.n	8003a14 <HAL_RCC_OscConfig+0x288>
 8003a26:	e710      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
 8003a28:	080056f4 	.word	0x080056f4
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	42420000 	.word	0x42420000
 8003a34:	42420480 	.word	0x42420480
 8003a38:	2000005c 	.word	0x2000005c
 8003a3c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a40:	b9ab      	cbnz	r3, 8003a6e <HAL_RCC_OscConfig+0x2e2>
 8003a42:	6a2b      	ldr	r3, [r5, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	622b      	str	r3, [r5, #32]
 8003a4e:	6a2b      	ldr	r3, [r5, #32]
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003a56:	f7fd ff85 	bl	8001964 <HAL_GetTick>
 8003a5a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5c:	6a2b      	ldr	r3, [r5, #32]
 8003a5e:	0798      	lsls	r0, r3, #30
 8003a60:	d5c7      	bpl.n	80039f2 <HAL_RCC_OscConfig+0x266>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fd ff7f 	bl	8001964 <HAL_GetTick>
 8003a66:	1b80      	subs	r0, r0, r6
 8003a68:	4540      	cmp	r0, r8
 8003a6a:	d9f7      	bls.n	8003a5c <HAL_RCC_OscConfig+0x2d0>
 8003a6c:	e6ed      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	6a2b      	ldr	r3, [r5, #32]
 8003a72:	d103      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	622b      	str	r3, [r5, #32]
 8003a7a:	e7ae      	b.n	80039da <HAL_RCC_OscConfig+0x24e>
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	622b      	str	r3, [r5, #32]
 8003a82:	6a2b      	ldr	r3, [r5, #32]
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	e7aa      	b.n	80039e0 <HAL_RCC_OscConfig+0x254>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fd ff6b 	bl	8001964 <HAL_GetTick>
 8003a8e:	eba0 0008 	sub.w	r0, r0, r8
 8003a92:	42b0      	cmp	r0, r6
 8003a94:	d9aa      	bls.n	80039ec <HAL_RCC_OscConfig+0x260>
 8003a96:	e6d8      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a98:	4b40      	ldr	r3, [pc, #256]	; (8003b9c <HAL_RCC_OscConfig+0x410>)
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	f002 020c 	and.w	r2, r2, #12
 8003aa2:	2a08      	cmp	r2, #8
 8003aa4:	d069      	beq.n	8003b7a <HAL_RCC_OscConfig+0x3ee>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa6:	2802      	cmp	r0, #2
 8003aa8:	4e3d      	ldr	r6, [pc, #244]	; (8003ba0 <HAL_RCC_OscConfig+0x414>)
 8003aaa:	d157      	bne.n	8003b5c <HAL_RCC_OscConfig+0x3d0>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003aac:	6a23      	ldr	r3, [r4, #32]
 8003aae:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8003ab2:	d004      	beq.n	8003abe <HAL_RCC_OscConfig+0x332>
 8003ab4:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003ab8:	483a      	ldr	r0, [pc, #232]	; (8003ba4 <HAL_RCC_OscConfig+0x418>)
 8003aba:	f7fd fc9d 	bl	80013f8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ac0:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8003ac4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ac8:	d010      	beq.n	8003aec <HAL_RCC_OscConfig+0x360>
 8003aca:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003ace:	d00d      	beq.n	8003aec <HAL_RCC_OscConfig+0x360>
 8003ad0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCC_OscConfig+0x360>
 8003ad6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8003ada:	d007      	beq.n	8003aec <HAL_RCC_OscConfig+0x360>
 8003adc:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003ae0:	d004      	beq.n	8003aec <HAL_RCC_OscConfig+0x360>
 8003ae2:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003ae6:	482f      	ldr	r0, [pc, #188]	; (8003ba4 <HAL_RCC_OscConfig+0x418>)
 8003ae8:	f7fd fc86 	bl	80013f8 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8003aec:	2300      	movs	r3, #0
 8003aee:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003af0:	f7fd ff38 	bl	8001964 <HAL_GetTick>
 8003af4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af6:	682b      	ldr	r3, [r5, #0]
 8003af8:	0199      	lsls	r1, r3, #6
 8003afa:	d429      	bmi.n	8003b50 <HAL_RCC_OscConfig+0x3c4>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003afc:	6a23      	ldr	r3, [r4, #32]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d10e      	bne.n	8003b22 <HAL_RCC_OscConfig+0x396>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003b04:	68a3      	ldr	r3, [r4, #8]
 8003b06:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8003b0a:	d004      	beq.n	8003b16 <HAL_RCC_OscConfig+0x38a>
 8003b0c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003b10:	4824      	ldr	r0, [pc, #144]	; (8003ba4 <HAL_RCC_OscConfig+0x418>)
 8003b12:	f7fd fc71 	bl	80013f8 <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b16:	686b      	ldr	r3, [r5, #4]
 8003b18:	68a2      	ldr	r2, [r4, #8]
 8003b1a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b22:	686a      	ldr	r2, [r5, #4]
 8003b24:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8003b28:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b32:	2301      	movs	r3, #1
 8003b34:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003b36:	f7fd ff15 	bl	8001964 <HAL_GetTick>
 8003b3a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	019a      	lsls	r2, r3, #6
 8003b40:	f53f ae4d 	bmi.w	80037de <HAL_RCC_OscConfig+0x52>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd ff0e 	bl	8001964 <HAL_GetTick>
 8003b48:	1b00      	subs	r0, r0, r4
 8003b4a:	2802      	cmp	r0, #2
 8003b4c:	d9f6      	bls.n	8003b3c <HAL_RCC_OscConfig+0x3b0>
 8003b4e:	e67c      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fd ff08 	bl	8001964 <HAL_GetTick>
 8003b54:	1bc0      	subs	r0, r0, r7
 8003b56:	2802      	cmp	r0, #2
 8003b58:	d9cd      	bls.n	8003af6 <HAL_RCC_OscConfig+0x36a>
 8003b5a:	e676      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_PLL_DISABLE();
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003b60:	f7fd ff00 	bl	8001964 <HAL_GetTick>
 8003b64:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b66:	682b      	ldr	r3, [r5, #0]
 8003b68:	019b      	lsls	r3, r3, #6
 8003b6a:	f57f ae38 	bpl.w	80037de <HAL_RCC_OscConfig+0x52>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fd fef9 	bl	8001964 <HAL_GetTick>
 8003b72:	1b00      	subs	r0, r0, r4
 8003b74:	2802      	cmp	r0, #2
 8003b76:	d9f6      	bls.n	8003b66 <HAL_RCC_OscConfig+0x3da>
 8003b78:	e667      	b.n	800384a <HAL_RCC_OscConfig+0xbe>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b7a:	2801      	cmp	r0, #1
 8003b7c:	f43f ae66 	beq.w	800384c <HAL_RCC_OscConfig+0xc0>
        pll_config = RCC->CFGR;
 8003b80:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	6a23      	ldr	r3, [r4, #32]
 8003b84:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	f47f ae03 	bne.w	8003794 <HAL_RCC_OscConfig+0x8>
 8003b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b90:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8003b94:	1ac0      	subs	r0, r0, r3
 8003b96:	bf18      	it	ne
 8003b98:	2001      	movne	r0, #1
 8003b9a:	e657      	b.n	800384c <HAL_RCC_OscConfig+0xc0>
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	42420060 	.word	0x42420060
 8003ba4:	080056f4 	.word	0x080056f4

08003ba8 <HAL_RCC_GetSysClockFreq>:
{
 8003ba8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003baa:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x64>)
{
 8003bac:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bae:	ac02      	add	r4, sp, #8
 8003bb0:	f103 0510 	add.w	r5, r3, #16
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	c203      	stmia	r2!, {r0, r1}
 8003bbe:	42ab      	cmp	r3, r5
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	d1f7      	bne.n	8003bb4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bc4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8003bc8:	4911      	ldr	r1, [pc, #68]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bca:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003bce:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003bd0:	f003 020c 	and.w	r2, r3, #12
 8003bd4:	2a08      	cmp	r2, #8
 8003bd6:	d117      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bd8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003bdc:	a806      	add	r0, sp, #24
 8003bde:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003be0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003be2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003be6:	d50c      	bpl.n	8003c02 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003be8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bea:	480a      	ldr	r0, [pc, #40]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bec:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bf0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf2:	aa06      	add	r2, sp, #24
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bfa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003bfe:	b007      	add	sp, #28
 8003c00:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c02:	4805      	ldr	r0, [pc, #20]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x70>)
 8003c04:	4350      	muls	r0, r2
 8003c06:	e7fa      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003c08:	4802      	ldr	r0, [pc, #8]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003c0a:	e7f8      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x56>
 8003c0c:	0800557c 	.word	0x0800557c
 8003c10:	40021000 	.word	0x40021000
 8003c14:	007a1200 	.word	0x007a1200
 8003c18:	003d0900 	.word	0x003d0900

08003c1c <HAL_RCC_ClockConfig>:
{
 8003c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c20:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003c22:	4604      	mov	r4, r0
 8003c24:	b910      	cbnz	r0, 8003c2c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003c26:	2001      	movs	r0, #1
}
 8003c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003c2c:	6803      	ldr	r3, [r0, #0]
 8003c2e:	071e      	lsls	r6, r3, #28
 8003c30:	d104      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x20>
 8003c32:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003c36:	486d      	ldr	r0, [pc, #436]	; (8003dec <HAL_RCC_ClockConfig+0x1d0>)
 8003c38:	f7fd fbde 	bl	80013f8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003c3c:	2d02      	cmp	r5, #2
 8003c3e:	d904      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x2e>
 8003c40:	f240 3139 	movw	r1, #825	; 0x339
 8003c44:	4869      	ldr	r0, [pc, #420]	; (8003dec <HAL_RCC_ClockConfig+0x1d0>)
 8003c46:	f7fd fbd7 	bl	80013f8 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4a:	4a69      	ldr	r2, [pc, #420]	; (8003df0 <HAL_RCC_ClockConfig+0x1d4>)
 8003c4c:	6813      	ldr	r3, [r2, #0]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	42ab      	cmp	r3, r5
 8003c54:	d33d      	bcc.n	8003cd2 <HAL_RCC_ClockConfig+0xb6>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	0798      	lsls	r0, r3, #30
 8003c5a:	d445      	bmi.n	8003ce8 <HAL_RCC_ClockConfig+0xcc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	07da      	lsls	r2, r3, #31
 8003c60:	d46e      	bmi.n	8003d40 <HAL_RCC_ClockConfig+0x124>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c62:	4a63      	ldr	r2, [pc, #396]	; (8003df0 <HAL_RCC_ClockConfig+0x1d4>)
 8003c64:	6813      	ldr	r3, [r2, #0]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	42ab      	cmp	r3, r5
 8003c6c:	f200 809a 	bhi.w	8003da4 <HAL_RCC_ClockConfig+0x188>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	4d60      	ldr	r5, [pc, #384]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
 8003c74:	f013 0f04 	tst.w	r3, #4
 8003c78:	f040 80a0 	bne.w	8003dbc <HAL_RCC_ClockConfig+0x1a0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	071b      	lsls	r3, r3, #28
 8003c80:	d517      	bpl.n	8003cb2 <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003c82:	6923      	ldr	r3, [r4, #16]
 8003c84:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8003c88:	d00c      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x88>
 8003c8a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c8e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003c92:	d007      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x88>
 8003c94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c98:	d004      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x88>
 8003c9a:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003c9e:	4853      	ldr	r0, [pc, #332]	; (8003dec <HAL_RCC_ClockConfig+0x1d0>)
 8003ca0:	f7fd fbaa 	bl	80013f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ca4:	686b      	ldr	r3, [r5, #4]
 8003ca6:	6922      	ldr	r2, [r4, #16]
 8003ca8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003cac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003cb0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cb2:	f7ff ff79 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003cb6:	686b      	ldr	r3, [r5, #4]
 8003cb8:	4a4f      	ldr	r2, [pc, #316]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003cba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003cbe:	5cd3      	ldrb	r3, [r2, r3]
 8003cc0:	40d8      	lsrs	r0, r3
 8003cc2:	4b4e      	ldr	r3, [pc, #312]	; (8003dfc <HAL_RCC_ClockConfig+0x1e0>)
 8003cc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003cc6:	4b4e      	ldr	r3, [pc, #312]	; (8003e00 <HAL_RCC_ClockConfig+0x1e4>)
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	f7fd fe09 	bl	80018e0 <HAL_InitTick>
  return HAL_OK;
 8003cce:	2000      	movs	r0, #0
 8003cd0:	e7aa      	b.n	8003c28 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	f023 0307 	bic.w	r3, r3, #7
 8003cd8:	432b      	orrs	r3, r5
 8003cda:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cdc:	6813      	ldr	r3, [r2, #0]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	42ab      	cmp	r3, r5
 8003ce4:	d19f      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xa>
 8003ce6:	e7b6      	b.n	8003c56 <HAL_RCC_ClockConfig+0x3a>
 8003ce8:	4e42      	ldr	r6, [pc, #264]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cea:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cee:	bf1e      	ittt	ne
 8003cf0:	6872      	ldrne	r2, [r6, #4]
 8003cf2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003cf6:	6072      	strne	r2, [r6, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cfa:	bf42      	ittt	mi
 8003cfc:	6873      	ldrmi	r3, [r6, #4]
 8003cfe:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8003d02:	6073      	strmi	r3, [r6, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003d04:	68a3      	ldr	r3, [r4, #8]
 8003d06:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8003d0a:	d012      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x116>
 8003d0c:	f023 0220 	bic.w	r2, r3, #32
 8003d10:	2a90      	cmp	r2, #144	; 0x90
 8003d12:	d00e      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x116>
 8003d14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d18:	2aa0      	cmp	r2, #160	; 0xa0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x116>
 8003d1c:	f023 0210 	bic.w	r2, r3, #16
 8003d20:	2ac0      	cmp	r2, #192	; 0xc0
 8003d22:	d006      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x116>
 8003d24:	2bf0      	cmp	r3, #240	; 0xf0
 8003d26:	d004      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x116>
 8003d28:	f240 315f 	movw	r1, #863	; 0x35f
 8003d2c:	482f      	ldr	r0, [pc, #188]	; (8003dec <HAL_RCC_ClockConfig+0x1d0>)
 8003d2e:	f7fd fb63 	bl	80013f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d32:	6873      	ldr	r3, [r6, #4]
 8003d34:	68a2      	ldr	r2, [r4, #8]
 8003d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	6073      	str	r3, [r6, #4]
 8003d3e:	e78d      	b.n	8003c5c <HAL_RCC_ClockConfig+0x40>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003d40:	6863      	ldr	r3, [r4, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d904      	bls.n	8003d50 <HAL_RCC_ClockConfig+0x134>
 8003d46:	f240 3166 	movw	r1, #870	; 0x366
 8003d4a:	4828      	ldr	r0, [pc, #160]	; (8003dec <HAL_RCC_ClockConfig+0x1d0>)
 8003d4c:	f7fd fb54 	bl	80013f8 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d50:	6862      	ldr	r2, [r4, #4]
 8003d52:	4e28      	ldr	r6, [pc, #160]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
 8003d54:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d58:	d11c      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x178>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5e:	f43f af62 	beq.w	8003c26 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d68:	f023 0303 	bic.w	r3, r3, #3
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003d70:	f7fd fdf8 	bl	8001964 <HAL_GetTick>
 8003d74:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	6873      	ldr	r3, [r6, #4]
 8003d78:	6862      	ldr	r2, [r4, #4]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003d82:	f43f af6e 	beq.w	8003c62 <HAL_RCC_ClockConfig+0x46>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d86:	f7fd fded 	bl	8001964 <HAL_GetTick>
 8003d8a:	1bc0      	subs	r0, r0, r7
 8003d8c:	4540      	cmp	r0, r8
 8003d8e:	d9f2      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x15a>
        return HAL_TIMEOUT;
 8003d90:	2003      	movs	r0, #3
 8003d92:	e749      	b.n	8003c28 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d94:	2a02      	cmp	r2, #2
 8003d96:	d102      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x182>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d9c:	e7df      	b.n	8003d5e <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9e:	f013 0f02 	tst.w	r3, #2
 8003da2:	e7dc      	b.n	8003d5e <HAL_RCC_ClockConfig+0x142>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da4:	6813      	ldr	r3, [r2, #0]
 8003da6:	f023 0307 	bic.w	r3, r3, #7
 8003daa:	432b      	orrs	r3, r5
 8003dac:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	42ab      	cmp	r3, r5
 8003db6:	f47f af36 	bne.w	8003c26 <HAL_RCC_ClockConfig+0xa>
 8003dba:	e759      	b.n	8003c70 <HAL_RCC_ClockConfig+0x54>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003dbc:	68e3      	ldr	r3, [r4, #12]
 8003dbe:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8003dc2:	d00c      	beq.n	8003dde <HAL_RCC_ClockConfig+0x1c2>
 8003dc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003dc8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003dcc:	d007      	beq.n	8003dde <HAL_RCC_ClockConfig+0x1c2>
 8003dce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003dd2:	d004      	beq.n	8003dde <HAL_RCC_ClockConfig+0x1c2>
 8003dd4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003dd8:	4804      	ldr	r0, [pc, #16]	; (8003dec <HAL_RCC_ClockConfig+0x1d0>)
 8003dda:	f7fd fb0d 	bl	80013f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dde:	686b      	ldr	r3, [r5, #4]
 8003de0:	68e2      	ldr	r2, [r4, #12]
 8003de2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003de6:	4313      	orrs	r3, r2
 8003de8:	606b      	str	r3, [r5, #4]
 8003dea:	e747      	b.n	8003c7c <HAL_RCC_ClockConfig+0x60>
 8003dec:	080056f4 	.word	0x080056f4
 8003df0:	40022000 	.word	0x40022000
 8003df4:	40021000 	.word	0x40021000
 8003df8:	080055c0 	.word	0x080055c0
 8003dfc:	2000005c 	.word	0x2000005c
 8003e00:	20000064 	.word	0x20000064

08003e04 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003e06:	4a05      	ldr	r2, [pc, #20]	; (8003e1c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003e0e:	5cd3      	ldrb	r3, [r2, r3]
 8003e10:	4a03      	ldr	r2, [pc, #12]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e12:	6810      	ldr	r0, [r2, #0]
}
 8003e14:	40d8      	lsrs	r0, r3
 8003e16:	4770      	bx	lr
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	080055d0 	.word	0x080055d0
 8003e20:	2000005c 	.word	0x2000005c

08003e24 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e24:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003e26:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003e2e:	5cd3      	ldrb	r3, [r2, r3]
 8003e30:	4a03      	ldr	r2, [pc, #12]	; (8003e40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003e32:	6810      	ldr	r0, [r2, #0]
}
 8003e34:	40d8      	lsrs	r0, r3
 8003e36:	4770      	bx	lr
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	080055d0 	.word	0x080055d0
 8003e40:	2000005c 	.word	0x2000005c

08003e44 <HAL_RCCEx_PeriphCLKConfig>:
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003e44:	6803      	ldr	r3, [r0, #0]
{
 8003e46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003e4a:	f013 0f13 	tst.w	r3, #19
{
 8003e4e:	4605      	mov	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003e50:	d103      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x16>
 8003e52:	216c      	movs	r1, #108	; 0x6c
 8003e54:	4845      	ldr	r0, [pc, #276]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003e56:	f7fd facf 	bl	80013f8 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e5a:	682b      	ldr	r3, [r5, #0]
 8003e5c:	07d9      	lsls	r1, r3, #31
 8003e5e:	d528      	bpl.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003e60:	686b      	ldr	r3, [r5, #4]
 8003e62:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8003e66:	d003      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8003e68:	2172      	movs	r1, #114	; 0x72
 8003e6a:	4840      	ldr	r0, [pc, #256]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003e6c:	f7fd fac4 	bl	80013f8 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e70:	4c3f      	ldr	r4, [pc, #252]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003e72:	69e3      	ldr	r3, [r4, #28]
 8003e74:	00da      	lsls	r2, r3, #3
 8003e76:	d444      	bmi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003e78:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	69e3      	ldr	r3, [r4, #28]
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	61e3      	str	r3, [r4, #28]
 8003e82:	69e3      	ldr	r3, [r4, #28]
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4e39      	ldr	r6, [pc, #228]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8e:	6833      	ldr	r3, [r6, #0]
 8003e90:	05db      	lsls	r3, r3, #23
 8003e92:	d538      	bpl.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e94:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e96:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003e9a:	d148      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9c:	6a23      	ldr	r3, [r4, #32]
 8003e9e:	686a      	ldr	r2, [r5, #4]
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ea8:	b11f      	cbz	r7, 8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	69e3      	ldr	r3, [r4, #28]
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb2:	682b      	ldr	r3, [r5, #0]
 8003eb4:	079b      	lsls	r3, r3, #30
 8003eb6:	d50e      	bpl.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8003eb8:	68ab      	ldr	r3, [r5, #8]
 8003eba:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8003ebe:	d003      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8003ec0:	21b9      	movs	r1, #185	; 0xb9
 8003ec2:	482a      	ldr	r0, [pc, #168]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003ec4:	f7fd fa98 	bl	80013f8 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec8:	4a29      	ldr	r2, [pc, #164]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003eca:	68a9      	ldr	r1, [r5, #8]
 8003ecc:	6853      	ldr	r3, [r2, #4]
 8003ece:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ed6:	6828      	ldr	r0, [r5, #0]
 8003ed8:	f010 0010 	ands.w	r0, r0, #16
 8003edc:	d024      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8003ede:	68eb      	ldr	r3, [r5, #12]
 8003ee0:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8003ee4:	d004      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003ee6:	f240 1115 	movw	r1, #277	; 0x115
 8003eea:	4820      	ldr	r0, [pc, #128]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003eec:	f7fd fa84 	bl	80013f8 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ef0:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003ef2:	68e9      	ldr	r1, [r5, #12]
 8003ef4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ef6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ef8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6053      	str	r3, [r2, #4]
 8003f00:	e012      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    FlagStatus       pwrclkchanged = RESET;
 8003f02:	2700      	movs	r7, #0
 8003f04:	e7c2      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f06:	6833      	ldr	r3, [r6, #0]
 8003f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003f0e:	f7fd fd29 	bl	8001964 <HAL_GetTick>
 8003f12:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f14:	6833      	ldr	r3, [r6, #0]
 8003f16:	05d8      	lsls	r0, r3, #23
 8003f18:	d4bc      	bmi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x50>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7fd fd23 	bl	8001964 <HAL_GetTick>
 8003f1e:	eba0 0008 	sub.w	r0, r0, r8
 8003f22:	2864      	cmp	r0, #100	; 0x64
 8003f24:	d9f6      	bls.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          return HAL_TIMEOUT;
 8003f26:	2003      	movs	r0, #3
}
 8003f28:	b002      	add	sp, #8
 8003f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f2e:	686a      	ldr	r2, [r5, #4]
 8003f30:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d0b1      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f38:	2001      	movs	r0, #1
 8003f3a:	4a0f      	ldr	r2, [pc, #60]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f3c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f3e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f40:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f46:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8003f48:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f4a:	07d9      	lsls	r1, r3, #31
 8003f4c:	d5a6      	bpl.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 8003f4e:	f7fd fd09 	bl	8001964 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003f56:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f58:	6a23      	ldr	r3, [r4, #32]
 8003f5a:	079a      	lsls	r2, r3, #30
 8003f5c:	d49e      	bmi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fd fd01 	bl	8001964 <HAL_GetTick>
 8003f62:	1b80      	subs	r0, r0, r6
 8003f64:	4540      	cmp	r0, r8
 8003f66:	d9f7      	bls.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003f68:	e7dd      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f6a:	bf00      	nop
 8003f6c:	0800572c 	.word	0x0800572c
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40007000 	.word	0x40007000
 8003f78:	42420440 	.word	0x42420440

08003f7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f80:	4b38      	ldr	r3, [pc, #224]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
{
 8003f82:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f84:	ad02      	add	r5, sp, #8
 8003f86:	f103 0610 	add.w	r6, r3, #16
 8003f8a:	462a      	mov	r2, r5
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	3308      	adds	r3, #8
 8003f92:	c203      	stmia	r2!, {r0, r1}
 8003f94:	42b3      	cmp	r3, r6
 8003f96:	4615      	mov	r5, r2
 8003f98:	d1f7      	bne.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f9a:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8003f9e:	f014 0f13 	tst.w	r4, #19
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fa2:	f8ad 3004 	strh.w	r3, [sp, #4]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8003fa6:	d104      	bne.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8003fa8:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8003fac:	482e      	ldr	r0, [pc, #184]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8003fae:	f7fd fa23 	bl	80013f8 <assert_failed>

  switch (PeriphClk)
 8003fb2:	2c02      	cmp	r4, #2
 8003fb4:	d047      	beq.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8003fb6:	2c10      	cmp	r4, #16
 8003fb8:	d017      	beq.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8003fba:	2c01      	cmp	r4, #1
 8003fbc:	d14f      	bne.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003fbe:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8003fc2:	4a2a      	ldr	r2, [pc, #168]	; (800406c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8003fc4:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003fc6:	4019      	ands	r1, r3
 8003fc8:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8003fcc:	d044      	beq.n	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd6:	d12d      	bne.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        frequency = LSI_VALUE;
 8003fd8:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003fdc:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8003fde:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8003fe2:	bf08      	it	eq
 8003fe4:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003fe6:	b006      	add	sp, #24
 8003fe8:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8003fea:	4b20      	ldr	r3, [pc, #128]	; (800406c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8003fec:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003ff4:	d0f7      	beq.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ff6:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8003ffa:	a806      	add	r0, sp, #24
 8003ffc:	4402      	add	r2, r0
 8003ffe:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004002:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004004:	bf41      	itttt	mi
 8004006:	685a      	ldrmi	r2, [r3, #4]
 8004008:	a906      	addmi	r1, sp, #24
 800400a:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800400e:	1852      	addmi	r2, r2, r1
 8004010:	bf44      	itt	mi
 8004012:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004016:	4a16      	ldrmi	r2, [pc, #88]	; (8004070 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004018:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800401a:	bf4c      	ite	mi
 800401c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004020:	4a14      	ldrpl	r2, [pc, #80]	; (8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004022:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004024:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004028:	d4dd      	bmi.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          frequency = (pllclk * 2) / 3;
 800402a:	2303      	movs	r3, #3
 800402c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800402e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004032:	e7d8      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004038:	d111      	bne.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800403a:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 800403c:	f24f 4024 	movw	r0, #62500	; 0xf424
 8004040:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004044:	e7cd      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004046:	f7ff feed 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
 800404a:	4b08      	ldr	r3, [pc, #32]	; (800406c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004052:	3301      	adds	r3, #1
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	e7ea      	b.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
        frequency = LSE_VALUE;
 8004058:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800405c:	e7c3      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  uint32_t temp_reg = 0U, frequency = 0U;
 800405e:	2000      	movs	r0, #0
 8004060:	e7c1      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004062:	bf00      	nop
 8004064:	0800558c 	.word	0x0800558c
 8004068:	0800572c 	.word	0x0800572c
 800406c:	40021000 	.word	0x40021000
 8004070:	007a1200 	.word	0x007a1200
 8004074:	003d0900 	.word	0x003d0900

08004078 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004078:	6803      	ldr	r3, [r0, #0]
{
 800407a:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800407c:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800407e:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004080:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8004082:	b295      	uxth	r5, r2
 8004084:	b28c      	uxth	r4, r1
 8004086:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004088:	bf17      	itett	ne
 800408a:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800408c:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800408e:	b280      	uxthne	r0, r0
 8004090:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004094:	bf08      	it	eq
 8004096:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 800409a:	bd30      	pop	{r4, r5, pc}

0800409c <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800409c:	6803      	ldr	r3, [r0, #0]
 800409e:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80040a2:	b29b      	uxth	r3, r3
}
 80040a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80040a8:	4770      	bx	lr

080040aa <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80040aa:	2300      	movs	r3, #0

  while (Value >= 10U)
 80040ac:	2809      	cmp	r0, #9
 80040ae:	d803      	bhi.n	80040b8 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80040b0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80040b4:	b2c0      	uxtb	r0, r0
 80040b6:	4770      	bx	lr
    Value -= 10U;
 80040b8:	380a      	subs	r0, #10
    bcdhigh++;
 80040ba:	3301      	adds	r3, #1
    Value -= 10U;
 80040bc:	b2c0      	uxtb	r0, r0
 80040be:	e7f5      	b.n	80040ac <RTC_ByteToBcd2+0x2>

080040c0 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 80040c0:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80040c2:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80040c4:	f000 000f 	and.w	r0, r0, #15
 80040c8:	fb02 0003 	mla	r0, r2, r3, r0
}
 80040cc:	b2c0      	uxtb	r0, r0
 80040ce:	4770      	bx	lr

080040d0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80040d0:	b530      	push	{r4, r5, lr}
 80040d2:	2517      	movs	r5, #23
 80040d4:	2309      	movs	r3, #9
 80040d6:	434d      	muls	r5, r1
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 80040d8:	2902      	cmp	r1, #2
  year = 2000U + nYear;
 80040da:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
 80040de:	fbb5 f5f3 	udiv	r5, r5, r3
  if (nMonth < 3U)
 80040e2:	d817      	bhi.n	8004114 <RTC_WeekDayNum+0x44>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80040e4:	3204      	adds	r2, #4
 80040e6:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 80040ea:	1910      	adds	r0, r2, r4
 80040ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80040f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80040f4:	4428      	add	r0, r5
 80040f6:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 80040fa:	4410      	add	r0, r2
 80040fc:	2264      	movs	r2, #100	; 0x64
 80040fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004102:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004104:	2307      	movs	r3, #7
 8004106:	fbb0 f3f3 	udiv	r3, r0, r3
 800410a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800410e:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8004110:	b2c0      	uxtb	r0, r0
 8004112:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004114:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004118:	1c90      	adds	r0, r2, #2
 800411a:	2264      	movs	r2, #100	; 0x64
 800411c:	4420      	add	r0, r4
 800411e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004122:	4428      	add	r0, r5
 8004124:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8004128:	fbb4 f4f2 	udiv	r4, r4, r2
 800412c:	4418      	add	r0, r3
 800412e:	1b00      	subs	r0, r0, r4
 8004130:	e7e8      	b.n	8004104 <RTC_WeekDayNum+0x34>

08004132 <RTC_EnterInitMode>:
{
 8004132:	b538      	push	{r3, r4, r5, lr}
 8004134:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8004136:	f7fd fc15 	bl	8001964 <HAL_GetTick>
 800413a:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	0692      	lsls	r2, r2, #26
 8004142:	d505      	bpl.n	8004150 <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 8004144:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	f042 0210 	orr.w	r2, r2, #16
 800414c:	605a      	str	r2, [r3, #4]
}
 800414e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004150:	f7fd fc08 	bl	8001964 <HAL_GetTick>
 8004154:	1b40      	subs	r0, r0, r5
 8004156:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800415a:	d9ef      	bls.n	800413c <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800415c:	2003      	movs	r0, #3
 800415e:	e7f6      	b.n	800414e <RTC_EnterInitMode+0x1c>

08004160 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004160:	6802      	ldr	r2, [r0, #0]
{
 8004162:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004164:	6853      	ldr	r3, [r2, #4]
{
 8004166:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004168:	f023 0310 	bic.w	r3, r3, #16
 800416c:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800416e:	f7fd fbf9 	bl	8001964 <HAL_GetTick>
 8004172:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	069b      	lsls	r3, r3, #26
 800417a:	d501      	bpl.n	8004180 <RTC_ExitInitMode+0x20>
  return HAL_OK;
 800417c:	2000      	movs	r0, #0
}
 800417e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004180:	f7fd fbf0 	bl	8001964 <HAL_GetTick>
 8004184:	1b40      	subs	r0, r0, r5
 8004186:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800418a:	d9f3      	bls.n	8004174 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 800418c:	2003      	movs	r0, #3
 800418e:	e7f6      	b.n	800417e <RTC_ExitInitMode+0x1e>

08004190 <RTC_WriteTimeCounter>:
{
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4605      	mov	r5, r0
 8004194:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004196:	f7ff ffcc 	bl	8004132 <RTC_EnterInitMode>
 800419a:	b958      	cbnz	r0, 80041b4 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80041a0:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80041a2:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041a4:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80041a6:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041a8:	f7ff ffda 	bl	8004160 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80041ac:	3000      	adds	r0, #0
 80041ae:	bf18      	it	ne
 80041b0:	2001      	movne	r0, #1
}
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80041b4:	2001      	movs	r0, #1
 80041b6:	e7fc      	b.n	80041b2 <RTC_WriteTimeCounter+0x22>

080041b8 <RTC_WriteAlarmCounter>:
{
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4605      	mov	r5, r0
 80041bc:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041be:	f7ff ffb8 	bl	8004132 <RTC_EnterInitMode>
 80041c2:	b958      	cbnz	r0, 80041dc <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80041c8:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80041ca:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041cc:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80041ce:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041d0:	f7ff ffc6 	bl	8004160 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80041d4:	3000      	adds	r0, #0
 80041d6:	bf18      	it	ne
 80041d8:	2001      	movne	r0, #1
}
 80041da:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80041dc:	2001      	movs	r0, #1
 80041de:	e7fc      	b.n	80041da <RTC_WriteAlarmCounter+0x22>

080041e0 <HAL_RTC_SetTime>:
{
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	460d      	mov	r5, r1
 80041e4:	4616      	mov	r6, r2
  if ((hrtc == NULL) || (sTime == NULL))
 80041e6:	4604      	mov	r4, r0
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d03d      	beq.n	8004268 <HAL_RTC_SetTime+0x88>
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d03b      	beq.n	8004268 <HAL_RTC_SetTime+0x88>
  assert_param(IS_RTC_FORMAT(Format));
 80041f0:	2a01      	cmp	r2, #1
 80041f2:	d904      	bls.n	80041fe <HAL_RTC_SetTime+0x1e>
 80041f4:	f240 21ca 	movw	r1, #714	; 0x2ca
 80041f8:	4843      	ldr	r0, [pc, #268]	; (8004308 <HAL_RTC_SetTime+0x128>)
 80041fa:	f7fd f8fd 	bl	80013f8 <assert_failed>
  __HAL_LOCK(hrtc);
 80041fe:	7c23      	ldrb	r3, [r4, #16]
 8004200:	2b01      	cmp	r3, #1
 8004202:	f04f 0302 	mov.w	r3, #2
 8004206:	d07d      	beq.n	8004304 <HAL_RTC_SetTime+0x124>
 8004208:	2201      	movs	r2, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800420a:	7463      	strb	r3, [r4, #17]
  __HAL_LOCK(hrtc);
 800420c:	7422      	strb	r2, [r4, #16]
 800420e:	7828      	ldrb	r0, [r5, #0]
  if (Format == RTC_FORMAT_BIN)
 8004210:	bb66      	cbnz	r6, 800426c <HAL_RTC_SetTime+0x8c>
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004212:	2817      	cmp	r0, #23
 8004214:	d904      	bls.n	8004220 <HAL_RTC_SetTime+0x40>
 8004216:	f240 21d3 	movw	r1, #723	; 0x2d3
 800421a:	483b      	ldr	r0, [pc, #236]	; (8004308 <HAL_RTC_SetTime+0x128>)
 800421c:	f7fd f8ec 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004220:	786b      	ldrb	r3, [r5, #1]
 8004222:	2b3b      	cmp	r3, #59	; 0x3b
 8004224:	d904      	bls.n	8004230 <HAL_RTC_SetTime+0x50>
 8004226:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800422a:	4837      	ldr	r0, [pc, #220]	; (8004308 <HAL_RTC_SetTime+0x128>)
 800422c:	f7fd f8e4 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004230:	78ab      	ldrb	r3, [r5, #2]
 8004232:	2b3b      	cmp	r3, #59	; 0x3b
 8004234:	d904      	bls.n	8004240 <HAL_RTC_SetTime+0x60>
 8004236:	f240 21d5 	movw	r1, #725	; 0x2d5
 800423a:	4833      	ldr	r0, [pc, #204]	; (8004308 <HAL_RTC_SetTime+0x128>)
 800423c:	f7fd f8dc 	bl	80013f8 <assert_failed>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004240:	203c      	movs	r0, #60	; 0x3c
 8004242:	786b      	ldrb	r3, [r5, #1]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004244:	782e      	ldrb	r6, [r5, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004246:	4358      	muls	r0, r3
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004248:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800424c:	fb03 0606 	mla	r6, r3, r6, r0
                              ((uint32_t)sTime->Seconds));
 8004250:	78a8      	ldrb	r0, [r5, #2]
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004252:	4406      	add	r6, r0
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004254:	4631      	mov	r1, r6
 8004256:	4620      	mov	r0, r4
 8004258:	f7ff ff9a 	bl	8004190 <RTC_WriteTimeCounter>
 800425c:	4605      	mov	r5, r0
 800425e:	b398      	cbz	r0, 80042c8 <HAL_RTC_SetTime+0xe8>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004260:	2304      	movs	r3, #4
 8004262:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8004264:	2300      	movs	r3, #0
 8004266:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8004268:	2501      	movs	r5, #1
 800426a:	e049      	b.n	8004300 <HAL_RTC_SetTime+0x120>
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800426c:	f7ff ff28 	bl	80040c0 <RTC_Bcd2ToByte>
 8004270:	2817      	cmp	r0, #23
 8004272:	d904      	bls.n	800427e <HAL_RTC_SetTime+0x9e>
 8004274:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004278:	4823      	ldr	r0, [pc, #140]	; (8004308 <HAL_RTC_SetTime+0x128>)
 800427a:	f7fd f8bd 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800427e:	7868      	ldrb	r0, [r5, #1]
 8004280:	f7ff ff1e 	bl	80040c0 <RTC_Bcd2ToByte>
 8004284:	283b      	cmp	r0, #59	; 0x3b
 8004286:	d904      	bls.n	8004292 <HAL_RTC_SetTime+0xb2>
 8004288:	f240 21de 	movw	r1, #734	; 0x2de
 800428c:	481e      	ldr	r0, [pc, #120]	; (8004308 <HAL_RTC_SetTime+0x128>)
 800428e:	f7fd f8b3 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004292:	78a8      	ldrb	r0, [r5, #2]
 8004294:	f7ff ff14 	bl	80040c0 <RTC_Bcd2ToByte>
 8004298:	283b      	cmp	r0, #59	; 0x3b
 800429a:	d904      	bls.n	80042a6 <HAL_RTC_SetTime+0xc6>
 800429c:	f240 21df 	movw	r1, #735	; 0x2df
 80042a0:	4819      	ldr	r0, [pc, #100]	; (8004308 <HAL_RTC_SetTime+0x128>)
 80042a2:	f7fd f8a9 	bl	80013f8 <assert_failed>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80042a6:	7828      	ldrb	r0, [r5, #0]
 80042a8:	f7ff ff0a 	bl	80040c0 <RTC_Bcd2ToByte>
 80042ac:	4606      	mov	r6, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80042ae:	7868      	ldrb	r0, [r5, #1]
 80042b0:	f7ff ff06 	bl	80040c0 <RTC_Bcd2ToByte>
 80042b4:	233c      	movs	r3, #60	; 0x3c
 80042b6:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80042b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80042bc:	fb03 0606 	mla	r6, r3, r6, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80042c0:	78a8      	ldrb	r0, [r5, #2]
 80042c2:	f7ff fefd 	bl	80040c0 <RTC_Bcd2ToByte>
 80042c6:	e7c4      	b.n	8004252 <HAL_RTC_SetTime+0x72>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80042c8:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80042ca:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80042cc:	6853      	ldr	r3, [r2, #4]
 80042ce:	f023 0305 	bic.w	r3, r3, #5
 80042d2:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80042d4:	f7ff fee2 	bl	800409c <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d00d      	beq.n	80042f8 <HAL_RTC_SetTime+0x118>
      if (counter_alarm < counter_time)
 80042dc:	4286      	cmp	r6, r0
 80042de:	d90b      	bls.n	80042f8 <HAL_RTC_SetTime+0x118>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80042e0:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80042e4:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80042e8:	4620      	mov	r0, r4
 80042ea:	f7ff ff65 	bl	80041b8 <RTC_WriteAlarmCounter>
 80042ee:	b118      	cbz	r0, 80042f8 <HAL_RTC_SetTime+0x118>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80042f0:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80042f2:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80042f4:	7463      	strb	r3, [r4, #17]
 80042f6:	e7b7      	b.n	8004268 <HAL_RTC_SetTime+0x88>
    hrtc->State = HAL_RTC_STATE_READY;
 80042f8:	2301      	movs	r3, #1
 80042fa:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80042fc:	2300      	movs	r3, #0
 80042fe:	7423      	strb	r3, [r4, #16]
}
 8004300:	4628      	mov	r0, r5
 8004302:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 8004304:	461d      	mov	r5, r3
 8004306:	e7fb      	b.n	8004300 <HAL_RTC_SetTime+0x120>
 8004308:	08005767 	.word	0x08005767

0800430c <HAL_RTC_GetTime>:
{
 800430c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004310:	460d      	mov	r5, r1
 8004312:	4690      	mov	r8, r2
  if ((hrtc == NULL) || (sTime == NULL))
 8004314:	4604      	mov	r4, r0
 8004316:	b910      	cbnz	r0, 800431e <HAL_RTC_GetTime+0x12>
    return HAL_ERROR;
 8004318:	2001      	movs	r0, #1
}
 800431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hrtc == NULL) || (sTime == NULL))
 800431e:	2900      	cmp	r1, #0
 8004320:	d0fa      	beq.n	8004318 <HAL_RTC_GetTime+0xc>
  assert_param(IS_RTC_FORMAT(Format));
 8004322:	2a01      	cmp	r2, #1
 8004324:	d904      	bls.n	8004330 <HAL_RTC_GetTime+0x24>
 8004326:	f240 312d 	movw	r1, #813	; 0x32d
 800432a:	4856      	ldr	r0, [pc, #344]	; (8004484 <HAL_RTC_GetTime+0x178>)
 800432c:	f7fd f864 	bl	80013f8 <assert_failed>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	0758      	lsls	r0, r3, #29
 8004336:	d4ef      	bmi.n	8004318 <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff fe9d 	bl	8004078 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 800433e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004342:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004346:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004348:	fb02 0213 	mls	r2, r2, r3, r0
 800434c:	203c      	movs	r0, #60	; 0x3c
 800434e:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004352:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 8004356:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004358:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800435a:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 800435c:	f240 808d 	bls.w	800447a <HAL_RTC_GetTime+0x16e>
    sTime->Hours = (hours % 24U);
 8004360:	2118      	movs	r1, #24
 8004362:	fbb3 f2f1 	udiv	r2, r3, r1
 8004366:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800436a:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);
 800436c:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800436e:	f7ff fe95 	bl	800409c <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004372:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004374:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004376:	d004      	beq.n	8004382 <HAL_RTC_GetTime+0x76>
 8004378:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 800437a:	bf2c      	ite	cs
 800437c:	f04f 36ff 	movcs.w	r6, #4294967295
      counter_alarm -= counter_time;
 8004380:	1bc6      	subcc	r6, r0, r7
 8004382:	4b41      	ldr	r3, [pc, #260]	; (8004488 <HAL_RTC_GetTime+0x17c>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004384:	4620      	mov	r0, r4
 8004386:	fbb7 f9f3 	udiv	r9, r7, r3
 800438a:	fb03 7919 	mls	r9, r3, r9, r7
 800438e:	4649      	mov	r1, r9
 8004390:	f7ff fefe 	bl	8004190 <RTC_WriteTimeCounter>
 8004394:	2800      	cmp	r0, #0
 8004396:	d1bf      	bne.n	8004318 <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004398:	1c72      	adds	r2, r6, #1
 800439a:	d02e      	beq.n	80043fa <HAL_RTC_GetTime+0xee>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800439c:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043a0:	4620      	mov	r0, r4
 80043a2:	f7ff ff09 	bl	80041b8 <RTC_WriteAlarmCounter>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d1b6      	bne.n	8004318 <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 80043aa:	4b37      	ldr	r3, [pc, #220]	; (8004488 <HAL_RTC_GetTime+0x17c>)
  for (loop = 0U; loop < DayElapsed; loop++)
 80043ac:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 80043ae:	fbb7 f7f3 	udiv	r7, r7, r3
  if ((nYear % 100U) != 0U)
 80043b2:	f04f 0c64 	mov.w	ip, #100	; 0x64
  if ((nYear % 400U) == 0U)
 80043b6:	f44f 7ec8 	mov.w	lr, #400	; 0x190
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80043ba:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 80043be:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 80043c0:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 80043c2:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 80043c4:	42b7      	cmp	r7, r6
 80043c6:	d81a      	bhi.n	80043fe <HAL_RTC_GetTime+0xf2>
  hrtc->DateToUpdate.Month = month;
 80043c8:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 80043ca:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 80043cc:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 80043ce:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 80043d0:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80043d2:	f7ff fe7d 	bl	80040d0 <RTC_WeekDayNum>
 80043d6:	7320      	strb	r0, [r4, #12]
  if (Format != RTC_FORMAT_BIN)
 80043d8:	f1b8 0f00 	cmp.w	r8, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RTC_GetTime+0xea>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80043de:	7828      	ldrb	r0, [r5, #0]
 80043e0:	f7ff fe63 	bl	80040aa <RTC_ByteToBcd2>
 80043e4:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80043e6:	7868      	ldrb	r0, [r5, #1]
 80043e8:	f7ff fe5f 	bl	80040aa <RTC_ByteToBcd2>
 80043ec:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80043ee:	78a8      	ldrb	r0, [r5, #2]
 80043f0:	f7ff fe5b 	bl	80040aa <RTC_ByteToBcd2>
 80043f4:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 80043f6:	2000      	movs	r0, #0
 80043f8:	e78f      	b.n	800431a <HAL_RTC_GetTime+0xe>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043fa:	4631      	mov	r1, r6
 80043fc:	e7d0      	b.n	80043a0 <HAL_RTC_GetTime+0x94>
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80043fe:	1e4b      	subs	r3, r1, #1
 8004400:	2b09      	cmp	r3, #9
 8004402:	d80e      	bhi.n	8004422 <HAL_RTC_GetTime+0x116>
 8004404:	fa29 f303 	lsr.w	r3, r9, r3
 8004408:	07db      	lsls	r3, r3, #31
 800440a:	d438      	bmi.n	800447e <HAL_RTC_GetTime+0x172>
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800440c:	f021 0302 	bic.w	r3, r1, #2
 8004410:	2b04      	cmp	r3, #4
 8004412:	d001      	beq.n	8004418 <HAL_RTC_GetTime+0x10c>
 8004414:	2b09      	cmp	r3, #9
 8004416:	d10d      	bne.n	8004434 <HAL_RTC_GetTime+0x128>
      if (day < 30U)
 8004418:	2a1d      	cmp	r2, #29
      if (day < 31U)
 800441a:	d90f      	bls.n	800443c <HAL_RTC_GetTime+0x130>
        month++;
 800441c:	3101      	adds	r1, #1
        day = 1U;
 800441e:	2201      	movs	r2, #1
 8004420:	e006      	b.n	8004430 <HAL_RTC_GetTime+0x124>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004422:	290c      	cmp	r1, #12
 8004424:	d1f2      	bne.n	800440c <HAL_RTC_GetTime+0x100>
      if (day < 31U)
 8004426:	2a1e      	cmp	r2, #30
 8004428:	d908      	bls.n	800443c <HAL_RTC_GetTime+0x130>
          day = 1U;
 800442a:	2201      	movs	r2, #1
          month = 1U;
 800442c:	4611      	mov	r1, r2
          year++;
 800442e:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8004430:	3601      	adds	r6, #1
 8004432:	e7c7      	b.n	80043c4 <HAL_RTC_GetTime+0xb8>
    else if (month == 2U)
 8004434:	2902      	cmp	r1, #2
 8004436:	d1fb      	bne.n	8004430 <HAL_RTC_GetTime+0x124>
      if (day < 28U)
 8004438:	2a1b      	cmp	r2, #27
 800443a:	d801      	bhi.n	8004440 <HAL_RTC_GetTime+0x134>
        day++;
 800443c:	3201      	adds	r2, #1
 800443e:	e7f7      	b.n	8004430 <HAL_RTC_GetTime+0x124>
      else if (day == 28U)
 8004440:	2a1c      	cmp	r2, #28
 8004442:	d113      	bne.n	800446c <HAL_RTC_GetTime+0x160>
        if (RTC_IsLeapYear(year))
 8004444:	b282      	uxth	r2, r0
  if ((nYear % 4U) != 0U)
 8004446:	0793      	lsls	r3, r2, #30
 8004448:	d112      	bne.n	8004470 <HAL_RTC_GetTime+0x164>
  if ((nYear % 100U) != 0U)
 800444a:	fbb2 f3fc 	udiv	r3, r2, ip
 800444e:	fb0c 2313 	mls	r3, ip, r3, r2
 8004452:	b29b      	uxth	r3, r3
 8004454:	b97b      	cbnz	r3, 8004476 <HAL_RTC_GetTime+0x16a>
  if ((nYear % 400U) == 0U)
 8004456:	fbb2 f3fe 	udiv	r3, r2, lr
 800445a:	fb0e 2313 	mls	r3, lr, r3, r2
 800445e:	b29b      	uxth	r3, r3
          day = 1U;
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf0e      	itee	eq
 8004464:	221d      	moveq	r2, #29
 8004466:	2201      	movne	r2, #1
 8004468:	2103      	movne	r1, #3
 800446a:	e7e1      	b.n	8004430 <HAL_RTC_GetTime+0x124>
      else if (day == 29U)
 800446c:	2a1d      	cmp	r2, #29
 800446e:	d1df      	bne.n	8004430 <HAL_RTC_GetTime+0x124>
        day = 1U;
 8004470:	2201      	movs	r2, #1
        month++;
 8004472:	2103      	movs	r1, #3
 8004474:	e7dc      	b.n	8004430 <HAL_RTC_GetTime+0x124>
          day++;
 8004476:	221d      	movs	r2, #29
 8004478:	e7da      	b.n	8004430 <HAL_RTC_GetTime+0x124>
    sTime->Hours = hours;
 800447a:	702b      	strb	r3, [r5, #0]
 800447c:	e7ac      	b.n	80043d8 <HAL_RTC_GetTime+0xcc>
      if (day < 31U)
 800447e:	2a1e      	cmp	r2, #30
 8004480:	e7cb      	b.n	800441a <HAL_RTC_GetTime+0x10e>
 8004482:	bf00      	nop
 8004484:	08005767 	.word	0x08005767
 8004488:	00015180 	.word	0x00015180

0800448c <HAL_RTC_SetDate>:
{
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	460d      	mov	r5, r1
 8004490:	4616      	mov	r6, r2
  if ((hrtc == NULL) || (sDate == NULL))
 8004492:	4604      	mov	r4, r0
 8004494:	2800      	cmp	r0, #0
 8004496:	d04f      	beq.n	8004538 <HAL_RTC_SetDate+0xac>
 8004498:	2900      	cmp	r1, #0
 800449a:	d04d      	beq.n	8004538 <HAL_RTC_SetDate+0xac>
  assert_param(IS_RTC_FORMAT(Format));
 800449c:	2a01      	cmp	r2, #1
 800449e:	d904      	bls.n	80044aa <HAL_RTC_SetDate+0x1e>
 80044a0:	f44f 7167 	mov.w	r1, #924	; 0x39c
 80044a4:	4848      	ldr	r0, [pc, #288]	; (80045c8 <HAL_RTC_SetDate+0x13c>)
 80044a6:	f7fc ffa7 	bl	80013f8 <assert_failed>
  __HAL_LOCK(hrtc);
 80044aa:	7c23      	ldrb	r3, [r4, #16]
 80044ac:	2002      	movs	r0, #2
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	f000 8089 	beq.w	80045c6 <HAL_RTC_SetDate+0x13a>
 80044b4:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044b6:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 80044b8:	7423      	strb	r3, [r4, #16]
 80044ba:	78e8      	ldrb	r0, [r5, #3]
  if (Format == RTC_FORMAT_BIN)
 80044bc:	2e00      	cmp	r6, #0
 80044be:	d13d      	bne.n	800453c <HAL_RTC_SetDate+0xb0>
    assert_param(IS_RTC_YEAR(sDate->Year));
 80044c0:	2863      	cmp	r0, #99	; 0x63
 80044c2:	d904      	bls.n	80044ce <HAL_RTC_SetDate+0x42>
 80044c4:	f240 31a5 	movw	r1, #933	; 0x3a5
 80044c8:	483f      	ldr	r0, [pc, #252]	; (80045c8 <HAL_RTC_SetDate+0x13c>)
 80044ca:	f7fc ff95 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80044ce:	786b      	ldrb	r3, [r5, #1]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	2b0b      	cmp	r3, #11
 80044d4:	d904      	bls.n	80044e0 <HAL_RTC_SetDate+0x54>
 80044d6:	f240 31a6 	movw	r1, #934	; 0x3a6
 80044da:	483b      	ldr	r0, [pc, #236]	; (80045c8 <HAL_RTC_SetDate+0x13c>)
 80044dc:	f7fc ff8c 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80044e0:	78ab      	ldrb	r3, [r5, #2]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	2b1e      	cmp	r3, #30
 80044e6:	d904      	bls.n	80044f2 <HAL_RTC_SetDate+0x66>
 80044e8:	f240 31a7 	movw	r1, #935	; 0x3a7
 80044ec:	4836      	ldr	r0, [pc, #216]	; (80045c8 <HAL_RTC_SetDate+0x13c>)
 80044ee:	f7fc ff83 	bl	80013f8 <assert_failed>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80044f2:	78eb      	ldrb	r3, [r5, #3]
 80044f4:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80044f6:	786b      	ldrb	r3, [r5, #1]
 80044f8:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80044fa:	78ab      	ldrb	r3, [r5, #2]
 80044fc:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80044fe:	7ba2      	ldrb	r2, [r4, #14]
 8004500:	7b61      	ldrb	r1, [r4, #13]
 8004502:	7be0      	ldrb	r0, [r4, #15]
 8004504:	f7ff fde4 	bl	80040d0 <RTC_WeekDayNum>
 8004508:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800450a:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 800450c:	4620      	mov	r0, r4
 800450e:	f7ff fdb3 	bl	8004078 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <HAL_RTC_SetDate+0x140>)
 8004514:	4298      	cmp	r0, r3
 8004516:	d952      	bls.n	80045be <HAL_RTC_SetDate+0x132>
 8004518:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 800451c:	fbb0 f5f3 	udiv	r5, r0, r3
 8004520:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f7ff fe32 	bl	8004190 <RTC_WriteTimeCounter>
 800452c:	4606      	mov	r6, r0
 800452e:	b398      	cbz	r0, 8004598 <HAL_RTC_SetDate+0x10c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004530:	2304      	movs	r3, #4
 8004532:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8004534:	2300      	movs	r3, #0
 8004536:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8004538:	2001      	movs	r0, #1
 800453a:	e044      	b.n	80045c6 <HAL_RTC_SetDate+0x13a>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800453c:	f7ff fdc0 	bl	80040c0 <RTC_Bcd2ToByte>
 8004540:	2863      	cmp	r0, #99	; 0x63
 8004542:	d904      	bls.n	800454e <HAL_RTC_SetDate+0xc2>
 8004544:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004548:	481f      	ldr	r0, [pc, #124]	; (80045c8 <HAL_RTC_SetDate+0x13c>)
 800454a:	f7fc ff55 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 800454e:	7868      	ldrb	r0, [r5, #1]
 8004550:	f7ff fdb6 	bl	80040c0 <RTC_Bcd2ToByte>
 8004554:	3801      	subs	r0, #1
 8004556:	b2c0      	uxtb	r0, r0
 8004558:	280b      	cmp	r0, #11
 800455a:	d904      	bls.n	8004566 <HAL_RTC_SetDate+0xda>
 800455c:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004560:	4819      	ldr	r0, [pc, #100]	; (80045c8 <HAL_RTC_SetDate+0x13c>)
 8004562:	f7fc ff49 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004566:	78a8      	ldrb	r0, [r5, #2]
 8004568:	f7ff fdaa 	bl	80040c0 <RTC_Bcd2ToByte>
 800456c:	3801      	subs	r0, #1
 800456e:	b2c0      	uxtb	r0, r0
 8004570:	281e      	cmp	r0, #30
 8004572:	d904      	bls.n	800457e <HAL_RTC_SetDate+0xf2>
 8004574:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004578:	4813      	ldr	r0, [pc, #76]	; (80045c8 <HAL_RTC_SetDate+0x13c>)
 800457a:	f7fc ff3d 	bl	80013f8 <assert_failed>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800457e:	78e8      	ldrb	r0, [r5, #3]
 8004580:	f7ff fd9e 	bl	80040c0 <RTC_Bcd2ToByte>
 8004584:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004586:	7868      	ldrb	r0, [r5, #1]
 8004588:	f7ff fd9a 	bl	80040c0 <RTC_Bcd2ToByte>
 800458c:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800458e:	78a8      	ldrb	r0, [r5, #2]
 8004590:	f7ff fd96 	bl	80040c0 <RTC_Bcd2ToByte>
 8004594:	73a0      	strb	r0, [r4, #14]
 8004596:	e7b2      	b.n	80044fe <HAL_RTC_SetDate+0x72>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004598:	4620      	mov	r0, r4
 800459a:	f7ff fd7f 	bl	800409c <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800459e:	1c43      	adds	r3, r0, #1
 80045a0:	d00d      	beq.n	80045be <HAL_RTC_SetDate+0x132>
      if (counter_alarm < counter_time)
 80045a2:	4285      	cmp	r5, r0
 80045a4:	d90b      	bls.n	80045be <HAL_RTC_SetDate+0x132>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80045a6:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80045aa:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7ff fe02 	bl	80041b8 <RTC_WriteAlarmCounter>
 80045b4:	b118      	cbz	r0, 80045be <HAL_RTC_SetDate+0x132>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80045b6:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80045b8:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80045ba:	7463      	strb	r3, [r4, #17]
 80045bc:	e7bc      	b.n	8004538 <HAL_RTC_SetDate+0xac>
  hrtc->State = HAL_RTC_STATE_READY ;
 80045be:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 80045c0:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 80045c2:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 80045c4:	7420      	strb	r0, [r4, #16]
}
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	08005767 	.word	0x08005767
 80045cc:	00015f8f 	.word	0x00015f8f

080045d0 <HAL_RTC_GetDate>:
  RTC_TimeTypeDef stime = {0U};
 80045d0:	2300      	movs	r3, #0
{
 80045d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045d4:	460c      	mov	r4, r1
 80045d6:	4617      	mov	r7, r2
  RTC_TimeTypeDef stime = {0U};
 80045d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80045dc:	f88d 3006 	strb.w	r3, [sp, #6]
  if ((hrtc == NULL) || (sDate == NULL))
 80045e0:	4605      	mov	r5, r0
 80045e2:	b918      	cbnz	r0, 80045ec <HAL_RTC_GetDate+0x1c>
    return HAL_ERROR;
 80045e4:	2201      	movs	r2, #1
}
 80045e6:	4610      	mov	r0, r2
 80045e8:	b003      	add	sp, #12
 80045ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hrtc == NULL) || (sDate == NULL))
 80045ec:	2900      	cmp	r1, #0
 80045ee:	d0f9      	beq.n	80045e4 <HAL_RTC_GetDate+0x14>
  assert_param(IS_RTC_FORMAT(Format));
 80045f0:	2a01      	cmp	r2, #1
 80045f2:	d904      	bls.n	80045fe <HAL_RTC_GetDate+0x2e>
 80045f4:	f240 410e 	movw	r1, #1038	; 0x40e
 80045f8:	4810      	ldr	r0, [pc, #64]	; (800463c <HAL_RTC_GetDate+0x6c>)
 80045fa:	f7fc fefd 	bl	80013f8 <assert_failed>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80045fe:	2200      	movs	r2, #0
 8004600:	a901      	add	r1, sp, #4
 8004602:	4628      	mov	r0, r5
 8004604:	f7ff fe82 	bl	800430c <HAL_RTC_GetTime>
 8004608:	4602      	mov	r2, r0
 800460a:	2800      	cmp	r0, #0
 800460c:	d1ea      	bne.n	80045e4 <HAL_RTC_GetDate+0x14>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800460e:	7b2b      	ldrb	r3, [r5, #12]
 8004610:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004612:	7be8      	ldrb	r0, [r5, #15]
 8004614:	70e0      	strb	r0, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004616:	7b6e      	ldrb	r6, [r5, #13]
 8004618:	7066      	strb	r6, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800461a:	7ba9      	ldrb	r1, [r5, #14]
 800461c:	70a1      	strb	r1, [r4, #2]
  if (Format != RTC_FORMAT_BIN)
 800461e:	2f00      	cmp	r7, #0
 8004620:	d0e1      	beq.n	80045e6 <HAL_RTC_GetDate+0x16>
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004622:	f7ff fd42 	bl	80040aa <RTC_ByteToBcd2>
 8004626:	70e0      	strb	r0, [r4, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004628:	4630      	mov	r0, r6
 800462a:	f7ff fd3e 	bl	80040aa <RTC_ByteToBcd2>
 800462e:	7060      	strb	r0, [r4, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004630:	4608      	mov	r0, r1
 8004632:	f7ff fd3a 	bl	80040aa <RTC_ByteToBcd2>
 8004636:	70a0      	strb	r0, [r4, #2]
 8004638:	e7d5      	b.n	80045e6 <HAL_RTC_GetDate+0x16>
 800463a:	bf00      	nop
 800463c:	08005767 	.word	0x08005767

08004640 <HAL_RTC_SetAlarm_IT>:
  RTC_TimeTypeDef stime = {0U};
 8004640:	2300      	movs	r3, #0
{
 8004642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004644:	460c      	mov	r4, r1
 8004646:	4617      	mov	r7, r2
  RTC_TimeTypeDef stime = {0U};
 8004648:	f8ad 3004 	strh.w	r3, [sp, #4]
 800464c:	f88d 3006 	strb.w	r3, [sp, #6]
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004650:	4605      	mov	r5, r0
 8004652:	b910      	cbnz	r0, 800465a <HAL_RTC_SetAlarm_IT+0x1a>
    return HAL_ERROR;
 8004654:	2001      	movs	r0, #1
}
 8004656:	b003      	add	sp, #12
 8004658:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hrtc == NULL) || (sAlarm == NULL))
 800465a:	2900      	cmp	r1, #0
 800465c:	d0fa      	beq.n	8004654 <HAL_RTC_SetAlarm_IT+0x14>
  assert_param(IS_RTC_FORMAT(Format));
 800465e:	2a01      	cmp	r2, #1
 8004660:	d904      	bls.n	800466c <HAL_RTC_SetAlarm_IT+0x2c>
 8004662:	f240 41ac 	movw	r1, #1196	; 0x4ac
 8004666:	484d      	ldr	r0, [pc, #308]	; (800479c <HAL_RTC_SetAlarm_IT+0x15c>)
 8004668:	f7fc fec6 	bl	80013f8 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 800466c:	6863      	ldr	r3, [r4, #4]
 800466e:	b123      	cbz	r3, 800467a <HAL_RTC_SetAlarm_IT+0x3a>
 8004670:	f240 41ad 	movw	r1, #1197	; 0x4ad
 8004674:	4849      	ldr	r0, [pc, #292]	; (800479c <HAL_RTC_SetAlarm_IT+0x15c>)
 8004676:	f7fc febf 	bl	80013f8 <assert_failed>
  __HAL_LOCK(hrtc);
 800467a:	7c2b      	ldrb	r3, [r5, #16]
 800467c:	2002      	movs	r0, #2
 800467e:	2b01      	cmp	r3, #1
 8004680:	d0e9      	beq.n	8004656 <HAL_RTC_SetAlarm_IT+0x16>
 8004682:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004684:	7468      	strb	r0, [r5, #17]
  __HAL_LOCK(hrtc);
 8004686:	742b      	strb	r3, [r5, #16]
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004688:	2200      	movs	r2, #0
 800468a:	a901      	add	r1, sp, #4
 800468c:	4628      	mov	r0, r5
 800468e:	f7ff fe3d 	bl	800430c <HAL_RTC_GetTime>
 8004692:	2800      	cmp	r0, #0
 8004694:	d1de      	bne.n	8004654 <HAL_RTC_SetAlarm_IT+0x14>
                            ((uint32_t)stime.Minutes * 60U) + \
 8004696:	233c      	movs	r3, #60	; 0x3c
 8004698:	f89d 2005 	ldrb.w	r2, [sp, #5]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800469c:	f89d 6004 	ldrb.w	r6, [sp, #4]
                            ((uint32_t)stime.Minutes * 60U) + \
 80046a0:	4353      	muls	r3, r2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80046a2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80046a6:	fb02 3606 	mla	r6, r2, r6, r3
                            ((uint32_t)stime.Seconds));
 80046aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80046ae:	7820      	ldrb	r0, [r4, #0]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80046b0:	441e      	add	r6, r3
  if (Format == RTC_FORMAT_BIN)
 80046b2:	bb7f      	cbnz	r7, 8004714 <HAL_RTC_SetAlarm_IT+0xd4>
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80046b4:	2817      	cmp	r0, #23
 80046b6:	d904      	bls.n	80046c2 <HAL_RTC_SetAlarm_IT+0x82>
 80046b8:	f240 41c1 	movw	r1, #1217	; 0x4c1
 80046bc:	4837      	ldr	r0, [pc, #220]	; (800479c <HAL_RTC_SetAlarm_IT+0x15c>)
 80046be:	f7fc fe9b 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 80046c2:	7863      	ldrb	r3, [r4, #1]
 80046c4:	2b3b      	cmp	r3, #59	; 0x3b
 80046c6:	d904      	bls.n	80046d2 <HAL_RTC_SetAlarm_IT+0x92>
 80046c8:	f240 41c2 	movw	r1, #1218	; 0x4c2
 80046cc:	4833      	ldr	r0, [pc, #204]	; (800479c <HAL_RTC_SetAlarm_IT+0x15c>)
 80046ce:	f7fc fe93 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80046d2:	78a3      	ldrb	r3, [r4, #2]
 80046d4:	2b3b      	cmp	r3, #59	; 0x3b
 80046d6:	d904      	bls.n	80046e2 <HAL_RTC_SetAlarm_IT+0xa2>
 80046d8:	f240 41c3 	movw	r1, #1219	; 0x4c3
 80046dc:	482f      	ldr	r0, [pc, #188]	; (800479c <HAL_RTC_SetAlarm_IT+0x15c>)
 80046de:	f7fc fe8b 	bl	80013f8 <assert_failed>
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80046e2:	203c      	movs	r0, #60	; 0x3c
 80046e4:	7863      	ldrb	r3, [r4, #1]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80046e6:	7821      	ldrb	r1, [r4, #0]
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80046e8:	4358      	muls	r0, r3
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80046ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80046ee:	fb03 0101 	mla	r1, r3, r1, r0
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80046f2:	78a0      	ldrb	r0, [r4, #2]
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80046f4:	4401      	add	r1, r0
  if (counter_alarm < counter_time)
 80046f6:	42b1      	cmp	r1, r6
    counter_alarm += (uint32_t)(24U * 3600U);
 80046f8:	bf3c      	itt	cc
 80046fa:	f501 31a8 	addcc.w	r1, r1, #86016	; 0x15000
 80046fe:	f501 71c0 	addcc.w	r1, r1, #384	; 0x180
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004702:	4628      	mov	r0, r5
 8004704:	f7ff fd58 	bl	80041b8 <RTC_WriteAlarmCounter>
 8004708:	b390      	cbz	r0, 8004770 <HAL_RTC_SetAlarm_IT+0x130>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800470a:	2304      	movs	r3, #4
 800470c:	746b      	strb	r3, [r5, #17]
    __HAL_UNLOCK(hrtc);
 800470e:	2300      	movs	r3, #0
 8004710:	742b      	strb	r3, [r5, #16]
 8004712:	e79f      	b.n	8004654 <HAL_RTC_SetAlarm_IT+0x14>
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8004714:	f7ff fcd4 	bl	80040c0 <RTC_Bcd2ToByte>
 8004718:	2817      	cmp	r0, #23
 800471a:	d904      	bls.n	8004726 <HAL_RTC_SetAlarm_IT+0xe6>
 800471c:	f240 41cb 	movw	r1, #1227	; 0x4cb
 8004720:	481e      	ldr	r0, [pc, #120]	; (800479c <HAL_RTC_SetAlarm_IT+0x15c>)
 8004722:	f7fc fe69 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8004726:	7860      	ldrb	r0, [r4, #1]
 8004728:	f7ff fcca 	bl	80040c0 <RTC_Bcd2ToByte>
 800472c:	283b      	cmp	r0, #59	; 0x3b
 800472e:	d904      	bls.n	800473a <HAL_RTC_SetAlarm_IT+0xfa>
 8004730:	f240 41cc 	movw	r1, #1228	; 0x4cc
 8004734:	4819      	ldr	r0, [pc, #100]	; (800479c <HAL_RTC_SetAlarm_IT+0x15c>)
 8004736:	f7fc fe5f 	bl	80013f8 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800473a:	78a0      	ldrb	r0, [r4, #2]
 800473c:	f7ff fcc0 	bl	80040c0 <RTC_Bcd2ToByte>
 8004740:	283b      	cmp	r0, #59	; 0x3b
 8004742:	d904      	bls.n	800474e <HAL_RTC_SetAlarm_IT+0x10e>
 8004744:	f240 41cd 	movw	r1, #1229	; 0x4cd
 8004748:	4814      	ldr	r0, [pc, #80]	; (800479c <HAL_RTC_SetAlarm_IT+0x15c>)
 800474a:	f7fc fe55 	bl	80013f8 <assert_failed>
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800474e:	7820      	ldrb	r0, [r4, #0]
 8004750:	f7ff fcb6 	bl	80040c0 <RTC_Bcd2ToByte>
 8004754:	4601      	mov	r1, r0
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004756:	7860      	ldrb	r0, [r4, #1]
 8004758:	f7ff fcb2 	bl	80040c0 <RTC_Bcd2ToByte>
 800475c:	233c      	movs	r3, #60	; 0x3c
 800475e:	4358      	muls	r0, r3
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004760:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004764:	fb03 0101 	mla	r1, r3, r1, r0
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004768:	78a0      	ldrb	r0, [r4, #2]
 800476a:	f7ff fca9 	bl	80040c0 <RTC_Bcd2ToByte>
 800476e:	e7c1      	b.n	80046f4 <HAL_RTC_SetAlarm_IT+0xb4>
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004770:	f06f 0202 	mvn.w	r2, #2
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	605a      	str	r2, [r3, #4]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f042 0202 	orr.w	r2, r2, #2
 800477e:	601a      	str	r2, [r3, #0]
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <HAL_RTC_SetAlarm_IT+0x160>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004788:	601a      	str	r2, [r3, #0]
    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004790:	609a      	str	r2, [r3, #8]
    hrtc->State = HAL_RTC_STATE_READY;
 8004792:	2301      	movs	r3, #1
    __HAL_UNLOCK(hrtc);
 8004794:	7428      	strb	r0, [r5, #16]
    hrtc->State = HAL_RTC_STATE_READY;
 8004796:	746b      	strb	r3, [r5, #17]
    return HAL_OK;
 8004798:	e75d      	b.n	8004656 <HAL_RTC_SetAlarm_IT+0x16>
 800479a:	bf00      	nop
 800479c:	08005767 	.word	0x08005767
 80047a0:	40010400 	.word	0x40010400

080047a4 <HAL_RTC_AlarmAEventCallback>:
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80047a8:	6803      	ldr	r3, [r0, #0]
{
 80047aa:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80047ac:	681a      	ldr	r2, [r3, #0]
{
 80047ae:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80047b0:	0792      	lsls	r2, r2, #30
 80047b2:	d508      	bpl.n	80047c6 <HAL_RTC_AlarmIRQHandler+0x1e>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	079b      	lsls	r3, r3, #30
 80047b8:	d505      	bpl.n	80047c6 <HAL_RTC_AlarmIRQHandler+0x1e>
      HAL_RTC_AlarmAEventCallback(hrtc);
 80047ba:	f7ff fff3 	bl	80047a4 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80047be:	f06f 0202 	mvn.w	r2, #2
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	605a      	str	r2, [r3, #4]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80047c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047ca:	4b02      	ldr	r3, [pc, #8]	; (80047d4 <HAL_RTC_AlarmIRQHandler+0x2c>)
 80047cc:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 80047ce:	2301      	movs	r3, #1
 80047d0:	7463      	strb	r3, [r4, #17]
}
 80047d2:	bd10      	pop	{r4, pc}
 80047d4:	40010400 	.word	0x40010400

080047d8 <HAL_RTC_WaitForSynchro>:
{
 80047d8:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80047da:	4604      	mov	r4, r0
 80047dc:	b1a8      	cbz	r0, 800480a <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80047de:	6802      	ldr	r2, [r0, #0]
 80047e0:	6853      	ldr	r3, [r2, #4]
 80047e2:	f023 0308 	bic.w	r3, r3, #8
 80047e6:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80047e8:	f7fd f8bc 	bl	8001964 <HAL_GetTick>
 80047ec:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	071b      	lsls	r3, r3, #28
 80047f4:	d501      	bpl.n	80047fa <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80047f6:	2000      	movs	r0, #0
}
 80047f8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80047fa:	f7fd f8b3 	bl	8001964 <HAL_GetTick>
 80047fe:	1b40      	subs	r0, r0, r5
 8004800:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004804:	d9f3      	bls.n	80047ee <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8004806:	2003      	movs	r0, #3
 8004808:	e7f6      	b.n	80047f8 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 800480a:	2001      	movs	r0, #1
 800480c:	e7f4      	b.n	80047f8 <HAL_RTC_WaitForSynchro+0x20>
	...

08004810 <HAL_RTC_Init>:
{
 8004810:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8004812:	4604      	mov	r4, r0
 8004814:	b388      	cbz	r0, 800487a <HAL_RTC_Init+0x6a>
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004816:	6802      	ldr	r2, [r0, #0]
 8004818:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <HAL_RTC_Init+0xe0>)
 800481a:	429a      	cmp	r2, r3
 800481c:	d004      	beq.n	8004828 <HAL_RTC_Init+0x18>
 800481e:	f240 111d 	movw	r1, #285	; 0x11d
 8004822:	4834      	ldr	r0, [pc, #208]	; (80048f4 <HAL_RTC_Init+0xe4>)
 8004824:	f7fc fde8 	bl	80013f8 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004828:	68a3      	ldr	r3, [r4, #8]
 800482a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 800482e:	d009      	beq.n	8004844 <HAL_RTC_Init+0x34>
 8004830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004838:	d004      	beq.n	8004844 <HAL_RTC_Init+0x34>
 800483a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800483e:	482d      	ldr	r0, [pc, #180]	; (80048f4 <HAL_RTC_Init+0xe4>)
 8004840:	f7fc fdda 	bl	80013f8 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004844:	6863      	ldr	r3, [r4, #4]
 8004846:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <HAL_RTC_Init+0xe8>)
 8004848:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800484c:	4293      	cmp	r3, r2
 800484e:	d804      	bhi.n	800485a <HAL_RTC_Init+0x4a>
 8004850:	f240 111f 	movw	r1, #287	; 0x11f
 8004854:	4827      	ldr	r0, [pc, #156]	; (80048f4 <HAL_RTC_Init+0xe4>)
 8004856:	f7fc fdcf 	bl	80013f8 <assert_failed>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800485a:	7c63      	ldrb	r3, [r4, #17]
 800485c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004860:	b91b      	cbnz	r3, 800486a <HAL_RTC_Init+0x5a>
    hrtc->Lock = HAL_UNLOCKED;
 8004862:	7422      	strb	r2, [r4, #16]
    HAL_RTC_MspInit(hrtc);
 8004864:	4620      	mov	r0, r4
 8004866:	f7fc feab 	bl	80015c0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800486a:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800486c:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 800486e:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004870:	f7ff ffb2 	bl	80047d8 <HAL_RTC_WaitForSynchro>
 8004874:	b118      	cbz	r0, 800487e <HAL_RTC_Init+0x6e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004876:	2304      	movs	r3, #4
 8004878:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 800487a:	2001      	movs	r0, #1
 800487c:	e037      	b.n	80048ee <HAL_RTC_Init+0xde>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800487e:	4620      	mov	r0, r4
 8004880:	f7ff fc57 	bl	8004132 <RTC_EnterInitMode>
 8004884:	2800      	cmp	r0, #0
 8004886:	d1f6      	bne.n	8004876 <HAL_RTC_Init+0x66>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004888:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800488a:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800488c:	6853      	ldr	r3, [r2, #4]
 800488e:	f023 0307 	bic.w	r3, r3, #7
 8004892:	6053      	str	r3, [r2, #4]
 8004894:	4a19      	ldr	r2, [pc, #100]	; (80048fc <HAL_RTC_Init+0xec>)
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004896:	b118      	cbz	r0, 80048a0 <HAL_RTC_Init+0x90>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004898:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800489a:	f021 0101 	bic.w	r1, r1, #1
 800489e:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80048a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80048a2:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80048a6:	4303      	orrs	r3, r0
 80048a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80048aa:	6860      	ldr	r0, [r4, #4]
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d105      	bne.n	80048bc <HAL_RTC_Init+0xac>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80048b0:	2001      	movs	r0, #1
 80048b2:	f7ff fb63 	bl	8003f7c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d0dd      	beq.n	8004876 <HAL_RTC_Init+0x66>
        prescaler = prescaler - 1U;
 80048ba:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80048bc:	6822      	ldr	r2, [r4, #0]
 80048be:	6893      	ldr	r3, [r2, #8]
 80048c0:	f023 030f 	bic.w	r3, r3, #15
 80048c4:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80048c8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80048ca:	68d3      	ldr	r3, [r2, #12]
 80048cc:	b280      	uxth	r0, r0
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	4318      	orrs	r0, r3
 80048d4:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80048d6:	4620      	mov	r0, r4
 80048d8:	f7ff fc42 	bl	8004160 <RTC_ExitInitMode>
 80048dc:	2301      	movs	r3, #1
 80048de:	b110      	cbz	r0, 80048e6 <HAL_RTC_Init+0xd6>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048e0:	2204      	movs	r2, #4
 80048e2:	7462      	strb	r2, [r4, #17]
 80048e4:	e7c9      	b.n	800487a <HAL_RTC_Init+0x6a>
    hrtc->DateToUpdate.Year = 0x00U;
 80048e6:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80048e8:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80048ea:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80048ec:	7463      	strb	r3, [r4, #17]
}
 80048ee:	bd10      	pop	{r4, pc}
 80048f0:	40002800 	.word	0x40002800
 80048f4:	08005767 	.word	0x08005767
 80048f8:	ffeffffe 	.word	0xffeffffe
 80048fc:	40006c00 	.word	0x40006c00

08004900 <HAL_RTCEx_RTCEventErrorCallback>:
 8004900:	4770      	bx	lr

08004902 <HAL_RTCEx_RTCIRQHandler>:
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004902:	6803      	ldr	r3, [r0, #0]
{
 8004904:	b510      	push	{r4, lr}
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004906:	681a      	ldr	r2, [r3, #0]
{
 8004908:	4604      	mov	r4, r0
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800490a:	07d1      	lsls	r1, r2, #31
 800490c:	d511      	bpl.n	8004932 <HAL_RTCEx_RTCIRQHandler+0x30>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	07d2      	lsls	r2, r2, #31
 8004912:	d50e      	bpl.n	8004932 <HAL_RTCEx_RTCIRQHandler+0x30>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	075b      	lsls	r3, r3, #29
 8004918:	d50c      	bpl.n	8004934 <HAL_RTCEx_RTCIRQHandler+0x32>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800491a:	f7ff fff1 	bl	8004900 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800491e:	f06f 0204 	mvn.w	r2, #4
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004926:	2304      	movs	r3, #4
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004928:	f06f 0201 	mvn.w	r2, #1
        hrtc->State = HAL_RTC_STATE_READY;
 800492c:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004932:	bd10      	pop	{r4, pc}
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004934:	f7fc fcaa 	bl	800128c <HAL_RTCEx_RTCEventCallback>
        hrtc->State = HAL_RTC_STATE_READY;
 8004938:	2301      	movs	r3, #1
 800493a:	e7f5      	b.n	8004928 <HAL_RTCEx_RTCIRQHandler+0x26>

0800493c <__errno>:
 800493c:	4b01      	ldr	r3, [pc, #4]	; (8004944 <__errno+0x8>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000068 	.word	0x20000068

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	2500      	movs	r5, #0
 800494c:	4e0c      	ldr	r6, [pc, #48]	; (8004980 <__libc_init_array+0x38>)
 800494e:	4c0d      	ldr	r4, [pc, #52]	; (8004984 <__libc_init_array+0x3c>)
 8004950:	1ba4      	subs	r4, r4, r6
 8004952:	10a4      	asrs	r4, r4, #2
 8004954:	42a5      	cmp	r5, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	f000 fe04 	bl	8005564 <_init>
 800495c:	2500      	movs	r5, #0
 800495e:	4e0a      	ldr	r6, [pc, #40]	; (8004988 <__libc_init_array+0x40>)
 8004960:	4c0a      	ldr	r4, [pc, #40]	; (800498c <__libc_init_array+0x44>)
 8004962:	1ba4      	subs	r4, r4, r6
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	42a5      	cmp	r5, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004970:	4798      	blx	r3
 8004972:	3501      	adds	r5, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800497a:	4798      	blx	r3
 800497c:	3501      	adds	r5, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	0800592c 	.word	0x0800592c
 8004984:	0800592c 	.word	0x0800592c
 8004988:	0800592c 	.word	0x0800592c
 800498c:	08005930 	.word	0x08005930

08004990 <memset>:
 8004990:	4603      	mov	r3, r0
 8004992:	4402      	add	r2, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <siscanf>:
 80049a0:	b40e      	push	{r1, r2, r3}
 80049a2:	f44f 7201 	mov.w	r2, #516	; 0x204
 80049a6:	b530      	push	{r4, r5, lr}
 80049a8:	b09c      	sub	sp, #112	; 0x70
 80049aa:	ac1f      	add	r4, sp, #124	; 0x7c
 80049ac:	f854 5b04 	ldr.w	r5, [r4], #4
 80049b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80049b4:	9002      	str	r0, [sp, #8]
 80049b6:	9006      	str	r0, [sp, #24]
 80049b8:	f7fb fbca 	bl	8000150 <strlen>
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <siscanf+0x4c>)
 80049be:	9003      	str	r0, [sp, #12]
 80049c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049c2:	2300      	movs	r3, #0
 80049c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80049c6:	9314      	str	r3, [sp, #80]	; 0x50
 80049c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049cc:	9007      	str	r0, [sp, #28]
 80049ce:	4808      	ldr	r0, [pc, #32]	; (80049f0 <siscanf+0x50>)
 80049d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80049d4:	462a      	mov	r2, r5
 80049d6:	4623      	mov	r3, r4
 80049d8:	a902      	add	r1, sp, #8
 80049da:	6800      	ldr	r0, [r0, #0]
 80049dc:	9401      	str	r4, [sp, #4]
 80049de:	f000 f865 	bl	8004aac <__ssvfiscanf_r>
 80049e2:	b01c      	add	sp, #112	; 0x70
 80049e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049e8:	b003      	add	sp, #12
 80049ea:	4770      	bx	lr
 80049ec:	080049f5 	.word	0x080049f5
 80049f0:	20000068 	.word	0x20000068

080049f4 <__seofread>:
 80049f4:	2000      	movs	r0, #0
 80049f6:	4770      	bx	lr

080049f8 <_sungetc_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	1c4b      	adds	r3, r1, #1
 80049fc:	4614      	mov	r4, r2
 80049fe:	d103      	bne.n	8004a08 <_sungetc_r+0x10>
 8004a00:	f04f 35ff 	mov.w	r5, #4294967295
 8004a04:	4628      	mov	r0, r5
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	8993      	ldrh	r3, [r2, #12]
 8004a0a:	b2cd      	uxtb	r5, r1
 8004a0c:	f023 0320 	bic.w	r3, r3, #32
 8004a10:	8193      	strh	r3, [r2, #12]
 8004a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a14:	6852      	ldr	r2, [r2, #4]
 8004a16:	b18b      	cbz	r3, 8004a3c <_sungetc_r+0x44>
 8004a18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	dd08      	ble.n	8004a30 <_sungetc_r+0x38>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	1e5a      	subs	r2, r3, #1
 8004a22:	6022      	str	r2, [r4, #0]
 8004a24:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	6063      	str	r3, [r4, #4]
 8004a2e:	e7e9      	b.n	8004a04 <_sungetc_r+0xc>
 8004a30:	4621      	mov	r1, r4
 8004a32:	f000 fc2d 	bl	8005290 <__submore>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d0f1      	beq.n	8004a1e <_sungetc_r+0x26>
 8004a3a:	e7e1      	b.n	8004a00 <_sungetc_r+0x8>
 8004a3c:	6921      	ldr	r1, [r4, #16]
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	b151      	cbz	r1, 8004a58 <_sungetc_r+0x60>
 8004a42:	4299      	cmp	r1, r3
 8004a44:	d208      	bcs.n	8004a58 <_sungetc_r+0x60>
 8004a46:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004a4a:	42a9      	cmp	r1, r5
 8004a4c:	d104      	bne.n	8004a58 <_sungetc_r+0x60>
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	3201      	adds	r2, #1
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	6062      	str	r2, [r4, #4]
 8004a56:	e7d5      	b.n	8004a04 <_sungetc_r+0xc>
 8004a58:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a60:	6363      	str	r3, [r4, #52]	; 0x34
 8004a62:	2303      	movs	r3, #3
 8004a64:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a66:	4623      	mov	r3, r4
 8004a68:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e7dc      	b.n	8004a2c <_sungetc_r+0x34>

08004a72 <__ssrefill_r>:
 8004a72:	b510      	push	{r4, lr}
 8004a74:	460c      	mov	r4, r1
 8004a76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004a78:	b169      	cbz	r1, 8004a96 <__ssrefill_r+0x24>
 8004a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a7e:	4299      	cmp	r1, r3
 8004a80:	d001      	beq.n	8004a86 <__ssrefill_r+0x14>
 8004a82:	f000 fc7b 	bl	800537c <_free_r>
 8004a86:	2000      	movs	r0, #0
 8004a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	b113      	cbz	r3, 8004a96 <__ssrefill_r+0x24>
 8004a90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	6923      	ldr	r3, [r4, #16]
 8004a98:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6063      	str	r3, [r4, #4]
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	f043 0320 	orr.w	r3, r3, #32
 8004aa8:	81a3      	strh	r3, [r4, #12]
 8004aaa:	e7f3      	b.n	8004a94 <__ssrefill_r+0x22>

08004aac <__ssvfiscanf_r>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4606      	mov	r6, r0
 8004ab6:	4692      	mov	sl, r2
 8004ab8:	270a      	movs	r7, #10
 8004aba:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004abe:	9144      	str	r1, [sp, #272]	; 0x110
 8004ac0:	9145      	str	r1, [sp, #276]	; 0x114
 8004ac2:	499e      	ldr	r1, [pc, #632]	; (8004d3c <__ssvfiscanf_r+0x290>)
 8004ac4:	f10d 0804 	add.w	r8, sp, #4
 8004ac8:	91a0      	str	r1, [sp, #640]	; 0x280
 8004aca:	499d      	ldr	r1, [pc, #628]	; (8004d40 <__ssvfiscanf_r+0x294>)
 8004acc:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8004d44 <__ssvfiscanf_r+0x298>
 8004ad0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004ad4:	91a1      	str	r1, [sp, #644]	; 0x284
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 812a 	beq.w	8004d36 <__ssvfiscanf_r+0x28a>
 8004ae2:	4655      	mov	r5, sl
 8004ae4:	f000 fc10 	bl	8005308 <__locale_ctype_ptr>
 8004ae8:	f815 bb01 	ldrb.w	fp, [r5], #1
 8004aec:	4458      	add	r0, fp
 8004aee:	7843      	ldrb	r3, [r0, #1]
 8004af0:	f013 0308 	ands.w	r3, r3, #8
 8004af4:	d01c      	beq.n	8004b30 <__ssvfiscanf_r+0x84>
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	dd12      	ble.n	8004b22 <__ssvfiscanf_r+0x76>
 8004afc:	f000 fc04 	bl	8005308 <__locale_ctype_ptr>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	781a      	ldrb	r2, [r3, #0]
 8004b04:	4410      	add	r0, r2
 8004b06:	7842      	ldrb	r2, [r0, #1]
 8004b08:	0712      	lsls	r2, r2, #28
 8004b0a:	d401      	bmi.n	8004b10 <__ssvfiscanf_r+0x64>
 8004b0c:	46aa      	mov	sl, r5
 8004b0e:	e7e3      	b.n	8004ad8 <__ssvfiscanf_r+0x2c>
 8004b10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004b12:	3301      	adds	r3, #1
 8004b14:	3201      	adds	r2, #1
 8004b16:	9245      	str	r2, [sp, #276]	; 0x114
 8004b18:	6862      	ldr	r2, [r4, #4]
 8004b1a:	6023      	str	r3, [r4, #0]
 8004b1c:	3a01      	subs	r2, #1
 8004b1e:	6062      	str	r2, [r4, #4]
 8004b20:	e7e9      	b.n	8004af6 <__ssvfiscanf_r+0x4a>
 8004b22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004b24:	4621      	mov	r1, r4
 8004b26:	4630      	mov	r0, r6
 8004b28:	4798      	blx	r3
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d0e6      	beq.n	8004afc <__ssvfiscanf_r+0x50>
 8004b2e:	e7ed      	b.n	8004b0c <__ssvfiscanf_r+0x60>
 8004b30:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004b34:	f040 8082 	bne.w	8004c3c <__ssvfiscanf_r+0x190>
 8004b38:	9343      	str	r3, [sp, #268]	; 0x10c
 8004b3a:	9341      	str	r3, [sp, #260]	; 0x104
 8004b3c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004b40:	2b2a      	cmp	r3, #42	; 0x2a
 8004b42:	d103      	bne.n	8004b4c <__ssvfiscanf_r+0xa0>
 8004b44:	2310      	movs	r3, #16
 8004b46:	f10a 0502 	add.w	r5, sl, #2
 8004b4a:	9341      	str	r3, [sp, #260]	; 0x104
 8004b4c:	46aa      	mov	sl, r5
 8004b4e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004b52:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004b56:	2a09      	cmp	r2, #9
 8004b58:	d922      	bls.n	8004ba0 <__ssvfiscanf_r+0xf4>
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	4879      	ldr	r0, [pc, #484]	; (8004d44 <__ssvfiscanf_r+0x298>)
 8004b5e:	f000 fbf3 	bl	8005348 <memchr>
 8004b62:	b138      	cbz	r0, 8004b74 <__ssvfiscanf_r+0xc8>
 8004b64:	eba0 0309 	sub.w	r3, r0, r9
 8004b68:	2001      	movs	r0, #1
 8004b6a:	46aa      	mov	sl, r5
 8004b6c:	4098      	lsls	r0, r3
 8004b6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004b70:	4318      	orrs	r0, r3
 8004b72:	9041      	str	r0, [sp, #260]	; 0x104
 8004b74:	f89a 3000 	ldrb.w	r3, [sl]
 8004b78:	f10a 0501 	add.w	r5, sl, #1
 8004b7c:	2b67      	cmp	r3, #103	; 0x67
 8004b7e:	d82b      	bhi.n	8004bd8 <__ssvfiscanf_r+0x12c>
 8004b80:	2b65      	cmp	r3, #101	; 0x65
 8004b82:	f080 809f 	bcs.w	8004cc4 <__ssvfiscanf_r+0x218>
 8004b86:	2b47      	cmp	r3, #71	; 0x47
 8004b88:	d810      	bhi.n	8004bac <__ssvfiscanf_r+0x100>
 8004b8a:	2b45      	cmp	r3, #69	; 0x45
 8004b8c:	f080 809a 	bcs.w	8004cc4 <__ssvfiscanf_r+0x218>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d06c      	beq.n	8004c6e <__ssvfiscanf_r+0x1c2>
 8004b94:	2b25      	cmp	r3, #37	; 0x25
 8004b96:	d051      	beq.n	8004c3c <__ssvfiscanf_r+0x190>
 8004b98:	2303      	movs	r3, #3
 8004b9a:	9742      	str	r7, [sp, #264]	; 0x108
 8004b9c:	9347      	str	r3, [sp, #284]	; 0x11c
 8004b9e:	e027      	b.n	8004bf0 <__ssvfiscanf_r+0x144>
 8004ba0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004ba2:	fb07 1303 	mla	r3, r7, r3, r1
 8004ba6:	3b30      	subs	r3, #48	; 0x30
 8004ba8:	9343      	str	r3, [sp, #268]	; 0x10c
 8004baa:	e7cf      	b.n	8004b4c <__ssvfiscanf_r+0xa0>
 8004bac:	2b5b      	cmp	r3, #91	; 0x5b
 8004bae:	d06a      	beq.n	8004c86 <__ssvfiscanf_r+0x1da>
 8004bb0:	d80c      	bhi.n	8004bcc <__ssvfiscanf_r+0x120>
 8004bb2:	2b58      	cmp	r3, #88	; 0x58
 8004bb4:	d1f0      	bne.n	8004b98 <__ssvfiscanf_r+0xec>
 8004bb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbc:	9241      	str	r2, [sp, #260]	; 0x104
 8004bbe:	2210      	movs	r2, #16
 8004bc0:	9242      	str	r2, [sp, #264]	; 0x108
 8004bc2:	2b6e      	cmp	r3, #110	; 0x6e
 8004bc4:	bf8c      	ite	hi
 8004bc6:	2304      	movhi	r3, #4
 8004bc8:	2303      	movls	r3, #3
 8004bca:	e010      	b.n	8004bee <__ssvfiscanf_r+0x142>
 8004bcc:	2b63      	cmp	r3, #99	; 0x63
 8004bce:	d065      	beq.n	8004c9c <__ssvfiscanf_r+0x1f0>
 8004bd0:	2b64      	cmp	r3, #100	; 0x64
 8004bd2:	d1e1      	bne.n	8004b98 <__ssvfiscanf_r+0xec>
 8004bd4:	9742      	str	r7, [sp, #264]	; 0x108
 8004bd6:	e7f4      	b.n	8004bc2 <__ssvfiscanf_r+0x116>
 8004bd8:	2b70      	cmp	r3, #112	; 0x70
 8004bda:	d04b      	beq.n	8004c74 <__ssvfiscanf_r+0x1c8>
 8004bdc:	d826      	bhi.n	8004c2c <__ssvfiscanf_r+0x180>
 8004bde:	2b6e      	cmp	r3, #110	; 0x6e
 8004be0:	d062      	beq.n	8004ca8 <__ssvfiscanf_r+0x1fc>
 8004be2:	d84c      	bhi.n	8004c7e <__ssvfiscanf_r+0x1d2>
 8004be4:	2b69      	cmp	r3, #105	; 0x69
 8004be6:	d1d7      	bne.n	8004b98 <__ssvfiscanf_r+0xec>
 8004be8:	2300      	movs	r3, #0
 8004bea:	9342      	str	r3, [sp, #264]	; 0x108
 8004bec:	2303      	movs	r3, #3
 8004bee:	9347      	str	r3, [sp, #284]	; 0x11c
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	dd68      	ble.n	8004cc8 <__ssvfiscanf_r+0x21c>
 8004bf6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004bf8:	0659      	lsls	r1, r3, #25
 8004bfa:	d407      	bmi.n	8004c0c <__ssvfiscanf_r+0x160>
 8004bfc:	f000 fb84 	bl	8005308 <__locale_ctype_ptr>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	4410      	add	r0, r2
 8004c06:	7842      	ldrb	r2, [r0, #1]
 8004c08:	0712      	lsls	r2, r2, #28
 8004c0a:	d464      	bmi.n	8004cd6 <__ssvfiscanf_r+0x22a>
 8004c0c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	dc73      	bgt.n	8004cfa <__ssvfiscanf_r+0x24e>
 8004c12:	466b      	mov	r3, sp
 8004c14:	4622      	mov	r2, r4
 8004c16:	a941      	add	r1, sp, #260	; 0x104
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 f897 	bl	8004d4c <_scanf_chars>
 8004c1e:	2801      	cmp	r0, #1
 8004c20:	f000 8089 	beq.w	8004d36 <__ssvfiscanf_r+0x28a>
 8004c24:	2802      	cmp	r0, #2
 8004c26:	f47f af71 	bne.w	8004b0c <__ssvfiscanf_r+0x60>
 8004c2a:	e01d      	b.n	8004c68 <__ssvfiscanf_r+0x1bc>
 8004c2c:	2b75      	cmp	r3, #117	; 0x75
 8004c2e:	d0d1      	beq.n	8004bd4 <__ssvfiscanf_r+0x128>
 8004c30:	2b78      	cmp	r3, #120	; 0x78
 8004c32:	d0c0      	beq.n	8004bb6 <__ssvfiscanf_r+0x10a>
 8004c34:	2b73      	cmp	r3, #115	; 0x73
 8004c36:	d1af      	bne.n	8004b98 <__ssvfiscanf_r+0xec>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e7d8      	b.n	8004bee <__ssvfiscanf_r+0x142>
 8004c3c:	6863      	ldr	r3, [r4, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dd0c      	ble.n	8004c5c <__ssvfiscanf_r+0x1b0>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	455a      	cmp	r2, fp
 8004c48:	d175      	bne.n	8004d36 <__ssvfiscanf_r+0x28a>
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	6862      	ldr	r2, [r4, #4]
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004c52:	3a01      	subs	r2, #1
 8004c54:	3301      	adds	r3, #1
 8004c56:	6062      	str	r2, [r4, #4]
 8004c58:	9345      	str	r3, [sp, #276]	; 0x114
 8004c5a:	e757      	b.n	8004b0c <__ssvfiscanf_r+0x60>
 8004c5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4630      	mov	r0, r6
 8004c62:	4798      	blx	r3
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d0ec      	beq.n	8004c42 <__ssvfiscanf_r+0x196>
 8004c68:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d159      	bne.n	8004d22 <__ssvfiscanf_r+0x276>
 8004c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c72:	e05c      	b.n	8004d2e <__ssvfiscanf_r+0x282>
 8004c74:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004c76:	f042 0220 	orr.w	r2, r2, #32
 8004c7a:	9241      	str	r2, [sp, #260]	; 0x104
 8004c7c:	e79b      	b.n	8004bb6 <__ssvfiscanf_r+0x10a>
 8004c7e:	2308      	movs	r3, #8
 8004c80:	9342      	str	r3, [sp, #264]	; 0x108
 8004c82:	2304      	movs	r3, #4
 8004c84:	e7b3      	b.n	8004bee <__ssvfiscanf_r+0x142>
 8004c86:	4629      	mov	r1, r5
 8004c88:	4640      	mov	r0, r8
 8004c8a:	f000 f9b7 	bl	8004ffc <__sccl>
 8004c8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c90:	4605      	mov	r5, r0
 8004c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c96:	9341      	str	r3, [sp, #260]	; 0x104
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e7a8      	b.n	8004bee <__ssvfiscanf_r+0x142>
 8004c9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca2:	9341      	str	r3, [sp, #260]	; 0x104
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e7a2      	b.n	8004bee <__ssvfiscanf_r+0x142>
 8004ca8:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004caa:	06c3      	lsls	r3, r0, #27
 8004cac:	f53f af2e 	bmi.w	8004b0c <__ssvfiscanf_r+0x60>
 8004cb0:	9b00      	ldr	r3, [sp, #0]
 8004cb2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004cb4:	1d19      	adds	r1, r3, #4
 8004cb6:	9100      	str	r1, [sp, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	07c0      	lsls	r0, r0, #31
 8004cbc:	bf4c      	ite	mi
 8004cbe:	801a      	strhmi	r2, [r3, #0]
 8004cc0:	601a      	strpl	r2, [r3, #0]
 8004cc2:	e723      	b.n	8004b0c <__ssvfiscanf_r+0x60>
 8004cc4:	2305      	movs	r3, #5
 8004cc6:	e792      	b.n	8004bee <__ssvfiscanf_r+0x142>
 8004cc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cca:	4621      	mov	r1, r4
 8004ccc:	4630      	mov	r0, r6
 8004cce:	4798      	blx	r3
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d090      	beq.n	8004bf6 <__ssvfiscanf_r+0x14a>
 8004cd4:	e7c8      	b.n	8004c68 <__ssvfiscanf_r+0x1bc>
 8004cd6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004cd8:	3201      	adds	r2, #1
 8004cda:	9245      	str	r2, [sp, #276]	; 0x114
 8004cdc:	6862      	ldr	r2, [r4, #4]
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	2a00      	cmp	r2, #0
 8004ce2:	6062      	str	r2, [r4, #4]
 8004ce4:	dd02      	ble.n	8004cec <__ssvfiscanf_r+0x240>
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	e787      	b.n	8004bfc <__ssvfiscanf_r+0x150>
 8004cec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cee:	4621      	mov	r1, r4
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	4798      	blx	r3
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d081      	beq.n	8004bfc <__ssvfiscanf_r+0x150>
 8004cf8:	e7b6      	b.n	8004c68 <__ssvfiscanf_r+0x1bc>
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	dc06      	bgt.n	8004d0c <__ssvfiscanf_r+0x260>
 8004cfe:	466b      	mov	r3, sp
 8004d00:	4622      	mov	r2, r4
 8004d02:	a941      	add	r1, sp, #260	; 0x104
 8004d04:	4630      	mov	r0, r6
 8004d06:	f000 f883 	bl	8004e10 <_scanf_i>
 8004d0a:	e788      	b.n	8004c1e <__ssvfiscanf_r+0x172>
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <__ssvfiscanf_r+0x29c>)
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f43f aefc 	beq.w	8004b0c <__ssvfiscanf_r+0x60>
 8004d14:	466b      	mov	r3, sp
 8004d16:	4622      	mov	r2, r4
 8004d18:	a941      	add	r1, sp, #260	; 0x104
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f3af 8000 	nop.w
 8004d20:	e77d      	b.n	8004c1e <__ssvfiscanf_r+0x172>
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d28:	bf18      	it	ne
 8004d2a:	f04f 30ff 	movne.w	r0, #4294967295
 8004d2e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d36:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004d38:	e7f9      	b.n	8004d2e <__ssvfiscanf_r+0x282>
 8004d3a:	bf00      	nop
 8004d3c:	080049f9 	.word	0x080049f9
 8004d40:	08004a73 	.word	0x08004a73
 8004d44:	0800579f 	.word	0x0800579f
 8004d48:	00000000 	.word	0x00000000

08004d4c <_scanf_chars>:
 8004d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d50:	4615      	mov	r5, r2
 8004d52:	688a      	ldr	r2, [r1, #8]
 8004d54:	4680      	mov	r8, r0
 8004d56:	460c      	mov	r4, r1
 8004d58:	b932      	cbnz	r2, 8004d68 <_scanf_chars+0x1c>
 8004d5a:	698a      	ldr	r2, [r1, #24]
 8004d5c:	2a00      	cmp	r2, #0
 8004d5e:	bf14      	ite	ne
 8004d60:	f04f 32ff 	movne.w	r2, #4294967295
 8004d64:	2201      	moveq	r2, #1
 8004d66:	608a      	str	r2, [r1, #8]
 8004d68:	2600      	movs	r6, #0
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	06d1      	lsls	r1, r2, #27
 8004d6e:	bf5f      	itttt	pl
 8004d70:	681a      	ldrpl	r2, [r3, #0]
 8004d72:	1d11      	addpl	r1, r2, #4
 8004d74:	6019      	strpl	r1, [r3, #0]
 8004d76:	6817      	ldrpl	r7, [r2, #0]
 8004d78:	69a3      	ldr	r3, [r4, #24]
 8004d7a:	b1db      	cbz	r3, 8004db4 <_scanf_chars+0x68>
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d107      	bne.n	8004d90 <_scanf_chars+0x44>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	6962      	ldr	r2, [r4, #20]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	5cd3      	ldrb	r3, [r2, r3]
 8004d88:	b9a3      	cbnz	r3, 8004db4 <_scanf_chars+0x68>
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	d131      	bne.n	8004df2 <_scanf_chars+0xa6>
 8004d8e:	e006      	b.n	8004d9e <_scanf_chars+0x52>
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d007      	beq.n	8004da4 <_scanf_chars+0x58>
 8004d94:	2e00      	cmp	r6, #0
 8004d96:	d12c      	bne.n	8004df2 <_scanf_chars+0xa6>
 8004d98:	69a3      	ldr	r3, [r4, #24]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d129      	bne.n	8004df2 <_scanf_chars+0xa6>
 8004d9e:	2001      	movs	r0, #1
 8004da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da4:	f000 fab0 	bl	8005308 <__locale_ctype_ptr>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	4418      	add	r0, r3
 8004dae:	7843      	ldrb	r3, [r0, #1]
 8004db0:	071b      	lsls	r3, r3, #28
 8004db2:	d4ef      	bmi.n	8004d94 <_scanf_chars+0x48>
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	3601      	adds	r6, #1
 8004db8:	06da      	lsls	r2, r3, #27
 8004dba:	bf5e      	ittt	pl
 8004dbc:	682b      	ldrpl	r3, [r5, #0]
 8004dbe:	781b      	ldrbpl	r3, [r3, #0]
 8004dc0:	703b      	strbpl	r3, [r7, #0]
 8004dc2:	682a      	ldr	r2, [r5, #0]
 8004dc4:	686b      	ldr	r3, [r5, #4]
 8004dc6:	f102 0201 	add.w	r2, r2, #1
 8004dca:	602a      	str	r2, [r5, #0]
 8004dcc:	68a2      	ldr	r2, [r4, #8]
 8004dce:	f103 33ff 	add.w	r3, r3, #4294967295
 8004dd2:	f102 32ff 	add.w	r2, r2, #4294967295
 8004dd6:	606b      	str	r3, [r5, #4]
 8004dd8:	bf58      	it	pl
 8004dda:	3701      	addpl	r7, #1
 8004ddc:	60a2      	str	r2, [r4, #8]
 8004dde:	b142      	cbz	r2, 8004df2 <_scanf_chars+0xa6>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dcc9      	bgt.n	8004d78 <_scanf_chars+0x2c>
 8004de4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004de8:	4629      	mov	r1, r5
 8004dea:	4640      	mov	r0, r8
 8004dec:	4798      	blx	r3
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d0c2      	beq.n	8004d78 <_scanf_chars+0x2c>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	f013 0310 	ands.w	r3, r3, #16
 8004df8:	d105      	bne.n	8004e06 <_scanf_chars+0xba>
 8004dfa:	68e2      	ldr	r2, [r4, #12]
 8004dfc:	3201      	adds	r2, #1
 8004dfe:	60e2      	str	r2, [r4, #12]
 8004e00:	69a2      	ldr	r2, [r4, #24]
 8004e02:	b102      	cbz	r2, 8004e06 <_scanf_chars+0xba>
 8004e04:	703b      	strb	r3, [r7, #0]
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	2000      	movs	r0, #0
 8004e0a:	441e      	add	r6, r3
 8004e0c:	6126      	str	r6, [r4, #16]
 8004e0e:	e7c7      	b.n	8004da0 <_scanf_chars+0x54>

08004e10 <_scanf_i>:
 8004e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e14:	460c      	mov	r4, r1
 8004e16:	469a      	mov	sl, r3
 8004e18:	4b74      	ldr	r3, [pc, #464]	; (8004fec <_scanf_i+0x1dc>)
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	4683      	mov	fp, r0
 8004e1e:	4616      	mov	r6, r2
 8004e20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e24:	ab03      	add	r3, sp, #12
 8004e26:	68a7      	ldr	r7, [r4, #8]
 8004e28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004e2c:	4b70      	ldr	r3, [pc, #448]	; (8004ff0 <_scanf_i+0x1e0>)
 8004e2e:	69a1      	ldr	r1, [r4, #24]
 8004e30:	4a70      	ldr	r2, [pc, #448]	; (8004ff4 <_scanf_i+0x1e4>)
 8004e32:	f104 091c 	add.w	r9, r4, #28
 8004e36:	2903      	cmp	r1, #3
 8004e38:	bf08      	it	eq
 8004e3a:	461a      	moveq	r2, r3
 8004e3c:	1e7b      	subs	r3, r7, #1
 8004e3e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8004e42:	bf84      	itt	hi
 8004e44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e48:	60a3      	strhi	r3, [r4, #8]
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	bf88      	it	hi
 8004e4e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004e52:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004e56:	6023      	str	r3, [r4, #0]
 8004e58:	bf98      	it	ls
 8004e5a:	2700      	movls	r7, #0
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	f04f 0800 	mov.w	r8, #0
 8004e62:	9200      	str	r2, [sp, #0]
 8004e64:	bf88      	it	hi
 8004e66:	197f      	addhi	r7, r7, r5
 8004e68:	6831      	ldr	r1, [r6, #0]
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	ab03      	add	r3, sp, #12
 8004e6e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004e72:	2202      	movs	r2, #2
 8004e74:	7809      	ldrb	r1, [r1, #0]
 8004e76:	f000 fa67 	bl	8005348 <memchr>
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	b330      	cbz	r0, 8004ecc <_scanf_i+0xbc>
 8004e7e:	f1b8 0f01 	cmp.w	r8, #1
 8004e82:	d15a      	bne.n	8004f3a <_scanf_i+0x12a>
 8004e84:	6862      	ldr	r2, [r4, #4]
 8004e86:	b92a      	cbnz	r2, 8004e94 <_scanf_i+0x84>
 8004e88:	2108      	movs	r1, #8
 8004e8a:	6822      	ldr	r2, [r4, #0]
 8004e8c:	6061      	str	r1, [r4, #4]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e92:	6022      	str	r2, [r4, #0]
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004e9a:	6022      	str	r2, [r4, #0]
 8004e9c:	68a2      	ldr	r2, [r4, #8]
 8004e9e:	1e51      	subs	r1, r2, #1
 8004ea0:	60a1      	str	r1, [r4, #8]
 8004ea2:	b19a      	cbz	r2, 8004ecc <_scanf_i+0xbc>
 8004ea4:	6832      	ldr	r2, [r6, #0]
 8004ea6:	1c5d      	adds	r5, r3, #1
 8004ea8:	1c51      	adds	r1, r2, #1
 8004eaa:	6031      	str	r1, [r6, #0]
 8004eac:	7812      	ldrb	r2, [r2, #0]
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	6873      	ldr	r3, [r6, #4]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	6073      	str	r3, [r6, #4]
 8004eb8:	dc07      	bgt.n	8004eca <_scanf_i+0xba>
 8004eba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4658      	mov	r0, fp
 8004ec2:	4798      	blx	r3
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	f040 8087 	bne.w	8004fd8 <_scanf_i+0x1c8>
 8004eca:	462b      	mov	r3, r5
 8004ecc:	f108 0801 	add.w	r8, r8, #1
 8004ed0:	f1b8 0f03 	cmp.w	r8, #3
 8004ed4:	d1c8      	bne.n	8004e68 <_scanf_i+0x58>
 8004ed6:	6862      	ldr	r2, [r4, #4]
 8004ed8:	b90a      	cbnz	r2, 8004ede <_scanf_i+0xce>
 8004eda:	220a      	movs	r2, #10
 8004edc:	6062      	str	r2, [r4, #4]
 8004ede:	6862      	ldr	r2, [r4, #4]
 8004ee0:	4945      	ldr	r1, [pc, #276]	; (8004ff8 <_scanf_i+0x1e8>)
 8004ee2:	6960      	ldr	r0, [r4, #20]
 8004ee4:	1a89      	subs	r1, r1, r2
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	f000 f888 	bl	8004ffc <__sccl>
 8004eec:	9b01      	ldr	r3, [sp, #4]
 8004eee:	f04f 0800 	mov.w	r8, #0
 8004ef2:	461d      	mov	r5, r3
 8004ef4:	68a3      	ldr	r3, [r4, #8]
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d03b      	beq.n	8004f74 <_scanf_i+0x164>
 8004efc:	6831      	ldr	r1, [r6, #0]
 8004efe:	6960      	ldr	r0, [r4, #20]
 8004f00:	f891 c000 	ldrb.w	ip, [r1]
 8004f04:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d033      	beq.n	8004f74 <_scanf_i+0x164>
 8004f0c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004f10:	d121      	bne.n	8004f56 <_scanf_i+0x146>
 8004f12:	0510      	lsls	r0, r2, #20
 8004f14:	d51f      	bpl.n	8004f56 <_scanf_i+0x146>
 8004f16:	f108 0801 	add.w	r8, r8, #1
 8004f1a:	b117      	cbz	r7, 8004f22 <_scanf_i+0x112>
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	3f01      	subs	r7, #1
 8004f20:	60a3      	str	r3, [r4, #8]
 8004f22:	6873      	ldr	r3, [r6, #4]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	6073      	str	r3, [r6, #4]
 8004f2a:	dd1c      	ble.n	8004f66 <_scanf_i+0x156>
 8004f2c:	6833      	ldr	r3, [r6, #0]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	6033      	str	r3, [r6, #0]
 8004f32:	68a3      	ldr	r3, [r4, #8]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	60a3      	str	r3, [r4, #8]
 8004f38:	e7dc      	b.n	8004ef4 <_scanf_i+0xe4>
 8004f3a:	f1b8 0f02 	cmp.w	r8, #2
 8004f3e:	d1ad      	bne.n	8004e9c <_scanf_i+0x8c>
 8004f40:	6822      	ldr	r2, [r4, #0]
 8004f42:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004f46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004f4a:	d1bf      	bne.n	8004ecc <_scanf_i+0xbc>
 8004f4c:	2110      	movs	r1, #16
 8004f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f52:	6061      	str	r1, [r4, #4]
 8004f54:	e7a1      	b.n	8004e9a <_scanf_i+0x8a>
 8004f56:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004f5a:	6022      	str	r2, [r4, #0]
 8004f5c:	780b      	ldrb	r3, [r1, #0]
 8004f5e:	3501      	adds	r5, #1
 8004f60:	f805 3c01 	strb.w	r3, [r5, #-1]
 8004f64:	e7dd      	b.n	8004f22 <_scanf_i+0x112>
 8004f66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	4658      	mov	r0, fp
 8004f6e:	4798      	blx	r3
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d0de      	beq.n	8004f32 <_scanf_i+0x122>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	05d9      	lsls	r1, r3, #23
 8004f78:	d50c      	bpl.n	8004f94 <_scanf_i+0x184>
 8004f7a:	454d      	cmp	r5, r9
 8004f7c:	d908      	bls.n	8004f90 <_scanf_i+0x180>
 8004f7e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004f82:	1e6f      	subs	r7, r5, #1
 8004f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f88:	4632      	mov	r2, r6
 8004f8a:	4658      	mov	r0, fp
 8004f8c:	4798      	blx	r3
 8004f8e:	463d      	mov	r5, r7
 8004f90:	454d      	cmp	r5, r9
 8004f92:	d029      	beq.n	8004fe8 <_scanf_i+0x1d8>
 8004f94:	6822      	ldr	r2, [r4, #0]
 8004f96:	f012 0210 	ands.w	r2, r2, #16
 8004f9a:	d113      	bne.n	8004fc4 <_scanf_i+0x1b4>
 8004f9c:	702a      	strb	r2, [r5, #0]
 8004f9e:	6863      	ldr	r3, [r4, #4]
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	4658      	mov	r0, fp
 8004fa4:	9e00      	ldr	r6, [sp, #0]
 8004fa6:	47b0      	blx	r6
 8004fa8:	f8da 3000 	ldr.w	r3, [sl]
 8004fac:	6821      	ldr	r1, [r4, #0]
 8004fae:	1d1a      	adds	r2, r3, #4
 8004fb0:	f8ca 2000 	str.w	r2, [sl]
 8004fb4:	f011 0f20 	tst.w	r1, #32
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	d010      	beq.n	8004fde <_scanf_i+0x1ce>
 8004fbc:	6018      	str	r0, [r3, #0]
 8004fbe:	68e3      	ldr	r3, [r4, #12]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	60e3      	str	r3, [r4, #12]
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	eba5 0509 	sub.w	r5, r5, r9
 8004fca:	44a8      	add	r8, r5
 8004fcc:	6925      	ldr	r5, [r4, #16]
 8004fce:	4445      	add	r5, r8
 8004fd0:	6125      	str	r5, [r4, #16]
 8004fd2:	b007      	add	sp, #28
 8004fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd8:	f04f 0800 	mov.w	r8, #0
 8004fdc:	e7ca      	b.n	8004f74 <_scanf_i+0x164>
 8004fde:	07ca      	lsls	r2, r1, #31
 8004fe0:	bf4c      	ite	mi
 8004fe2:	8018      	strhmi	r0, [r3, #0]
 8004fe4:	6018      	strpl	r0, [r3, #0]
 8004fe6:	e7ea      	b.n	8004fbe <_scanf_i+0x1ae>
 8004fe8:	2001      	movs	r0, #1
 8004fea:	e7f2      	b.n	8004fd2 <_scanf_i+0x1c2>
 8004fec:	0800559c 	.word	0x0800559c
 8004ff0:	08005155 	.word	0x08005155
 8004ff4:	0800526d 	.word	0x0800526d
 8004ff8:	080057b3 	.word	0x080057b3

08004ffc <__sccl>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	780b      	ldrb	r3, [r1, #0]
 8005000:	1e44      	subs	r4, r0, #1
 8005002:	2b5e      	cmp	r3, #94	; 0x5e
 8005004:	bf13      	iteet	ne
 8005006:	1c4a      	addne	r2, r1, #1
 8005008:	1c8a      	addeq	r2, r1, #2
 800500a:	784b      	ldrbeq	r3, [r1, #1]
 800500c:	2100      	movne	r1, #0
 800500e:	bf08      	it	eq
 8005010:	2101      	moveq	r1, #1
 8005012:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8005016:	f804 1f01 	strb.w	r1, [r4, #1]!
 800501a:	42ac      	cmp	r4, r5
 800501c:	d1fb      	bne.n	8005016 <__sccl+0x1a>
 800501e:	b913      	cbnz	r3, 8005026 <__sccl+0x2a>
 8005020:	3a01      	subs	r2, #1
 8005022:	4610      	mov	r0, r2
 8005024:	bd70      	pop	{r4, r5, r6, pc}
 8005026:	f081 0401 	eor.w	r4, r1, #1
 800502a:	54c4      	strb	r4, [r0, r3]
 800502c:	1c51      	adds	r1, r2, #1
 800502e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8005032:	1e4e      	subs	r6, r1, #1
 8005034:	2d2d      	cmp	r5, #45	; 0x2d
 8005036:	460a      	mov	r2, r1
 8005038:	d006      	beq.n	8005048 <__sccl+0x4c>
 800503a:	2d5d      	cmp	r5, #93	; 0x5d
 800503c:	d0f1      	beq.n	8005022 <__sccl+0x26>
 800503e:	b90d      	cbnz	r5, 8005044 <__sccl+0x48>
 8005040:	4632      	mov	r2, r6
 8005042:	e7ee      	b.n	8005022 <__sccl+0x26>
 8005044:	462b      	mov	r3, r5
 8005046:	e7f0      	b.n	800502a <__sccl+0x2e>
 8005048:	780e      	ldrb	r6, [r1, #0]
 800504a:	2e5d      	cmp	r6, #93	; 0x5d
 800504c:	d0fa      	beq.n	8005044 <__sccl+0x48>
 800504e:	42b3      	cmp	r3, r6
 8005050:	dcf8      	bgt.n	8005044 <__sccl+0x48>
 8005052:	3301      	adds	r3, #1
 8005054:	429e      	cmp	r6, r3
 8005056:	54c4      	strb	r4, [r0, r3]
 8005058:	dcfb      	bgt.n	8005052 <__sccl+0x56>
 800505a:	3102      	adds	r1, #2
 800505c:	e7e7      	b.n	800502e <__sccl+0x32>

0800505e <_strtol_l.isra.0>:
 800505e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005062:	4680      	mov	r8, r0
 8005064:	4689      	mov	r9, r1
 8005066:	4692      	mov	sl, r2
 8005068:	461e      	mov	r6, r3
 800506a:	460f      	mov	r7, r1
 800506c:	463d      	mov	r5, r7
 800506e:	9808      	ldr	r0, [sp, #32]
 8005070:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005074:	f000 f944 	bl	8005300 <__locale_ctype_ptr_l>
 8005078:	4420      	add	r0, r4
 800507a:	7843      	ldrb	r3, [r0, #1]
 800507c:	f013 0308 	ands.w	r3, r3, #8
 8005080:	d132      	bne.n	80050e8 <_strtol_l.isra.0+0x8a>
 8005082:	2c2d      	cmp	r4, #45	; 0x2d
 8005084:	d132      	bne.n	80050ec <_strtol_l.isra.0+0x8e>
 8005086:	2201      	movs	r2, #1
 8005088:	787c      	ldrb	r4, [r7, #1]
 800508a:	1cbd      	adds	r5, r7, #2
 800508c:	2e00      	cmp	r6, #0
 800508e:	d05d      	beq.n	800514c <_strtol_l.isra.0+0xee>
 8005090:	2e10      	cmp	r6, #16
 8005092:	d109      	bne.n	80050a8 <_strtol_l.isra.0+0x4a>
 8005094:	2c30      	cmp	r4, #48	; 0x30
 8005096:	d107      	bne.n	80050a8 <_strtol_l.isra.0+0x4a>
 8005098:	782b      	ldrb	r3, [r5, #0]
 800509a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800509e:	2b58      	cmp	r3, #88	; 0x58
 80050a0:	d14f      	bne.n	8005142 <_strtol_l.isra.0+0xe4>
 80050a2:	2610      	movs	r6, #16
 80050a4:	786c      	ldrb	r4, [r5, #1]
 80050a6:	3502      	adds	r5, #2
 80050a8:	2a00      	cmp	r2, #0
 80050aa:	bf14      	ite	ne
 80050ac:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80050b0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80050b4:	2700      	movs	r7, #0
 80050b6:	fbb1 fcf6 	udiv	ip, r1, r6
 80050ba:	4638      	mov	r0, r7
 80050bc:	fb06 1e1c 	mls	lr, r6, ip, r1
 80050c0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	d817      	bhi.n	80050f8 <_strtol_l.isra.0+0x9a>
 80050c8:	461c      	mov	r4, r3
 80050ca:	42a6      	cmp	r6, r4
 80050cc:	dd23      	ble.n	8005116 <_strtol_l.isra.0+0xb8>
 80050ce:	1c7b      	adds	r3, r7, #1
 80050d0:	d007      	beq.n	80050e2 <_strtol_l.isra.0+0x84>
 80050d2:	4584      	cmp	ip, r0
 80050d4:	d31c      	bcc.n	8005110 <_strtol_l.isra.0+0xb2>
 80050d6:	d101      	bne.n	80050dc <_strtol_l.isra.0+0x7e>
 80050d8:	45a6      	cmp	lr, r4
 80050da:	db19      	blt.n	8005110 <_strtol_l.isra.0+0xb2>
 80050dc:	2701      	movs	r7, #1
 80050de:	fb00 4006 	mla	r0, r0, r6, r4
 80050e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050e6:	e7eb      	b.n	80050c0 <_strtol_l.isra.0+0x62>
 80050e8:	462f      	mov	r7, r5
 80050ea:	e7bf      	b.n	800506c <_strtol_l.isra.0+0xe>
 80050ec:	2c2b      	cmp	r4, #43	; 0x2b
 80050ee:	bf04      	itt	eq
 80050f0:	1cbd      	addeq	r5, r7, #2
 80050f2:	787c      	ldrbeq	r4, [r7, #1]
 80050f4:	461a      	mov	r2, r3
 80050f6:	e7c9      	b.n	800508c <_strtol_l.isra.0+0x2e>
 80050f8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80050fc:	2b19      	cmp	r3, #25
 80050fe:	d801      	bhi.n	8005104 <_strtol_l.isra.0+0xa6>
 8005100:	3c37      	subs	r4, #55	; 0x37
 8005102:	e7e2      	b.n	80050ca <_strtol_l.isra.0+0x6c>
 8005104:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005108:	2b19      	cmp	r3, #25
 800510a:	d804      	bhi.n	8005116 <_strtol_l.isra.0+0xb8>
 800510c:	3c57      	subs	r4, #87	; 0x57
 800510e:	e7dc      	b.n	80050ca <_strtol_l.isra.0+0x6c>
 8005110:	f04f 37ff 	mov.w	r7, #4294967295
 8005114:	e7e5      	b.n	80050e2 <_strtol_l.isra.0+0x84>
 8005116:	1c7b      	adds	r3, r7, #1
 8005118:	d108      	bne.n	800512c <_strtol_l.isra.0+0xce>
 800511a:	2322      	movs	r3, #34	; 0x22
 800511c:	4608      	mov	r0, r1
 800511e:	f8c8 3000 	str.w	r3, [r8]
 8005122:	f1ba 0f00 	cmp.w	sl, #0
 8005126:	d107      	bne.n	8005138 <_strtol_l.isra.0+0xda>
 8005128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512c:	b102      	cbz	r2, 8005130 <_strtol_l.isra.0+0xd2>
 800512e:	4240      	negs	r0, r0
 8005130:	f1ba 0f00 	cmp.w	sl, #0
 8005134:	d0f8      	beq.n	8005128 <_strtol_l.isra.0+0xca>
 8005136:	b10f      	cbz	r7, 800513c <_strtol_l.isra.0+0xde>
 8005138:	f105 39ff 	add.w	r9, r5, #4294967295
 800513c:	f8ca 9000 	str.w	r9, [sl]
 8005140:	e7f2      	b.n	8005128 <_strtol_l.isra.0+0xca>
 8005142:	2430      	movs	r4, #48	; 0x30
 8005144:	2e00      	cmp	r6, #0
 8005146:	d1af      	bne.n	80050a8 <_strtol_l.isra.0+0x4a>
 8005148:	2608      	movs	r6, #8
 800514a:	e7ad      	b.n	80050a8 <_strtol_l.isra.0+0x4a>
 800514c:	2c30      	cmp	r4, #48	; 0x30
 800514e:	d0a3      	beq.n	8005098 <_strtol_l.isra.0+0x3a>
 8005150:	260a      	movs	r6, #10
 8005152:	e7a9      	b.n	80050a8 <_strtol_l.isra.0+0x4a>

08005154 <_strtol_r>:
 8005154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005156:	4c06      	ldr	r4, [pc, #24]	; (8005170 <_strtol_r+0x1c>)
 8005158:	4d06      	ldr	r5, [pc, #24]	; (8005174 <_strtol_r+0x20>)
 800515a:	6824      	ldr	r4, [r4, #0]
 800515c:	6a24      	ldr	r4, [r4, #32]
 800515e:	2c00      	cmp	r4, #0
 8005160:	bf08      	it	eq
 8005162:	462c      	moveq	r4, r5
 8005164:	9400      	str	r4, [sp, #0]
 8005166:	f7ff ff7a 	bl	800505e <_strtol_l.isra.0>
 800516a:	b003      	add	sp, #12
 800516c:	bd30      	pop	{r4, r5, pc}
 800516e:	bf00      	nop
 8005170:	20000068 	.word	0x20000068
 8005174:	200000cc 	.word	0x200000cc

08005178 <_strtoul_l.isra.0>:
 8005178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800517c:	4680      	mov	r8, r0
 800517e:	4689      	mov	r9, r1
 8005180:	4692      	mov	sl, r2
 8005182:	461e      	mov	r6, r3
 8005184:	460f      	mov	r7, r1
 8005186:	463d      	mov	r5, r7
 8005188:	9808      	ldr	r0, [sp, #32]
 800518a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800518e:	f000 f8b7 	bl	8005300 <__locale_ctype_ptr_l>
 8005192:	4420      	add	r0, r4
 8005194:	7843      	ldrb	r3, [r0, #1]
 8005196:	f013 0308 	ands.w	r3, r3, #8
 800519a:	d130      	bne.n	80051fe <_strtoul_l.isra.0+0x86>
 800519c:	2c2d      	cmp	r4, #45	; 0x2d
 800519e:	d130      	bne.n	8005202 <_strtoul_l.isra.0+0x8a>
 80051a0:	2101      	movs	r1, #1
 80051a2:	787c      	ldrb	r4, [r7, #1]
 80051a4:	1cbd      	adds	r5, r7, #2
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	d05c      	beq.n	8005264 <_strtoul_l.isra.0+0xec>
 80051aa:	2e10      	cmp	r6, #16
 80051ac:	d109      	bne.n	80051c2 <_strtoul_l.isra.0+0x4a>
 80051ae:	2c30      	cmp	r4, #48	; 0x30
 80051b0:	d107      	bne.n	80051c2 <_strtoul_l.isra.0+0x4a>
 80051b2:	782b      	ldrb	r3, [r5, #0]
 80051b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80051b8:	2b58      	cmp	r3, #88	; 0x58
 80051ba:	d14e      	bne.n	800525a <_strtoul_l.isra.0+0xe2>
 80051bc:	2610      	movs	r6, #16
 80051be:	786c      	ldrb	r4, [r5, #1]
 80051c0:	3502      	adds	r5, #2
 80051c2:	f04f 32ff 	mov.w	r2, #4294967295
 80051c6:	fbb2 f2f6 	udiv	r2, r2, r6
 80051ca:	2300      	movs	r3, #0
 80051cc:	fb06 fc02 	mul.w	ip, r6, r2
 80051d0:	4618      	mov	r0, r3
 80051d2:	ea6f 0c0c 	mvn.w	ip, ip
 80051d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80051da:	2f09      	cmp	r7, #9
 80051dc:	d817      	bhi.n	800520e <_strtoul_l.isra.0+0x96>
 80051de:	463c      	mov	r4, r7
 80051e0:	42a6      	cmp	r6, r4
 80051e2:	dd23      	ble.n	800522c <_strtoul_l.isra.0+0xb4>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	db1e      	blt.n	8005226 <_strtoul_l.isra.0+0xae>
 80051e8:	4282      	cmp	r2, r0
 80051ea:	d31c      	bcc.n	8005226 <_strtoul_l.isra.0+0xae>
 80051ec:	d101      	bne.n	80051f2 <_strtoul_l.isra.0+0x7a>
 80051ee:	45a4      	cmp	ip, r4
 80051f0:	db19      	blt.n	8005226 <_strtoul_l.isra.0+0xae>
 80051f2:	2301      	movs	r3, #1
 80051f4:	fb00 4006 	mla	r0, r0, r6, r4
 80051f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051fc:	e7eb      	b.n	80051d6 <_strtoul_l.isra.0+0x5e>
 80051fe:	462f      	mov	r7, r5
 8005200:	e7c1      	b.n	8005186 <_strtoul_l.isra.0+0xe>
 8005202:	2c2b      	cmp	r4, #43	; 0x2b
 8005204:	bf04      	itt	eq
 8005206:	1cbd      	addeq	r5, r7, #2
 8005208:	787c      	ldrbeq	r4, [r7, #1]
 800520a:	4619      	mov	r1, r3
 800520c:	e7cb      	b.n	80051a6 <_strtoul_l.isra.0+0x2e>
 800520e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005212:	2f19      	cmp	r7, #25
 8005214:	d801      	bhi.n	800521a <_strtoul_l.isra.0+0xa2>
 8005216:	3c37      	subs	r4, #55	; 0x37
 8005218:	e7e2      	b.n	80051e0 <_strtoul_l.isra.0+0x68>
 800521a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800521e:	2f19      	cmp	r7, #25
 8005220:	d804      	bhi.n	800522c <_strtoul_l.isra.0+0xb4>
 8005222:	3c57      	subs	r4, #87	; 0x57
 8005224:	e7dc      	b.n	80051e0 <_strtoul_l.isra.0+0x68>
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
 800522a:	e7e5      	b.n	80051f8 <_strtoul_l.isra.0+0x80>
 800522c:	2b00      	cmp	r3, #0
 800522e:	da09      	bge.n	8005244 <_strtoul_l.isra.0+0xcc>
 8005230:	2322      	movs	r3, #34	; 0x22
 8005232:	f04f 30ff 	mov.w	r0, #4294967295
 8005236:	f8c8 3000 	str.w	r3, [r8]
 800523a:	f1ba 0f00 	cmp.w	sl, #0
 800523e:	d107      	bne.n	8005250 <_strtoul_l.isra.0+0xd8>
 8005240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005244:	b101      	cbz	r1, 8005248 <_strtoul_l.isra.0+0xd0>
 8005246:	4240      	negs	r0, r0
 8005248:	f1ba 0f00 	cmp.w	sl, #0
 800524c:	d0f8      	beq.n	8005240 <_strtoul_l.isra.0+0xc8>
 800524e:	b10b      	cbz	r3, 8005254 <_strtoul_l.isra.0+0xdc>
 8005250:	f105 39ff 	add.w	r9, r5, #4294967295
 8005254:	f8ca 9000 	str.w	r9, [sl]
 8005258:	e7f2      	b.n	8005240 <_strtoul_l.isra.0+0xc8>
 800525a:	2430      	movs	r4, #48	; 0x30
 800525c:	2e00      	cmp	r6, #0
 800525e:	d1b0      	bne.n	80051c2 <_strtoul_l.isra.0+0x4a>
 8005260:	2608      	movs	r6, #8
 8005262:	e7ae      	b.n	80051c2 <_strtoul_l.isra.0+0x4a>
 8005264:	2c30      	cmp	r4, #48	; 0x30
 8005266:	d0a4      	beq.n	80051b2 <_strtoul_l.isra.0+0x3a>
 8005268:	260a      	movs	r6, #10
 800526a:	e7aa      	b.n	80051c2 <_strtoul_l.isra.0+0x4a>

0800526c <_strtoul_r>:
 800526c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800526e:	4c06      	ldr	r4, [pc, #24]	; (8005288 <_strtoul_r+0x1c>)
 8005270:	4d06      	ldr	r5, [pc, #24]	; (800528c <_strtoul_r+0x20>)
 8005272:	6824      	ldr	r4, [r4, #0]
 8005274:	6a24      	ldr	r4, [r4, #32]
 8005276:	2c00      	cmp	r4, #0
 8005278:	bf08      	it	eq
 800527a:	462c      	moveq	r4, r5
 800527c:	9400      	str	r4, [sp, #0]
 800527e:	f7ff ff7b 	bl	8005178 <_strtoul_l.isra.0>
 8005282:	b003      	add	sp, #12
 8005284:	bd30      	pop	{r4, r5, pc}
 8005286:	bf00      	nop
 8005288:	20000068 	.word	0x20000068
 800528c:	200000cc 	.word	0x200000cc

08005290 <__submore>:
 8005290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005294:	460c      	mov	r4, r1
 8005296:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800529c:	4299      	cmp	r1, r3
 800529e:	d11b      	bne.n	80052d8 <__submore+0x48>
 80052a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052a4:	f000 f8b6 	bl	8005414 <_malloc_r>
 80052a8:	b918      	cbnz	r0, 80052b2 <__submore+0x22>
 80052aa:	f04f 30ff 	mov.w	r0, #4294967295
 80052ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80052b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80052bc:	6360      	str	r0, [r4, #52]	; 0x34
 80052be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80052c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80052c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80052ca:	7043      	strb	r3, [r0, #1]
 80052cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80052d0:	7003      	strb	r3, [r0, #0]
 80052d2:	6020      	str	r0, [r4, #0]
 80052d4:	2000      	movs	r0, #0
 80052d6:	e7ea      	b.n	80052ae <__submore+0x1e>
 80052d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80052da:	0077      	lsls	r7, r6, #1
 80052dc:	463a      	mov	r2, r7
 80052de:	f000 f8f3 	bl	80054c8 <_realloc_r>
 80052e2:	4605      	mov	r5, r0
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d0e0      	beq.n	80052aa <__submore+0x1a>
 80052e8:	eb00 0806 	add.w	r8, r0, r6
 80052ec:	4601      	mov	r1, r0
 80052ee:	4632      	mov	r2, r6
 80052f0:	4640      	mov	r0, r8
 80052f2:	f000 f837 	bl	8005364 <memcpy>
 80052f6:	f8c4 8000 	str.w	r8, [r4]
 80052fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80052fe:	e7e9      	b.n	80052d4 <__submore+0x44>

08005300 <__locale_ctype_ptr_l>:
 8005300:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005304:	4770      	bx	lr
	...

08005308 <__locale_ctype_ptr>:
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <__locale_ctype_ptr+0x14>)
 800530a:	4a05      	ldr	r2, [pc, #20]	; (8005320 <__locale_ctype_ptr+0x18>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf08      	it	eq
 8005314:	4613      	moveq	r3, r2
 8005316:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800531a:	4770      	bx	lr
 800531c:	20000068 	.word	0x20000068
 8005320:	200000cc 	.word	0x200000cc

08005324 <__ascii_mbtowc>:
 8005324:	b082      	sub	sp, #8
 8005326:	b901      	cbnz	r1, 800532a <__ascii_mbtowc+0x6>
 8005328:	a901      	add	r1, sp, #4
 800532a:	b142      	cbz	r2, 800533e <__ascii_mbtowc+0x1a>
 800532c:	b14b      	cbz	r3, 8005342 <__ascii_mbtowc+0x1e>
 800532e:	7813      	ldrb	r3, [r2, #0]
 8005330:	600b      	str	r3, [r1, #0]
 8005332:	7812      	ldrb	r2, [r2, #0]
 8005334:	1c10      	adds	r0, r2, #0
 8005336:	bf18      	it	ne
 8005338:	2001      	movne	r0, #1
 800533a:	b002      	add	sp, #8
 800533c:	4770      	bx	lr
 800533e:	4610      	mov	r0, r2
 8005340:	e7fb      	b.n	800533a <__ascii_mbtowc+0x16>
 8005342:	f06f 0001 	mvn.w	r0, #1
 8005346:	e7f8      	b.n	800533a <__ascii_mbtowc+0x16>

08005348 <memchr>:
 8005348:	b510      	push	{r4, lr}
 800534a:	b2c9      	uxtb	r1, r1
 800534c:	4402      	add	r2, r0
 800534e:	4290      	cmp	r0, r2
 8005350:	4603      	mov	r3, r0
 8005352:	d101      	bne.n	8005358 <memchr+0x10>
 8005354:	2300      	movs	r3, #0
 8005356:	e003      	b.n	8005360 <memchr+0x18>
 8005358:	781c      	ldrb	r4, [r3, #0]
 800535a:	3001      	adds	r0, #1
 800535c:	428c      	cmp	r4, r1
 800535e:	d1f6      	bne.n	800534e <memchr+0x6>
 8005360:	4618      	mov	r0, r3
 8005362:	bd10      	pop	{r4, pc}

08005364 <memcpy>:
 8005364:	b510      	push	{r4, lr}
 8005366:	1e43      	subs	r3, r0, #1
 8005368:	440a      	add	r2, r1
 800536a:	4291      	cmp	r1, r2
 800536c:	d100      	bne.n	8005370 <memcpy+0xc>
 800536e:	bd10      	pop	{r4, pc}
 8005370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005378:	e7f7      	b.n	800536a <memcpy+0x6>
	...

0800537c <_free_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4605      	mov	r5, r0
 8005380:	2900      	cmp	r1, #0
 8005382:	d043      	beq.n	800540c <_free_r+0x90>
 8005384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005388:	1f0c      	subs	r4, r1, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	bfb8      	it	lt
 800538e:	18e4      	addlt	r4, r4, r3
 8005390:	f000 f8dd 	bl	800554e <__malloc_lock>
 8005394:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <_free_r+0x94>)
 8005396:	6813      	ldr	r3, [r2, #0]
 8005398:	4610      	mov	r0, r2
 800539a:	b933      	cbnz	r3, 80053aa <_free_r+0x2e>
 800539c:	6063      	str	r3, [r4, #4]
 800539e:	6014      	str	r4, [r2, #0]
 80053a0:	4628      	mov	r0, r5
 80053a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053a6:	f000 b8d3 	b.w	8005550 <__malloc_unlock>
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	d90b      	bls.n	80053c6 <_free_r+0x4a>
 80053ae:	6821      	ldr	r1, [r4, #0]
 80053b0:	1862      	adds	r2, r4, r1
 80053b2:	4293      	cmp	r3, r2
 80053b4:	bf01      	itttt	eq
 80053b6:	681a      	ldreq	r2, [r3, #0]
 80053b8:	685b      	ldreq	r3, [r3, #4]
 80053ba:	1852      	addeq	r2, r2, r1
 80053bc:	6022      	streq	r2, [r4, #0]
 80053be:	6063      	str	r3, [r4, #4]
 80053c0:	6004      	str	r4, [r0, #0]
 80053c2:	e7ed      	b.n	80053a0 <_free_r+0x24>
 80053c4:	4613      	mov	r3, r2
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	b10a      	cbz	r2, 80053ce <_free_r+0x52>
 80053ca:	42a2      	cmp	r2, r4
 80053cc:	d9fa      	bls.n	80053c4 <_free_r+0x48>
 80053ce:	6819      	ldr	r1, [r3, #0]
 80053d0:	1858      	adds	r0, r3, r1
 80053d2:	42a0      	cmp	r0, r4
 80053d4:	d10b      	bne.n	80053ee <_free_r+0x72>
 80053d6:	6820      	ldr	r0, [r4, #0]
 80053d8:	4401      	add	r1, r0
 80053da:	1858      	adds	r0, r3, r1
 80053dc:	4282      	cmp	r2, r0
 80053de:	6019      	str	r1, [r3, #0]
 80053e0:	d1de      	bne.n	80053a0 <_free_r+0x24>
 80053e2:	6810      	ldr	r0, [r2, #0]
 80053e4:	6852      	ldr	r2, [r2, #4]
 80053e6:	4401      	add	r1, r0
 80053e8:	6019      	str	r1, [r3, #0]
 80053ea:	605a      	str	r2, [r3, #4]
 80053ec:	e7d8      	b.n	80053a0 <_free_r+0x24>
 80053ee:	d902      	bls.n	80053f6 <_free_r+0x7a>
 80053f0:	230c      	movs	r3, #12
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	e7d4      	b.n	80053a0 <_free_r+0x24>
 80053f6:	6820      	ldr	r0, [r4, #0]
 80053f8:	1821      	adds	r1, r4, r0
 80053fa:	428a      	cmp	r2, r1
 80053fc:	bf01      	itttt	eq
 80053fe:	6811      	ldreq	r1, [r2, #0]
 8005400:	6852      	ldreq	r2, [r2, #4]
 8005402:	1809      	addeq	r1, r1, r0
 8005404:	6021      	streq	r1, [r4, #0]
 8005406:	6062      	str	r2, [r4, #4]
 8005408:	605c      	str	r4, [r3, #4]
 800540a:	e7c9      	b.n	80053a0 <_free_r+0x24>
 800540c:	bd38      	pop	{r3, r4, r5, pc}
 800540e:	bf00      	nop
 8005410:	20000258 	.word	0x20000258

08005414 <_malloc_r>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	1ccd      	adds	r5, r1, #3
 8005418:	f025 0503 	bic.w	r5, r5, #3
 800541c:	3508      	adds	r5, #8
 800541e:	2d0c      	cmp	r5, #12
 8005420:	bf38      	it	cc
 8005422:	250c      	movcc	r5, #12
 8005424:	2d00      	cmp	r5, #0
 8005426:	4606      	mov	r6, r0
 8005428:	db01      	blt.n	800542e <_malloc_r+0x1a>
 800542a:	42a9      	cmp	r1, r5
 800542c:	d903      	bls.n	8005436 <_malloc_r+0x22>
 800542e:	230c      	movs	r3, #12
 8005430:	6033      	str	r3, [r6, #0]
 8005432:	2000      	movs	r0, #0
 8005434:	bd70      	pop	{r4, r5, r6, pc}
 8005436:	f000 f88a 	bl	800554e <__malloc_lock>
 800543a:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <_malloc_r+0xac>)
 800543c:	6814      	ldr	r4, [r2, #0]
 800543e:	4621      	mov	r1, r4
 8005440:	b991      	cbnz	r1, 8005468 <_malloc_r+0x54>
 8005442:	4c20      	ldr	r4, [pc, #128]	; (80054c4 <_malloc_r+0xb0>)
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	b91b      	cbnz	r3, 8005450 <_malloc_r+0x3c>
 8005448:	4630      	mov	r0, r6
 800544a:	f000 f863 	bl	8005514 <_sbrk_r>
 800544e:	6020      	str	r0, [r4, #0]
 8005450:	4629      	mov	r1, r5
 8005452:	4630      	mov	r0, r6
 8005454:	f000 f85e 	bl	8005514 <_sbrk_r>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d124      	bne.n	80054a6 <_malloc_r+0x92>
 800545c:	230c      	movs	r3, #12
 800545e:	4630      	mov	r0, r6
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	f000 f875 	bl	8005550 <__malloc_unlock>
 8005466:	e7e4      	b.n	8005432 <_malloc_r+0x1e>
 8005468:	680b      	ldr	r3, [r1, #0]
 800546a:	1b5b      	subs	r3, r3, r5
 800546c:	d418      	bmi.n	80054a0 <_malloc_r+0x8c>
 800546e:	2b0b      	cmp	r3, #11
 8005470:	d90f      	bls.n	8005492 <_malloc_r+0x7e>
 8005472:	600b      	str	r3, [r1, #0]
 8005474:	18cc      	adds	r4, r1, r3
 8005476:	50cd      	str	r5, [r1, r3]
 8005478:	4630      	mov	r0, r6
 800547a:	f000 f869 	bl	8005550 <__malloc_unlock>
 800547e:	f104 000b 	add.w	r0, r4, #11
 8005482:	1d23      	adds	r3, r4, #4
 8005484:	f020 0007 	bic.w	r0, r0, #7
 8005488:	1ac3      	subs	r3, r0, r3
 800548a:	d0d3      	beq.n	8005434 <_malloc_r+0x20>
 800548c:	425a      	negs	r2, r3
 800548e:	50e2      	str	r2, [r4, r3]
 8005490:	e7d0      	b.n	8005434 <_malloc_r+0x20>
 8005492:	684b      	ldr	r3, [r1, #4]
 8005494:	428c      	cmp	r4, r1
 8005496:	bf16      	itet	ne
 8005498:	6063      	strne	r3, [r4, #4]
 800549a:	6013      	streq	r3, [r2, #0]
 800549c:	460c      	movne	r4, r1
 800549e:	e7eb      	b.n	8005478 <_malloc_r+0x64>
 80054a0:	460c      	mov	r4, r1
 80054a2:	6849      	ldr	r1, [r1, #4]
 80054a4:	e7cc      	b.n	8005440 <_malloc_r+0x2c>
 80054a6:	1cc4      	adds	r4, r0, #3
 80054a8:	f024 0403 	bic.w	r4, r4, #3
 80054ac:	42a0      	cmp	r0, r4
 80054ae:	d005      	beq.n	80054bc <_malloc_r+0xa8>
 80054b0:	1a21      	subs	r1, r4, r0
 80054b2:	4630      	mov	r0, r6
 80054b4:	f000 f82e 	bl	8005514 <_sbrk_r>
 80054b8:	3001      	adds	r0, #1
 80054ba:	d0cf      	beq.n	800545c <_malloc_r+0x48>
 80054bc:	6025      	str	r5, [r4, #0]
 80054be:	e7db      	b.n	8005478 <_malloc_r+0x64>
 80054c0:	20000258 	.word	0x20000258
 80054c4:	2000025c 	.word	0x2000025c

080054c8 <_realloc_r>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	4607      	mov	r7, r0
 80054cc:	4614      	mov	r4, r2
 80054ce:	460e      	mov	r6, r1
 80054d0:	b921      	cbnz	r1, 80054dc <_realloc_r+0x14>
 80054d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054d6:	4611      	mov	r1, r2
 80054d8:	f7ff bf9c 	b.w	8005414 <_malloc_r>
 80054dc:	b922      	cbnz	r2, 80054e8 <_realloc_r+0x20>
 80054de:	f7ff ff4d 	bl	800537c <_free_r>
 80054e2:	4625      	mov	r5, r4
 80054e4:	4628      	mov	r0, r5
 80054e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e8:	f000 f833 	bl	8005552 <_malloc_usable_size_r>
 80054ec:	42a0      	cmp	r0, r4
 80054ee:	d20f      	bcs.n	8005510 <_realloc_r+0x48>
 80054f0:	4621      	mov	r1, r4
 80054f2:	4638      	mov	r0, r7
 80054f4:	f7ff ff8e 	bl	8005414 <_malloc_r>
 80054f8:	4605      	mov	r5, r0
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d0f2      	beq.n	80054e4 <_realloc_r+0x1c>
 80054fe:	4631      	mov	r1, r6
 8005500:	4622      	mov	r2, r4
 8005502:	f7ff ff2f 	bl	8005364 <memcpy>
 8005506:	4631      	mov	r1, r6
 8005508:	4638      	mov	r0, r7
 800550a:	f7ff ff37 	bl	800537c <_free_r>
 800550e:	e7e9      	b.n	80054e4 <_realloc_r+0x1c>
 8005510:	4635      	mov	r5, r6
 8005512:	e7e7      	b.n	80054e4 <_realloc_r+0x1c>

08005514 <_sbrk_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	2300      	movs	r3, #0
 8005518:	4c05      	ldr	r4, [pc, #20]	; (8005530 <_sbrk_r+0x1c>)
 800551a:	4605      	mov	r5, r0
 800551c:	4608      	mov	r0, r1
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	f7fc f978 	bl	8001814 <_sbrk>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_sbrk_r+0x1a>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	b103      	cbz	r3, 800552e <_sbrk_r+0x1a>
 800552c:	602b      	str	r3, [r5, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	2000043c 	.word	0x2000043c

08005534 <__ascii_wctomb>:
 8005534:	b149      	cbz	r1, 800554a <__ascii_wctomb+0x16>
 8005536:	2aff      	cmp	r2, #255	; 0xff
 8005538:	bf8b      	itete	hi
 800553a:	238a      	movhi	r3, #138	; 0x8a
 800553c:	700a      	strbls	r2, [r1, #0]
 800553e:	6003      	strhi	r3, [r0, #0]
 8005540:	2001      	movls	r0, #1
 8005542:	bf88      	it	hi
 8005544:	f04f 30ff 	movhi.w	r0, #4294967295
 8005548:	4770      	bx	lr
 800554a:	4608      	mov	r0, r1
 800554c:	4770      	bx	lr

0800554e <__malloc_lock>:
 800554e:	4770      	bx	lr

08005550 <__malloc_unlock>:
 8005550:	4770      	bx	lr

08005552 <_malloc_usable_size_r>:
 8005552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005556:	1f18      	subs	r0, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	bfbc      	itt	lt
 800555c:	580b      	ldrlt	r3, [r1, r0]
 800555e:	18c0      	addlt	r0, r0, r3
 8005560:	4770      	bx	lr
	...

08005564 <_init>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr

08005570 <_fini>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	bf00      	nop
 8005574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005576:	bc08      	pop	{r3}
 8005578:	469e      	mov	lr, r3
 800557a:	4770      	bx	lr
