
Esclava.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000706c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007388  08007388  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007388  08007388  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007388  08007388  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007388  08007388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800738c  0800738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000014  080073a4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080073a4  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc3d  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026cf  00000000  00000000  0002dc7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000061c8  00000000  00000000  00030349  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c28  00000000  00000000  00036518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ae0  00000000  00000000  00037140  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001479f  00000000  00000000  00037c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d3dd  00000000  00000000  0004c3bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006c528  00000000  00000000  0005979c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c5cc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003034  00000000  00000000  000c5d40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08007164 	.word	0x08007164

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08007164 	.word	0x08007164

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_ADC1_Init+0x74>)
 80005ea:	4a19      	ldr	r2, [pc, #100]	; (8000650 <MX_ADC1_Init+0x78>)
 80005ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x74>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x74>)
 8000602:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000606:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_ADC1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x74>)
 8000610:	2201      	movs	r2, #1
 8000612:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x74>)
 8000616:	f001 fb35 	bl	8001c84 <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000620:	f001 f8dc 	bl	80017dc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2301      	movs	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800062c:	2306      	movs	r3, #6
 800062e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x74>)
 8000636:	f001 fe87 	bl	8002348 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000640:	f001 f8cc 	bl	80017dc <Error_Handler>
  }

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000050 	.word	0x20000050
 8000650:	40012400 	.word	0x40012400

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a2d      	ldr	r2, [pc, #180]	; (8000724 <HAL_ADC_MspInit+0xd0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d152      	bne.n	800071a <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <HAL_ADC_MspInit+0xd4>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <HAL_ADC_MspInit+0xd4>)
 800067a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <HAL_ADC_MspInit+0xd4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <HAL_ADC_MspInit+0xd4>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a25      	ldr	r2, [pc, #148]	; (8000728 <HAL_ADC_MspInit+0xd4>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <HAL_ADC_MspInit+0xd4>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = FASE1_SENSOR_Pin|FASE2_SENSOR_Pin|FASE3_SENSOR_Pin|FASE4_SENSOR_Pin 
 80006a4:	233f      	movs	r3, #63	; 0x3f
 80006a6:	613b      	str	r3, [r7, #16]
                          |FASE5_SENSOR_Pin|FASE6_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a8:	2303      	movs	r3, #3
 80006aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	481e      	ldr	r0, [pc, #120]	; (800072c <HAL_ADC_MspInit+0xd8>)
 80006b4:	f002 fd68 	bl	8003188 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 80006ba:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <HAL_ADC_MspInit+0xe0>)
 80006bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 80006d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 80006da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 80006e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 80006f0:	f002 fa26 	bl	8002b40 <HAL_DMA_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80006fa:	f001 f86f 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 8000702:	621a      	str	r2, [r3, #32]
 8000704:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <HAL_ADC_MspInit+0xdc>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2012      	movs	r0, #18
 8000710:	f002 f9c6 	bl	8002aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000714:	2012      	movs	r0, #18
 8000716:	f002 f9ef 	bl	8002af8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40012400 	.word	0x40012400
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800
 8000730:	20000080 	.word	0x20000080
 8000734:	40020008 	.word	0x40020008

08000738 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_DMA_Init+0x38>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <MX_DMA_Init+0x38>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_DMA_Init+0x38>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	200b      	movs	r0, #11
 800075c:	f002 f9a0 	bl	8002aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000760:	200b      	movs	r0, #11
 8000762:	f002 f9c9 	bl	8002af8 <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <Fases_Auto>:
*
* @param vector: vector de tiempos
* @retval None */

void Fases_Auto(uint8_t *tiempos, RTC_TimeTypeDef *aHora, Fases *iHora)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
/********************************* FASE 1*************************************/

	if(Verif_Tiempo(aHora, &iHora->tFase1) == HAL_OK)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4619      	mov	r1, r3
 8000784:	68b8      	ldr	r0, [r7, #8]
 8000786:	f000 fca0 	bl	80010ca <Verif_Tiempo>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d108      	bne.n	80007a2 <Fases_Auto+0x2e>
	{
		c1Fase = 0;
 8000790:	4bb3      	ldr	r3, [pc, #716]	; (8000a60 <Fases_Auto+0x2ec>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
		BF.band1 = 1;
 8000796:	4ab3      	ldr	r2, [pc, #716]	; (8000a64 <Fases_Auto+0x2f0>)
 8000798:	7813      	ldrb	r3, [r2, #0]
 800079a:	f043 0320 	orr.w	r3, r3, #32
 800079e:	7013      	strb	r3, [r2, #0]
 80007a0:	e00f      	b.n	80007c2 <Fases_Auto+0x4e>
	}
	else if(Verif_Tiempo(aHora, &iHora->tFase1) == HAL_TIMEOUT)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4619      	mov	r1, r3
 80007a6:	68b8      	ldr	r0, [r7, #8]
 80007a8:	f000 fc8f 	bl	80010ca <Verif_Tiempo>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d107      	bne.n	80007c2 <Fases_Auto+0x4e>
	{
		BF.band1 = 0;
 80007b2:	4aac      	ldr	r2, [pc, #688]	; (8000a64 <Fases_Auto+0x2f0>)
 80007b4:	7813      	ldrb	r3, [r2, #0]
 80007b6:	f36f 1345 	bfc	r3, #5, #1
 80007ba:	7013      	strb	r3, [r2, #0]
		Apaga_Fase(1);
 80007bc:	2001      	movs	r0, #1
 80007be:	f000 fd5d 	bl	800127c <Apaga_Fase>
		/* Se debe apagar completamente esta fase.*/
	}
	if(BF.band1 == 1)
 80007c2:	4ba8      	ldr	r3, [pc, #672]	; (8000a64 <Fases_Auto+0x2f0>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f003 0320 	and.w	r3, r3, #32
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d067      	beq.n	80008a0 <Fases_Auto+0x12c>
	{
		switch(f1Actual)
 80007d0:	4ba5      	ldr	r3, [pc, #660]	; (8000a68 <Fases_Auto+0x2f4>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d01d      	beq.n	8000816 <Fases_Auto+0xa2>
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d036      	beq.n	800084c <Fases_Auto+0xd8>
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d14f      	bne.n	8000882 <Fases_Auto+0x10e>
		{
		case 1:
		{
			HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e8:	48a0      	ldr	r0, [pc, #640]	; (8000a6c <Fases_Auto+0x2f8>)
 80007ea:	f002 fef5 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c1Fase == tiempos[0])
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	4b9b      	ldr	r3, [pc, #620]	; (8000a60 <Fases_Auto+0x2ec>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d145      	bne.n	8000888 <Fases_Auto+0x114>
			{
				HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000802:	489a      	ldr	r0, [pc, #616]	; (8000a6c <Fases_Auto+0x2f8>)
 8000804:	f002 fee8 	bl	80035d8 <HAL_GPIO_WritePin>
				f1Actual = 2;
 8000808:	4b97      	ldr	r3, [pc, #604]	; (8000a68 <Fases_Auto+0x2f4>)
 800080a:	2202      	movs	r2, #2
 800080c:	701a      	strb	r2, [r3, #0]
				c1Fase = 0;
 800080e:	4b94      	ldr	r3, [pc, #592]	; (8000a60 <Fases_Auto+0x2ec>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
				break;
 8000814:	e03d      	b.n	8000892 <Fases_Auto+0x11e>
			}
		}
		break;
		case 2:
		{
			HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4894      	ldr	r0, [pc, #592]	; (8000a70 <Fases_Auto+0x2fc>)
 800081e:	f002 fedb 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c1Fase == tiempos[1])
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	4b8d      	ldr	r3, [pc, #564]	; (8000a60 <Fases_Auto+0x2ec>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	429a      	cmp	r2, r3
 8000830:	d12c      	bne.n	800088c <Fases_Auto+0x118>
			{
				HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000838:	488d      	ldr	r0, [pc, #564]	; (8000a70 <Fases_Auto+0x2fc>)
 800083a:	f002 fecd 	bl	80035d8 <HAL_GPIO_WritePin>
				f1Actual = 3;
 800083e:	4b8a      	ldr	r3, [pc, #552]	; (8000a68 <Fases_Auto+0x2f4>)
 8000840:	2203      	movs	r2, #3
 8000842:	701a      	strb	r2, [r3, #0]
				c1Fase = 0;
 8000844:	4b86      	ldr	r3, [pc, #536]	; (8000a60 <Fases_Auto+0x2ec>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
				break;
 800084a:	e022      	b.n	8000892 <Fases_Auto+0x11e>
			}
		}
		break;
		case 3:
		{
			HAL_GPIO_WritePin(GPIOA,FASE1_ROJO_Pin,GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000852:	4887      	ldr	r0, [pc, #540]	; (8000a70 <Fases_Auto+0x2fc>)
 8000854:	f002 fec0 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c1Fase == tiempos[2])
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3302      	adds	r3, #2
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	4b80      	ldr	r3, [pc, #512]	; (8000a60 <Fases_Auto+0x2ec>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	429a      	cmp	r2, r3
 8000866:	d113      	bne.n	8000890 <Fases_Auto+0x11c>
			{
				HAL_GPIO_WritePin(GPIOA,FASE1_ROJO_Pin,GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086e:	4880      	ldr	r0, [pc, #512]	; (8000a70 <Fases_Auto+0x2fc>)
 8000870:	f002 feb2 	bl	80035d8 <HAL_GPIO_WritePin>
				f1Actual = 1;
 8000874:	4b7c      	ldr	r3, [pc, #496]	; (8000a68 <Fases_Auto+0x2f4>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
				c1Fase = 0;
 800087a:	4b79      	ldr	r3, [pc, #484]	; (8000a60 <Fases_Auto+0x2ec>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
				break;
 8000880:	e007      	b.n	8000892 <Fases_Auto+0x11e>
			}
		}
		break;
		default:
		{
			Error_Handler();
 8000882:	f000 ffab 	bl	80017dc <Error_Handler>
		}
		break;
 8000886:	e004      	b.n	8000892 <Fases_Auto+0x11e>
		break;
 8000888:	bf00      	nop
 800088a:	e002      	b.n	8000892 <Fases_Auto+0x11e>
		break;
 800088c:	bf00      	nop
 800088e:	e000      	b.n	8000892 <Fases_Auto+0x11e>
		break;
 8000890:	bf00      	nop
		}
		c1Fase++;
 8000892:	4b73      	ldr	r3, [pc, #460]	; (8000a60 <Fases_Auto+0x2ec>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3301      	adds	r3, #1
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b70      	ldr	r3, [pc, #448]	; (8000a60 <Fases_Auto+0x2ec>)
 800089e:	701a      	strb	r2, [r3, #0]
	}

/********************************* FASE 2*************************************/
	if(Verif_Tiempo(aHora, &iHora->tFase2) == HAL_OK)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3303      	adds	r3, #3
 80008a4:	4619      	mov	r1, r3
 80008a6:	68b8      	ldr	r0, [r7, #8]
 80008a8:	f000 fc0f 	bl	80010ca <Verif_Tiempo>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d108      	bne.n	80008c4 <Fases_Auto+0x150>
	{
		c2Fase = 0;
 80008b2:	4b70      	ldr	r3, [pc, #448]	; (8000a74 <Fases_Auto+0x300>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
		BF.band2 = 1;
 80008b8:	4a6a      	ldr	r2, [pc, #424]	; (8000a64 <Fases_Auto+0x2f0>)
 80008ba:	7813      	ldrb	r3, [r2, #0]
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	7013      	strb	r3, [r2, #0]
 80008c2:	e010      	b.n	80008e6 <Fases_Auto+0x172>
	}
	else if(Verif_Tiempo(aHora, &iHora->tFase2) == HAL_TIMEOUT)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3303      	adds	r3, #3
 80008c8:	4619      	mov	r1, r3
 80008ca:	68b8      	ldr	r0, [r7, #8]
 80008cc:	f000 fbfd 	bl	80010ca <Verif_Tiempo>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d107      	bne.n	80008e6 <Fases_Auto+0x172>
	{
		BF.band2 = 0;
 80008d6:	4a63      	ldr	r2, [pc, #396]	; (8000a64 <Fases_Auto+0x2f0>)
 80008d8:	7813      	ldrb	r3, [r2, #0]
 80008da:	f36f 1304 	bfc	r3, #4, #1
 80008de:	7013      	strb	r3, [r2, #0]
		Apaga_Fase(2);
 80008e0:	2002      	movs	r0, #2
 80008e2:	f000 fccb 	bl	800127c <Apaga_Fase>
		/* Se debe apagar completamente esta fase.*/
	}
	if(BF.band2 == 1)
 80008e6:	4b5f      	ldr	r3, [pc, #380]	; (8000a64 <Fases_Auto+0x2f0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d068      	beq.n	80009c6 <Fases_Auto+0x252>
	{
		switch(f2Actual)
 80008f4:	4b60      	ldr	r3, [pc, #384]	; (8000a78 <Fases_Auto+0x304>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d01e      	beq.n	800093c <Fases_Auto+0x1c8>
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d037      	beq.n	8000972 <Fases_Auto+0x1fe>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d150      	bne.n	80009a8 <Fases_Auto+0x234>
		{
		case 1:
		{
			HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin,GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090c:	4858      	ldr	r0, [pc, #352]	; (8000a70 <Fases_Auto+0x2fc>)
 800090e:	f002 fe63 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c2Fase == tiempos[3])
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3303      	adds	r3, #3
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	4b56      	ldr	r3, [pc, #344]	; (8000a74 <Fases_Auto+0x300>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	429a      	cmp	r2, r3
 8000920:	d145      	bne.n	80009ae <Fases_Auto+0x23a>
			{
				HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin,GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4851      	ldr	r0, [pc, #324]	; (8000a70 <Fases_Auto+0x2fc>)
 800092a:	f002 fe55 	bl	80035d8 <HAL_GPIO_WritePin>
				f2Actual = 2;
 800092e:	4b52      	ldr	r3, [pc, #328]	; (8000a78 <Fases_Auto+0x304>)
 8000930:	2202      	movs	r2, #2
 8000932:	701a      	strb	r2, [r3, #0]
				c2Fase = 0;
 8000934:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <Fases_Auto+0x300>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
				break;
 800093a:	e03d      	b.n	80009b8 <Fases_Auto+0x244>
			}
		}
		break;
		case 2:
		{
			HAL_GPIO_WritePin(GPIOA,FASE2_AMA_Pin,GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	484b      	ldr	r0, [pc, #300]	; (8000a70 <Fases_Auto+0x2fc>)
 8000944:	f002 fe48 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c2Fase == tiempos[4])
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3304      	adds	r3, #4
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	4b49      	ldr	r3, [pc, #292]	; (8000a74 <Fases_Auto+0x300>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	429a      	cmp	r2, r3
 8000956:	d12c      	bne.n	80009b2 <Fases_Auto+0x23e>
			{
				HAL_GPIO_WritePin(GPIOA,FASE2_AMA_Pin,GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095e:	4844      	ldr	r0, [pc, #272]	; (8000a70 <Fases_Auto+0x2fc>)
 8000960:	f002 fe3a 	bl	80035d8 <HAL_GPIO_WritePin>
				f2Actual = 3;
 8000964:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <Fases_Auto+0x304>)
 8000966:	2203      	movs	r2, #3
 8000968:	701a      	strb	r2, [r3, #0]
				c2Fase = 0;
 800096a:	4b42      	ldr	r3, [pc, #264]	; (8000a74 <Fases_Auto+0x300>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
				break;
 8000970:	e022      	b.n	80009b8 <Fases_Auto+0x244>
			}
		}
		break;
		case 3:
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000978:	483d      	ldr	r0, [pc, #244]	; (8000a70 <Fases_Auto+0x2fc>)
 800097a:	f002 fe2d 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c2Fase == tiempos[5])
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3305      	adds	r3, #5
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <Fases_Auto+0x300>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	429a      	cmp	r2, r3
 800098c:	d113      	bne.n	80009b6 <Fases_Auto+0x242>
			{
				HAL_GPIO_WritePin(GPIOA,FASE2_ROJO_Pin,GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000994:	4836      	ldr	r0, [pc, #216]	; (8000a70 <Fases_Auto+0x2fc>)
 8000996:	f002 fe1f 	bl	80035d8 <HAL_GPIO_WritePin>
				f2Actual = 1;
 800099a:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <Fases_Auto+0x304>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
				c2Fase = 0;
 80009a0:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <Fases_Auto+0x300>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
				break;
 80009a6:	e007      	b.n	80009b8 <Fases_Auto+0x244>
			}
		}
		break;
		default:
		{
			Error_Handler();
 80009a8:	f000 ff18 	bl	80017dc <Error_Handler>
		}
		break;
 80009ac:	e004      	b.n	80009b8 <Fases_Auto+0x244>
		break;
 80009ae:	bf00      	nop
 80009b0:	e002      	b.n	80009b8 <Fases_Auto+0x244>
		break;
 80009b2:	bf00      	nop
 80009b4:	e000      	b.n	80009b8 <Fases_Auto+0x244>
		break;
 80009b6:	bf00      	nop
		}
		c2Fase++;
 80009b8:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <Fases_Auto+0x300>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <Fases_Auto+0x300>)
 80009c4:	701a      	strb	r2, [r3, #0]
	}

/********************************* FASE 3*************************************/
	if(Verif_Tiempo(aHora, &iHora->tFase3) == HAL_OK)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3306      	adds	r3, #6
 80009ca:	4619      	mov	r1, r3
 80009cc:	68b8      	ldr	r0, [r7, #8]
 80009ce:	f000 fb7c 	bl	80010ca <Verif_Tiempo>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d108      	bne.n	80009ea <Fases_Auto+0x276>
	{
		c3Fase = 0;
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <Fases_Auto+0x308>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
		BF.band3 = 1;
 80009de:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <Fases_Auto+0x2f0>)
 80009e0:	7813      	ldrb	r3, [r2, #0]
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	7013      	strb	r3, [r2, #0]
 80009e8:	e010      	b.n	8000a0c <Fases_Auto+0x298>
	}
	else if(Verif_Tiempo(aHora, &iHora->tFase3) == HAL_TIMEOUT)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3306      	adds	r3, #6
 80009ee:	4619      	mov	r1, r3
 80009f0:	68b8      	ldr	r0, [r7, #8]
 80009f2:	f000 fb6a 	bl	80010ca <Verif_Tiempo>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d107      	bne.n	8000a0c <Fases_Auto+0x298>
	{
		BF.band3 = 0;
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <Fases_Auto+0x2f0>)
 80009fe:	7813      	ldrb	r3, [r2, #0]
 8000a00:	f36f 03c3 	bfc	r3, #3, #1
 8000a04:	7013      	strb	r3, [r2, #0]
		Apaga_Fase(3);
 8000a06:	2003      	movs	r0, #3
 8000a08:	f000 fc38 	bl	800127c <Apaga_Fase>
		/* Se debe apagar completamente esta fase.*/
	}
	if(BF.band3 == 1)
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <Fases_Auto+0x2f0>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d079      	beq.n	8000b0e <Fases_Auto+0x39a>
	{
		switch(f3Actual)
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <Fases_Auto+0x30c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d02f      	beq.n	8000a84 <Fases_Auto+0x310>
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d048      	beq.n	8000aba <Fases_Auto+0x346>
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d161      	bne.n	8000af0 <Fases_Auto+0x37c>
		{
		case 1:
		{
			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin,GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2104      	movs	r1, #4
 8000a30:	480e      	ldr	r0, [pc, #56]	; (8000a6c <Fases_Auto+0x2f8>)
 8000a32:	f002 fdd1 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c3Fase == tiempos[6])
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3306      	adds	r3, #6
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <Fases_Auto+0x308>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d157      	bne.n	8000af6 <Fases_Auto+0x382>
			{
				HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin,GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <Fases_Auto+0x2f8>)
 8000a4c:	f002 fdc4 	bl	80035d8 <HAL_GPIO_WritePin>
				f3Actual = 2;
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <Fases_Auto+0x30c>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	701a      	strb	r2, [r3, #0]
				c3Fase = 0;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <Fases_Auto+0x308>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
				break;
 8000a5c:	e050      	b.n	8000b00 <Fases_Auto+0x38c>
 8000a5e:	bf00      	nop
 8000a60:	20000042 	.word	0x20000042
 8000a64:	200000c4 	.word	0x200000c4
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	40010800 	.word	0x40010800
 8000a74:	20000043 	.word	0x20000043
 8000a78:	20000001 	.word	0x20000001
 8000a7c:	20000044 	.word	0x20000044
 8000a80:	20000002 	.word	0x20000002
			}
		}
		break;
		case 2:
		{
			HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin,GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8a:	48ad      	ldr	r0, [pc, #692]	; (8000d40 <Fases_Auto+0x5cc>)
 8000a8c:	f002 fda4 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c3Fase == tiempos[7])
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3307      	adds	r3, #7
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4bab      	ldr	r3, [pc, #684]	; (8000d44 <Fases_Auto+0x5d0>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d12c      	bne.n	8000afa <Fases_Auto+0x386>
			{
				HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin,GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa6:	48a6      	ldr	r0, [pc, #664]	; (8000d40 <Fases_Auto+0x5cc>)
 8000aa8:	f002 fd96 	bl	80035d8 <HAL_GPIO_WritePin>
				f3Actual = 3;
 8000aac:	4ba6      	ldr	r3, [pc, #664]	; (8000d48 <Fases_Auto+0x5d4>)
 8000aae:	2203      	movs	r2, #3
 8000ab0:	701a      	strb	r2, [r3, #0]
				c3Fase = 0;
 8000ab2:	4ba4      	ldr	r3, [pc, #656]	; (8000d44 <Fases_Auto+0x5d0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
				break;
 8000ab8:	e022      	b.n	8000b00 <Fases_Auto+0x38c>
			}
		}
		break;
		case 3:
		{
			HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac0:	48a2      	ldr	r0, [pc, #648]	; (8000d4c <Fases_Auto+0x5d8>)
 8000ac2:	f002 fd89 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c3Fase == tiempos[8])
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3308      	adds	r3, #8
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	4b9d      	ldr	r3, [pc, #628]	; (8000d44 <Fases_Auto+0x5d0>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d113      	bne.n	8000afe <Fases_Auto+0x38a>
			{
				HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000adc:	489b      	ldr	r0, [pc, #620]	; (8000d4c <Fases_Auto+0x5d8>)
 8000ade:	f002 fd7b 	bl	80035d8 <HAL_GPIO_WritePin>
				f3Actual = 1;
 8000ae2:	4b99      	ldr	r3, [pc, #612]	; (8000d48 <Fases_Auto+0x5d4>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
				c3Fase = 0;
 8000ae8:	4b96      	ldr	r3, [pc, #600]	; (8000d44 <Fases_Auto+0x5d0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
				break;
 8000aee:	e007      	b.n	8000b00 <Fases_Auto+0x38c>
			}
		}
		break;
		default:
		{
			Error_Handler();
 8000af0:	f000 fe74 	bl	80017dc <Error_Handler>
		}
		break;
 8000af4:	e004      	b.n	8000b00 <Fases_Auto+0x38c>
		break;
 8000af6:	bf00      	nop
 8000af8:	e002      	b.n	8000b00 <Fases_Auto+0x38c>
		break;
 8000afa:	bf00      	nop
 8000afc:	e000      	b.n	8000b00 <Fases_Auto+0x38c>
		break;
 8000afe:	bf00      	nop
		}
		c3Fase++;
 8000b00:	4b90      	ldr	r3, [pc, #576]	; (8000d44 <Fases_Auto+0x5d0>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	3301      	adds	r3, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b8e      	ldr	r3, [pc, #568]	; (8000d44 <Fases_Auto+0x5d0>)
 8000b0c:	701a      	strb	r2, [r3, #0]
	}

/********************************* FASE 4*************************************/
	if(Verif_Tiempo(aHora, &iHora->tFase4) == HAL_OK)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3309      	adds	r3, #9
 8000b12:	4619      	mov	r1, r3
 8000b14:	68b8      	ldr	r0, [r7, #8]
 8000b16:	f000 fad8 	bl	80010ca <Verif_Tiempo>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d108      	bne.n	8000b32 <Fases_Auto+0x3be>
	{
		c4Fase = 0;
 8000b20:	4b8b      	ldr	r3, [pc, #556]	; (8000d50 <Fases_Auto+0x5dc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
		BF.band4 = 1;
 8000b26:	4a8b      	ldr	r2, [pc, #556]	; (8000d54 <Fases_Auto+0x5e0>)
 8000b28:	7813      	ldrb	r3, [r2, #0]
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	7013      	strb	r3, [r2, #0]
 8000b30:	e010      	b.n	8000b54 <Fases_Auto+0x3e0>
	}
	else if(Verif_Tiempo(aHora, &iHora->tFase4) == HAL_TIMEOUT)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3309      	adds	r3, #9
 8000b36:	4619      	mov	r1, r3
 8000b38:	68b8      	ldr	r0, [r7, #8]
 8000b3a:	f000 fac6 	bl	80010ca <Verif_Tiempo>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d107      	bne.n	8000b54 <Fases_Auto+0x3e0>
	{
		BF.band4 = 0;
 8000b44:	4a83      	ldr	r2, [pc, #524]	; (8000d54 <Fases_Auto+0x5e0>)
 8000b46:	7813      	ldrb	r3, [r2, #0]
 8000b48:	f36f 0382 	bfc	r3, #2, #1
 8000b4c:	7013      	strb	r3, [r2, #0]
		Apaga_Fase(4);
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f000 fb94 	bl	800127c <Apaga_Fase>
		/* Se debe apagar completamente esta fase.*/
	}
	if(BF.band4 == 1)
 8000b54:	4b7f      	ldr	r3, [pc, #508]	; (8000d54 <Fases_Auto+0x5e0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d062      	beq.n	8000c28 <Fases_Auto+0x4b4>
	{
		switch(f4Actual)
 8000b62:	4b7d      	ldr	r3, [pc, #500]	; (8000d58 <Fases_Auto+0x5e4>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d01c      	beq.n	8000ba6 <Fases_Auto+0x432>
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d033      	beq.n	8000bd8 <Fases_Auto+0x464>
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d14a      	bne.n	8000c0a <Fases_Auto+0x496>
		{
		case 1:
		{
			HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin,GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2108      	movs	r1, #8
 8000b78:	4871      	ldr	r0, [pc, #452]	; (8000d40 <Fases_Auto+0x5cc>)
 8000b7a:	f002 fd2d 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c4Fase == tiempos[9])
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3309      	adds	r3, #9
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	4b72      	ldr	r3, [pc, #456]	; (8000d50 <Fases_Auto+0x5dc>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d140      	bne.n	8000c10 <Fases_Auto+0x49c>
			{
				HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin,GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2108      	movs	r1, #8
 8000b92:	486b      	ldr	r0, [pc, #428]	; (8000d40 <Fases_Auto+0x5cc>)
 8000b94:	f002 fd20 	bl	80035d8 <HAL_GPIO_WritePin>
				f4Actual = 2;
 8000b98:	4b6f      	ldr	r3, [pc, #444]	; (8000d58 <Fases_Auto+0x5e4>)
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	701a      	strb	r2, [r3, #0]
				c4Fase = 0;
 8000b9e:	4b6c      	ldr	r3, [pc, #432]	; (8000d50 <Fases_Auto+0x5dc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
				break;
 8000ba4:	e039      	b.n	8000c1a <Fases_Auto+0x4a6>
			}
		}
		break;
		case 2:
		{
			HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin,GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	4865      	ldr	r0, [pc, #404]	; (8000d40 <Fases_Auto+0x5cc>)
 8000bac:	f002 fd14 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c4Fase == tiempos[10])
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	330a      	adds	r3, #10
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b66      	ldr	r3, [pc, #408]	; (8000d50 <Fases_Auto+0x5dc>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d129      	bne.n	8000c14 <Fases_Auto+0x4a0>
			{
				HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin,GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	485e      	ldr	r0, [pc, #376]	; (8000d40 <Fases_Auto+0x5cc>)
 8000bc6:	f002 fd07 	bl	80035d8 <HAL_GPIO_WritePin>
				f4Actual = 3;
 8000bca:	4b63      	ldr	r3, [pc, #396]	; (8000d58 <Fases_Auto+0x5e4>)
 8000bcc:	2203      	movs	r2, #3
 8000bce:	701a      	strb	r2, [r3, #0]
				c4Fase = 0;
 8000bd0:	4b5f      	ldr	r3, [pc, #380]	; (8000d50 <Fases_Auto+0x5dc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
				break;
 8000bd6:	e020      	b.n	8000c1a <Fases_Auto+0x4a6>
			}
		}
		break;
		case 3:
		{
			HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin,GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2120      	movs	r1, #32
 8000bdc:	4858      	ldr	r0, [pc, #352]	; (8000d40 <Fases_Auto+0x5cc>)
 8000bde:	f002 fcfb 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c4Fase == tiempos[11])
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	330b      	adds	r3, #11
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	4b59      	ldr	r3, [pc, #356]	; (8000d50 <Fases_Auto+0x5dc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d112      	bne.n	8000c18 <Fases_Auto+0x4a4>
			{
				HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin,GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4852      	ldr	r0, [pc, #328]	; (8000d40 <Fases_Auto+0x5cc>)
 8000bf8:	f002 fcee 	bl	80035d8 <HAL_GPIO_WritePin>
				f4Actual = 1;
 8000bfc:	4b56      	ldr	r3, [pc, #344]	; (8000d58 <Fases_Auto+0x5e4>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
				c4Fase = 0;
 8000c02:	4b53      	ldr	r3, [pc, #332]	; (8000d50 <Fases_Auto+0x5dc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
				break;
 8000c08:	e007      	b.n	8000c1a <Fases_Auto+0x4a6>
			}
		}
		break;
		default:
		{
			Error_Handler();
 8000c0a:	f000 fde7 	bl	80017dc <Error_Handler>
		}
		break;
 8000c0e:	e004      	b.n	8000c1a <Fases_Auto+0x4a6>
		break;
 8000c10:	bf00      	nop
 8000c12:	e002      	b.n	8000c1a <Fases_Auto+0x4a6>
		break;
 8000c14:	bf00      	nop
 8000c16:	e000      	b.n	8000c1a <Fases_Auto+0x4a6>
		break;
 8000c18:	bf00      	nop
		}
		c4Fase++;
 8000c1a:	4b4d      	ldr	r3, [pc, #308]	; (8000d50 <Fases_Auto+0x5dc>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	3301      	adds	r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <Fases_Auto+0x5dc>)
 8000c26:	701a      	strb	r2, [r3, #0]
	}

/********************************* FASE 5*************************************/
	if(Verif_Tiempo(aHora, &iHora->tFase5) == HAL_OK)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	330c      	adds	r3, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	68b8      	ldr	r0, [r7, #8]
 8000c30:	f000 fa4b 	bl	80010ca <Verif_Tiempo>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d108      	bne.n	8000c4c <Fases_Auto+0x4d8>
	{
		c5Fase = 0;
 8000c3a:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <Fases_Auto+0x5e8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
		BF.band5 = 1;
 8000c40:	4a44      	ldr	r2, [pc, #272]	; (8000d54 <Fases_Auto+0x5e0>)
 8000c42:	7813      	ldrb	r3, [r2, #0]
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	7013      	strb	r3, [r2, #0]
 8000c4a:	e010      	b.n	8000c6e <Fases_Auto+0x4fa>
	}
	else if(Verif_Tiempo(aHora, &iHora->tFase5) == HAL_TIMEOUT)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	330c      	adds	r3, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	68b8      	ldr	r0, [r7, #8]
 8000c54:	f000 fa39 	bl	80010ca <Verif_Tiempo>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d107      	bne.n	8000c6e <Fases_Auto+0x4fa>
	{
		BF.band5 = 0;
 8000c5e:	4a3d      	ldr	r2, [pc, #244]	; (8000d54 <Fases_Auto+0x5e0>)
 8000c60:	7813      	ldrb	r3, [r2, #0]
 8000c62:	f36f 0341 	bfc	r3, #1, #1
 8000c66:	7013      	strb	r3, [r2, #0]
		Apaga_Fase(5);
 8000c68:	2005      	movs	r0, #5
 8000c6a:	f000 fb07 	bl	800127c <Apaga_Fase>
		/* Se debe apagar completamente esta fase.*/
	}
	if(BF.band5 == 1)
 8000c6e:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <Fases_Auto+0x5e0>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d07b      	beq.n	8000d74 <Fases_Auto+0x600>
	{
		switch(f5Actual)
 8000c7c:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <Fases_Auto+0x5ec>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d01e      	beq.n	8000cc4 <Fases_Auto+0x550>
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d037      	beq.n	8000cfa <Fases_Auto+0x586>
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d150      	bne.n	8000d30 <Fases_Auto+0x5bc>
		{
		case 1:
		{
			HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin,GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c94:	482a      	ldr	r0, [pc, #168]	; (8000d40 <Fases_Auto+0x5cc>)
 8000c96:	f002 fc9f 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c5Fase == tiempos[12])
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	330c      	adds	r3, #12
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <Fases_Auto+0x5e8>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d145      	bne.n	8000d36 <Fases_Auto+0x5c2>
			{
				HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin,GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb0:	4823      	ldr	r0, [pc, #140]	; (8000d40 <Fases_Auto+0x5cc>)
 8000cb2:	f002 fc91 	bl	80035d8 <HAL_GPIO_WritePin>
				f5Actual = 2;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <Fases_Auto+0x5ec>)
 8000cb8:	2202      	movs	r2, #2
 8000cba:	701a      	strb	r2, [r3, #0]
				c5Fase = 0;
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <Fases_Auto+0x5e8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
				break;
 8000cc2:	e050      	b.n	8000d66 <Fases_Auto+0x5f2>
			}
		}
		break;
		case 2:
		{
			HAL_GPIO_WritePin(GPIOB,FASE5_AMA_Pin,GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cca:	481d      	ldr	r0, [pc, #116]	; (8000d40 <Fases_Auto+0x5cc>)
 8000ccc:	f002 fc84 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c5Fase == tiempos[13])
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	330d      	adds	r3, #13
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <Fases_Auto+0x5e8>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d12c      	bne.n	8000d3a <Fases_Auto+0x5c6>
			{
				HAL_GPIO_WritePin(GPIOB,FASE5_AMA_Pin,GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce6:	4816      	ldr	r0, [pc, #88]	; (8000d40 <Fases_Auto+0x5cc>)
 8000ce8:	f002 fc76 	bl	80035d8 <HAL_GPIO_WritePin>
				f5Actual = 3;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <Fases_Auto+0x5ec>)
 8000cee:	2203      	movs	r2, #3
 8000cf0:	701a      	strb	r2, [r3, #0]
				c5Fase = 0;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <Fases_Auto+0x5e8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
				break;
 8000cf8:	e035      	b.n	8000d66 <Fases_Auto+0x5f2>
			}
		}
		break;
		case 3:
		{
			HAL_GPIO_WritePin(GPIOB,FASE5_ROJO_Pin,GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	480f      	ldr	r0, [pc, #60]	; (8000d40 <Fases_Auto+0x5cc>)
 8000d02:	f002 fc69 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c5Fase == tiempos[14])
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	330e      	adds	r3, #14
 8000d0a:	781a      	ldrb	r2, [r3, #0]
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <Fases_Auto+0x5e8>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d126      	bne.n	8000d64 <Fases_Auto+0x5f0>
			{
				HAL_GPIO_WritePin(GPIOB,FASE5_ROJO_Pin,GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1c:	4808      	ldr	r0, [pc, #32]	; (8000d40 <Fases_Auto+0x5cc>)
 8000d1e:	f002 fc5b 	bl	80035d8 <HAL_GPIO_WritePin>
				f5Actual = 1;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <Fases_Auto+0x5ec>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
				c5Fase = 0;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <Fases_Auto+0x5e8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
				break;
 8000d2e:	e01a      	b.n	8000d66 <Fases_Auto+0x5f2>
			}
		}
		break;
		default:
		{
			Error_Handler();
 8000d30:	f000 fd54 	bl	80017dc <Error_Handler>
		}
		break;
 8000d34:	e017      	b.n	8000d66 <Fases_Auto+0x5f2>
		break;
 8000d36:	bf00      	nop
 8000d38:	e015      	b.n	8000d66 <Fases_Auto+0x5f2>
		break;
 8000d3a:	bf00      	nop
 8000d3c:	e013      	b.n	8000d66 <Fases_Auto+0x5f2>
 8000d3e:	bf00      	nop
 8000d40:	40010c00 	.word	0x40010c00
 8000d44:	20000044 	.word	0x20000044
 8000d48:	20000002 	.word	0x20000002
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	20000045 	.word	0x20000045
 8000d54:	200000c4 	.word	0x200000c4
 8000d58:	20000003 	.word	0x20000003
 8000d5c:	20000046 	.word	0x20000046
 8000d60:	20000004 	.word	0x20000004
		break;
 8000d64:	bf00      	nop
		}
		c5Fase++;
 8000d66:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <Fases_Auto+0x72c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <Fases_Auto+0x72c>)
 8000d72:	701a      	strb	r2, [r3, #0]
	}

/********************************* FASE 6*************************************/
	if(Verif_Tiempo(aHora, &iHora->tFase6) == HAL_OK)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	330f      	adds	r3, #15
 8000d78:	4619      	mov	r1, r3
 8000d7a:	68b8      	ldr	r0, [r7, #8]
 8000d7c:	f000 f9a5 	bl	80010ca <Verif_Tiempo>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d108      	bne.n	8000d98 <Fases_Auto+0x624>
	{
		c6Fase = 0;
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <Fases_Auto+0x730>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
		BF.band6 = 1;
 8000d8c:	4a46      	ldr	r2, [pc, #280]	; (8000ea8 <Fases_Auto+0x734>)
 8000d8e:	7813      	ldrb	r3, [r2, #0]
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	7013      	strb	r3, [r2, #0]
 8000d96:	e010      	b.n	8000dba <Fases_Auto+0x646>
	}
	else if(Verif_Tiempo(aHora, &iHora->tFase6) == HAL_TIMEOUT)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	330f      	adds	r3, #15
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	68b8      	ldr	r0, [r7, #8]
 8000da0:	f000 f993 	bl	80010ca <Verif_Tiempo>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d107      	bne.n	8000dba <Fases_Auto+0x646>
	{
		BF.band6 = 0;
 8000daa:	4a3f      	ldr	r2, [pc, #252]	; (8000ea8 <Fases_Auto+0x734>)
 8000dac:	7813      	ldrb	r3, [r2, #0]
 8000dae:	f36f 0300 	bfc	r3, #0, #1
 8000db2:	7013      	strb	r3, [r2, #0]
		Apaga_Fase(6);
 8000db4:	2006      	movs	r0, #6
 8000db6:	f000 fa61 	bl	800127c <Apaga_Fase>
		/* Se debe apagar completamente esta fase.*/
	}
	if(BF.band6 == 1)
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <Fases_Auto+0x734>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d066      	beq.n	8000e96 <Fases_Auto+0x722>
	{
		switch(f6Actual)
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <Fases_Auto+0x738>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d01e      	beq.n	8000e10 <Fases_Auto+0x69c>
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d037      	beq.n	8000e46 <Fases_Auto+0x6d2>
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d14e      	bne.n	8000e78 <Fases_Auto+0x704>
		{
		case 1:
		{
			HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin,GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de0:	4833      	ldr	r0, [pc, #204]	; (8000eb0 <Fases_Auto+0x73c>)
 8000de2:	f002 fbf9 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c6Fase == tiempos[15])
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	330f      	adds	r3, #15
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <Fases_Auto+0x730>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d143      	bne.n	8000e7e <Fases_Auto+0x70a>
			{
				HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin,GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfc:	482c      	ldr	r0, [pc, #176]	; (8000eb0 <Fases_Auto+0x73c>)
 8000dfe:	f002 fbeb 	bl	80035d8 <HAL_GPIO_WritePin>
				f6Actual = 2;
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <Fases_Auto+0x738>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	701a      	strb	r2, [r3, #0]
				c6Fase = 0;
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <Fases_Auto+0x730>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
				break;
 8000e0e:	e03b      	b.n	8000e88 <Fases_Auto+0x714>
			}
		}
		break;
		case 2:
		{
			HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin,GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e16:	4826      	ldr	r0, [pc, #152]	; (8000eb0 <Fases_Auto+0x73c>)
 8000e18:	f002 fbde 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c6Fase == tiempos[16])
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3310      	adds	r3, #16
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <Fases_Auto+0x730>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d12a      	bne.n	8000e82 <Fases_Auto+0x70e>
			{
				HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin,GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e32:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <Fases_Auto+0x73c>)
 8000e34:	f002 fbd0 	bl	80035d8 <HAL_GPIO_WritePin>
				f6Actual = 3;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <Fases_Auto+0x738>)
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	701a      	strb	r2, [r3, #0]
				c6Fase = 0;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <Fases_Auto+0x730>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
				break;
 8000e44:	e020      	b.n	8000e88 <Fases_Auto+0x714>
			}
		}
		break;
		case 3:
		{
			HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	481a      	ldr	r0, [pc, #104]	; (8000eb4 <Fases_Auto+0x740>)
 8000e4c:	f002 fbc4 	bl	80035d8 <HAL_GPIO_WritePin>
			if(c6Fase == tiempos[17])
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3311      	adds	r3, #17
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <Fases_Auto+0x730>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d112      	bne.n	8000e86 <Fases_Auto+0x712>
			{
				HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <Fases_Auto+0x740>)
 8000e66:	f002 fbb7 	bl	80035d8 <HAL_GPIO_WritePin>
				f6Actual = 1;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <Fases_Auto+0x738>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
				c6Fase = 0;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <Fases_Auto+0x730>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
				break;
 8000e76:	e007      	b.n	8000e88 <Fases_Auto+0x714>
			}
		}
		break;
		default:
		{
			Error_Handler();
 8000e78:	f000 fcb0 	bl	80017dc <Error_Handler>
		}
		break;
 8000e7c:	e004      	b.n	8000e88 <Fases_Auto+0x714>
		break;
 8000e7e:	bf00      	nop
 8000e80:	e002      	b.n	8000e88 <Fases_Auto+0x714>
		break;
 8000e82:	bf00      	nop
 8000e84:	e000      	b.n	8000e88 <Fases_Auto+0x714>
		break;
 8000e86:	bf00      	nop
		}
		c6Fase++;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <Fases_Auto+0x730>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <Fases_Auto+0x730>)
 8000e94:	701a      	strb	r2, [r3, #0]
	}
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000046 	.word	0x20000046
 8000ea4:	20000047 	.word	0x20000047
 8000ea8:	200000c4 	.word	0x200000c4
 8000eac:	20000005 	.word	0x20000005
 8000eb0:	40010c00 	.word	0x40010c00
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <Corrige_Med16>:

}


void Corrige_Med16(uint32_t *arreglo, uint32_t tamano)/* Función para        */
 {									/* eliminar los 16 bits altos de la      */
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	for(uint8_t indice = 0; indice <= BUFFER_ADC; indice++)/* medición del   */
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e00d      	b.n	8000ee4 <Corrige_Med16+0x2c>
	{								/* ADC. 								 */
		arreglo[indice] &= 0x0000ffff;/* Borra los 16 bits más altos del
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	6819      	ldr	r1, [r3, #0]
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	b28a      	uxth	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
	for(uint8_t indice = 0; indice <= BUFFER_ADC; indice++)/* medición del   */
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	2b0d      	cmp	r3, #13
 8000ee8:	d9ee      	bls.n	8000ec8 <Corrige_Med16+0x10>
									 * registro ya que tienen el dato
									 * repetido.							 */
	}
 }
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <Valor_Max>:

uint16_t Valor_Max(uint32_t *arreglo, uint8_t tamano)/* Función para calcular el valor máximo*/
{									 /* de cualquier arreglo.                */
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
	uint16_t max = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	81fb      	strh	r3, [r7, #14]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	737b      	strb	r3, [r7, #13]
 8000f08:	e010      	b.n	8000f2c <Valor_Max+0x38>
	{
		if(max < arreglo[cont])
 8000f0a:	89fa      	ldrh	r2, [r7, #14]
 8000f0c:	7b7b      	ldrb	r3, [r7, #13]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	440b      	add	r3, r1
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d205      	bcs.n	8000f26 <Valor_Max+0x32>
		{
			max = arreglo[cont];
 8000f1a:	7b7b      	ldrb	r3, [r7, #13]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	81fb      	strh	r3, [r7, #14]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000f26:	7b7b      	ldrb	r3, [r7, #13]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	737b      	strb	r3, [r7, #13]
 8000f2c:	7b7a      	ldrb	r2, [r7, #13]
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3ea      	bcc.n	8000f0a <Valor_Max+0x16>
		}
	}
	return max;
 8000f34:	89fb      	ldrh	r3, [r7, #14]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <Valor_Min>:

uint32_t Valor_Min(uint32_t *arreglo, uint8_t tamano)/* Función para calcular*/
{									 /* el valor mínimo de cualquier arreglo.*/
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
	uint32_t min = arreglo[0];
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	72fb      	strb	r3, [r7, #11]
 8000f56:	e010      	b.n	8000f7a <Valor_Min+0x3a>
	{
		if( arreglo[cont] < min)
 8000f58:	7afb      	ldrb	r3, [r7, #11]
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d905      	bls.n	8000f74 <Valor_Min+0x34>
		{
			min = arreglo[cont];
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	4413      	add	r3, r2
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60fb      	str	r3, [r7, #12]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	3301      	adds	r3, #1
 8000f78:	72fb      	strb	r3, [r7, #11]
 8000f7a:	7afa      	ldrb	r2, [r7, #11]
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d3ea      	bcc.n	8000f58 <Valor_Min+0x18>
		}
	}
	return min;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr

08000f8e <Valor_Prom>:

uint32_t Valor_Prom(uint32_t *arreglo, uint8_t tamano)/* Función para		 */
{									/* calcular el valor promedio de cualquier arreglo.		 */
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	70fb      	strb	r3, [r7, #3]
	uint32_t promedio = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72fb      	strb	r3, [r7, #11]
 8000fa2:	e00a      	b.n	8000fba <Valor_Prom+0x2c>
	{
		promedio += arreglo[cont];
 8000fa4:	7afb      	ldrb	r3, [r7, #11]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000fb4:	7afb      	ldrb	r3, [r7, #11]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	72fb      	strb	r3, [r7, #11]
 8000fba:	7afa      	ldrb	r2, [r7, #11]
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3f0      	bcc.n	8000fa4 <Valor_Prom+0x16>
	}
	return promedio/tamano;
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	0000      	movs	r0, r0
	...

08000fd8 <Verif_Ten>:

uint32_t Verif_Ten(uint32_t *arreglo, uint8_t tamano)/* Función para         */
{   								/* verificar si la señal medida está     */
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
									/* dentro de los parámetros correctos.   */
	if ((Valor_Max(arreglo, tamano)) > VIMAX ||
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff83 	bl	8000ef4 <Valor_Max>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f640 03b6 	movw	r3, #2230	; 0x8b6
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d82b      	bhi.n	8001052 <Verif_Ten+0x7a>
		((Valor_Min(arreglo, tamano)) < VIMIN) ||
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ff9e 	bl	8000f40 <Valor_Min>
 8001004:	4602      	mov	r2, r0
	if ((Valor_Max(arreglo, tamano)) > VIMAX ||
 8001006:	f240 7343 	movw	r3, #1859	; 0x743
 800100a:	429a      	cmp	r2, r3
 800100c:	d921      	bls.n	8001052 <Verif_Ten+0x7a>
		((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	4619      	mov	r1, r3
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffbb 	bl	8000f8e <Valor_Prom>
 8001018:	4603      	mov	r3, r0
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f9da 	bl	80003d4 <__aeabi_ui2d>
		((Valor_Min(arreglo, tamano)) < VIMIN) ||
 8001020:	a30f      	add	r3, pc, #60	; (adr r3, 8001060 <Verif_Ten+0x88>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff facd 	bl	80005c4 <__aeabi_dcmpgt>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d110      	bne.n	8001052 <Verif_Ten+0x7a>
		((Valor_Prom(arreglo, tamano)) < (VIMED*0.9)))
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffaa 	bl	8000f8e <Valor_Prom>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f9c9 	bl	80003d4 <__aeabi_ui2d>
		((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||
 8001042:	a309      	add	r3, pc, #36	; (adr r3, 8001068 <Verif_Ten+0x90>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fa9e 	bl	8000588 <__aeabi_dcmplt>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <Verif_Ten+0x7e>
	{
		return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <Verif_Ten+0x80>
	}
	else
	{
		return HAL_OK;
 8001056:	2300      	movs	r3, #0
	}
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	9999999a 	.word	0x9999999a
 8001064:	40a19999 	.word	0x40a19999
 8001068:	cccccccd 	.word	0xcccccccd
 800106c:	409ccccc 	.word	0x409ccccc

08001070 <Verif_Temp>:

uint32_t Verif_Temp(uint32_t *arreglo, uint8_t tamano)/* Función para		 */
{									/* verificar si la temperatura medida	 */
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
	uint32_t promTemp = 0;			/* está entre los parámetros correctos.  */
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
	for(uint8_t cTemp = 0; cTemp <= tamano; cTemp++)
 8001080:	2300      	movs	r3, #0
 8001082:	72fb      	strb	r3, [r7, #11]
 8001084:	e00a      	b.n	800109c <Verif_Temp+0x2c>
	{
		promTemp += arreglo[cTemp];
 8001086:	7afb      	ldrb	r3, [r7, #11]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
	for(uint8_t cTemp = 0; cTemp <= tamano; cTemp++)
 8001096:	7afb      	ldrb	r3, [r7, #11]
 8001098:	3301      	adds	r3, #1
 800109a:	72fb      	strb	r3, [r7, #11]
 800109c:	7afa      	ldrb	r2, [r7, #11]
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d9f0      	bls.n	8001086 <Verif_Temp+0x16>
	}
	promTemp /= tamano;
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	60fb      	str	r3, [r7, #12]
	return(((promTemp > TMIN) && (promTemp < TMAX)) ?	HAL_OK: HAL_ERROR);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <Verif_Temp+0x4a>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b45      	cmp	r3, #69	; 0x45
 80010b8:	d901      	bls.n	80010be <Verif_Temp+0x4e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <Verif_Temp+0x50>
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <Verif_Tiempo>:

/* Función para determinar si la hora    */
/* actual es la hora para iniciar el     */
/* cambio de estado de una fase.		 */
uint32_t Verif_Tiempo(RTC_TimeTypeDef *hActual, RTC_TimeTypeDef *hInicio)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
	if((hActual->Hours == hInicio->Hours) && (hActual->Minutes == hInicio->Minutes)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d10d      	bne.n	80010fc <Verif_Tiempo+0x32>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	785a      	ldrb	r2, [r3, #1]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	785b      	ldrb	r3, [r3, #1]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d107      	bne.n	80010fc <Verif_Tiempo+0x32>
			&& (hActual->Seconds == hInicio->Seconds))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	789a      	ldrb	r2, [r3, #2]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	789b      	ldrb	r3, [r3, #2]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d101      	bne.n	80010fc <Verif_Tiempo+0x32>
	{								/* Con este comando inicia el conteo para*/
		return HAL_OK;				/* el programa específico de fase.	     */
 80010f8:	2300      	movs	r3, #0
 80010fa:	e00e      	b.n	800111a <Verif_Tiempo+0x50>
	}
	else if((hInicio->Hours == 24) && (hInicio->Minutes == 60) &&
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b18      	cmp	r3, #24
 8001102:	d109      	bne.n	8001118 <Verif_Tiempo+0x4e>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	2b3c      	cmp	r3, #60	; 0x3c
 800110a:	d105      	bne.n	8001118 <Verif_Tiempo+0x4e>
			(hInicio->Seconds == 60))/* Si se envía este comando entonces se */
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	789b      	ldrb	r3, [r3, #2]
	else if((hInicio->Hours == 24) && (hInicio->Minutes == 60) &&
 8001110:	2b3c      	cmp	r3, #60	; 0x3c
 8001112:	d101      	bne.n	8001118 <Verif_Tiempo+0x4e>
	{								/* debe apagar la fase respectiva.		 */
		return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e000      	b.n	800111a <Verif_Tiempo+0x50>
	}
	else							/* A implementar el uso externo con este */
	{								/* comando.								 */
		return HAL_BUSY;
 8001118:	2302      	movs	r3, #2
	}
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001138:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <MX_GPIO_Init+0x140>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <MX_GPIO_Init+0x140>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b47      	ldr	r3, [pc, #284]	; (8001264 <MX_GPIO_Init+0x140>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001150:	4b44      	ldr	r3, [pc, #272]	; (8001264 <MX_GPIO_Init+0x140>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a43      	ldr	r2, [pc, #268]	; (8001264 <MX_GPIO_Init+0x140>)
 8001156:	f043 0320 	orr.w	r3, r3, #32
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b41      	ldr	r3, [pc, #260]	; (8001264 <MX_GPIO_Init+0x140>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <MX_GPIO_Init+0x140>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <MX_GPIO_Init+0x140>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <MX_GPIO_Init+0x140>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b38      	ldr	r3, [pc, #224]	; (8001264 <MX_GPIO_Init+0x140>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a37      	ldr	r2, [pc, #220]	; (8001264 <MX_GPIO_Init+0x140>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <MX_GPIO_Init+0x140>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8001198:	2200      	movs	r2, #0
 800119a:	f649 7180 	movw	r1, #40832	; 0x9f80
 800119e:	4832      	ldr	r0, [pc, #200]	; (8001268 <MX_GPIO_Init+0x144>)
 80011a0:	f002 fa1a 	bl	80035d8 <HAL_GPIO_WritePin>
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin|FASE3_ROJO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 80011a4:	2200      	movs	r2, #0
 80011a6:	f24f 713f 	movw	r1, #63295	; 0xf73f
 80011aa:	4830      	ldr	r0, [pc, #192]	; (800126c <MX_GPIO_Init+0x148>)
 80011ac:	f002 fa14 	bl	80035d8 <HAL_GPIO_WritePin>
                          |FASE3_AMA_Pin|FASE6_VERDE_Pin|FASE6_AMA_Pin|FASE1_VERDE_Pin 
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b6:	2303      	movs	r3, #3
 80011b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	482b      	ldr	r0, [pc, #172]	; (8001270 <MX_GPIO_Init+0x14c>)
 80011c2:	f001 ffe1 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011c6:	2303      	movs	r3, #3
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ca:	2303      	movs	r3, #3
 80011cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4827      	ldr	r0, [pc, #156]	; (8001274 <MX_GPIO_Init+0x150>)
 80011d6:	f001 ffd7 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011da:	2340      	movs	r3, #64	; 0x40
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011de:	2303      	movs	r3, #3
 80011e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	481f      	ldr	r0, [pc, #124]	; (8001268 <MX_GPIO_Init+0x144>)
 80011ea:	f001 ffcd 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 80011ee:	f649 7380 	movw	r3, #40832	; 0x9f80
 80011f2:	617b      	str	r3, [r7, #20]
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin|FASE3_ROJO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4818      	ldr	r0, [pc, #96]	; (8001268 <MX_GPIO_Init+0x144>)
 8001208:	f001 ffbe 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 800120c:	f24f 733f 	movw	r3, #63295	; 0xf73f
 8001210:	617b      	str	r3, [r7, #20]
                          |FASE3_AMA_Pin|FASE6_VERDE_Pin|FASE6_AMA_Pin|FASE1_VERDE_Pin 
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2302      	movs	r3, #2
 800121c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4811      	ldr	r0, [pc, #68]	; (800126c <MX_GPIO_Init+0x148>)
 8001226:	f001 ffaf 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800122a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001230:	2303      	movs	r3, #3
 8001232:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_GPIO_Init+0x148>)
 800123c:	f001 ffa4 	bl	8003188 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <MX_GPIO_Init+0x154>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <MX_GPIO_Init+0x154>)
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	6053      	str	r3, [r2, #4]

}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	40010800 	.word	0x40010800
 800126c:	40010c00 	.word	0x40010c00
 8001270:	40011000 	.word	0x40011000
 8001274:	40011400 	.word	0x40011400
 8001278:	40010000 	.word	0x40010000

0800127c <Apaga_Fase>:

/* USER CODE BEGIN 2 */
void Apaga_Fase(uint8_t numero)		/* Función para apagar completamente una */
{									/* fase.								 */
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	switch(numero)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	3b01      	subs	r3, #1
 800128a:	2b05      	cmp	r3, #5
 800128c:	d849      	bhi.n	8001322 <Apaga_Fase+0xa6>
 800128e:	a201      	add	r2, pc, #4	; (adr r2, 8001294 <Apaga_Fase+0x18>)
 8001290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001294:	080012ad 	.word	0x080012ad
 8001298:	080012c7 	.word	0x080012c7
 800129c:	080012d5 	.word	0x080012d5
 80012a0:	080012ef 	.word	0x080012ef
 80012a4:	080012fb 	.word	0x080012fb
 80012a8:	08001309 	.word	0x08001309
	{
	case 1:
	{
		HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b2:	481e      	ldr	r0, [pc, #120]	; (800132c <Apaga_Fase+0xb0>)
 80012b4:	f002 f990 	bl	80035d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin | FASE1_ROJO_Pin, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 7140 	mov.w	r1, #768	; 0x300
 80012be:	481c      	ldr	r0, [pc, #112]	; (8001330 <Apaga_Fase+0xb4>)
 80012c0:	f002 f98a 	bl	80035d8 <HAL_GPIO_WritePin>
	}
	break;
 80012c4:	e02d      	b.n	8001322 <Apaga_Fase+0xa6>
	case 2:
	{
		HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin | FASE2_AMA_Pin | FASE2_ROJO_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80012cc:	4818      	ldr	r0, [pc, #96]	; (8001330 <Apaga_Fase+0xb4>)
 80012ce:	f002 f983 	bl	80035d8 <HAL_GPIO_WritePin>
	}
	break;
 80012d2:	e026      	b.n	8001322 <Apaga_Fase+0xa6>
	case 3:
	{
		HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE3_AMA_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f241 0104 	movw	r1, #4100	; 0x1004
 80012da:	4814      	ldr	r0, [pc, #80]	; (800132c <Apaga_Fase+0xb0>)
 80012dc:	f002 f97c 	bl	80035d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e6:	4812      	ldr	r0, [pc, #72]	; (8001330 <Apaga_Fase+0xb4>)
 80012e8:	f002 f976 	bl	80035d8 <HAL_GPIO_WritePin>
	}
	break;
 80012ec:	e019      	b.n	8001322 <Apaga_Fase+0xa6>
	case 4:
	{
		HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin | FASE4_AMA_Pin | FASE4_ROJO_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2138      	movs	r1, #56	; 0x38
 80012f2:	480e      	ldr	r0, [pc, #56]	; (800132c <Apaga_Fase+0xb0>)
 80012f4:	f002 f970 	bl	80035d8 <HAL_GPIO_WritePin>
	}
	break;
 80012f8:	e013      	b.n	8001322 <Apaga_Fase+0xa6>
	case 5:
	{
		HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin | FASE5_AMA_Pin | FASE5_ROJO_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001300:	480a      	ldr	r0, [pc, #40]	; (800132c <Apaga_Fase+0xb0>)
 8001302:	f002 f969 	bl	80035d8 <HAL_GPIO_WritePin>
	}
	break;
 8001306:	e00c      	b.n	8001322 <Apaga_Fase+0xa6>
	case 6:
	{
		HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin | FASE6_AMA_Pin, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <Apaga_Fase+0xb0>)
 8001310:	f002 f962 	bl	80035d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin | FASE6_ROJO_Pin, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <Apaga_Fase+0xb4>)
 800131c:	f002 f95c 	bl	80035d8 <HAL_GPIO_WritePin>
	}
	break;
 8001320:	bf00      	nop
	}
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40010c00 	.word	0x40010c00
 8001330:	40010800 	.word	0x40010800

08001334 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_I2C1_Init+0x50>)
 800133a:	4a13      	ldr	r2, [pc, #76]	; (8001388 <MX_I2C1_Init+0x54>)
 800133c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_I2C1_Init+0x50>)
 8001340:	4a12      	ldr	r2, [pc, #72]	; (800138c <MX_I2C1_Init+0x58>)
 8001342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_I2C1_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_I2C1_Init+0x50>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_I2C1_Init+0x50>)
 8001352:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001356:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <MX_I2C1_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_I2C1_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <MX_I2C1_Init+0x50>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_I2C1_Init+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_I2C1_Init+0x50>)
 8001372:	f002 f989 	bl	8003688 <HAL_I2C_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800137c:	f000 fa2e 	bl	80017dc <Error_Handler>
  }

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200000c8 	.word	0x200000c8
 8001388:	40005400 	.word	0x40005400
 800138c:	000186a0 	.word	0x000186a0

08001390 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <HAL_I2C_MspInit+0x94>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d135      	bne.n	800141c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <HAL_I2C_MspInit+0x98>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_I2C_MspInit+0x98>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_I2C_MspInit+0x98>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c8:	23c0      	movs	r3, #192	; 0xc0
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013cc:	2312      	movs	r3, #18
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	4813      	ldr	r0, [pc, #76]	; (800142c <HAL_I2C_MspInit+0x9c>)
 80013e0:	f001 fed2 	bl	8003188 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_I2C_MspInit+0x98>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_I2C_MspInit+0x98>)
 80013ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ee:	61d3      	str	r3, [r2, #28]
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_I2C_MspInit+0x98>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	201f      	movs	r0, #31
 8001402:	f001 fb4d 	bl	8002aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001406:	201f      	movs	r0, #31
 8001408:	f001 fb76 	bl	8002af8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2020      	movs	r0, #32
 8001412:	f001 fb45 	bl	8002aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001416:	2020      	movs	r0, #32
 8001418:	f001 fb6e 	bl	8002af8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40005400 	.word	0x40005400
 8001428:	40021000 	.word	0x40021000
 800142c:	40010c00 	.word	0x40010c00

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	reg_Esp();

	fasesTiempo[0] = 6;				/* Tiempos de encendido de la fase 1, se */
 8001434:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <main+0x134>)
 8001436:	2206      	movs	r2, #6
 8001438:	701a      	strb	r2, [r3, #0]
	fasesTiempo[1] = 3;				/* debe eliminar esta asignación y tomar */
 800143a:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <main+0x134>)
 800143c:	2203      	movs	r2, #3
 800143e:	705a      	strb	r2, [r3, #1]
	fasesTiempo[2] = 4;				/* los valores del comando recibido una  */
 8001440:	4b48      	ldr	r3, [pc, #288]	; (8001564 <main+0x134>)
 8001442:	2204      	movs	r2, #4
 8001444:	709a      	strb	r2, [r3, #2]
									/* vez se reciban por I2C.               */

	fasesTiempo[3] = 6;				/* Tiempos de encendido de la fase 2, se */
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <main+0x134>)
 8001448:	2206      	movs	r2, #6
 800144a:	70da      	strb	r2, [r3, #3]
	fasesTiempo[4] = 3;				/* debe eliminar esta asignación y tomar */
 800144c:	4b45      	ldr	r3, [pc, #276]	; (8001564 <main+0x134>)
 800144e:	2203      	movs	r2, #3
 8001450:	711a      	strb	r2, [r3, #4]
	fasesTiempo[5] = 4;				/* los valores del comando recibido una  */
 8001452:	4b44      	ldr	r3, [pc, #272]	; (8001564 <main+0x134>)
 8001454:	2204      	movs	r2, #4
 8001456:	715a      	strb	r2, [r3, #5]
									/* vez se reciban por I2C.               */

	fasesTiempo[6] = 6;				/* Tiempos de encendido de la fase 3, se */
 8001458:	4b42      	ldr	r3, [pc, #264]	; (8001564 <main+0x134>)
 800145a:	2206      	movs	r2, #6
 800145c:	719a      	strb	r2, [r3, #6]
	fasesTiempo[7] = 3;				/* debe eliminar esta asignación y tomar */
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <main+0x134>)
 8001460:	2203      	movs	r2, #3
 8001462:	71da      	strb	r2, [r3, #7]
	fasesTiempo[8] = 4;				/* los valores del comando recibido una  */
 8001464:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <main+0x134>)
 8001466:	2204      	movs	r2, #4
 8001468:	721a      	strb	r2, [r3, #8]
									/* vez se reciban por I2C.               */

	fasesTiempo[9] = 6;				/* Tiempos de encendido de la fase 4, se */
 800146a:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <main+0x134>)
 800146c:	2206      	movs	r2, #6
 800146e:	725a      	strb	r2, [r3, #9]
	fasesTiempo[10] = 3;			/* debe eliminar esta asignación y tomar */
 8001470:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <main+0x134>)
 8001472:	2203      	movs	r2, #3
 8001474:	729a      	strb	r2, [r3, #10]
	fasesTiempo[11] = 4;			/* los valores del comando recibido una  */
 8001476:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <main+0x134>)
 8001478:	2204      	movs	r2, #4
 800147a:	72da      	strb	r2, [r3, #11]
									/* vez se reciban por I2C.               */

	fasesTiempo[12] = 6;			/* Tiempos de encendido de la fase 5, se */
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <main+0x134>)
 800147e:	2206      	movs	r2, #6
 8001480:	731a      	strb	r2, [r3, #12]
	fasesTiempo[13] = 3;			/* debe eliminar esta asignación y tomar */
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <main+0x134>)
 8001484:	2203      	movs	r2, #3
 8001486:	735a      	strb	r2, [r3, #13]
	fasesTiempo[14] = 4;			/* los valores del comando recibido una  */
 8001488:	4b36      	ldr	r3, [pc, #216]	; (8001564 <main+0x134>)
 800148a:	2204      	movs	r2, #4
 800148c:	739a      	strb	r2, [r3, #14]
									/* vez se reciban por I2C.               */

	fasesTiempo[15] = 6;			/* Tiempos de encendido de la fase 6, se */
 800148e:	4b35      	ldr	r3, [pc, #212]	; (8001564 <main+0x134>)
 8001490:	2206      	movs	r2, #6
 8001492:	73da      	strb	r2, [r3, #15]
	fasesTiempo[16] = 3;			/* debe eliminar esta asignación y tomar */
 8001494:	4b33      	ldr	r3, [pc, #204]	; (8001564 <main+0x134>)
 8001496:	2203      	movs	r2, #3
 8001498:	741a      	strb	r2, [r3, #16]
	fasesTiempo[17] = 4;			/* los valores del comando recibido una  */
 800149a:	4b32      	ldr	r3, [pc, #200]	; (8001564 <main+0x134>)
 800149c:	2204      	movs	r2, #4
 800149e:	745a      	strb	r2, [r3, #17]
									/* vez se reciban por I2C.               */

	fases.tFase1.Hours = 0x02;		/* Instante de tiempo en el que comenzará*/
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <main+0x138>)
 80014a2:	2202      	movs	r2, #2
 80014a4:	701a      	strb	r2, [r3, #0]
	fases.tFase1.Minutes = 0x20;	/* a correr el programa específico para  */
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <main+0x138>)
 80014a8:	2220      	movs	r2, #32
 80014aa:	705a      	strb	r2, [r3, #1]
	fases.tFase1.Seconds = 0x05;	/* la fase 1.							 */
 80014ac:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <main+0x138>)
 80014ae:	2205      	movs	r2, #5
 80014b0:	709a      	strb	r2, [r3, #2]

	fases.tFase2.Hours = 0x02;		/* Instante de tiempo en el que comenzará*/
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <main+0x138>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	70da      	strb	r2, [r3, #3]
	fases.tFase2.Minutes = 0x20;	/* a correr el programa específico para  */
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <main+0x138>)
 80014ba:	2220      	movs	r2, #32
 80014bc:	711a      	strb	r2, [r3, #4]
	fases.tFase2.Seconds = 0x06;	/* la fase 2.							 */
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <main+0x138>)
 80014c0:	2206      	movs	r2, #6
 80014c2:	715a      	strb	r2, [r3, #5]

	fases.tFase3.Hours = 0x02;		/* Instante de tiempo en el que comenzará*/
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <main+0x138>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	719a      	strb	r2, [r3, #6]
	fases.tFase3.Minutes = 0x20;	/* a correr el programa específico para  */
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <main+0x138>)
 80014cc:	2220      	movs	r2, #32
 80014ce:	71da      	strb	r2, [r3, #7]
	fases.tFase3.Seconds = 0x07;	/* la fase 3.							 */
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <main+0x138>)
 80014d2:	2207      	movs	r2, #7
 80014d4:	721a      	strb	r2, [r3, #8]

	fases.tFase4.Hours = 0x02;		/* Instante de tiempo en el que comenzará*/
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <main+0x138>)
 80014d8:	2202      	movs	r2, #2
 80014da:	725a      	strb	r2, [r3, #9]
	fases.tFase4.Minutes = 0x20;	/* a correr el programa específico para  */
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <main+0x138>)
 80014de:	2220      	movs	r2, #32
 80014e0:	729a      	strb	r2, [r3, #10]
	fases.tFase4.Seconds = 0x08;	/* la fase 4.							 */
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <main+0x138>)
 80014e4:	2208      	movs	r2, #8
 80014e6:	72da      	strb	r2, [r3, #11]

	fases.tFase5.Hours = 0x02;		/* Instante de tiempo en el que comenzará*/
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <main+0x138>)
 80014ea:	2202      	movs	r2, #2
 80014ec:	731a      	strb	r2, [r3, #12]
	fases.tFase5.Minutes = 0x20;	/* a correr el programa específico para  */
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <main+0x138>)
 80014f0:	2220      	movs	r2, #32
 80014f2:	735a      	strb	r2, [r3, #13]
	fases.tFase5.Seconds = 0x09;	/* la fase 5.							 */
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <main+0x138>)
 80014f6:	2209      	movs	r2, #9
 80014f8:	739a      	strb	r2, [r3, #14]

	fases.tFase6.Hours = 0x02;		/* Instante de tiempo en el que comenzará*/
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <main+0x138>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	73da      	strb	r2, [r3, #15]
	fases.tFase6.Minutes = 0x20;	/* a correr el programa específico para  */
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <main+0x138>)
 8001502:	2220      	movs	r2, #32
 8001504:	741a      	strb	r2, [r3, #16]
	fases.tFase6.Seconds = 0x10;	/* la fase 6.							 */
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <main+0x138>)
 8001508:	2210      	movs	r2, #16
 800150a:	745a      	strb	r2, [r3, #17]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150c:	f000 fb36 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001510:	f000 f834 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001514:	f7ff fe06 	bl	8001124 <MX_GPIO_Init>
  MX_DMA_Init();
 8001518:	f7ff f90e 	bl	8000738 <MX_DMA_Init>
  MX_ADC1_Init();
 800151c:	f7ff f85c 	bl	80005d8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001520:	f7ff ff08 	bl	8001334 <MX_I2C1_Init>
  MX_RTC_Init();
 8001524:	f000 f970 	bl	8001808 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin | FASE1_AMA_Pin | FASE1_ROJO_Pin |
 8001528:	2201      	movs	r2, #1
 800152a:	f649 7180 	movw	r1, #40832	; 0x9f80
 800152e:	480f      	ldr	r0, [pc, #60]	; (800156c <main+0x13c>)
 8001530:	f002 f852 	bl	80035d8 <HAL_GPIO_WritePin>
		  FASE2_VERDE_Pin | FASE2_AMA_Pin | FASE2_ROJO_Pin | FASE3_ROJO_Pin,
		  GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOB,LED_STATUS_Pin | LED_FALLA_Pin | FASE3_VERDE_Pin |
 8001534:	2201      	movs	r2, #1
 8001536:	f24f 713f 	movw	r1, #63295	; 0xf73f
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <main+0x140>)
 800153c:	f002 f84c 	bl	80035d8 <HAL_GPIO_WritePin>
		  FASE4_VERDE_Pin | FASE4_AMA_Pin | FASE4_ROJO_Pin | FASE5_VERDE_Pin |
		  FASE5_AMA_Pin | FASE5_ROJO_Pin | FASE3_AMA_Pin | FASE6_VERDE_Pin |
		  FASE6_AMA_Pin | FASE1_VERDE_Pin,GPIO_PIN_SET);
  //HAL_I2C_MspInit(&hi2c1);			/* Inicializando el modo I2C.            */
  HAL_RTC_MspInit(&hrtc);			/* Inicializando el RTC.                 */
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <main+0x144>)
 8001542:	f000 f9ab 	bl	800189c <HAL_RTC_MspInit>
  //HAL_ADC_MspInit(&hadc1);			/* Inicializando el ADC1.                */
//    if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)/*Intenta calibrar el ADC */
//    {									/* y en caso de haber un error de        */
//  	  Error_Handler();				/* calibración, llama a la función de    */
//    }									/* manejo de errores.                    */
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_SEC);/* Se habilita la interrupción */
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <main+0x144>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <main+0x144>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 0201 	orr.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);	/* del RTC cada segundo y luego se       */
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <main+0x148>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <main+0x148>)
 800155c:	f023 0310 	bic.w	r3, r3, #16
 8001560:	6053      	str	r3, [r2, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001562:	e7fe      	b.n	8001562 <main+0x132>
 8001564:	20000030 	.word	0x20000030
 8001568:	20000160 	.word	0x20000160
 800156c:	40010800 	.word	0x40010800
 8001570:	40010c00 	.word	0x40010c00
 8001574:	20000180 	.word	0x20000180
 8001578:	40002800 	.word	0x40002800

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b094      	sub	sp, #80	; 0x50
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	2228      	movs	r2, #40	; 0x28
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fde2 	bl	8007154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80015ac:	2306      	movs	r3, #6
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b4:	2301      	movs	r3, #1
 80015b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b8:	2310      	movs	r3, #16
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015bc:	2300      	movs	r3, #0
 80015be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 fde1 	bl	800518c <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015d0:	f000 f904 	bl	80017dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d4:	230f      	movs	r3, #15
 80015d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80015e4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 f93b 	bl	800586c <HAL_RCC_ClockConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015fc:	f000 f8ee 	bl	80017dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001600:	2303      	movs	r3, #3
 8001602:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001608:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800160a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800160e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fb6c 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800161e:	f000 f8dd 	bl	80017dc <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3750      	adds	r7, #80	; 0x50
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_RTCEx_RTCEventCallback>:
//	_FAULTMASK = __get_FAULTMASK();
//	_ISPR0 = __get_IPSR();
//}

void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)/* Cada vez que hay  */
{									/* una interrupción por evento de segundo*/
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	//HAL_RTC_WaitForSynchro(hrtc);	/* lee la hora y la fecha.               */
	HAL_RTC_GetTime(hrtc,&horaLeida, RTC_FORMAT_BCD);
 8001634:	2201      	movs	r2, #1
 8001636:	4909      	ldr	r1, [pc, #36]	; (800165c <HAL_RTCEx_RTCEventCallback+0x30>)
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f004 fee5 	bl	8006408 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc,&fechaLeida, RTC_FORMAT_BCD);
 800163e:	2201      	movs	r2, #1
 8001640:	4907      	ldr	r1, [pc, #28]	; (8001660 <HAL_RTCEx_RTCEventCallback+0x34>)
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f005 f8e4 	bl	8006810 <HAL_RTC_GetDate>

	//HAL_ADC_Stop_DMA(&hadc1);		/* Se asegura que el ADC no esté midiendo*/
									/* los sensores antes de hacer un cambio */
									/* de estados de fase.					 */
	Fases_Auto(fasesTiempo, &horaLeida, &fases);/* Manejo de fases en
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_RTCEx_RTCEventCallback+0x38>)
 800164a:	4904      	ldr	r1, [pc, #16]	; (800165c <HAL_RTCEx_RTCEventCallback+0x30>)
 800164c:	4806      	ldr	r0, [pc, #24]	; (8001668 <HAL_RTCEx_RTCEventCallback+0x3c>)
 800164e:	f7ff f891 	bl	8000774 <Fases_Auto>
//									/* debido a que como el ADC no soporta la
//									 * lectura/escritura de 32 bits, entonces
//									 * el DMA duplica el dato enviado en la
//									 * parte alta del registro de destino y lo
//									 * cuenta.                                */
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000120 	.word	0x20000120
 8001660:	2000017c 	.word	0x2000017c
 8001664:	20000160 	.word	0x20000160
 8001668:	20000030 	.word	0x20000030

0800166c <HAL_ADC_ConvCpltCallback>:

* @param hadc: adc handle
* @retval None */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
	uint8_t tam = sizeof(sensorLeido)/sizeof(sensorLeido[0]);/* Calcula la   */
 8001680:	230d      	movs	r3, #13
 8001682:	75fb      	strb	r3, [r7, #23]
									/* cantidad de datos a procesar por      */
									/* canal. 							     */
	canalADC++;						/* Para configurar el canal ADC a medir. */
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x15c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x15c>)
 800168e:	701a      	strb	r2, [r3, #0]
	Corrige_Med16(sensorLeido, tam);
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	4619      	mov	r1, r3
 8001694:	484d      	ldr	r0, [pc, #308]	; (80017cc <HAL_ADC_ConvCpltCallback+0x160>)
 8001696:	f7ff fc0f 	bl	8000eb8 <Corrige_Med16>
	if(canalADC < 7)				/* Verifica si la señal está entre los   */
 800169a:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x15c>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d80d      	bhi.n	80016be <HAL_ADC_ConvCpltCallback+0x52>
	{								/* valores AC permitidos si no se está   */
									/* midiendo el sensor de temperatura.    */
		if(Verif_Ten(sensorLeido, tam) != HAL_OK)/* Si está midiendo los     */
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4849      	ldr	r0, [pc, #292]	; (80017cc <HAL_ADC_ConvCpltCallback+0x160>)
 80016a8:	f7ff fc96 	bl	8000fd8 <Verif_Ten>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d016      	beq.n	80016e0 <HAL_ADC_ConvCpltCallback+0x74>
		{							/* sensores de fase, esta es la condición*/
			codigoError = 2;		/* de error.							 */
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_ADC_ConvCpltCallback+0x164>)
 80016b4:	2202      	movs	r2, #2
 80016b6:	601a      	str	r2, [r3, #0]
			Error_Handler();
 80016b8:	f000 f890 	bl	80017dc <Error_Handler>
 80016bc:	e010      	b.n	80016e0 <HAL_ADC_ConvCpltCallback+0x74>
		}
	}
	else if(canalADC == 7)			/* Si se está midiendo el sensor de      */
 80016be:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x15c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b07      	cmp	r3, #7
 80016c4:	d10c      	bne.n	80016e0 <HAL_ADC_ConvCpltCallback+0x74>
	{								/* temperatura, esta es la condición.    */
		if(Verif_Temp(sensorLeido,tam))
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4840      	ldr	r0, [pc, #256]	; (80017cc <HAL_ADC_ConvCpltCallback+0x160>)
 80016cc:	f7ff fcd0 	bl	8001070 <Verif_Temp>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <HAL_ADC_ConvCpltCallback+0x74>
		{
			codigoError = 12;
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_ADC_ConvCpltCallback+0x164>)
 80016d8:	220c      	movs	r2, #12
 80016da:	601a      	str	r2, [r3, #0]
			Error_Handler();
 80016dc:	f000 f87e 	bl	80017dc <Error_Handler>
		}
	}

	switch(canalADC)				/* Se cambia al sensor de fasea medir, el*/
 80016e0:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x15c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d86a      	bhi.n	80017c0 <HAL_ADC_ConvCpltCallback+0x154>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <HAL_ADC_ConvCpltCallback+0x84>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	0800170d 	.word	0x0800170d
 80016f4:	08001713 	.word	0x08001713
 80016f8:	08001719 	.word	0x08001719
 80016fc:	0800171f 	.word	0x0800171f
 8001700:	08001725 	.word	0x08001725
 8001704:	0800172b 	.word	0x0800172b
 8001708:	08001731 	.word	0x08001731
	{								/* sensor de la fase 1 se establece en la*/
									/* configuración inicial del ADC.        */
	case 1:							/* Se establece el sensor de la fase 2.  */
	{
		sConfig.Channel = ADC_CHANNEL_1;
 800170c:	2301      	movs	r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
	}
	break;
 8001710:	e011      	b.n	8001736 <HAL_ADC_ConvCpltCallback+0xca>
	case 2:							/* Se establece el sensor de la fase 3.  */
	{
		sConfig.Channel = ADC_CHANNEL_2;
 8001712:	2302      	movs	r3, #2
 8001714:	60bb      	str	r3, [r7, #8]
	}
	break;
 8001716:	e00e      	b.n	8001736 <HAL_ADC_ConvCpltCallback+0xca>
	case 3:							/* Se establece el sensor de la fase 4.  */
	{
		sConfig.Channel = ADC_CHANNEL_3;
 8001718:	2303      	movs	r3, #3
 800171a:	60bb      	str	r3, [r7, #8]
	}
	break;
 800171c:	e00b      	b.n	8001736 <HAL_ADC_ConvCpltCallback+0xca>
	case 4:							/* Se establece el sensor de la fase 5.  */
	{
		sConfig.Channel = ADC_CHANNEL_4;
 800171e:	2304      	movs	r3, #4
 8001720:	60bb      	str	r3, [r7, #8]
	}
	break;
 8001722:	e008      	b.n	8001736 <HAL_ADC_ConvCpltCallback+0xca>
	case 5:							/* Se establece el sensor de la fase 6.  */
	{
		sConfig.Channel = ADC_CHANNEL_5;
 8001724:	2305      	movs	r3, #5
 8001726:	60bb      	str	r3, [r7, #8]
	}
	break;
 8001728:	e005      	b.n	8001736 <HAL_ADC_ConvCpltCallback+0xca>
	case 6:							/* Se establece el sensor de temperatura.*/
	{
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800172a:	2310      	movs	r3, #16
 800172c:	60bb      	str	r3, [r7, #8]
	}
	break;
 800172e:	e002      	b.n	8001736 <HAL_ADC_ConvCpltCallback+0xca>
	case 7:							/* Una vez que ha procesado la medida de */
	{								/* temperatura, se establece el sensor de*/
		sConfig.Channel = ADC_CHANNEL_0;/* la fase 1 nuevamente.			 */
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
	}
	break;
 8001734:	bf00      	nop
	break;
	}

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x168>)
 8001738:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <HAL_ADC_ConvCpltCallback+0x16c>)
 800173a:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x168>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x168>)
 8001744:	2201      	movs	r2, #1
 8001746:	731a      	strb	r2, [r3, #12]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x168>)
 800174a:	2200      	movs	r2, #0
 800174c:	751a      	strb	r2, [r3, #20]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x168>)
 8001750:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001754:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x168>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.NbrOfConversion = 1;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x168>)
 800175e:	2201      	movs	r2, #1
 8001760:	611a      	str	r2, [r3, #16]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001762:	481c      	ldr	r0, [pc, #112]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x168>)
 8001764:	f000 fa8e 	bl	8001c84 <HAL_ADC_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_ADC_ConvCpltCallback+0x106>
	  {
	    Error_Handler();
 800176e:	f000 f835 	bl	80017dc <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	sConfig.Rank = ADC_REGULAR_RANK_1;/* Se configura el proximo canal a     */
 8001772:	2301      	movs	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;/* muestrear.           */
 8001776:	2306      	movs	r3, #6
 8001778:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	4619      	mov	r1, r3
 8001780:	4814      	ldr	r0, [pc, #80]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x168>)
 8001782:	f000 fde1 	bl	8002348 <HAL_ADC_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d004      	beq.n	8001796 <HAL_ADC_ConvCpltCallback+0x12a>
	{
		codigoError = 3;
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_ADC_ConvCpltCallback+0x164>)
 800178e:	2203      	movs	r2, #3
 8001790:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001792:	f000 f823 	bl	80017dc <Error_Handler>
	}
	HAL_ADC_MspInit(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe ff5c 	bl	8000654 <HAL_ADC_MspInit>
	if(canalADC <=6)				/* Se inicia la conversión por DMA       */
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x15c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b06      	cmp	r3, #6
 80017a2:	d80e      	bhi.n	80017c2 <HAL_ADC_ConvCpltCallback+0x156>
	{								/* solo hasta que se lee el sensor de    */
									/* temperatura.							 */
		if(HAL_ADC_Start_DMA(&hadc1,sensorLeido,2*BUFFER_ADC) != HAL_OK)
 80017a4:	221a      	movs	r2, #26
 80017a6:	4909      	ldr	r1, [pc, #36]	; (80017cc <HAL_ADC_ConvCpltCallback+0x160>)
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x168>)
 80017aa:	f000 fbd5 	bl	8001f58 <HAL_ADC_Start_DMA>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_ADC_ConvCpltCallback+0x156>
		{
			codigoError = 4;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_ADC_ConvCpltCallback+0x164>)
 80017b6:	2204      	movs	r2, #4
 80017b8:	601a      	str	r2, [r3, #0]
			Error_Handler();
 80017ba:	f000 f80f 	bl	80017dc <Error_Handler>
 80017be:	e000      	b.n	80017c2 <HAL_ADC_ConvCpltCallback+0x156>
		return;
 80017c0:	bf00      	nop
		}
	}
}
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000048 	.word	0x20000048
 80017cc:	20000124 	.word	0x20000124
 80017d0:	2000004c 	.word	0x2000004c
 80017d4:	20000050 	.word	0x20000050
 80017d8:	40012400 	.word	0x40012400

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB,LED_FALLA_Pin,GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2102      	movs	r1, #2
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <Error_Handler+0x14>)
 80017e6:	f001 fef7 	bl	80035d8 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40010c00 	.word	0x40010c00

080017f4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2100      	movs	r1, #0
 8001812:	460a      	mov	r2, r1
 8001814:	801a      	strh	r2, [r3, #0]
 8001816:	460a      	mov	r2, r1
 8001818:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_RTC_Init+0x8c>)
 8001820:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <MX_RTC_Init+0x90>)
 8001822:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_RTC_Init+0x8c>)
 8001826:	f04f 32ff 	mov.w	r2, #4294967295
 800182a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_RTC_Init+0x8c>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001832:	4818      	ldr	r0, [pc, #96]	; (8001894 <MX_RTC_Init+0x8c>)
 8001834:	f004 fc38 	bl	80060a8 <HAL_RTC_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800183e:	f7ff ffcd 	bl	80017dc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x2;
 8001842:	2302      	movs	r3, #2
 8001844:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8001846:	2320      	movs	r3, #32
 8001848:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800184a:	2300      	movs	r3, #0
 800184c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2201      	movs	r2, #1
 8001852:	4619      	mov	r1, r3
 8001854:	480f      	ldr	r0, [pc, #60]	; (8001894 <MX_RTC_Init+0x8c>)
 8001856:	f004 fcf1 	bl	800623c <HAL_RTC_SetTime>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001860:	f7ff ffbc 	bl	80017dc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001864:	2306      	movs	r3, #6
 8001866:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_AUGUST;
 8001868:	2308      	movs	r3, #8
 800186a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800186c:	2301      	movs	r3, #1
 800186e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x20;
 8001870:	2320      	movs	r3, #32
 8001872:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	2201      	movs	r2, #1
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_RTC_Init+0x8c>)
 800187c:	f004 feaa 	bl	80065d4 <HAL_RTC_SetDate>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001886:	f7ff ffa9 	bl	80017dc <Error_Handler>
  }

}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000180 	.word	0x20000180
 8001898:	40002800 	.word	0x40002800

0800189c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <HAL_RTC_MspInit+0x5c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d120      	bne.n	80018f0 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80018ae:	f003 fc61 	bl	8005174 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RTC_MspInit+0x60>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a11      	ldr	r2, [pc, #68]	; (80018fc <HAL_RTC_MspInit+0x60>)
 80018b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_RTC_MspInit+0x60>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_RTC_MspInit+0x64>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	2003      	movs	r0, #3
 80018d6:	f001 f8e3 	bl	8002aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80018da:	2003      	movs	r0, #3
 80018dc:	f001 f90c 	bl	8002af8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2029      	movs	r0, #41	; 0x29
 80018e6:	f001 f8db 	bl	8002aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018ea:	2029      	movs	r0, #41	; 0x29
 80018ec:	f001 f904 	bl	8002af8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40002800 	.word	0x40002800
 80018fc:	40021000 	.word	0x40021000
 8001900:	4242043c 	.word	0x4242043c

08001904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_MspInit+0x70>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_MspInit+0x70>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6193      	str	r3, [r2, #24]
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_MspInit+0x70>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_MspInit+0x70>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a13      	ldr	r2, [pc, #76]	; (8001974 <HAL_MspInit+0x70>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_MspInit+0x70>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800193a:	2007      	movs	r0, #7
 800193c:	f001 f890 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2005      	movs	r0, #5
 8001946:	f001 f8ab 	bl	8002aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800194a:	2005      	movs	r0, #5
 800194c:	f001 f8d4 	bl	8002af8 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_MspInit+0x74>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_MspInit+0x74>)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
//		volatile unsigned long _ISPR0 = __get_IPSR();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, LED_STATUS_Pin);/* El led de estado se queda */
 800198c:	2101      	movs	r1, #1
 800198e:	4803      	ldr	r0, [pc, #12]	; (800199c <HardFault_Handler+0x14>)
 8001990:	f001 fe54 	bl	800363c <HAL_GPIO_TogglePin>
	  HAL_Delay(200);				/* titilando si hay una hard fault.      */
 8001994:	20c8      	movs	r0, #200	; 0xc8
 8001996:	f000 f953 	bl	8001c40 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LED_STATUS_Pin);/* El led de estado se queda */
 800199a:	e7f7      	b.n	800198c <HardFault_Handler+0x4>
 800199c:	40010c00 	.word	0x40010c00

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019da:	f000 f915 	bl	8001c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <RTC_IRQHandler+0x1c>)
 80019ea:	f005 fb51 	bl	8007090 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);	/* Para salir del modo de configuración  */
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <RTC_IRQHandler+0x20>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <RTC_IRQHandler+0x20>)
 80019f4:	f023 0310 	bic.w	r3, r3, #16
 80019f8:	6053      	str	r3, [r2, #4]
  	  	  	  	  	  	  	  	  	/* del RTC.								 */
  /* USER CODE END RTC_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000180 	.word	0x20000180
 8001a04:	40002800 	.word	0x40002800

08001a08 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <DMA1_Channel1_IRQHandler+0x10>)
 8001a1a:	f001 fa75 	bl	8002f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000080 	.word	0x20000080

08001a28 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <ADC1_2_IRQHandler+0x10>)
 8001a2e:	f000 fb7d 	bl	800212c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000050 	.word	0x20000050

08001a3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <I2C1_EV_IRQHandler+0x10>)
 8001a42:	f001 ffc3 	bl	80039cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200000c8 	.word	0x200000c8

08001a50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <I2C1_ER_IRQHandler+0x10>)
 8001a56:	f002 f91f 	bl	8003c98 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200000c8 	.word	0x200000c8

08001a64 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <RTC_Alarm_IRQHandler+0x54>)
 8001a6a:	f005 f83f 	bl	8006aec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
    HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a6e:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <RTC_Alarm_IRQHandler+0x54>)
 8001a70:	f005 f83c 	bl	8006aec <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_WaitForSynchro(&hrtc);
 8001a74:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <RTC_Alarm_IRQHandler+0x54>)
 8001a76:	f005 f86a 	bl	8006b4e <HAL_RTC_WaitForSynchro>
	  HAL_RTC_GetTime(&hrtc,&horaLeida, RTC_FORMAT_BCD);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	490f      	ldr	r1, [pc, #60]	; (8001abc <RTC_Alarm_IRQHandler+0x58>)
 8001a7e:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <RTC_Alarm_IRQHandler+0x54>)
 8001a80:	f004 fcc2 	bl	8006408 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&fechaLeida, RTC_FORMAT_BCD);
 8001a84:	2201      	movs	r2, #1
 8001a86:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <RTC_Alarm_IRQHandler+0x5c>)
 8001a88:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <RTC_Alarm_IRQHandler+0x54>)
 8001a8a:	f004 fec1 	bl	8006810 <HAL_RTC_GetDate>
    intAlarma.AlarmTime.Hours = horaLeida.Hours;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <RTC_Alarm_IRQHandler+0x58>)
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <RTC_Alarm_IRQHandler+0x60>)
 8001a94:	701a      	strb	r2, [r3, #0]
    intAlarma.AlarmTime.Minutes = horaLeida.Minutes;
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <RTC_Alarm_IRQHandler+0x58>)
 8001a98:	785a      	ldrb	r2, [r3, #1]
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <RTC_Alarm_IRQHandler+0x60>)
 8001a9c:	705a      	strb	r2, [r3, #1]
    intAlarma.AlarmTime.Seconds = horaLeida.Seconds + 2;
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <RTC_Alarm_IRQHandler+0x58>)
 8001aa0:	789b      	ldrb	r3, [r3, #2]
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <RTC_Alarm_IRQHandler+0x60>)
 8001aa8:	709a      	strb	r2, [r3, #2]
    HAL_RTC_SetAlarm_IT(&hrtc, &intAlarma, RTC_FORMAT_BCD);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4905      	ldr	r1, [pc, #20]	; (8001ac4 <RTC_Alarm_IRQHandler+0x60>)
 8001aae:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <RTC_Alarm_IRQHandler+0x54>)
 8001ab0:	f004 ff10 	bl	80068d4 <HAL_RTC_SetAlarm_IT>
    //HAL_RTC_GetAlarm(&hrtc,&alarmaLeida,RTC_ALARM_A, RTC_FORMAT_BCD);
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000180 	.word	0x20000180
 8001abc:	20000120 	.word	0x20000120
 8001ac0:	2000017c 	.word	0x2000017c
 8001ac4:	20000158 	.word	0x20000158

08001ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <SystemInit+0x5c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <SystemInit+0x5c>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <SystemInit+0x5c>)
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4911      	ldr	r1, [pc, #68]	; (8001b24 <SystemInit+0x5c>)
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <SystemInit+0x60>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <SystemInit+0x5c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <SystemInit+0x5c>)
 8001aea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <SystemInit+0x5c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SystemInit+0x5c>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <SystemInit+0x5c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <SystemInit+0x5c>)
 8001b06:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b0a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SystemInit+0x5c>)
 8001b0e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b12:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SystemInit+0x64>)
 8001b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	f8ff0000 	.word	0xf8ff0000
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b32:	e003      	b.n	8001b3c <LoopCopyDataInit>

08001b34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b3a:	3104      	adds	r1, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b3c:	480a      	ldr	r0, [pc, #40]	; (8001b68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b44:	d3f6      	bcc.n	8001b34 <CopyDataInit>
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b48:	e002      	b.n	8001b50 <LoopFillZerobss>

08001b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b4c:	f842 3b04 	str.w	r3, [r2], #4

08001b50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b54:	d3f9      	bcc.n	8001b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b56:	f7ff ffb7 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f005 fad7 	bl	800710c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5e:	f7ff fc67 	bl	8001430 <main>
  bx lr
 8001b62:	4770      	bx	lr
  ldr r3, =_sidata
 8001b64:	08007390 	.word	0x08007390
  ldr r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b6c:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001b70:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001b74:	20000198 	.word	0x20000198

08001b78 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <CAN1_RX1_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_Init+0x28>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_Init+0x28>)
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f000 ff67 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 f808 	bl	8001ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b98:	f7ff feb4 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x54>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x58>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 ffae 	bl	8002b28 <HAL_SYSTICK_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00e      	b.n	8001bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d80a      	bhi.n	8001bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 ff5c 	bl	8002aa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_InitTick+0x5c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	20000010 	.word	0x20000010
 8001c04:	2000000c 	.word	0x2000000c

08001c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_IncTick+0x1c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_IncTick+0x20>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <HAL_IncTick+0x20>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	20000010 	.word	0x20000010
 8001c28:	20000194 	.word	0x20000194

08001c2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <HAL_GetTick+0x10>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000194 	.word	0x20000194

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_Delay+0x40>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffe0 	bl	8001c2c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000010 	.word	0x20000010

08001c84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e153      	b.n	8001f4e <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a9f      	ldr	r2, [pc, #636]	; (8001f28 <HAL_ADC_Init+0x2a4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_ADC_Init+0x40>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a9d      	ldr	r2, [pc, #628]	; (8001f2c <HAL_ADC_Init+0x2a8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d004      	beq.n	8001cc4 <HAL_ADC_Init+0x40>
 8001cba:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001cbe:	489c      	ldr	r0, [pc, #624]	; (8001f30 <HAL_ADC_Init+0x2ac>)
 8001cc0:	f7ff fd98 	bl	80017f4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d009      	beq.n	8001ce0 <HAL_ADC_Init+0x5c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cd4:	d004      	beq.n	8001ce0 <HAL_ADC_Init+0x5c>
 8001cd6:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8001cda:	4895      	ldr	r0, [pc, #596]	; (8001f30 <HAL_ADC_Init+0x2ac>)
 8001cdc:	f7ff fd8a 	bl	80017f4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <HAL_ADC_Init+0x78>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf0:	d004      	beq.n	8001cfc <HAL_ADC_Init+0x78>
 8001cf2:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001cf6:	488e      	ldr	r0, [pc, #568]	; (8001f30 <HAL_ADC_Init+0x2ac>)
 8001cf8:	f7ff fd7c 	bl	80017f4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7b1b      	ldrb	r3, [r3, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_ADC_Init+0x92>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7b1b      	ldrb	r3, [r3, #12]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d004      	beq.n	8001d16 <HAL_ADC_Init+0x92>
 8001d0c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001d10:	4887      	ldr	r0, [pc, #540]	; (8001f30 <HAL_ADC_Init+0x2ac>)
 8001d12:	f7ff fd6f 	bl	80017f4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d022      	beq.n	8001d64 <HAL_ADC_Init+0xe0>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d26:	d01d      	beq.n	8001d64 <HAL_ADC_Init+0xe0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001d30:	d018      	beq.n	8001d64 <HAL_ADC_Init+0xe0>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d3a:	d013      	beq.n	8001d64 <HAL_ADC_Init+0xe0>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001d44:	d00e      	beq.n	8001d64 <HAL_ADC_Init+0xe0>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d4e:	d009      	beq.n	8001d64 <HAL_ADC_Init+0xe0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d58:	d004      	beq.n	8001d64 <HAL_ADC_Init+0xe0>
 8001d5a:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001d5e:	4874      	ldr	r0, [pc, #464]	; (8001f30 <HAL_ADC_Init+0x2ac>)
 8001d60:	f7ff fd48 	bl	80017f4 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d02a      	beq.n	8001dc2 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_ADC_Init+0xf8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d904      	bls.n	8001d86 <HAL_ADC_Init+0x102>
 8001d7c:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001d80:	486b      	ldr	r0, [pc, #428]	; (8001f30 <HAL_ADC_Init+0x2ac>)
 8001d82:	f7ff fd37 	bl	80017f4 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7d1b      	ldrb	r3, [r3, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d008      	beq.n	8001da0 <HAL_ADC_Init+0x11c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7d1b      	ldrb	r3, [r3, #20]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d004      	beq.n	8001da0 <HAL_ADC_Init+0x11c>
 8001d96:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001d9a:	4865      	ldr	r0, [pc, #404]	; (8001f30 <HAL_ADC_Init+0x2ac>)
 8001d9c:	f7ff fd2a 	bl	80017f4 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7d1b      	ldrb	r3, [r3, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00c      	beq.n	8001dc2 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_ADC_Init+0x134>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d904      	bls.n	8001dc2 <HAL_ADC_Init+0x13e>
 8001db8:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001dbc:	485c      	ldr	r0, [pc, #368]	; (8001f30 <HAL_ADC_Init+0x2ac>)
 8001dbe:	f7ff fd19 	bl	80017f4 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7fe fc3b 	bl	8000654 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fcc8 	bl	8002774 <ADC_ConversionStop_Disable>
 8001de4:	4603      	mov	r3, r0
 8001de6:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 80a3 	bne.w	8001f3c <HAL_ADC_Init+0x2b8>
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 809f 	bne.w	8001f3c <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e06:	f023 0302 	bic.w	r3, r3, #2
 8001e0a:	f043 0202 	orr.w	r2, r3, #2
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e1a:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7b1b      	ldrb	r3, [r3, #12]
 8001e20:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e22:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e32:	d003      	beq.n	8001e3c <HAL_ADC_Init+0x1b8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <HAL_ADC_Init+0x1be>
 8001e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e40:	e000      	b.n	8001e44 <HAL_ADC_Init+0x1c0>
 8001e42:	2300      	movs	r3, #0
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7d1b      	ldrb	r3, [r3, #20]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d119      	bne.n	8001e86 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7b1b      	ldrb	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	035a      	lsls	r2, r3, #13
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e00b      	b.n	8001e86 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	f043 0220 	orr.w	r2, r3, #32
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_ADC_Init+0x2b0>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb6:	d003      	beq.n	8001ec0 <HAL_ADC_Init+0x23c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d104      	bne.n	8001eca <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	051b      	lsls	r3, r3, #20
 8001ec8:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_ADC_Init+0x2b4>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d10b      	bne.n	8001f06 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	f023 0303 	bic.w	r3, r3, #3
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f04:	e022      	b.n	8001f4c <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	f023 0312 	bic.w	r3, r3, #18
 8001f0e:	f043 0210 	orr.w	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f043 0201 	orr.w	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f26:	e011      	b.n	8001f4c <HAL_ADC_Init+0x2c8>
 8001f28:	40012400 	.word	0x40012400
 8001f2c:	40012800 	.word	0x40012800
 8001f30:	0800717c 	.word	0x0800717c
 8001f34:	ffe1f7fd 	.word	0xffe1f7fd
 8001f38:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	f043 0210 	orr.w	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop

08001f58 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a69      	ldr	r2, [pc, #420]	; (8002114 <HAL_ADC_Start_DMA+0x1bc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_ADC_Start_DMA+0x24>
 8001f72:	f240 6114 	movw	r1, #1556	; 0x614
 8001f76:	4868      	ldr	r0, [pc, #416]	; (8002118 <HAL_ADC_Start_DMA+0x1c0>)
 8001f78:	f7ff fc3c 	bl	80017f4 <assert_failed>
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a64      	ldr	r2, [pc, #400]	; (8002114 <HAL_ADC_Start_DMA+0x1bc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_ADC_Start_DMA+0x38>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a64      	ldr	r2, [pc, #400]	; (800211c <HAL_ADC_Start_DMA+0x1c4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d106      	bne.n	8001f9e <HAL_ADC_Start_DMA+0x46>
 8001f90:	4b60      	ldr	r3, [pc, #384]	; (8002114 <HAL_ADC_Start_DMA+0x1bc>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f040 80b3 	bne.w	8002104 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_Start_DMA+0x54>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e0ae      	b.n	800210a <HAL_ADC_Start_DMA+0x1b2>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fb8b 	bl	80026d0 <ADC_Enable>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f040 809a 	bne.w	80020fa <HAL_ADC_Start_DMA+0x1a2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a4f      	ldr	r2, [pc, #316]	; (800211c <HAL_ADC_Start_DMA+0x1c4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d105      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0x98>
 8001fe4:	4b4b      	ldr	r3, [pc, #300]	; (8002114 <HAL_ADC_Start_DMA+0x1bc>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d115      	bne.n	800201c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	2b00      	cmp	r3, #0
 8002008:	d026      	beq.n	8002058 <HAL_ADC_Start_DMA+0x100>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002012:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800201a:	e01d      	b.n	8002058 <HAL_ADC_Start_DMA+0x100>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a39      	ldr	r2, [pc, #228]	; (8002114 <HAL_ADC_Start_DMA+0x1bc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_ADC_Start_DMA+0xe4>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a39      	ldr	r2, [pc, #228]	; (800211c <HAL_ADC_Start_DMA+0x1c4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10d      	bne.n	8002058 <HAL_ADC_Start_DMA+0x100>
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_ADC_Start_DMA+0x1bc>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_ADC_Start_DMA+0x100>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002050:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_ADC_Start_DMA+0x11a>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	f023 0206 	bic.w	r2, r3, #6
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002070:	e002      	b.n	8002078 <HAL_ADC_Start_DMA+0x120>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a26      	ldr	r2, [pc, #152]	; (8002120 <HAL_ADC_Start_DMA+0x1c8>)
 8002086:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4a25      	ldr	r2, [pc, #148]	; (8002124 <HAL_ADC_Start_DMA+0x1cc>)
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a24      	ldr	r2, [pc, #144]	; (8002128 <HAL_ADC_Start_DMA+0x1d0>)
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0202 	mvn.w	r2, #2
 80020a0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a18      	ldr	r0, [r3, #32]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	334c      	adds	r3, #76	; 0x4c
 80020bc:	4619      	mov	r1, r3
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f000 fe3d 	bl	8002d40 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020d4:	d108      	bne.n	80020e8 <HAL_ADC_Start_DMA+0x190>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80020e4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020e6:	e00f      	b.n	8002108 <HAL_ADC_Start_DMA+0x1b0>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020f6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020f8:	e006      	b.n	8002108 <HAL_ADC_Start_DMA+0x1b0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002102:	e001      	b.n	8002108 <HAL_ADC_Start_DMA+0x1b0>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002108:	7dfb      	ldrb	r3, [r7, #23]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40012400 	.word	0x40012400
 8002118:	0800717c 	.word	0x0800717c
 800211c:	40012800 	.word	0x40012800
 8002120:	080027e9 	.word	0x080027e9
 8002124:	08002865 	.word	0x08002865
 8002128:	08002881 	.word	0x08002881

0800212c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a72      	ldr	r2, [pc, #456]	; (8002304 <HAL_ADC_IRQHandler+0x1d8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_ADC_IRQHandler+0x26>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a71      	ldr	r2, [pc, #452]	; (8002308 <HAL_ADC_IRQHandler+0x1dc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_ADC_IRQHandler+0x26>
 8002148:	f240 61f1 	movw	r1, #1777	; 0x6f1
 800214c:	486f      	ldr	r0, [pc, #444]	; (800230c <HAL_ADC_IRQHandler+0x1e0>)
 800214e:	f7ff fb51 	bl	80017f4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7b1b      	ldrb	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_ADC_IRQHandler+0x40>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7b1b      	ldrb	r3, [r3, #12]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d004      	beq.n	800216c <HAL_ADC_IRQHandler+0x40>
 8002162:	f240 61f2 	movw	r1, #1778	; 0x6f2
 8002166:	4869      	ldr	r0, [pc, #420]	; (800230c <HAL_ADC_IRQHandler+0x1e0>)
 8002168:	f7ff fb44 	bl	80017f4 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_ADC_IRQHandler+0x50>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b10      	cmp	r3, #16
 800217a:	d904      	bls.n	8002186 <HAL_ADC_IRQHandler+0x5a>
 800217c:	f240 61f3 	movw	r1, #1779	; 0x6f3
 8002180:	4862      	ldr	r0, [pc, #392]	; (800230c <HAL_ADC_IRQHandler+0x1e0>)
 8002182:	f7ff fb37 	bl	80017f4 <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b20      	cmp	r3, #32
 8002192:	d140      	bne.n	8002216 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d139      	bne.n	8002216 <HAL_ADC_IRQHandler+0xea>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d105      	bne.n	80021ba <HAL_ADC_IRQHandler+0x8e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021c8:	d11d      	bne.n	8002206 <HAL_ADC_IRQHandler+0xda>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d119      	bne.n	8002206 <HAL_ADC_IRQHandler+0xda>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0220 	bic.w	r2, r2, #32
 80021e0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_ADC_IRQHandler+0xda>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	f043 0201 	orr.w	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fa30 	bl	800166c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0212 	mvn.w	r2, #18
 8002214:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d14f      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x198>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d148      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002254:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002258:	d012      	beq.n	8002280 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002264:	2b00      	cmp	r3, #0
 8002266:	d125      	bne.n	80022b4 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002272:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002276:	d11d      	bne.n	80022b4 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d119      	bne.n	80022b4 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800228e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fafd 	bl	80028b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f06f 020c 	mvn.w	r2, #12
 80022c2:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d114      	bne.n	80022fc <HAL_ADC_IRQHandler+0x1d0>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10d      	bne.n	80022fc <HAL_ADC_IRQHandler+0x1d0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f818 	bl	8002322 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0201 	mvn.w	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40012400 	.word	0x40012400
 8002308:	40012800 	.word	0x40012800
 800230c:	0800717c 	.word	0x0800717c

08002310 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
	...

08002348 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a88      	ldr	r2, [pc, #544]	; (8002580 <HAL_ADC_ConfigChannel+0x238>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_ADC_ConfigChannel+0x30>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a86      	ldr	r2, [pc, #536]	; (8002584 <HAL_ADC_ConfigChannel+0x23c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_ADC_ConfigChannel+0x30>
 800236e:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8002372:	4885      	ldr	r0, [pc, #532]	; (8002588 <HAL_ADC_ConfigChannel+0x240>)
 8002374:	f7ff fa3e 	bl	80017f4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d048      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d044      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d040      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d03c      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d038      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d034      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d030      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b07      	cmp	r3, #7
 80023b6:	d02c      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d028      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b09      	cmp	r3, #9
 80023c6:	d024      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b0a      	cmp	r3, #10
 80023ce:	d020      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b0b      	cmp	r3, #11
 80023d6:	d01c      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	d018      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b0d      	cmp	r3, #13
 80023e6:	d014      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b0e      	cmp	r3, #14
 80023ee:	d010      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d00c      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d008      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b11      	cmp	r3, #17
 8002406:	d004      	beq.n	8002412 <HAL_ADC_ConfigChannel+0xca>
 8002408:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800240c:	485e      	ldr	r0, [pc, #376]	; (8002588 <HAL_ADC_ConfigChannel+0x240>)
 800240e:	f7ff f9f1 	bl	80017f4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d040      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d03c      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d038      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b04      	cmp	r3, #4
 8002430:	d034      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b05      	cmp	r3, #5
 8002438:	d030      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b06      	cmp	r3, #6
 8002440:	d02c      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b07      	cmp	r3, #7
 8002448:	d028      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b08      	cmp	r3, #8
 8002450:	d024      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b09      	cmp	r3, #9
 8002458:	d020      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b0a      	cmp	r3, #10
 8002460:	d01c      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b0b      	cmp	r3, #11
 8002468:	d018      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d014      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b0d      	cmp	r3, #13
 8002478:	d010      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b0e      	cmp	r3, #14
 8002480:	d00c      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	d008      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b10      	cmp	r3, #16
 8002490:	d004      	beq.n	800249c <HAL_ADC_ConfigChannel+0x154>
 8002492:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002496:	483c      	ldr	r0, [pc, #240]	; (8002588 <HAL_ADC_ConfigChannel+0x240>)
 8002498:	f7ff f9ac 	bl	80017f4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x19e>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d01c      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x19e>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d018      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x19e>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d014      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x19e>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d010      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x19e>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d00c      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x19e>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b06      	cmp	r3, #6
 80024d2:	d008      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x19e>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b07      	cmp	r3, #7
 80024da:	d004      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x19e>
 80024dc:	f240 71d1 	movw	r1, #2001	; 0x7d1
 80024e0:	4829      	ldr	r0, [pc, #164]	; (8002588 <HAL_ADC_ConfigChannel+0x240>)
 80024e2:	f7ff f987 	bl	80017f4 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1ac>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0e2      	b.n	80026ba <HAL_ADC_ConfigChannel+0x372>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d81c      	bhi.n	800253e <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	3b05      	subs	r3, #5
 8002516:	221f      	movs	r2, #31
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	4019      	ands	r1, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b05      	subs	r3, #5
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	635a      	str	r2, [r3, #52]	; 0x34
 800253c:	e042      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d822      	bhi.n	800258c <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b23      	subs	r3, #35	; 0x23
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	4019      	ands	r1, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	3b23      	subs	r3, #35	; 0x23
 8002572:	fa00 f203 	lsl.w	r2, r0, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	631a      	str	r2, [r3, #48]	; 0x30
 800257e:	e021      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x27c>
 8002580:	40012400 	.word	0x40012400
 8002584:	40012800 	.word	0x40012800
 8002588:	0800717c 	.word	0x0800717c
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b41      	subs	r3, #65	; 0x41
 800259e:	221f      	movs	r2, #31
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4019      	ands	r1, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b41      	subs	r3, #65	; 0x41
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	d91c      	bls.n	8002606 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68d9      	ldr	r1, [r3, #12]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	3b1e      	subs	r3, #30
 80025de:	2207      	movs	r2, #7
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	4019      	ands	r1, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6898      	ldr	r0, [r3, #8]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	3b1e      	subs	r3, #30
 80025f8:	fa00 f203 	lsl.w	r2, r0, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	e019      	b.n	800263a <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6919      	ldr	r1, [r3, #16]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	2207      	movs	r2, #7
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	4019      	ands	r1, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	6898      	ldr	r0, [r3, #8]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	fa00 f203 	lsl.w	r2, r0, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b10      	cmp	r3, #16
 8002640:	d003      	beq.n	800264a <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002646:	2b11      	cmp	r3, #17
 8002648:	d132      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <HAL_ADC_ConfigChannel+0x37c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d125      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d126      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002670:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b10      	cmp	r3, #16
 8002678:	d11a      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_ADC_ConfigChannel+0x380>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <HAL_ADC_ConfigChannel+0x384>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	0c9a      	lsrs	r2, r3, #18
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002690:	e002      	b.n	8002698 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3b01      	subs	r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f9      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x34a>
 800269e:	e007      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40012400 	.word	0x40012400
 80026c8:	20000008 	.word	0x20000008
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d039      	beq.n	8002762 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <ADC_Enable+0x9c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <ADC_Enable+0xa0>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	0c9b      	lsrs	r3, r3, #18
 800270a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800270c:	e002      	b.n	8002714 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3b01      	subs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f9      	bne.n	800270e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800271a:	f7ff fa87 	bl	8001c2c <HAL_GetTick>
 800271e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002720:	e018      	b.n	8002754 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002722:	f7ff fa83 	bl	8001c2c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d911      	bls.n	8002754 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	f043 0210 	orr.w	r2, r3, #16
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1df      	bne.n	8002722 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000008 	.word	0x20000008
 8002770:	431bde83 	.word	0x431bde83

08002774 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d127      	bne.n	80027de <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800279e:	f7ff fa45 	bl	8001c2c <HAL_GetTick>
 80027a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027a4:	e014      	b.n	80027d0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027a6:	f7ff fa41 	bl	8001c2c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d90d      	bls.n	80027d0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d0e3      	beq.n	80027a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d127      	bne.n	8002852 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002818:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800281c:	d115      	bne.n	800284a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002822:	2b00      	cmp	r3, #0
 8002824:	d111      	bne.n	800284a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7fe ff0e 	bl	800166c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002850:	e004      	b.n	800285c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff fd4c 	bl	8002310 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	f043 0204 	orr.w	r2, r3, #4
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff fd44 	bl	8002334 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
	...

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4906      	ldr	r1, [pc, #24]	; (8002960 <__NVIC_EnableIRQ+0x34>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	; (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	; (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f7ff ff90 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b07      	cmp	r3, #7
 8002a6c:	d00f      	beq.n	8002a8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d00c      	beq.n	8002a8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	d009      	beq.n	8002a8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d006      	beq.n	8002a8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d003      	beq.n	8002a8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a86:	2192      	movs	r1, #146	; 0x92
 8002a88:	4804      	ldr	r0, [pc, #16]	; (8002a9c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002a8a:	f7fe feb3 	bl	80017f4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ff1a 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	080071b4 	.word	0x080071b4

08002aa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b0f      	cmp	r3, #15
 8002ab6:	d903      	bls.n	8002ac0 <HAL_NVIC_SetPriority+0x20>
 8002ab8:	21aa      	movs	r1, #170	; 0xaa
 8002aba:	480e      	ldr	r0, [pc, #56]	; (8002af4 <HAL_NVIC_SetPriority+0x54>)
 8002abc:	f7fe fe9a 	bl	80017f4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b0f      	cmp	r3, #15
 8002ac4:	d903      	bls.n	8002ace <HAL_NVIC_SetPriority+0x2e>
 8002ac6:	21ab      	movs	r1, #171	; 0xab
 8002ac8:	480a      	ldr	r0, [pc, #40]	; (8002af4 <HAL_NVIC_SetPriority+0x54>)
 8002aca:	f7fe fe93 	bl	80017f4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ace:	f7ff ff1f 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002ad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	6978      	ldr	r0, [r7, #20]
 8002ada:	f7ff ff6d 	bl	80029b8 <NVIC_EncodePriority>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff3c 	bl	8002964 <__NVIC_SetPriority>
}
 8002aec:	bf00      	nop
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	080071b4 	.word	0x080071b4

08002af8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	da03      	bge.n	8002b12 <HAL_NVIC_EnableIRQ+0x1a>
 8002b0a:	21be      	movs	r1, #190	; 0xbe
 8002b0c:	4805      	ldr	r0, [pc, #20]	; (8002b24 <HAL_NVIC_EnableIRQ+0x2c>)
 8002b0e:	f7fe fe71 	bl	80017f4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ff08 	bl	800292c <__NVIC_EnableIRQ>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	080071b4 	.word	0x080071b4

08002b28 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff73 	bl	8002a1c <SysTick_Config>
 8002b36:	4603      	mov	r3, r0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0da      	b.n	8002d0c <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6e      	ldr	r2, [pc, #440]	; (8002d14 <HAL_DMA_Init+0x1d4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d021      	beq.n	8002ba4 <HAL_DMA_Init+0x64>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6c      	ldr	r2, [pc, #432]	; (8002d18 <HAL_DMA_Init+0x1d8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01c      	beq.n	8002ba4 <HAL_DMA_Init+0x64>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6b      	ldr	r2, [pc, #428]	; (8002d1c <HAL_DMA_Init+0x1dc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d017      	beq.n	8002ba4 <HAL_DMA_Init+0x64>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a69      	ldr	r2, [pc, #420]	; (8002d20 <HAL_DMA_Init+0x1e0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d012      	beq.n	8002ba4 <HAL_DMA_Init+0x64>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a68      	ldr	r2, [pc, #416]	; (8002d24 <HAL_DMA_Init+0x1e4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00d      	beq.n	8002ba4 <HAL_DMA_Init+0x64>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a66      	ldr	r2, [pc, #408]	; (8002d28 <HAL_DMA_Init+0x1e8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d008      	beq.n	8002ba4 <HAL_DMA_Init+0x64>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a65      	ldr	r2, [pc, #404]	; (8002d2c <HAL_DMA_Init+0x1ec>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d003      	beq.n	8002ba4 <HAL_DMA_Init+0x64>
 8002b9c:	219a      	movs	r1, #154	; 0x9a
 8002b9e:	4864      	ldr	r0, [pc, #400]	; (8002d30 <HAL_DMA_Init+0x1f0>)
 8002ba0:	f7fe fe28 	bl	80017f4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <HAL_DMA_Init+0x86>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d008      	beq.n	8002bc6 <HAL_DMA_Init+0x86>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bbc:	d003      	beq.n	8002bc6 <HAL_DMA_Init+0x86>
 8002bbe:	219b      	movs	r1, #155	; 0x9b
 8002bc0:	485b      	ldr	r0, [pc, #364]	; (8002d30 <HAL_DMA_Init+0x1f0>)
 8002bc2:	f7fe fe17 	bl	80017f4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d007      	beq.n	8002bde <HAL_DMA_Init+0x9e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_DMA_Init+0x9e>
 8002bd6:	219c      	movs	r1, #156	; 0x9c
 8002bd8:	4855      	ldr	r0, [pc, #340]	; (8002d30 <HAL_DMA_Init+0x1f0>)
 8002bda:	f7fe fe0b 	bl	80017f4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d007      	beq.n	8002bf6 <HAL_DMA_Init+0xb6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_DMA_Init+0xb6>
 8002bee:	219d      	movs	r1, #157	; 0x9d
 8002bf0:	484f      	ldr	r0, [pc, #316]	; (8002d30 <HAL_DMA_Init+0x1f0>)
 8002bf2:	f7fe fdff 	bl	80017f4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <HAL_DMA_Init+0xda>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c06:	d008      	beq.n	8002c1a <HAL_DMA_Init+0xda>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c10:	d003      	beq.n	8002c1a <HAL_DMA_Init+0xda>
 8002c12:	219e      	movs	r1, #158	; 0x9e
 8002c14:	4846      	ldr	r0, [pc, #280]	; (8002d30 <HAL_DMA_Init+0x1f0>)
 8002c16:	f7fe fded 	bl	80017f4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <HAL_DMA_Init+0xfe>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2a:	d008      	beq.n	8002c3e <HAL_DMA_Init+0xfe>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c34:	d003      	beq.n	8002c3e <HAL_DMA_Init+0xfe>
 8002c36:	219f      	movs	r1, #159	; 0x9f
 8002c38:	483d      	ldr	r0, [pc, #244]	; (8002d30 <HAL_DMA_Init+0x1f0>)
 8002c3a:	f7fe fddb 	bl	80017f4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_DMA_Init+0x116>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d003      	beq.n	8002c56 <HAL_DMA_Init+0x116>
 8002c4e:	21a0      	movs	r1, #160	; 0xa0
 8002c50:	4837      	ldr	r0, [pc, #220]	; (8002d30 <HAL_DMA_Init+0x1f0>)
 8002c52:	f7fe fdcf 	bl	80017f4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d012      	beq.n	8002c84 <HAL_DMA_Init+0x144>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c66:	d00d      	beq.n	8002c84 <HAL_DMA_Init+0x144>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c70:	d008      	beq.n	8002c84 <HAL_DMA_Init+0x144>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c7a:	d003      	beq.n	8002c84 <HAL_DMA_Init+0x144>
 8002c7c:	21a1      	movs	r1, #161	; 0xa1
 8002c7e:	482c      	ldr	r0, [pc, #176]	; (8002d30 <HAL_DMA_Init+0x1f0>)
 8002c80:	f7fe fdb8 	bl	80017f4 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <HAL_DMA_Init+0x1f4>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <HAL_DMA_Init+0x1f8>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	009a      	lsls	r2, r3, #2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <HAL_DMA_Init+0x1fc>)
 8002ca0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cb8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cbc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40020008 	.word	0x40020008
 8002d18:	4002001c 	.word	0x4002001c
 8002d1c:	40020030 	.word	0x40020030
 8002d20:	40020044 	.word	0x40020044
 8002d24:	40020058 	.word	0x40020058
 8002d28:	4002006c 	.word	0x4002006c
 8002d2c:	40020080 	.word	0x40020080
 8002d30:	080071f0 	.word	0x080071f0
 8002d34:	bffdfff8 	.word	0xbffdfff8
 8002d38:	cccccccd 	.word	0xcccccccd
 8002d3c:	40020000 	.word	0x40020000

08002d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_DMA_Start_IT+0x20>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5e:	d304      	bcc.n	8002d6a <HAL_DMA_Start_IT+0x2a>
 8002d60:	f240 116f 	movw	r1, #367	; 0x16f
 8002d64:	482c      	ldr	r0, [pc, #176]	; (8002e18 <HAL_DMA_Start_IT+0xd8>)
 8002d66:	f7fe fd45 	bl	80017f4 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_DMA_Start_IT+0x38>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e04a      	b.n	8002e0e <HAL_DMA_Start_IT+0xce>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d13a      	bne.n	8002e00 <HAL_DMA_Start_IT+0xc0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f9bc 	bl	800312c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_DMA_Start_IT+0x8e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 020e 	orr.w	r2, r2, #14
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e00f      	b.n	8002dee <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0204 	bic.w	r2, r2, #4
 8002ddc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 020a 	orr.w	r2, r2, #10
 8002dec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e005      	b.n	8002e0c <HAL_DMA_Start_IT+0xcc>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	080071f0 	.word	0x080071f0

08002e1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d005      	beq.n	8002e3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2204      	movs	r2, #4
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e051      	b.n	8002ee2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 020e 	bic.w	r2, r2, #14
 8002e4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a22      	ldr	r2, [pc, #136]	; (8002eec <HAL_DMA_Abort_IT+0xd0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d029      	beq.n	8002ebc <HAL_DMA_Abort_IT+0xa0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <HAL_DMA_Abort_IT+0xd4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d022      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x9c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_DMA_Abort_IT+0xd8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d01a      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x96>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_DMA_Abort_IT+0xdc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d012      	beq.n	8002eac <HAL_DMA_Abort_IT+0x90>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1c      	ldr	r2, [pc, #112]	; (8002efc <HAL_DMA_Abort_IT+0xe0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_DMA_Abort_IT+0x8a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_DMA_Abort_IT+0xe4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d102      	bne.n	8002ea0 <HAL_DMA_Abort_IT+0x84>
 8002e9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e9e:	e00e      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea4:	e00b      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eaa:	e008      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb0:	e005      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb6:	e002      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002eb8:	2310      	movs	r3, #16
 8002eba:	e000      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	4a11      	ldr	r2, [pc, #68]	; (8002f04 <HAL_DMA_Abort_IT+0xe8>)
 8002ec0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
    } 
  }
  return status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40020008 	.word	0x40020008
 8002ef0:	4002001c 	.word	0x4002001c
 8002ef4:	40020030 	.word	0x40020030
 8002ef8:	40020044 	.word	0x40020044
 8002efc:	40020058 	.word	0x40020058
 8002f00:	4002006c 	.word	0x4002006c
 8002f04:	40020000 	.word	0x40020000

08002f08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2204      	movs	r2, #4
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d04f      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0xc8>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d04a      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0204 	bic.w	r2, r2, #4
 8002f56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a66      	ldr	r2, [pc, #408]	; (80030f8 <HAL_DMA_IRQHandler+0x1f0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d029      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0xae>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a65      	ldr	r2, [pc, #404]	; (80030fc <HAL_DMA_IRQHandler+0x1f4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d022      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xaa>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a63      	ldr	r2, [pc, #396]	; (8003100 <HAL_DMA_IRQHandler+0x1f8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01a      	beq.n	8002fac <HAL_DMA_IRQHandler+0xa4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a62      	ldr	r2, [pc, #392]	; (8003104 <HAL_DMA_IRQHandler+0x1fc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d012      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x9e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a60      	ldr	r2, [pc, #384]	; (8003108 <HAL_DMA_IRQHandler+0x200>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00a      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x98>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a5f      	ldr	r2, [pc, #380]	; (800310c <HAL_DMA_IRQHandler+0x204>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d102      	bne.n	8002f9a <HAL_DMA_IRQHandler+0x92>
 8002f94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f98:	e00e      	b.n	8002fb8 <HAL_DMA_IRQHandler+0xb0>
 8002f9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f9e:	e00b      	b.n	8002fb8 <HAL_DMA_IRQHandler+0xb0>
 8002fa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fa4:	e008      	b.n	8002fb8 <HAL_DMA_IRQHandler+0xb0>
 8002fa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002faa:	e005      	b.n	8002fb8 <HAL_DMA_IRQHandler+0xb0>
 8002fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb0:	e002      	b.n	8002fb8 <HAL_DMA_IRQHandler+0xb0>
 8002fb2:	2340      	movs	r3, #64	; 0x40
 8002fb4:	e000      	b.n	8002fb8 <HAL_DMA_IRQHandler+0xb0>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	4a55      	ldr	r2, [pc, #340]	; (8003110 <HAL_DMA_IRQHandler+0x208>)
 8002fba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8094 	beq.w	80030ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002fce:	e08e      	b.n	80030ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d056      	beq.n	800308e <HAL_DMA_IRQHandler+0x186>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d051      	beq.n	800308e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 020a 	bic.w	r2, r2, #10
 8003006:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a38      	ldr	r2, [pc, #224]	; (80030f8 <HAL_DMA_IRQHandler+0x1f0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d029      	beq.n	800306e <HAL_DMA_IRQHandler+0x166>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a37      	ldr	r2, [pc, #220]	; (80030fc <HAL_DMA_IRQHandler+0x1f4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d022      	beq.n	800306a <HAL_DMA_IRQHandler+0x162>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a35      	ldr	r2, [pc, #212]	; (8003100 <HAL_DMA_IRQHandler+0x1f8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01a      	beq.n	8003064 <HAL_DMA_IRQHandler+0x15c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a34      	ldr	r2, [pc, #208]	; (8003104 <HAL_DMA_IRQHandler+0x1fc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d012      	beq.n	800305e <HAL_DMA_IRQHandler+0x156>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a32      	ldr	r2, [pc, #200]	; (8003108 <HAL_DMA_IRQHandler+0x200>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00a      	beq.n	8003058 <HAL_DMA_IRQHandler+0x150>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a31      	ldr	r2, [pc, #196]	; (800310c <HAL_DMA_IRQHandler+0x204>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d102      	bne.n	8003052 <HAL_DMA_IRQHandler+0x14a>
 800304c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003050:	e00e      	b.n	8003070 <HAL_DMA_IRQHandler+0x168>
 8003052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003056:	e00b      	b.n	8003070 <HAL_DMA_IRQHandler+0x168>
 8003058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800305c:	e008      	b.n	8003070 <HAL_DMA_IRQHandler+0x168>
 800305e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003062:	e005      	b.n	8003070 <HAL_DMA_IRQHandler+0x168>
 8003064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003068:	e002      	b.n	8003070 <HAL_DMA_IRQHandler+0x168>
 800306a:	2320      	movs	r3, #32
 800306c:	e000      	b.n	8003070 <HAL_DMA_IRQHandler+0x168>
 800306e:	2302      	movs	r3, #2
 8003070:	4a27      	ldr	r2, [pc, #156]	; (8003110 <HAL_DMA_IRQHandler+0x208>)
 8003072:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	2b00      	cmp	r3, #0
 8003082:	d034      	beq.n	80030ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800308c:	e02f      	b.n	80030ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	2208      	movs	r2, #8
 8003094:	409a      	lsls	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d028      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x1e8>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d023      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 020e 	bic.w	r2, r2, #14
 80030b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f202 	lsl.w	r2, r1, r2
 80030c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
    }
  }
  return;
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
}
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40020008 	.word	0x40020008
 80030fc:	4002001c 	.word	0x4002001c
 8003100:	40020030 	.word	0x40020030
 8003104:	40020044 	.word	0x40020044
 8003108:	40020058 	.word	0x40020058
 800310c:	4002006c 	.word	0x4002006c
 8003110:	40020000 	.word	0x40020000

08003114 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2101      	movs	r1, #1
 8003144:	fa01 f202 	lsl.w	r2, r1, r2
 8003148:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b10      	cmp	r3, #16
 8003158:	d108      	bne.n	800316c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800316a:	e007      	b.n	800317c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
	...

08003188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a9c      	ldr	r2, [pc, #624]	; (8003410 <HAL_GPIO_Init+0x288>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00f      	beq.n	80031c2 <HAL_GPIO_Init+0x3a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a9b      	ldr	r2, [pc, #620]	; (8003414 <HAL_GPIO_Init+0x28c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <HAL_GPIO_Init+0x3a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a9a      	ldr	r2, [pc, #616]	; (8003418 <HAL_GPIO_Init+0x290>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x3a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a99      	ldr	r2, [pc, #612]	; (800341c <HAL_GPIO_Init+0x294>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x3a>
 80031ba:	21bd      	movs	r1, #189	; 0xbd
 80031bc:	4898      	ldr	r0, [pc, #608]	; (8003420 <HAL_GPIO_Init+0x298>)
 80031be:	f7fe fb19 	bl	80017f4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_GPIO_Init+0x50>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	041b      	lsls	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x58>
 80031d8:	21be      	movs	r1, #190	; 0xbe
 80031da:	4891      	ldr	r0, [pc, #580]	; (8003420 <HAL_GPIO_Init+0x298>)
 80031dc:	f7fe fb0a 	bl	80017f4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 81df 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	f000 81da 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b11      	cmp	r3, #17
 80031fa:	f000 81d5 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	f000 81d0 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b12      	cmp	r3, #18
 800320e:	f000 81cb 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4a83      	ldr	r2, [pc, #524]	; (8003424 <HAL_GPIO_Init+0x29c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	f000 81c5 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a81      	ldr	r2, [pc, #516]	; (8003428 <HAL_GPIO_Init+0x2a0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f000 81bf 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4a7f      	ldr	r2, [pc, #508]	; (800342c <HAL_GPIO_Init+0x2a4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	f000 81b9 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4a7d      	ldr	r2, [pc, #500]	; (8003430 <HAL_GPIO_Init+0x2a8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	f000 81b3 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a7b      	ldr	r2, [pc, #492]	; (8003434 <HAL_GPIO_Init+0x2ac>)
 8003248:	4293      	cmp	r3, r2
 800324a:	f000 81ad 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a79      	ldr	r2, [pc, #484]	; (8003438 <HAL_GPIO_Init+0x2b0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	f000 81a7 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b03      	cmp	r3, #3
 8003260:	f000 81a2 	beq.w	80035a8 <HAL_GPIO_Init+0x420>
 8003264:	21bf      	movs	r1, #191	; 0xbf
 8003266:	486e      	ldr	r0, [pc, #440]	; (8003420 <HAL_GPIO_Init+0x298>)
 8003268:	f7fe fac4 	bl	80017f4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326c:	e19c      	b.n	80035a8 <HAL_GPIO_Init+0x420>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800326e:	2201      	movs	r2, #1
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	429a      	cmp	r2, r3
 8003288:	f040 818b 	bne.w	80035a2 <HAL_GPIO_Init+0x41a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a60      	ldr	r2, [pc, #384]	; (8003410 <HAL_GPIO_Init+0x288>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00f      	beq.n	80032b4 <HAL_GPIO_Init+0x12c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a5f      	ldr	r2, [pc, #380]	; (8003414 <HAL_GPIO_Init+0x28c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00b      	beq.n	80032b4 <HAL_GPIO_Init+0x12c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a5e      	ldr	r2, [pc, #376]	; (8003418 <HAL_GPIO_Init+0x290>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <HAL_GPIO_Init+0x12c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a5d      	ldr	r2, [pc, #372]	; (800341c <HAL_GPIO_Init+0x294>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x12c>
 80032ac:	21cd      	movs	r1, #205	; 0xcd
 80032ae:	485c      	ldr	r0, [pc, #368]	; (8003420 <HAL_GPIO_Init+0x298>)
 80032b0:	f7fe faa0 	bl	80017f4 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b12      	cmp	r3, #18
 80032ba:	d065      	beq.n	8003388 <HAL_GPIO_Init+0x200>
 80032bc:	2b12      	cmp	r3, #18
 80032be:	d80e      	bhi.n	80032de <HAL_GPIO_Init+0x156>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d04c      	beq.n	800335e <HAL_GPIO_Init+0x1d6>
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d804      	bhi.n	80032d2 <HAL_GPIO_Init+0x14a>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d072      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d01d      	beq.n	800330c <HAL_GPIO_Init+0x184>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032d0:	e099      	b.n	8003406 <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	f000 8094 	beq.w	8003400 <HAL_GPIO_Init+0x278>
 80032d8:	2b11      	cmp	r3, #17
 80032da:	d02b      	beq.n	8003334 <HAL_GPIO_Init+0x1ac>
          break;
 80032dc:	e093      	b.n	8003406 <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 80032de:	4a52      	ldr	r2, [pc, #328]	; (8003428 <HAL_GPIO_Init+0x2a0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d066      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
 80032e4:	4a50      	ldr	r2, [pc, #320]	; (8003428 <HAL_GPIO_Init+0x2a0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d806      	bhi.n	80032f8 <HAL_GPIO_Init+0x170>
 80032ea:	4a4e      	ldr	r2, [pc, #312]	; (8003424 <HAL_GPIO_Init+0x29c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d060      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
 80032f0:	4a4f      	ldr	r2, [pc, #316]	; (8003430 <HAL_GPIO_Init+0x2a8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d05d      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
          break;
 80032f6:	e086      	b.n	8003406 <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 80032f8:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_GPIO_Init+0x2a4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d059      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
 80032fe:	4a4e      	ldr	r2, [pc, #312]	; (8003438 <HAL_GPIO_Init+0x2b0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d056      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
 8003304:	4a4b      	ldr	r2, [pc, #300]	; (8003434 <HAL_GPIO_Init+0x2ac>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d053      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
          break;
 800330a:	e07c      	b.n	8003406 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d00b      	beq.n	800332c <HAL_GPIO_Init+0x1a4>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d007      	beq.n	800332c <HAL_GPIO_Init+0x1a4>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x1a4>
 8003324:	21d5      	movs	r1, #213	; 0xd5
 8003326:	483e      	ldr	r0, [pc, #248]	; (8003420 <HAL_GPIO_Init+0x298>)
 8003328:	f7fe fa64 	bl	80017f4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	623b      	str	r3, [r7, #32]
          break;
 8003332:	e068      	b.n	8003406 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d00b      	beq.n	8003354 <HAL_GPIO_Init+0x1cc>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d007      	beq.n	8003354 <HAL_GPIO_Init+0x1cc>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x1cc>
 800334c:	21dc      	movs	r1, #220	; 0xdc
 800334e:	4834      	ldr	r0, [pc, #208]	; (8003420 <HAL_GPIO_Init+0x298>)
 8003350:	f7fe fa50 	bl	80017f4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	3304      	adds	r3, #4
 800335a:	623b      	str	r3, [r7, #32]
          break;
 800335c:	e053      	b.n	8003406 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d00b      	beq.n	800337e <HAL_GPIO_Init+0x1f6>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d007      	beq.n	800337e <HAL_GPIO_Init+0x1f6>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b03      	cmp	r3, #3
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x1f6>
 8003376:	21e3      	movs	r1, #227	; 0xe3
 8003378:	4829      	ldr	r0, [pc, #164]	; (8003420 <HAL_GPIO_Init+0x298>)
 800337a:	f7fe fa3b 	bl	80017f4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	3308      	adds	r3, #8
 8003384:	623b      	str	r3, [r7, #32]
          break;
 8003386:	e03e      	b.n	8003406 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d00b      	beq.n	80033a8 <HAL_GPIO_Init+0x220>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d007      	beq.n	80033a8 <HAL_GPIO_Init+0x220>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x220>
 80033a0:	21ea      	movs	r1, #234	; 0xea
 80033a2:	481f      	ldr	r0, [pc, #124]	; (8003420 <HAL_GPIO_Init+0x298>)
 80033a4:	f7fe fa26 	bl	80017f4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	330c      	adds	r3, #12
 80033ae:	623b      	str	r3, [r7, #32]
          break;
 80033b0:	e029      	b.n	8003406 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_GPIO_Init+0x24a>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d007      	beq.n	80033d2 <HAL_GPIO_Init+0x24a>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x24a>
 80033ca:	21f7      	movs	r1, #247	; 0xf7
 80033cc:	4814      	ldr	r0, [pc, #80]	; (8003420 <HAL_GPIO_Init+0x298>)
 80033ce:	f7fe fa11 	bl	80017f4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <HAL_GPIO_Init+0x258>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033da:	2304      	movs	r3, #4
 80033dc:	623b      	str	r3, [r7, #32]
          break;
 80033de:	e012      	b.n	8003406 <HAL_GPIO_Init+0x27e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <HAL_GPIO_Init+0x26c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033e8:	2308      	movs	r3, #8
 80033ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	611a      	str	r2, [r3, #16]
          break;
 80033f2:	e008      	b.n	8003406 <HAL_GPIO_Init+0x27e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033f4:	2308      	movs	r3, #8
 80033f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	615a      	str	r2, [r3, #20]
          break;
 80033fe:	e002      	b.n	8003406 <HAL_GPIO_Init+0x27e>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003400:	2300      	movs	r3, #0
 8003402:	623b      	str	r3, [r7, #32]
          break;
 8003404:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d817      	bhi.n	800343c <HAL_GPIO_Init+0x2b4>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	e017      	b.n	8003440 <HAL_GPIO_Init+0x2b8>
 8003410:	40010800 	.word	0x40010800
 8003414:	40010c00 	.word	0x40010c00
 8003418:	40011000 	.word	0x40011000
 800341c:	40011400 	.word	0x40011400
 8003420:	08007228 	.word	0x08007228
 8003424:	10110000 	.word	0x10110000
 8003428:	10210000 	.word	0x10210000
 800342c:	10310000 	.word	0x10310000
 8003430:	10120000 	.word	0x10120000
 8003434:	10220000 	.word	0x10220000
 8003438:	10320000 	.word	0x10320000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2bff      	cmp	r3, #255	; 0xff
 8003446:	d802      	bhi.n	800344e <HAL_GPIO_Init+0x2c6>
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	e002      	b.n	8003454 <HAL_GPIO_Init+0x2cc>
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	3b08      	subs	r3, #8
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	210f      	movs	r1, #15
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	401a      	ands	r2, r3
 8003466:	6a39      	ldr	r1, [r7, #32]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	431a      	orrs	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8090 	beq.w	80035a2 <HAL_GPIO_Init+0x41a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003482:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <HAL_GPIO_Init+0x438>)
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	4a4e      	ldr	r2, [pc, #312]	; (80035c0 <HAL_GPIO_Init+0x438>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6193      	str	r3, [r2, #24]
 800348e:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <HAL_GPIO_Init+0x438>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800349a:	4a4a      	ldr	r2, [pc, #296]	; (80035c4 <HAL_GPIO_Init+0x43c>)
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4013      	ands	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a41      	ldr	r2, [pc, #260]	; (80035c8 <HAL_GPIO_Init+0x440>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00d      	beq.n	80034e2 <HAL_GPIO_Init+0x35a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a40      	ldr	r2, [pc, #256]	; (80035cc <HAL_GPIO_Init+0x444>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <HAL_GPIO_Init+0x356>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a3f      	ldr	r2, [pc, #252]	; (80035d0 <HAL_GPIO_Init+0x448>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_GPIO_Init+0x352>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e004      	b.n	80034e4 <HAL_GPIO_Init+0x35c>
 80034da:	2303      	movs	r3, #3
 80034dc:	e002      	b.n	80034e4 <HAL_GPIO_Init+0x35c>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_GPIO_Init+0x35c>
 80034e2:	2300      	movs	r3, #0
 80034e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e6:	f002 0203 	and.w	r2, r2, #3
 80034ea:	0092      	lsls	r2, r2, #2
 80034ec:	4093      	lsls	r3, r2
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034f4:	4933      	ldr	r1, [pc, #204]	; (80035c4 <HAL_GPIO_Init+0x43c>)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	3302      	adds	r3, #2
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d006      	beq.n	800351c <HAL_GPIO_Init+0x394>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4930      	ldr	r1, [pc, #192]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
 800351a:	e006      	b.n	800352a <HAL_GPIO_Init+0x3a2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800351c:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	43db      	mvns	r3, r3
 8003524:	492b      	ldr	r1, [pc, #172]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 8003526:	4013      	ands	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d006      	beq.n	8003544 <HAL_GPIO_Init+0x3bc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003536:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4926      	ldr	r1, [pc, #152]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
 8003542:	e006      	b.n	8003552 <HAL_GPIO_Init+0x3ca>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	43db      	mvns	r3, r3
 800354c:	4921      	ldr	r1, [pc, #132]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 800354e:	4013      	ands	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d006      	beq.n	800356c <HAL_GPIO_Init+0x3e4>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	491c      	ldr	r1, [pc, #112]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	e006      	b.n	800357a <HAL_GPIO_Init+0x3f2>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	43db      	mvns	r3, r3
 8003574:	4917      	ldr	r1, [pc, #92]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 8003576:	4013      	ands	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <HAL_GPIO_Init+0x40c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003586:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	4912      	ldr	r1, [pc, #72]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	60cb      	str	r3, [r1, #12]
 8003592:	e006      	b.n	80035a2 <HAL_GPIO_Init+0x41a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	43db      	mvns	r3, r3
 800359c:	490d      	ldr	r1, [pc, #52]	; (80035d4 <HAL_GPIO_Init+0x44c>)
 800359e:	4013      	ands	r3, r2
 80035a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	3301      	adds	r3, #1
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f47f ae5b 	bne.w	800326e <HAL_GPIO_Init+0xe6>
  }
}
 80035b8:	bf00      	nop
 80035ba:	3728      	adds	r7, #40	; 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40010800 	.word	0x40010800
 80035cc:	40010c00 	.word	0x40010c00
 80035d0:	40011000 	.word	0x40011000
 80035d4:	40010400 	.word	0x40010400

080035d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
 80035e4:	4613      	mov	r3, r2
 80035e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80035e8:	887b      	ldrh	r3, [r7, #2]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d004      	beq.n	80035f8 <HAL_GPIO_WritePin+0x20>
 80035ee:	887b      	ldrh	r3, [r7, #2]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d004      	beq.n	8003602 <HAL_GPIO_WritePin+0x2a>
 80035f8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80035fc:	480e      	ldr	r0, [pc, #56]	; (8003638 <HAL_GPIO_WritePin+0x60>)
 80035fe:	f7fe f8f9 	bl	80017f4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003602:	787b      	ldrb	r3, [r7, #1]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <HAL_GPIO_WritePin+0x40>
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d004      	beq.n	8003618 <HAL_GPIO_WritePin+0x40>
 800360e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003612:	4809      	ldr	r0, [pc, #36]	; (8003638 <HAL_GPIO_WritePin+0x60>)
 8003614:	f7fe f8ee 	bl	80017f4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003618:	787b      	ldrb	r3, [r7, #1]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003624:	e003      	b.n	800362e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003626:	887b      	ldrh	r3, [r7, #2]
 8003628:	041a      	lsls	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	08007228 	.word	0x08007228

0800363c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <HAL_GPIO_TogglePin+0x1c>
 800364e:	887b      	ldrh	r3, [r7, #2]
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <HAL_GPIO_TogglePin+0x26>
 8003658:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800365c:	4809      	ldr	r0, [pc, #36]	; (8003684 <HAL_GPIO_TogglePin+0x48>)
 800365e:	f7fe f8c9 	bl	80017f4 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003674:	e002      	b.n	800367c <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	611a      	str	r2, [r3, #16]
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	08007228 	.word	0x08007228

08003688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e193      	b.n	80039c2 <HAL_I2C_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a95      	ldr	r2, [pc, #596]	; (80038f4 <HAL_I2C_Init+0x26c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_I2C_Init+0x26>
 80036a4:	f240 11cd 	movw	r1, #461	; 0x1cd
 80036a8:	4893      	ldr	r0, [pc, #588]	; (80038f8 <HAL_I2C_Init+0x270>)
 80036aa:	f7fe f8a3 	bl	80017f4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <HAL_I2C_Init+0x38>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4a90      	ldr	r2, [pc, #576]	; (80038fc <HAL_I2C_Init+0x274>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d904      	bls.n	80036ca <HAL_I2C_Init+0x42>
 80036c0:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80036c4:	488c      	ldr	r0, [pc, #560]	; (80038f8 <HAL_I2C_Init+0x270>)
 80036c6:	f7fe f895 	bl	80017f4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_I2C_Init+0x5e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036da:	d004      	beq.n	80036e6 <HAL_I2C_Init+0x5e>
 80036dc:	f240 11cf 	movw	r1, #463	; 0x1cf
 80036e0:	4885      	ldr	r0, [pc, #532]	; (80038f8 <HAL_I2C_Init+0x270>)
 80036e2:	f7fe f887 	bl	80017f4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d004      	beq.n	8003700 <HAL_I2C_Init+0x78>
 80036f6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80036fa:	487f      	ldr	r0, [pc, #508]	; (80038f8 <HAL_I2C_Init+0x270>)
 80036fc:	f7fe f87a 	bl	80017f4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003708:	d009      	beq.n	800371e <HAL_I2C_Init+0x96>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003712:	d004      	beq.n	800371e <HAL_I2C_Init+0x96>
 8003714:	f240 11d1 	movw	r1, #465	; 0x1d1
 8003718:	4877      	ldr	r0, [pc, #476]	; (80038f8 <HAL_I2C_Init+0x270>)
 800371a:	f7fe f86b 	bl	80017f4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_I2C_Init+0xb0>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d004      	beq.n	8003738 <HAL_I2C_Init+0xb0>
 800372e:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8003732:	4871      	ldr	r0, [pc, #452]	; (80038f8 <HAL_I2C_Init+0x270>)
 8003734:	f7fe f85e 	bl	80017f4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <HAL_I2C_Init+0xc6>
 8003744:	f240 11d3 	movw	r1, #467	; 0x1d3
 8003748:	486b      	ldr	r0, [pc, #428]	; (80038f8 <HAL_I2C_Init+0x270>)
 800374a:	f7fe f853 	bl	80017f4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_I2C_Init+0xe0>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d004      	beq.n	8003768 <HAL_I2C_Init+0xe0>
 800375e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003762:	4865      	ldr	r0, [pc, #404]	; (80038f8 <HAL_I2C_Init+0x270>)
 8003764:	f7fe f846 	bl	80017f4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_I2C_Init+0xfa>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d004      	beq.n	8003782 <HAL_I2C_Init+0xfa>
 8003778:	f240 11d5 	movw	r1, #469	; 0x1d5
 800377c:	485e      	ldr	r0, [pc, #376]	; (80038f8 <HAL_I2C_Init+0x270>)
 800377e:	f7fe f839 	bl	80017f4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_I2C_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fdfa 	bl	8001390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	; 0x24
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037b4:	f002 fa56 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 80037b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a50      	ldr	r2, [pc, #320]	; (8003900 <HAL_I2C_Init+0x278>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d807      	bhi.n	80037d4 <HAL_I2C_Init+0x14c>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a4f      	ldr	r2, [pc, #316]	; (8003904 <HAL_I2C_Init+0x27c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bf94      	ite	ls
 80037cc:	2301      	movls	r3, #1
 80037ce:	2300      	movhi	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e006      	b.n	80037e2 <HAL_I2C_Init+0x15a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a4c      	ldr	r2, [pc, #304]	; (8003908 <HAL_I2C_Init+0x280>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	bf94      	ite	ls
 80037dc:	2301      	movls	r3, #1
 80037de:	2300      	movhi	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Init+0x162>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0eb      	b.n	80039c2 <HAL_I2C_Init+0x33a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a47      	ldr	r2, [pc, #284]	; (800390c <HAL_I2C_Init+0x284>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0c9b      	lsrs	r3, r3, #18
 80037f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a39      	ldr	r2, [pc, #228]	; (8003900 <HAL_I2C_Init+0x278>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d802      	bhi.n	8003824 <HAL_I2C_Init+0x19c>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	3301      	adds	r3, #1
 8003822:	e009      	b.n	8003838 <HAL_I2C_Init+0x1b0>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	4a38      	ldr	r2, [pc, #224]	; (8003910 <HAL_I2C_Init+0x288>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	099b      	lsrs	r3, r3, #6
 8003836:	3301      	adds	r3, #1
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	430b      	orrs	r3, r1
 800383e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800384a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	492b      	ldr	r1, [pc, #172]	; (8003900 <HAL_I2C_Init+0x278>)
 8003854:	428b      	cmp	r3, r1
 8003856:	d80d      	bhi.n	8003874 <HAL_I2C_Init+0x1ec>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1e59      	subs	r1, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fbb1 f3f3 	udiv	r3, r1, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b04      	cmp	r3, #4
 800386e:	bf38      	it	cc
 8003870:	2304      	movcc	r3, #4
 8003872:	e05f      	b.n	8003934 <HAL_I2C_Init+0x2ac>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d111      	bne.n	80038a0 <HAL_I2C_Init+0x218>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	440b      	add	r3, r1
 800388a:	fbb0 f3f3 	udiv	r3, r0, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e012      	b.n	80038c6 <HAL_I2C_Init+0x23e>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e58      	subs	r0, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	0099      	lsls	r1, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b6:	3301      	adds	r3, #1
 80038b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Init+0x246>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e032      	b.n	8003934 <HAL_I2C_Init+0x2ac>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11e      	bne.n	8003914 <HAL_I2C_Init+0x28c>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1e58      	subs	r0, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	440b      	add	r3, r1
 80038e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f2:	e01f      	b.n	8003934 <HAL_I2C_Init+0x2ac>
 80038f4:	40005400 	.word	0x40005400
 80038f8:	08007264 	.word	0x08007264
 80038fc:	00061a80 	.word	0x00061a80
 8003900:	000186a0 	.word	0x000186a0
 8003904:	001e847f 	.word	0x001e847f
 8003908:	003d08ff 	.word	0x003d08ff
 800390c:	431bde83 	.word	0x431bde83
 8003910:	10624dd3 	.word	0x10624dd3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e58      	subs	r0, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	0099      	lsls	r1, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	fbb0 f3f3 	udiv	r3, r0, r3
 800392a:	3301      	adds	r3, #1
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	6809      	ldr	r1, [r1, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003962:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6911      	ldr	r1, [r2, #16]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d2      	ldr	r2, [r2, #12]
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	430b      	orrs	r3, r1
 8003976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop

080039cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d003      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x38>
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	f040 80b6 	bne.w	8003b70 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <HAL_I2C_EV_IRQHandler+0x6e>
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a24:	d003      	beq.n	8003a2e <HAL_I2C_EV_IRQHandler+0x62>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2C_EV_IRQHandler+0x66>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_I2C_EV_IRQHandler+0x68>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	f000 8127 	beq.w	8003c88 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00c      	beq.n	8003a5e <HAL_I2C_EV_IRQHandler+0x92>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	0a5b      	lsrs	r3, r3, #9
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f001 fb74 	bl	800513e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fd03 	bl	8004462 <I2C_Master_SB>
 8003a5c:	e087      	b.n	8003b6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	08db      	lsrs	r3, r3, #3
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_I2C_EV_IRQHandler+0xb2>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	0a5b      	lsrs	r3, r3, #9
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fd78 	bl	800456c <I2C_Master_ADD10>
 8003a7c:	e077      	b.n	8003b6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0xd2>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	0a5b      	lsrs	r3, r3, #9
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fd91 	bl	80045be <I2C_Master_ADDR>
 8003a9c:	e067      	b.n	8003b6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d030      	beq.n	8003b0c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab8:	f000 80e8 	beq.w	8003c8c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	09db      	lsrs	r3, r3, #7
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00f      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	0a9b      	lsrs	r3, r3, #10
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f9e4 	bl	8003eae <I2C_MasterTransmit_TXE>
 8003ae6:	e042      	b.n	8003b6e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80cb 	beq.w	8003c8c <HAL_I2C_EV_IRQHandler+0x2c0>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	0a5b      	lsrs	r3, r3, #9
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80c4 	beq.w	8003c8c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 faca 	bl	800409e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b0a:	e0bf      	b.n	8003c8c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1a:	f000 80b7 	beq.w	8003c8c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00f      	beq.n	8003b4a <HAL_I2C_EV_IRQHandler+0x17e>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	0a9b      	lsrs	r3, r3, #10
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_I2C_EV_IRQHandler+0x17e>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fb21 	bl	800418a <I2C_MasterReceive_RXNE>
 8003b48:	e011      	b.n	8003b6e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 809a 	beq.w	8003c8c <HAL_I2C_EV_IRQHandler+0x2c0>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	0a5b      	lsrs	r3, r3, #9
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8093 	beq.w	8003c8c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fb91 	bl	800428e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b6c:	e08e      	b.n	8003c8c <HAL_I2C_EV_IRQHandler+0x2c0>
 8003b6e:	e08d      	b.n	8003c8c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	e007      	b.n	8003b92 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	085b      	lsrs	r3, r3, #1
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d012      	beq.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x1f8>
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	0a5b      	lsrs	r3, r3, #9
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003bba:	69b9      	ldr	r1, [r7, #24]
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 ff55 	bl	8004a6c <I2C_Slave_ADDR>
 8003bc2:	e066      	b.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <HAL_I2C_EV_IRQHandler+0x218>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	0a5b      	lsrs	r3, r3, #9
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 ff89 	bl	8004af4 <I2C_Slave_STOPF>
 8003be2:	e056      	b.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003be4:	7bbb      	ldrb	r3, [r7, #14]
 8003be6:	2b21      	cmp	r3, #33	; 0x21
 8003be8:	d002      	beq.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x224>
 8003bea:	7bbb      	ldrb	r3, [r7, #14]
 8003bec:	2b29      	cmp	r3, #41	; 0x29
 8003bee:	d125      	bne.n	8003c3c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	09db      	lsrs	r3, r3, #7
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00f      	beq.n	8003c1c <HAL_I2C_EV_IRQHandler+0x250>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	0a9b      	lsrs	r3, r3, #10
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <HAL_I2C_EV_IRQHandler+0x250>
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d103      	bne.n	8003c1c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fe6d 	bl	80048f4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c1a:	e039      	b.n	8003c90 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d033      	beq.n	8003c90 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	0a5b      	lsrs	r3, r3, #9
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d02d      	beq.n	8003c90 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fe9a 	bl	800496e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c3a:	e029      	b.n	8003c90 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	099b      	lsrs	r3, r3, #6
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00f      	beq.n	8003c68 <HAL_I2C_EV_IRQHandler+0x29c>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	0a9b      	lsrs	r3, r3, #10
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_I2C_EV_IRQHandler+0x29c>
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fea4 	bl	80049ae <I2C_SlaveReceive_RXNE>
 8003c66:	e014      	b.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00e      	beq.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2c6>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	0a5b      	lsrs	r3, r3, #9
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fed2 	bl	8004a2a <I2C_SlaveReceive_BTF>
 8003c86:	e004      	b.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003c88:	bf00      	nop
 8003c8a:	e002      	b.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c8c:	bf00      	nop
 8003c8e:	e000      	b.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c90:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d016      	beq.n	8003cee <HAL_I2C_ER_IRQHandler+0x56>
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d010      	beq.n	8003cee <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cdc:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	0a5b      	lsrs	r3, r3, #9
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00e      	beq.n	8003d18 <HAL_I2C_ER_IRQHandler+0x80>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003d16:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	0a9b      	lsrs	r3, r3, #10
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d041      	beq.n	8003da8 <HAL_I2C_ER_IRQHandler+0x110>
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d03b      	beq.n	8003da8 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d36:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d4e:	7efb      	ldrb	r3, [r7, #27]
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d112      	bne.n	8003d7a <HAL_I2C_ER_IRQHandler+0xe2>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <HAL_I2C_ER_IRQHandler+0xe2>
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b21      	cmp	r3, #33	; 0x21
 8003d5e:	d008      	beq.n	8003d72 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	2b29      	cmp	r3, #41	; 0x29
 8003d64:	d005      	beq.n	8003d72 <HAL_I2C_ER_IRQHandler+0xda>
 8003d66:	7cfb      	ldrb	r3, [r7, #19]
 8003d68:	2b28      	cmp	r3, #40	; 0x28
 8003d6a:	d106      	bne.n	8003d7a <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b21      	cmp	r3, #33	; 0x21
 8003d70:	d103      	bne.n	8003d7a <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 ffee 	bl	8004d54 <I2C_Slave_AF>
 8003d78:	e016      	b.n	8003da8 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d82:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d107      	bne.n	8003da8 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	0adb      	lsrs	r3, r3, #11
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <HAL_I2C_ER_IRQHandler+0x13a>
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	f043 0308 	orr.w	r3, r3, #8
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003dd0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f001 f825 	bl	8004e34 <I2C_ITError>
  }
}
 8003dea:	bf00      	nop
 8003dec:	3728      	adds	r7, #40	; 0x28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	70fb      	strb	r3, [r7, #3]
 8003e46:	4613      	mov	r3, r2
 8003e48:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr

08003e8a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d150      	bne.n	8003f76 <I2C_MasterTransmit_TXE+0xc8>
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	2b21      	cmp	r3, #33	; 0x21
 8003ed8:	d14d      	bne.n	8003f76 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d01d      	beq.n	8003f1c <I2C_MasterTransmit_TXE+0x6e>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d01a      	beq.n	8003f1c <I2C_MasterTransmit_TXE+0x6e>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eec:	d016      	beq.n	8003f1c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003efc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2211      	movs	r2, #17
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff ff6c 	bl	8003df2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f1a:	e0bc      	b.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f2a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b40      	cmp	r3, #64	; 0x40
 8003f54:	d107      	bne.n	8003f66 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff81 	bl	8003e66 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f64:	e097      	b.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ff3f 	bl	8003df2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f74:	e08f      	b.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b21      	cmp	r3, #33	; 0x21
 8003f7a:	d007      	beq.n	8003f8c <I2C_MasterTransmit_TXE+0xde>
 8003f7c:	7bbb      	ldrb	r3, [r7, #14]
 8003f7e:	2b40      	cmp	r3, #64	; 0x40
 8003f80:	f040 8089 	bne.w	8004096 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b22      	cmp	r3, #34	; 0x22
 8003f88:	f040 8085 	bne.w	8004096 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d108      	bne.n	8003fa8 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003fa6:	e076      	b.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d15d      	bne.n	8004070 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d11d      	bne.n	8003ff8 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d10b      	bne.n	8003fdc <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd4:	1c9a      	adds	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fda:	e05c      	b.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	121b      	asrs	r3, r3, #8
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ff6:	e04e      	b.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d10b      	bne.n	8004018 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004004:	b2da      	uxtb	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004016:	e03e      	b.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401c:	2b02      	cmp	r3, #2
 800401e:	d13a      	bne.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b22      	cmp	r3, #34	; 0x22
 800402a:	d108      	bne.n	800403e <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403a:	601a      	str	r2, [r3, #0]
}
 800403c:	e02b      	b.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b21      	cmp	r3, #33	; 0x21
 8004048:	d125      	bne.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800406e:	e012      	b.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004094:	e7ff      	b.n	8004096 <I2C_MasterTransmit_TXE+0x1e8>
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b21      	cmp	r3, #33	; 0x21
 80040b6:	d164      	bne.n	8004182 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d012      	beq.n	80040e8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80040e6:	e04c      	b.n	8004182 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d01d      	beq.n	800412a <I2C_MasterTransmit_BTF+0x8c>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d01a      	beq.n	800412a <I2C_MasterTransmit_BTF+0x8c>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040fa:	d016      	beq.n	800412a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800410a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2211      	movs	r2, #17
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fe65 	bl	8003df2 <HAL_I2C_MasterTxCpltCallback>
}
 8004128:	e02b      	b.n	8004182 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004138:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004148:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d107      	bne.n	8004174 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fe7a 	bl	8003e66 <HAL_I2C_MemTxCpltCallback>
}
 8004172:	e006      	b.n	8004182 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fe38 	bl	8003df2 <HAL_I2C_MasterTxCpltCallback>
}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b22      	cmp	r3, #34	; 0x22
 800419c:	d173      	bne.n	8004286 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d920      	bls.n	80041ee <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d154      	bne.n	8004286 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ea:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80041ec:	e04b      	b.n	8004286 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d047      	beq.n	8004286 <I2C_MasterReceive_RXNE+0xfc>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d002      	beq.n	8004202 <I2C_MasterReceive_RXNE+0x78>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d141      	bne.n	8004286 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004210:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004220:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d10a      	bne.n	8004272 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fe04 	bl	8003e78 <HAL_I2C_MemRxCpltCallback>
}
 8004270:	e009      	b.n	8004286 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2212      	movs	r2, #18
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff fdbf 	bl	8003e04 <HAL_I2C_MasterRxCpltCallback>
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d11b      	bne.n	80042de <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80042dc:	e0bd      	b.n	800445a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d129      	bne.n	800433c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d00a      	beq.n	8004314 <I2C_MasterReceive_BTF+0x86>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d007      	beq.n	8004314 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004312:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800433a:	e08e      	b.n	800445a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d176      	bne.n	8004434 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d002      	beq.n	8004352 <I2C_MasterReceive_BTF+0xc4>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b10      	cmp	r3, #16
 8004350:	d108      	bne.n	8004364 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e019      	b.n	8004398 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b04      	cmp	r3, #4
 8004368:	d002      	beq.n	8004370 <I2C_MasterReceive_BTF+0xe2>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d108      	bne.n	8004382 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	e00a      	b.n	8004398 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b10      	cmp	r3, #16
 8004386:	d007      	beq.n	8004398 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004396:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80043f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d10a      	bne.n	800441e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fd2e 	bl	8003e78 <HAL_I2C_MemRxCpltCallback>
}
 800441c:	e01d      	b.n	800445a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2212      	movs	r2, #18
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff fce9 	bl	8003e04 <HAL_I2C_MasterRxCpltCallback>
}
 8004432:	e012      	b.n	800445a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d117      	bne.n	80044a6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800448e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004490:	e067      	b.n	8004562 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	611a      	str	r2, [r3, #16]
}
 80044a4:	e05d      	b.n	8004562 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ae:	d133      	bne.n	8004518 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b21      	cmp	r3, #33	; 0x21
 80044ba:	d109      	bne.n	80044d0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044cc:	611a      	str	r2, [r3, #16]
 80044ce:	e008      	b.n	80044e2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <I2C_Master_SB+0x90>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d037      	beq.n	8004562 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d104      	bne.n	8004506 <I2C_Master_SB+0xa4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d02d      	beq.n	8004562 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004514:	605a      	str	r2, [r3, #4]
}
 8004516:	e024      	b.n	8004562 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10e      	bne.n	800453e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	b29b      	uxth	r3, r3
 8004526:	11db      	asrs	r3, r3, #7
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0306 	and.w	r3, r3, #6
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f063 030f 	orn	r3, r3, #15
 8004534:	b2da      	uxtb	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	611a      	str	r2, [r3, #16]
}
 800453c:	e011      	b.n	8004562 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004542:	2b01      	cmp	r3, #1
 8004544:	d10d      	bne.n	8004562 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	b29b      	uxth	r3, r3
 800454c:	11db      	asrs	r3, r3, #7
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f003 0306 	and.w	r3, r3, #6
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f063 030e 	orn	r3, r3, #14
 800455a:	b2da      	uxtb	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	611a      	str	r2, [r3, #16]
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	b2da      	uxtb	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004584:	2b00      	cmp	r3, #0
 8004586:	d103      	bne.n	8004590 <I2C_Master_ADD10+0x24>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	2b00      	cmp	r3, #0
 800458e:	d011      	beq.n	80045b4 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <I2C_Master_ADD10+0x38>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b2:	605a      	str	r2, [r3, #4]
    }
  }
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80045be:	b480      	push	{r7}
 80045c0:	b091      	sub	sp, #68	; 0x44
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b22      	cmp	r3, #34	; 0x22
 80045e6:	f040 8174 	bne.w	80048d2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <I2C_Master_ADDR+0x54>
 80045f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d10b      	bne.n	8004612 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	633b      	str	r3, [r7, #48]	; 0x30
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	633b      	str	r3, [r7, #48]	; 0x30
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	633b      	str	r3, [r7, #48]	; 0x30
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	e16b      	b.n	80048ea <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004616:	2b00      	cmp	r3, #0
 8004618:	d11d      	bne.n	8004656 <I2C_Master_ADDR+0x98>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004622:	d118      	bne.n	8004656 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004624:	2300      	movs	r3, #0
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004648:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	651a      	str	r2, [r3, #80]	; 0x50
 8004654:	e149      	b.n	80048ea <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d113      	bne.n	8004688 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004660:	2300      	movs	r3, #0
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e120      	b.n	80048ca <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	f040 808a 	bne.w	80047a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800469a:	d137      	bne.n	800470c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ba:	d113      	bne.n	80046e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046cc:	2300      	movs	r3, #0
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	e0f2      	b.n	80048ca <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e4:	2300      	movs	r3, #0
 80046e6:	623b      	str	r3, [r7, #32]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e0de      	b.n	80048ca <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	2b08      	cmp	r3, #8
 8004710:	d02e      	beq.n	8004770 <I2C_Master_ADDR+0x1b2>
 8004712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004714:	2b20      	cmp	r3, #32
 8004716:	d02b      	beq.n	8004770 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471a:	2b12      	cmp	r3, #18
 800471c:	d102      	bne.n	8004724 <I2C_Master_ADDR+0x166>
 800471e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004720:	2b01      	cmp	r3, #1
 8004722:	d125      	bne.n	8004770 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00e      	beq.n	8004748 <I2C_Master_ADDR+0x18a>
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	2b02      	cmp	r3, #2
 800472e:	d00b      	beq.n	8004748 <I2C_Master_ADDR+0x18a>
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	2b10      	cmp	r3, #16
 8004734:	d008      	beq.n	8004748 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	e007      	b.n	8004758 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004756:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004758:	2300      	movs	r3, #0
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	e0ac      	b.n	80048ca <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004780:	2300      	movs	r3, #0
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	e090      	b.n	80048ca <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d158      	bne.n	8004864 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d021      	beq.n	80047fc <I2C_Master_ADDR+0x23e>
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d01e      	beq.n	80047fc <I2C_Master_ADDR+0x23e>
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d01b      	beq.n	80047fc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e012      	b.n	8004822 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800480a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480c:	2300      	movs	r3, #0
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004830:	d14b      	bne.n	80048ca <I2C_Master_ADDR+0x30c>
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004838:	d00b      	beq.n	8004852 <I2C_Master_ADDR+0x294>
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	2b01      	cmp	r3, #1
 800483e:	d008      	beq.n	8004852 <I2C_Master_ADDR+0x294>
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	2b08      	cmp	r3, #8
 8004844:	d005      	beq.n	8004852 <I2C_Master_ADDR+0x294>
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	2b10      	cmp	r3, #16
 800484a:	d002      	beq.n	8004852 <I2C_Master_ADDR+0x294>
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	2b20      	cmp	r3, #32
 8004850:	d13b      	bne.n	80048ca <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004860:	605a      	str	r2, [r3, #4]
 8004862:	e032      	b.n	80048ca <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004872:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004882:	d117      	bne.n	80048b4 <I2C_Master_ADDR+0x2f6>
 8004884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004886:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800488a:	d00b      	beq.n	80048a4 <I2C_Master_ADDR+0x2e6>
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	2b01      	cmp	r3, #1
 8004890:	d008      	beq.n	80048a4 <I2C_Master_ADDR+0x2e6>
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	2b08      	cmp	r3, #8
 8004896:	d005      	beq.n	80048a4 <I2C_Master_ADDR+0x2e6>
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	2b10      	cmp	r3, #16
 800489c:	d002      	beq.n	80048a4 <I2C_Master_ADDR+0x2e6>
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d107      	bne.n	80048b4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048b2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80048d0:	e00b      	b.n	80048ea <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	68bb      	ldr	r3, [r7, #8]
}
 80048e8:	e7ff      	b.n	80048ea <I2C_Master_ADDR+0x32c>
 80048ea:	bf00      	nop
 80048ec:	3744      	adds	r7, #68	; 0x44
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004902:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d02b      	beq.n	8004966 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d114      	bne.n	8004966 <I2C_SlaveTransmit_TXE+0x72>
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b29      	cmp	r3, #41	; 0x29
 8004940:	d111      	bne.n	8004966 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2221      	movs	r2, #33	; 0x21
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2228      	movs	r2, #40	; 0x28
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fa58 	bl	8003e16 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d011      	beq.n	80049a4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr

080049ae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02c      	beq.n	8004a22 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d114      	bne.n	8004a22 <I2C_SlaveReceive_RXNE+0x74>
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b2a      	cmp	r3, #42	; 0x2a
 80049fc:	d111      	bne.n	8004a22 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2222      	movs	r2, #34	; 0x22
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2228      	movs	r2, #40	; 0x28
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff fa03 	bl	8003e28 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a22:	bf00      	nop
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d012      	beq.n	8004a62 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a76:	2300      	movs	r3, #0
 8004a78:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a86:	2b28      	cmp	r3, #40	; 0x28
 8004a88:	d127      	bne.n	8004ada <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a98:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	089b      	lsrs	r3, r3, #2
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	09db      	lsrs	r3, r3, #7
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	81bb      	strh	r3, [r7, #12]
 8004abc:	e002      	b.n	8004ac4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004acc:	89ba      	ldrh	r2, [r7, #12]
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff f9b1 	bl	8003e3a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ad8:	e008      	b.n	8004aec <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f06f 0202 	mvn.w	r2, #2
 8004ae2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b50:	d172      	bne.n	8004c38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b22      	cmp	r3, #34	; 0x22
 8004b56:	d002      	beq.n	8004b5e <I2C_Slave_STOPF+0x6a>
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b5c:	d135      	bne.n	8004bca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f043 0204 	orr.w	r2, r3, #4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe fabc 	bl	8003114 <HAL_DMA_GetState>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d049      	beq.n	8004c36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	4a69      	ldr	r2, [pc, #420]	; (8004d4c <I2C_Slave_STOPF+0x258>)
 8004ba8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe f934 	bl	8002e1c <HAL_DMA_Abort_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d03d      	beq.n	8004c36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bc8:	e035      	b.n	8004c36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f043 0204 	orr.w	r2, r3, #4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fa86 	bl	8003114 <HAL_DMA_GetState>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d014      	beq.n	8004c38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	4a4e      	ldr	r2, [pc, #312]	; (8004d4c <I2C_Slave_STOPF+0x258>)
 8004c14:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe f8fe 	bl	8002e1c <HAL_DMA_Abort_IT>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c30:	4610      	mov	r0, r2
 8004c32:	4798      	blx	r3
 8004c34:	e000      	b.n	8004c38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d03e      	beq.n	8004cc0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d112      	bne.n	8004c76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d112      	bne.n	8004caa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	f043 0204 	orr.w	r2, r3, #4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f8b3 	bl	8004e34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004cce:	e039      	b.n	8004d44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cd4:	d109      	bne.n	8004cea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2228      	movs	r2, #40	; 0x28
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff f89f 	bl	8003e28 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b28      	cmp	r3, #40	; 0x28
 8004cf4:	d111      	bne.n	8004d1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <I2C_Slave_STOPF+0x25c>)
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff f89e 	bl	8003e54 <HAL_I2C_ListenCpltCallback>
}
 8004d18:	e014      	b.n	8004d44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	2b22      	cmp	r3, #34	; 0x22
 8004d20:	d002      	beq.n	8004d28 <I2C_Slave_STOPF+0x234>
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b22      	cmp	r3, #34	; 0x22
 8004d26:	d10d      	bne.n	8004d44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff f872 	bl	8003e28 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	08005061 	.word	0x08005061
 8004d50:	ffff0000 	.word	0xffff0000

08004d54 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d62:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d002      	beq.n	8004d76 <I2C_Slave_AF+0x22>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d129      	bne.n	8004dca <I2C_Slave_AF+0x76>
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b28      	cmp	r3, #40	; 0x28
 8004d7a:	d126      	bne.n	8004dca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <I2C_Slave_AF+0xdc>)
 8004d80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d90:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d9a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004daa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff f846 	bl	8003e54 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004dc8:	e02e      	b.n	8004e28 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b21      	cmp	r3, #33	; 0x21
 8004dce:	d126      	bne.n	8004e1e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <I2C_Slave_AF+0xdc>)
 8004dd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2221      	movs	r2, #33	; 0x21
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dfa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e04:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e14:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fe fffd 	bl	8003e16 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e1c:	e004      	b.n	8004e28 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e26:	615a      	str	r2, [r3, #20]
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	ffff0000 	.word	0xffff0000

08004e34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e42:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d10a      	bne.n	8004e66 <I2C_ITError+0x32>
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b22      	cmp	r3, #34	; 0x22
 8004e54:	d107      	bne.n	8004e66 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e6c:	2b28      	cmp	r3, #40	; 0x28
 8004e6e:	d107      	bne.n	8004e80 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2228      	movs	r2, #40	; 0x28
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e7e:	e015      	b.n	8004eac <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8e:	d006      	beq.n	8004e9e <I2C_ITError+0x6a>
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b60      	cmp	r3, #96	; 0x60
 8004e94:	d003      	beq.n	8004e9e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eba:	d161      	bne.n	8004f80 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d020      	beq.n	8004f1a <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	4a5e      	ldr	r2, [pc, #376]	; (8005058 <I2C_ITError+0x224>)
 8004ede:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fd ff99 	bl	8002e1c <HAL_DMA_Abort_IT>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8089 	beq.w	8005004 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f14:	4610      	mov	r0, r2
 8004f16:	4798      	blx	r3
 8004f18:	e074      	b.n	8005004 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	4a4e      	ldr	r2, [pc, #312]	; (8005058 <I2C_ITError+0x224>)
 8004f20:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd ff78 	bl	8002e1c <HAL_DMA_Abort_IT>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d068      	beq.n	8005004 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d10b      	bne.n	8004f58 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0201 	bic.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	4798      	blx	r3
 8004f7e:	e041      	b.n	8005004 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d125      	bne.n	8004fd8 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d10b      	bne.n	8004fc0 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7fe ff63 	bl	8003e9c <HAL_I2C_AbortCpltCallback>
 8004fd6:	e015      	b.n	8005004 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d10b      	bne.n	8004ffe <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fe ff43 	bl	8003e8a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b04      	cmp	r3, #4
 8005016:	d11b      	bne.n	8005050 <I2C_ITError+0x21c>
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b28      	cmp	r3, #40	; 0x28
 800501c:	d118      	bne.n	8005050 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800502c:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a0a      	ldr	r2, [pc, #40]	; (800505c <I2C_ITError+0x228>)
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fe ff02 	bl	8003e54 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	08005061 	.word	0x08005061
 800505c:	ffff0000 	.word	0xffff0000

08005060 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005074:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	2200      	movs	r2, #0
 800507c:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	2200      	movs	r2, #0
 8005084:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005094:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a0:	2200      	movs	r2, #0
 80050a2:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	2200      	movs	r2, #0
 80050aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b60      	cmp	r3, #96	; 0x60
 80050c6:	d10e      	bne.n	80050e6 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7fe fedc 	bl	8003e9c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050e4:	e027      	b.n	8005136 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e6:	7afb      	ldrb	r3, [r7, #11]
 80050e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050ec:	2b28      	cmp	r3, #40	; 0x28
 80050ee:	d117      	bne.n	8005120 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2228      	movs	r2, #40	; 0x28
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800511e:	e007      	b.n	8005130 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7fe feaa 	bl	8003e8a <HAL_I2C_ErrorCallback>
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800514e:	d103      	bne.n	8005158 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005156:	e007      	b.n	8005168 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005160:	d102      	bne.n	8005168 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2208      	movs	r2, #8
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr
	...

08005174 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005178:	4b03      	ldr	r3, [pc, #12]	; (8005188 <HAL_PWR_EnableBkUpAccess+0x14>)
 800517a:	2201      	movs	r2, #1
 800517c:	601a      	str	r2, [r3, #0]
}
 800517e:	bf00      	nop
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	420e0020 	.word	0x420e0020

0800518c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e35c      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01c      	beq.n	80051e0 <HAL_RCC_OscConfig+0x54>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <HAL_RCC_OscConfig+0x54>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d110      	bne.n	80051e0 <HAL_RCC_OscConfig+0x54>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <HAL_RCC_OscConfig+0x54>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d104      	bne.n	80051e0 <HAL_RCC_OscConfig+0x54>
 80051d6:	f240 1167 	movw	r1, #359	; 0x167
 80051da:	48a5      	ldr	r0, [pc, #660]	; (8005470 <HAL_RCC_OscConfig+0x2e4>)
 80051dc:	f7fc fb0a 	bl	80017f4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 809a 	beq.w	8005322 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00e      	beq.n	8005214 <HAL_RCC_OscConfig+0x88>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d009      	beq.n	8005214 <HAL_RCC_OscConfig+0x88>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005208:	d004      	beq.n	8005214 <HAL_RCC_OscConfig+0x88>
 800520a:	f240 116d 	movw	r1, #365	; 0x16d
 800520e:	4898      	ldr	r0, [pc, #608]	; (8005470 <HAL_RCC_OscConfig+0x2e4>)
 8005210:	f7fc faf0 	bl	80017f4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005214:	4b97      	ldr	r3, [pc, #604]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f003 030c 	and.w	r3, r3, #12
 800521c:	2b04      	cmp	r3, #4
 800521e:	d00c      	beq.n	800523a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005220:	4b94      	ldr	r3, [pc, #592]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 030c 	and.w	r3, r3, #12
 8005228:	2b08      	cmp	r3, #8
 800522a:	d112      	bne.n	8005252 <HAL_RCC_OscConfig+0xc6>
 800522c:	4b91      	ldr	r3, [pc, #580]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005238:	d10b      	bne.n	8005252 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800523a:	4b8e      	ldr	r3, [pc, #568]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d06c      	beq.n	8005320 <HAL_RCC_OscConfig+0x194>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d168      	bne.n	8005320 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e302      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525a:	d106      	bne.n	800526a <HAL_RCC_OscConfig+0xde>
 800525c:	4b85      	ldr	r3, [pc, #532]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a84      	ldr	r2, [pc, #528]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	e02e      	b.n	80052c8 <HAL_RCC_OscConfig+0x13c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10c      	bne.n	800528c <HAL_RCC_OscConfig+0x100>
 8005272:	4b80      	ldr	r3, [pc, #512]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a7f      	ldr	r2, [pc, #508]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	4b7d      	ldr	r3, [pc, #500]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a7c      	ldr	r2, [pc, #496]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e01d      	b.n	80052c8 <HAL_RCC_OscConfig+0x13c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x124>
 8005296:	4b77      	ldr	r3, [pc, #476]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a76      	ldr	r2, [pc, #472]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b74      	ldr	r3, [pc, #464]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a73      	ldr	r2, [pc, #460]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0x13c>
 80052b0:	4b70      	ldr	r3, [pc, #448]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a6f      	ldr	r2, [pc, #444]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b6d      	ldr	r3, [pc, #436]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a6c      	ldr	r2, [pc, #432]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fc fcac 	bl	8001c2c <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fc fca8 	bl	8001c2c <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	; 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e2b6      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b62      	ldr	r3, [pc, #392]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0x14c>
 80052f6:	e014      	b.n	8005322 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fc fc98 	bl	8001c2c <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005300:	f7fc fc94 	bl	8001c2c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	; 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e2a2      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005312:	4b58      	ldr	r3, [pc, #352]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x174>
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d079      	beq.n	8005422 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <HAL_RCC_OscConfig+0x1bc>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d004      	beq.n	8005348 <HAL_RCC_OscConfig+0x1bc>
 800533e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8005342:	484b      	ldr	r0, [pc, #300]	; (8005470 <HAL_RCC_OscConfig+0x2e4>)
 8005344:	f7fc fa56 	bl	80017f4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	2b1f      	cmp	r3, #31
 800534e:	d904      	bls.n	800535a <HAL_RCC_OscConfig+0x1ce>
 8005350:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8005354:	4846      	ldr	r0, [pc, #280]	; (8005470 <HAL_RCC_OscConfig+0x2e4>)
 8005356:	f7fc fa4d 	bl	80017f4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800535a:	4b46      	ldr	r3, [pc, #280]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 030c 	and.w	r3, r3, #12
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005366:	4b43      	ldr	r3, [pc, #268]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b08      	cmp	r3, #8
 8005370:	d11c      	bne.n	80053ac <HAL_RCC_OscConfig+0x220>
 8005372:	4b40      	ldr	r3, [pc, #256]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d116      	bne.n	80053ac <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537e:	4b3d      	ldr	r3, [pc, #244]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_RCC_OscConfig+0x20a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d001      	beq.n	8005396 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e260      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005396:	4b37      	ldr	r3, [pc, #220]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4933      	ldr	r1, [pc, #204]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053aa:	e03a      	b.n	8005422 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d020      	beq.n	80053f6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053b4:	4b30      	ldr	r3, [pc, #192]	; (8005478 <HAL_RCC_OscConfig+0x2ec>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ba:	f7fc fc37 	bl	8001c2c <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c2:	f7fc fc33 	bl	8001c2c <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e241      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d4:	4b27      	ldr	r3, [pc, #156]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e0:	4b24      	ldr	r3, [pc, #144]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4921      	ldr	r1, [pc, #132]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	600b      	str	r3, [r1, #0]
 80053f4:	e015      	b.n	8005422 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053f6:	4b20      	ldr	r3, [pc, #128]	; (8005478 <HAL_RCC_OscConfig+0x2ec>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fc fc16 	bl	8001c2c <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005404:	f7fc fc12 	bl	8001c2c <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e220      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005416:	4b17      	ldr	r3, [pc, #92]	; (8005474 <HAL_RCC_OscConfig+0x2e8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d048      	beq.n	80054c0 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d008      	beq.n	8005448 <HAL_RCC_OscConfig+0x2bc>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d004      	beq.n	8005448 <HAL_RCC_OscConfig+0x2bc>
 800543e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8005442:	480b      	ldr	r0, [pc, #44]	; (8005470 <HAL_RCC_OscConfig+0x2e4>)
 8005444:	f7fc f9d6 	bl	80017f4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d021      	beq.n	8005494 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005450:	4b0a      	ldr	r3, [pc, #40]	; (800547c <HAL_RCC_OscConfig+0x2f0>)
 8005452:	2201      	movs	r2, #1
 8005454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005456:	f7fc fbe9 	bl	8001c2c <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545c:	e010      	b.n	8005480 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800545e:	f7fc fbe5 	bl	8001c2c <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d909      	bls.n	8005480 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e1f3      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
 8005470:	0800729c 	.word	0x0800729c
 8005474:	40021000 	.word	0x40021000
 8005478:	42420000 	.word	0x42420000
 800547c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005480:	4b67      	ldr	r3, [pc, #412]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0e8      	beq.n	800545e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800548c:	2001      	movs	r0, #1
 800548e:	f000 fc11 	bl	8005cb4 <RCC_Delay>
 8005492:	e015      	b.n	80054c0 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005494:	4b63      	ldr	r3, [pc, #396]	; (8005624 <HAL_RCC_OscConfig+0x498>)
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800549a:	f7fc fbc7 	bl	8001c2c <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a2:	f7fc fbc3 	bl	8001c2c <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e1d1      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b4:	4b5a      	ldr	r3, [pc, #360]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f0      	bne.n	80054a2 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80c0 	beq.w	800564e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00c      	beq.n	80054f4 <HAL_RCC_OscConfig+0x368>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d008      	beq.n	80054f4 <HAL_RCC_OscConfig+0x368>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d004      	beq.n	80054f4 <HAL_RCC_OscConfig+0x368>
 80054ea:	f240 2111 	movw	r1, #529	; 0x211
 80054ee:	484e      	ldr	r0, [pc, #312]	; (8005628 <HAL_RCC_OscConfig+0x49c>)
 80054f0:	f7fc f980 	bl	80017f4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f4:	4b4a      	ldr	r3, [pc, #296]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10d      	bne.n	800551c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005500:	4b47      	ldr	r3, [pc, #284]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	4a46      	ldr	r2, [pc, #280]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 8005506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550a:	61d3      	str	r3, [r2, #28]
 800550c:	4b44      	ldr	r3, [pc, #272]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005518:	2301      	movs	r3, #1
 800551a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551c:	4b43      	ldr	r3, [pc, #268]	; (800562c <HAL_RCC_OscConfig+0x4a0>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d118      	bne.n	800555a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005528:	4b40      	ldr	r3, [pc, #256]	; (800562c <HAL_RCC_OscConfig+0x4a0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a3f      	ldr	r2, [pc, #252]	; (800562c <HAL_RCC_OscConfig+0x4a0>)
 800552e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005532:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005534:	f7fc fb7a 	bl	8001c2c <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800553c:	f7fc fb76 	bl	8001c2c <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b64      	cmp	r3, #100	; 0x64
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e184      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554e:	4b37      	ldr	r3, [pc, #220]	; (800562c <HAL_RCC_OscConfig+0x4a0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d106      	bne.n	8005570 <HAL_RCC_OscConfig+0x3e4>
 8005562:	4b2f      	ldr	r3, [pc, #188]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	4a2e      	ldr	r2, [pc, #184]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6213      	str	r3, [r2, #32]
 800556e:	e02d      	b.n	80055cc <HAL_RCC_OscConfig+0x440>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10c      	bne.n	8005592 <HAL_RCC_OscConfig+0x406>
 8005578:	4b29      	ldr	r3, [pc, #164]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	4a28      	ldr	r2, [pc, #160]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	6213      	str	r3, [r2, #32]
 8005584:	4b26      	ldr	r3, [pc, #152]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	4a25      	ldr	r2, [pc, #148]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 800558a:	f023 0304 	bic.w	r3, r3, #4
 800558e:	6213      	str	r3, [r2, #32]
 8005590:	e01c      	b.n	80055cc <HAL_RCC_OscConfig+0x440>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b05      	cmp	r3, #5
 8005598:	d10c      	bne.n	80055b4 <HAL_RCC_OscConfig+0x428>
 800559a:	4b21      	ldr	r3, [pc, #132]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	4a20      	ldr	r2, [pc, #128]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 80055a0:	f043 0304 	orr.w	r3, r3, #4
 80055a4:	6213      	str	r3, [r2, #32]
 80055a6:	4b1e      	ldr	r3, [pc, #120]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	6213      	str	r3, [r2, #32]
 80055b2:	e00b      	b.n	80055cc <HAL_RCC_OscConfig+0x440>
 80055b4:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	4a19      	ldr	r2, [pc, #100]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 80055ba:	f023 0301 	bic.w	r3, r3, #1
 80055be:	6213      	str	r3, [r2, #32]
 80055c0:	4b17      	ldr	r3, [pc, #92]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	4a16      	ldr	r2, [pc, #88]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 80055c6:	f023 0304 	bic.w	r3, r3, #4
 80055ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d015      	beq.n	8005600 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d4:	f7fc fb2a 	bl	8001c2c <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055da:	e00a      	b.n	80055f2 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055dc:	f7fc fb26 	bl	8001c2c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e132      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f2:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_RCC_OscConfig+0x494>)
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0ee      	beq.n	80055dc <HAL_RCC_OscConfig+0x450>
 80055fe:	e01d      	b.n	800563c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005600:	f7fc fb14 	bl	8001c2c <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005606:	e013      	b.n	8005630 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005608:	f7fc fb10 	bl	8001c2c <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	f241 3288 	movw	r2, #5000	; 0x1388
 8005616:	4293      	cmp	r3, r2
 8005618:	d90a      	bls.n	8005630 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e11c      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000
 8005624:	42420480 	.word	0x42420480
 8005628:	0800729c 	.word	0x0800729c
 800562c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005630:	4b8b      	ldr	r3, [pc, #556]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800563c:	7dfb      	ldrb	r3, [r7, #23]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d105      	bne.n	800564e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005642:	4b87      	ldr	r3, [pc, #540]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	4a86      	ldr	r2, [pc, #536]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 8005648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <HAL_RCC_OscConfig+0x4e4>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d008      	beq.n	8005670 <HAL_RCC_OscConfig+0x4e4>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d004      	beq.n	8005670 <HAL_RCC_OscConfig+0x4e4>
 8005666:	f240 21af 	movw	r1, #687	; 0x2af
 800566a:	487e      	ldr	r0, [pc, #504]	; (8005864 <HAL_RCC_OscConfig+0x6d8>)
 800566c:	f7fc f8c2 	bl	80017f4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80ee 	beq.w	8005856 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800567a:	4b79      	ldr	r3, [pc, #484]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 030c 	and.w	r3, r3, #12
 8005682:	2b08      	cmp	r3, #8
 8005684:	f000 80ce 	beq.w	8005824 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	2b02      	cmp	r3, #2
 800568e:	f040 80b2 	bne.w	80057f6 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <HAL_RCC_OscConfig+0x522>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a2:	d004      	beq.n	80056ae <HAL_RCC_OscConfig+0x522>
 80056a4:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80056a8:	486e      	ldr	r0, [pc, #440]	; (8005864 <HAL_RCC_OscConfig+0x6d8>)
 80056aa:	f7fc f8a3 	bl	80017f4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d04a      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056be:	d045      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056c8:	d040      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80056d2:	d03b      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056dc:	d036      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80056e6:	d031      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80056f0:	d02c      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80056fa:	d027      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005704:	d022      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800570e:	d01d      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005718:	d018      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005722:	d013      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800572c:	d00e      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8005736:	d009      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005740:	d004      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
 8005742:	f240 21b9 	movw	r1, #697	; 0x2b9
 8005746:	4847      	ldr	r0, [pc, #284]	; (8005864 <HAL_RCC_OscConfig+0x6d8>)
 8005748:	f7fc f854 	bl	80017f4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574c:	4b46      	ldr	r3, [pc, #280]	; (8005868 <HAL_RCC_OscConfig+0x6dc>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005752:	f7fc fa6b 	bl	8001c2c <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575a:	f7fc fa67 	bl	8001c2c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e075      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800576c:	4b3c      	ldr	r3, [pc, #240]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f0      	bne.n	800575a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005780:	d116      	bne.n	80057b0 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_RCC_OscConfig+0x612>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005792:	d004      	beq.n	800579e <HAL_RCC_OscConfig+0x612>
 8005794:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005798:	4832      	ldr	r0, [pc, #200]	; (8005864 <HAL_RCC_OscConfig+0x6d8>)
 800579a:	f7fc f82b 	bl	80017f4 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800579e:	4b30      	ldr	r3, [pc, #192]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	492d      	ldr	r1, [pc, #180]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057b0:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a19      	ldr	r1, [r3, #32]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	430b      	orrs	r3, r1
 80057c2:	4927      	ldr	r1, [pc, #156]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c8:	4b27      	ldr	r3, [pc, #156]	; (8005868 <HAL_RCC_OscConfig+0x6dc>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fc fa2d 	bl	8001c2c <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d6:	f7fc fa29 	bl	8001c2c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e037      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057e8:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x64a>
 80057f4:	e02f      	b.n	8005856 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f6:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <HAL_RCC_OscConfig+0x6dc>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fc fa16 	bl	8001c2c <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005804:	f7fc fa12 	bl	8001c2c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e020      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005816:	4b12      	ldr	r3, [pc, #72]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <HAL_RCC_OscConfig+0x678>
 8005822:	e018      	b.n	8005856 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e013      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_RCC_OscConfig+0x6d4>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	429a      	cmp	r2, r3
 8005842:	d106      	bne.n	8005852 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584e:	429a      	cmp	r2, r3
 8005850:	d001      	beq.n	8005856 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000
 8005864:	0800729c 	.word	0x0800729c
 8005868:	42420060 	.word	0x42420060

0800586c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e176      	b.n	8005b6e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d116      	bne.n	80058ba <HAL_RCC_ClockConfig+0x4e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d110      	bne.n	80058ba <HAL_RCC_ClockConfig+0x4e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <HAL_RCC_ClockConfig+0x4e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <HAL_RCC_ClockConfig+0x4e>
 80058b0:	f44f 714e 	mov.w	r1, #824	; 0x338
 80058b4:	4874      	ldr	r0, [pc, #464]	; (8005a88 <HAL_RCC_ClockConfig+0x21c>)
 80058b6:	f7fb ff9d 	bl	80017f4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x6a>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d007      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x6a>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d004      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x6a>
 80058cc:	f240 3139 	movw	r1, #825	; 0x339
 80058d0:	486d      	ldr	r0, [pc, #436]	; (8005a88 <HAL_RCC_ClockConfig+0x21c>)
 80058d2:	f7fb ff8f 	bl	80017f4 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058d6:	4b6d      	ldr	r3, [pc, #436]	; (8005a8c <HAL_RCC_ClockConfig+0x220>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d910      	bls.n	8005906 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e4:	4b69      	ldr	r3, [pc, #420]	; (8005a8c <HAL_RCC_ClockConfig+0x220>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f023 0207 	bic.w	r2, r3, #7
 80058ec:	4967      	ldr	r1, [pc, #412]	; (8005a8c <HAL_RCC_ClockConfig+0x220>)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f4:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <HAL_RCC_ClockConfig+0x220>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d001      	beq.n	8005906 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e133      	b.n	8005b6e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d049      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800591e:	4b5c      	ldr	r3, [pc, #368]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	4a5b      	ldr	r2, [pc, #364]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 8005924:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005928:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005936:	4b56      	ldr	r3, [pc, #344]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	4a55      	ldr	r2, [pc, #340]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 800593c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005940:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d024      	beq.n	8005994 <HAL_RCC_ClockConfig+0x128>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b80      	cmp	r3, #128	; 0x80
 8005950:	d020      	beq.n	8005994 <HAL_RCC_ClockConfig+0x128>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b90      	cmp	r3, #144	; 0x90
 8005958:	d01c      	beq.n	8005994 <HAL_RCC_ClockConfig+0x128>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2ba0      	cmp	r3, #160	; 0xa0
 8005960:	d018      	beq.n	8005994 <HAL_RCC_ClockConfig+0x128>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2bb0      	cmp	r3, #176	; 0xb0
 8005968:	d014      	beq.n	8005994 <HAL_RCC_ClockConfig+0x128>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2bc0      	cmp	r3, #192	; 0xc0
 8005970:	d010      	beq.n	8005994 <HAL_RCC_ClockConfig+0x128>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2bd0      	cmp	r3, #208	; 0xd0
 8005978:	d00c      	beq.n	8005994 <HAL_RCC_ClockConfig+0x128>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	2be0      	cmp	r3, #224	; 0xe0
 8005980:	d008      	beq.n	8005994 <HAL_RCC_ClockConfig+0x128>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	2bf0      	cmp	r3, #240	; 0xf0
 8005988:	d004      	beq.n	8005994 <HAL_RCC_ClockConfig+0x128>
 800598a:	f240 315f 	movw	r1, #863	; 0x35f
 800598e:	483e      	ldr	r0, [pc, #248]	; (8005a88 <HAL_RCC_ClockConfig+0x21c>)
 8005990:	f7fb ff30 	bl	80017f4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005994:	4b3e      	ldr	r3, [pc, #248]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	493b      	ldr	r1, [pc, #236]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d051      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00c      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x168>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d008      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x168>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d004      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x168>
 80059ca:	f240 3166 	movw	r1, #870	; 0x366
 80059ce:	482e      	ldr	r0, [pc, #184]	; (8005a88 <HAL_RCC_ClockConfig+0x21c>)
 80059d0:	f7fb ff10 	bl	80017f4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d107      	bne.n	80059ec <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059dc:	4b2c      	ldr	r3, [pc, #176]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d115      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0c0      	b.n	8005b6e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d107      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f4:	4b26      	ldr	r3, [pc, #152]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0b4      	b.n	8005b6e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a04:	4b22      	ldr	r3, [pc, #136]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0ac      	b.n	8005b6e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a14:	4b1e      	ldr	r3, [pc, #120]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f023 0203 	bic.w	r2, r3, #3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	491b      	ldr	r1, [pc, #108]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a26:	f7fc f901 	bl	8001c2c <HAL_GetTick>
 8005a2a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2c:	e00a      	b.n	8005a44 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2e:	f7fc f8fd 	bl	8001c2c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e094      	b.n	8005b6e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a44:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <HAL_RCC_ClockConfig+0x224>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 020c 	and.w	r2, r3, #12
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d1eb      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <HAL_RCC_ClockConfig+0x220>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d217      	bcs.n	8005a94 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a64:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <HAL_RCC_ClockConfig+0x220>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f023 0207 	bic.w	r2, r3, #7
 8005a6c:	4907      	ldr	r1, [pc, #28]	; (8005a8c <HAL_RCC_ClockConfig+0x220>)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <HAL_RCC_ClockConfig+0x220>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d008      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e073      	b.n	8005b6e <HAL_RCC_ClockConfig+0x302>
 8005a86:	bf00      	nop
 8005a88:	0800729c 	.word	0x0800729c
 8005a8c:	40022000 	.word	0x40022000
 8005a90:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d025      	beq.n	8005aec <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d018      	beq.n	8005ada <HAL_RCC_ClockConfig+0x26e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab0:	d013      	beq.n	8005ada <HAL_RCC_ClockConfig+0x26e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005aba:	d00e      	beq.n	8005ada <HAL_RCC_ClockConfig+0x26e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ac4:	d009      	beq.n	8005ada <HAL_RCC_ClockConfig+0x26e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ace:	d004      	beq.n	8005ada <HAL_RCC_ClockConfig+0x26e>
 8005ad0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8005ad4:	4828      	ldr	r0, [pc, #160]	; (8005b78 <HAL_RCC_ClockConfig+0x30c>)
 8005ad6:	f7fb fe8d 	bl	80017f4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ada:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <HAL_RCC_ClockConfig+0x310>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	4925      	ldr	r1, [pc, #148]	; (8005b7c <HAL_RCC_ClockConfig+0x310>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d026      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d018      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x2c6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b08:	d013      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x2c6>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005b12:	d00e      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x2c6>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b1c:	d009      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x2c6>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b26:	d004      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x2c6>
 8005b28:	f240 31ab 	movw	r1, #939	; 0x3ab
 8005b2c:	4812      	ldr	r0, [pc, #72]	; (8005b78 <HAL_RCC_ClockConfig+0x30c>)
 8005b2e:	f7fb fe61 	bl	80017f4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b32:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <HAL_RCC_ClockConfig+0x310>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	490e      	ldr	r1, [pc, #56]	; (8005b7c <HAL_RCC_ClockConfig+0x310>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b46:	f000 f821 	bl	8005b8c <HAL_RCC_GetSysClockFreq>
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_RCC_ClockConfig+0x310>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	091b      	lsrs	r3, r3, #4
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <HAL_RCC_ClockConfig+0x314>)
 8005b58:	5cd3      	ldrb	r3, [r2, r3]
 8005b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8005b5e:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <HAL_RCC_ClockConfig+0x318>)
 8005b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b62:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <HAL_RCC_ClockConfig+0x31c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fc f81e 	bl	8001ba8 <HAL_InitTick>

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	0800729c 	.word	0x0800729c
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	08007370 	.word	0x08007370
 8005b84:	20000008 	.word	0x20000008
 8005b88:	2000000c 	.word	0x2000000c

08005b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b8c:	b490      	push	{r4, r7}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b92:	4b2a      	ldr	r3, [pc, #168]	; (8005c3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b94:	1d3c      	adds	r4, r7, #4
 8005b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b9c:	4b28      	ldr	r3, [pc, #160]	; (8005c40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005bb6:	4b23      	ldr	r3, [pc, #140]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d002      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x40>
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d003      	beq.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x46>
 8005bca:	e02d      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bce:	623b      	str	r3, [r7, #32]
      break;
 8005bd0:	e02d      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	0c9b      	lsrs	r3, r3, #18
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bde:	4413      	add	r3, r2
 8005be0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005be4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d013      	beq.n	8005c18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bf0:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	0c5b      	lsrs	r3, r3, #17
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bfe:	4413      	add	r3, r2
 8005c00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4a0f      	ldr	r2, [pc, #60]	; (8005c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c0a:	fb02 f203 	mul.w	r2, r2, r3
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
 8005c16:	e004      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c1c:	fb02 f303 	mul.w	r3, r2, r3
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	623b      	str	r3, [r7, #32]
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c28:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c2a:	623b      	str	r3, [r7, #32]
      break;
 8005c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3728      	adds	r7, #40	; 0x28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc90      	pop	{r4, r7}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	080072d4 	.word	0x080072d4
 8005c40:	080072e4 	.word	0x080072e4
 8005c44:	40021000 	.word	0x40021000
 8005c48:	007a1200 	.word	0x007a1200
 8005c4c:	003d0900 	.word	0x003d0900

08005c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c54:	4b02      	ldr	r3, [pc, #8]	; (8005c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr
 8005c60:	20000008 	.word	0x20000008

08005c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c68:	f7ff fff2 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c6c:	4601      	mov	r1, r0
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	4a03      	ldr	r2, [pc, #12]	; (8005c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c7a:	5cd3      	ldrb	r3, [r2, r3]
 8005c7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40021000 	.word	0x40021000
 8005c88:	08007380 	.word	0x08007380

08005c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c90:	f7ff ffde 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c94:	4601      	mov	r1, r0
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	0adb      	lsrs	r3, r3, #11
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	4a03      	ldr	r2, [pc, #12]	; (8005cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ca2:	5cd3      	ldrb	r3, [r2, r3]
 8005ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	08007380 	.word	0x08007380

08005cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <RCC_Delay+0x34>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <RCC_Delay+0x38>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	0a5b      	lsrs	r3, r3, #9
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005cd0:	bf00      	nop
  }
  while (Delay --);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1e5a      	subs	r2, r3, #1
 8005cd6:	60fa      	str	r2, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f9      	bne.n	8005cd0 <RCC_Delay+0x1c>
}
 8005cdc:	bf00      	nop
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20000008 	.word	0x20000008
 8005cec:	10624dd3 	.word	0x10624dd3

08005cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10f      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005d24:	216c      	movs	r1, #108	; 0x6c
 8005d26:	4873      	ldr	r0, [pc, #460]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005d28:	f7fb fd64 	bl	80017f4 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8095 	beq.w	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d012      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4a:	d00d      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d54:	d008      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005d60:	2172      	movs	r1, #114	; 0x72
 8005d62:	4864      	ldr	r0, [pc, #400]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005d64:	f7fb fd46 	bl	80017f4 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d6c:	4b62      	ldr	r3, [pc, #392]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10d      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d78:	4b5f      	ldr	r3, [pc, #380]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	4a5e      	ldr	r2, [pc, #376]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d82:	61d3      	str	r3, [r2, #28]
 8005d84:	4b5c      	ldr	r3, [pc, #368]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d90:	2301      	movs	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d94:	4b59      	ldr	r3, [pc, #356]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d118      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005da0:	4b56      	ldr	r3, [pc, #344]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a55      	ldr	r2, [pc, #340]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005daa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dac:	f7fb ff3e 	bl	8001c2c <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db2:	e008      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db4:	f7fb ff3a 	bl	8001c2c <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b64      	cmp	r3, #100	; 0x64
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e092      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc6:	4b4d      	ldr	r3, [pc, #308]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dd2:	4b49      	ldr	r3, [pc, #292]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d02e      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d027      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005df0:	4b41      	ldr	r3, [pc, #260]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dfa:	4b41      	ldr	r3, [pc, #260]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e00:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e06:	4a3c      	ldr	r2, [pc, #240]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d014      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e16:	f7fb ff09 	bl	8001c2c <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e1c:	e00a      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1e:	f7fb ff05 	bl	8001c2c <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e05b      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e34:	4b30      	ldr	r3, [pc, #192]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ee      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e40:	4b2d      	ldr	r3, [pc, #180]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	492a      	ldr	r1, [pc, #168]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d105      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e58:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	4a26      	ldr	r2, [pc, #152]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01f      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d012      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e80:	d00d      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e8a:	d008      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e94:	d003      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005e96:	21b9      	movs	r1, #185	; 0xb9
 8005e98:	4816      	ldr	r0, [pc, #88]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005e9a:	f7fb fcab 	bl	80017f4 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e9e:	4b16      	ldr	r3, [pc, #88]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	4913      	ldr	r1, [pc, #76]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d016      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ec4:	d008      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ece:	f240 1115 	movw	r1, #277	; 0x115
 8005ed2:	4808      	ldr	r0, [pc, #32]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005ed4:	f7fb fc8e 	bl	80017f4 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ed8:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	4904      	ldr	r1, [pc, #16]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	080072e8 	.word	0x080072e8
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40007000 	.word	0x40007000
 8005f00:	42420440 	.word	0x42420440

08005f04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f04:	b590      	push	{r4, r7, lr}
 8005f06:	b08d      	sub	sp, #52	; 0x34
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f0c:	4b5f      	ldr	r3, [pc, #380]	; (800608c <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 8005f0e:	f107 040c 	add.w	r4, r7, #12
 8005f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f18:	4b5d      	ldr	r3, [pc, #372]	; (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
 8005f22:	2300      	movs	r3, #0
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f26:	2300      	movs	r3, #0
 8005f28:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10e      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8005f50:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8005f54:	484f      	ldr	r0, [pc, #316]	; (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 8005f56:	f7fb fc4d 	bl	80017f4 <assert_failed>

  switch (PeriphClk)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d07f      	beq.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d002      	beq.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d048      	beq.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005f68:	e08b      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      temp_reg = RCC->CFGR;
 8005f6a:	4b4b      	ldr	r3, [pc, #300]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005f70:	4b49      	ldr	r3, [pc, #292]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d07f      	beq.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x178>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	0c9b      	lsrs	r3, r3, #18
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005f88:	4413      	add	r3, r2
 8005f8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f8e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d018      	beq.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f9a:	4b3f      	ldr	r3, [pc, #252]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	0c5b      	lsrs	r3, r3, #17
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005fa8:	4413      	add	r3, r2
 8005faa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005fba:	4a38      	ldr	r2, [pc, #224]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	fb02 f303 	mul.w	r3, r2, r3
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fca:	e004      	b.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	4a34      	ldr	r2, [pc, #208]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8005fd0:	fb02 f303 	mul.w	r3, r2, r3
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005fd6:	4b30      	ldr	r3, [pc, #192]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe2:	d102      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = pllclk;
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005fe8:	e048      	b.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          frequency = (pllclk * 2) / 3;
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	4a2d      	ldr	r2, [pc, #180]	; (80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	085b      	lsrs	r3, r3, #1
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005ff8:	e040      	b.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x178>
      temp_reg = RCC->BDCR;
 8005ffa:	4b27      	ldr	r3, [pc, #156]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600a:	d108      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSE_VALUE;
 8006016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
 800601c:	e01f      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006028:	d109      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800602a:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        frequency = LSI_VALUE;
 8006036:	f649 4340 	movw	r3, #40000	; 0x9c40
 800603a:	62bb      	str	r3, [r7, #40]	; 0x28
 800603c:	e00f      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006048:	d11a      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 800604a:	4b13      	ldr	r3, [pc, #76]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d014      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
        frequency = HSE_VALUE / 128U;
 8006056:	f24f 4324 	movw	r3, #62500	; 0xf424
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800605c:	e010      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 800605e:	e00f      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006060:	f7ff fe14 	bl	8005c8c <HAL_RCC_GetPCLK2Freq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	0b9b      	lsrs	r3, r3, #14
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	3301      	adds	r3, #1
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	fbb2 f3f3 	udiv	r3, r2, r3
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800607a:	e002      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 8006080:	bf00      	nop
    }
  }
  return (frequency);
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006084:	4618      	mov	r0, r3
 8006086:	3734      	adds	r7, #52	; 0x34
 8006088:	46bd      	mov	sp, r7
 800608a:	bd90      	pop	{r4, r7, pc}
 800608c:	08007324 	.word	0x08007324
 8006090:	08007334 	.word	0x08007334
 8006094:	080072e8 	.word	0x080072e8
 8006098:	40021000 	.word	0x40021000
 800609c:	007a1200 	.word	0x007a1200
 80060a0:	003d0900 	.word	0x003d0900
 80060a4:	aaaaaaab 	.word	0xaaaaaaab

080060a8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e0b4      	b.n	8006228 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a5b      	ldr	r2, [pc, #364]	; (8006230 <HAL_RTC_Init+0x188>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <HAL_RTC_Init+0x2a>
 80060c8:	f240 111d 	movw	r1, #285	; 0x11d
 80060cc:	4859      	ldr	r0, [pc, #356]	; (8006234 <HAL_RTC_Init+0x18c>)
 80060ce:	f7fb fb91 	bl	80017f4 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d012      	beq.n	8006100 <HAL_RTC_Init+0x58>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b80      	cmp	r3, #128	; 0x80
 80060e0:	d00e      	beq.n	8006100 <HAL_RTC_Init+0x58>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ea:	d009      	beq.n	8006100 <HAL_RTC_Init+0x58>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f4:	d004      	beq.n	8006100 <HAL_RTC_Init+0x58>
 80060f6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80060fa:	484e      	ldr	r0, [pc, #312]	; (8006234 <HAL_RTC_Init+0x18c>)
 80060fc:	f7fb fb7a 	bl	80017f4 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006108:	d309      	bcc.n	800611e <HAL_RTC_Init+0x76>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d004      	beq.n	800611e <HAL_RTC_Init+0x76>
 8006114:	f240 111f 	movw	r1, #287	; 0x11f
 8006118:	4846      	ldr	r0, [pc, #280]	; (8006234 <HAL_RTC_Init+0x18c>)
 800611a:	f7fb fb6b 	bl	80017f4 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	7c5b      	ldrb	r3, [r3, #17]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fb fbb4 	bl	800189c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fd07 	bl	8006b4e <HAL_RTC_WaitForSynchro>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2204      	movs	r2, #4
 800614a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e06b      	b.n	8006228 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fdc0 	bl	8006cd6 <RTC_EnterInitMode>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2204      	movs	r2, #4
 8006160:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e060      	b.n	8006228 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0207 	bic.w	r2, r2, #7
 8006174:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800617e:	4b2e      	ldr	r3, [pc, #184]	; (8006238 <HAL_RTC_Init+0x190>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	4a2d      	ldr	r2, [pc, #180]	; (8006238 <HAL_RTC_Init+0x190>)
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800618a:	4b2b      	ldr	r3, [pc, #172]	; (8006238 <HAL_RTC_Init+0x190>)
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	4928      	ldr	r1, [pc, #160]	; (8006238 <HAL_RTC_Init+0x190>)
 8006198:	4313      	orrs	r3, r2
 800619a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d003      	beq.n	80061ae <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e00e      	b.n	80061cc <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80061ae:	2001      	movs	r0, #1
 80061b0:	f7ff fea8 	bl	8005f04 <HAL_RCCEx_GetPeriphCLKFreq>
 80061b4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2204      	movs	r2, #4
 80061c0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e030      	b.n	8006228 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f023 010f 	bic.w	r1, r3, #15
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	0c1a      	lsrs	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	041b      	lsls	r3, r3, #16
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	b291      	uxth	r1, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	430b      	orrs	r3, r1
 80061f6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fd94 	bl	8006d26 <RTC_ExitInitMode>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d004      	beq.n	800620e <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2204      	movs	r2, #4
 8006208:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e00c      	b.n	8006228 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006226:	2300      	movs	r3, #0
  }
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40002800 	.word	0x40002800
 8006234:	08007338 	.word	0x08007338
 8006238:	40006c00 	.word	0x40006c00

0800623c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800623c:	b590      	push	{r4, r7, lr}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_RTC_SetTime+0x20>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0cd      	b.n	80063fc <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <HAL_RTC_SetTime+0x3a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d004      	beq.n	8006276 <HAL_RTC_SetTime+0x3a>
 800626c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8006270:	4864      	ldr	r0, [pc, #400]	; (8006404 <HAL_RTC_SetTime+0x1c8>)
 8006272:	f7fb fabf 	bl	80017f4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	7c1b      	ldrb	r3, [r3, #16]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_RTC_SetTime+0x46>
 800627e:	2302      	movs	r3, #2
 8006280:	e0bc      	b.n	80063fc <HAL_RTC_SetTime+0x1c0>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2202      	movs	r2, #2
 800628c:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d12e      	bne.n	80062f2 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b17      	cmp	r3, #23
 800629a:	d904      	bls.n	80062a6 <HAL_RTC_SetTime+0x6a>
 800629c:	f240 21d3 	movw	r1, #723	; 0x2d3
 80062a0:	4858      	ldr	r0, [pc, #352]	; (8006404 <HAL_RTC_SetTime+0x1c8>)
 80062a2:	f7fb faa7 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	785b      	ldrb	r3, [r3, #1]
 80062aa:	2b3b      	cmp	r3, #59	; 0x3b
 80062ac:	d904      	bls.n	80062b8 <HAL_RTC_SetTime+0x7c>
 80062ae:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 80062b2:	4854      	ldr	r0, [pc, #336]	; (8006404 <HAL_RTC_SetTime+0x1c8>)
 80062b4:	f7fb fa9e 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	789b      	ldrb	r3, [r3, #2]
 80062bc:	2b3b      	cmp	r3, #59	; 0x3b
 80062be:	d904      	bls.n	80062ca <HAL_RTC_SetTime+0x8e>
 80062c0:	f240 21d5 	movw	r1, #725	; 0x2d5
 80062c4:	484f      	ldr	r0, [pc, #316]	; (8006404 <HAL_RTC_SetTime+0x1c8>)
 80062c6:	f7fb fa95 	bl	80017f4 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80062d4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	4619      	mov	r1, r3
 80062de:	460b      	mov	r3, r1
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	1a5b      	subs	r3, r3, r1
 80062e4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80062e6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80062ec:	4413      	add	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	e045      	b.n	800637e <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fd5a 	bl	8006db0 <RTC_Bcd2ToByte>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b17      	cmp	r3, #23
 8006300:	d904      	bls.n	800630c <HAL_RTC_SetTime+0xd0>
 8006302:	f240 21dd 	movw	r1, #733	; 0x2dd
 8006306:	483f      	ldr	r0, [pc, #252]	; (8006404 <HAL_RTC_SetTime+0x1c8>)
 8006308:	f7fb fa74 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fd4d 	bl	8006db0 <RTC_Bcd2ToByte>
 8006316:	4603      	mov	r3, r0
 8006318:	2b3b      	cmp	r3, #59	; 0x3b
 800631a:	d904      	bls.n	8006326 <HAL_RTC_SetTime+0xea>
 800631c:	f240 21de 	movw	r1, #734	; 0x2de
 8006320:	4838      	ldr	r0, [pc, #224]	; (8006404 <HAL_RTC_SetTime+0x1c8>)
 8006322:	f7fb fa67 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	789b      	ldrb	r3, [r3, #2]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fd40 	bl	8006db0 <RTC_Bcd2ToByte>
 8006330:	4603      	mov	r3, r0
 8006332:	2b3b      	cmp	r3, #59	; 0x3b
 8006334:	d904      	bls.n	8006340 <HAL_RTC_SetTime+0x104>
 8006336:	f240 21df 	movw	r1, #735	; 0x2df
 800633a:	4832      	ldr	r0, [pc, #200]	; (8006404 <HAL_RTC_SetTime+0x1c8>)
 800633c:	f7fb fa5a 	bl	80017f4 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fd33 	bl	8006db0 <RTC_Bcd2ToByte>
 800634a:	4603      	mov	r3, r0
 800634c:	461a      	mov	r2, r3
 800634e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006352:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fd28 	bl	8006db0 <RTC_Bcd2ToByte>
 8006360:	4603      	mov	r3, r0
 8006362:	461a      	mov	r2, r3
 8006364:	4613      	mov	r3, r2
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800636c:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	789b      	ldrb	r3, [r3, #2]
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fd1c 	bl	8006db0 <RTC_Bcd2ToByte>
 8006378:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800637a:	4423      	add	r3, r4
 800637c:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800637e:	6979      	ldr	r1, [r7, #20]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fc41 	bl	8006c08 <RTC_WriteTimeCounter>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2204      	movs	r2, #4
 8006390:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e02f      	b.n	80063fc <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0205 	bic.w	r2, r2, #5
 80063aa:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fc52 	bl	8006c56 <RTC_ReadAlarmCounter>
 80063b2:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d018      	beq.n	80063ee <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d214      	bcs.n	80063ee <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80063ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80063ce:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80063d0:	6939      	ldr	r1, [r7, #16]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fc58 	bl	8006c88 <RTC_WriteAlarmCounter>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2204      	movs	r2, #4
 80063e2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e006      	b.n	80063fc <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80063fa:	2300      	movs	r3, #0
  }
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	bd90      	pop	{r4, r7, pc}
 8006404:	08007338 	.word	0x08007338

08006408 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	61bb      	str	r3, [r7, #24]
 8006418:	2300      	movs	r3, #0
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <HAL_RTC_GetTime+0x28>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0c0      	b.n	80065b6 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <HAL_RTC_GetTime+0x42>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d004      	beq.n	800644a <HAL_RTC_GetTime+0x42>
 8006440:	f240 312d 	movw	r1, #813	; 0x32d
 8006444:	485e      	ldr	r0, [pc, #376]	; (80065c0 <HAL_RTC_GetTime+0x1b8>)
 8006446:	f7fb f9d5 	bl	80017f4 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0ac      	b.n	80065b6 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fba3 	bl	8006ba8 <RTC_ReadTimeCounter>
 8006462:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	4a57      	ldr	r2, [pc, #348]	; (80065c4 <HAL_RTC_GetTime+0x1bc>)
 8006468:	fba2 2303 	umull	r2, r3, r2, r3
 800646c:	0adb      	lsrs	r3, r3, #11
 800646e:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4b54      	ldr	r3, [pc, #336]	; (80065c4 <HAL_RTC_GetTime+0x1bc>)
 8006474:	fba3 1302 	umull	r1, r3, r3, r2
 8006478:	0adb      	lsrs	r3, r3, #11
 800647a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800647e:	fb01 f303 	mul.w	r3, r1, r3
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	4a50      	ldr	r2, [pc, #320]	; (80065c8 <HAL_RTC_GetTime+0x1c0>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	4a4b      	ldr	r2, [pc, #300]	; (80065c4 <HAL_RTC_GetTime+0x1bc>)
 8006496:	fba2 1203 	umull	r1, r2, r2, r3
 800649a:	0ad2      	lsrs	r2, r2, #11
 800649c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80064a0:	fb01 f202 	mul.w	r2, r1, r2
 80064a4:	1a9a      	subs	r2, r3, r2
 80064a6:	4b48      	ldr	r3, [pc, #288]	; (80065c8 <HAL_RTC_GetTime+0x1c0>)
 80064a8:	fba3 1302 	umull	r1, r3, r3, r2
 80064ac:	0959      	lsrs	r1, r3, #5
 80064ae:	460b      	mov	r3, r1
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	1a5b      	subs	r3, r3, r1
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	1ad1      	subs	r1, r2, r3
 80064b8:	b2ca      	uxtb	r2, r1
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b17      	cmp	r3, #23
 80064c2:	d955      	bls.n	8006570 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	4a41      	ldr	r2, [pc, #260]	; (80065cc <HAL_RTC_GetTime+0x1c4>)
 80064c8:	fba2 2303 	umull	r2, r3, r2, r3
 80064cc:	091b      	lsrs	r3, r3, #4
 80064ce:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80064d0:	6939      	ldr	r1, [r7, #16]
 80064d2:	4b3e      	ldr	r3, [pc, #248]	; (80065cc <HAL_RTC_GetTime+0x1c4>)
 80064d4:	fba3 2301 	umull	r2, r3, r3, r1
 80064d8:	091a      	lsrs	r2, r3, #4
 80064da:	4613      	mov	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4413      	add	r3, r2
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	1aca      	subs	r2, r1, r3
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 fbb3 	bl	8006c56 <RTC_ReadAlarmCounter>
 80064f0:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	d008      	beq.n	800650c <HAL_RTC_GetTime+0x104>
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d904      	bls.n	800650c <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	61fb      	str	r3, [r7, #28]
 800650a:	e002      	b.n	8006512 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800650c:	f04f 33ff 	mov.w	r3, #4294967295
 8006510:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4a2e      	ldr	r2, [pc, #184]	; (80065d0 <HAL_RTC_GetTime+0x1c8>)
 8006516:	fb02 f303 	mul.w	r3, r2, r3
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006520:	69b9      	ldr	r1, [r7, #24]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 fb70 	bl	8006c08 <RTC_WriteTimeCounter>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e041      	b.n	80065b6 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d00c      	beq.n	8006554 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	4413      	add	r3, r2
 8006540:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006542:	69f9      	ldr	r1, [r7, #28]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fb9f 	bl	8006c88 <RTC_WriteAlarmCounter>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e030      	b.n	80065b6 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006554:	69f9      	ldr	r1, [r7, #28]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fb96 	bl	8006c88 <RTC_WriteAlarmCounter>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e027      	b.n	80065b6 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006566:	6979      	ldr	r1, [r7, #20]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fc3e 	bl	8006dea <RTC_DateUpdate>
 800656e:	e003      	b.n	8006578 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	b2da      	uxtb	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d01a      	beq.n	80065b4 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fbf7 	bl	8006d76 <RTC_ByteToBcd2>
 8006588:	4603      	mov	r3, r0
 800658a:	461a      	mov	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fbee 	bl	8006d76 <RTC_ByteToBcd2>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	789b      	ldrb	r3, [r3, #2]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fbe5 	bl	8006d76 <RTC_ByteToBcd2>
 80065ac:	4603      	mov	r3, r0
 80065ae:	461a      	mov	r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	08007338 	.word	0x08007338
 80065c4:	91a2b3c5 	.word	0x91a2b3c5
 80065c8:	88888889 	.word	0x88888889
 80065cc:	aaaaaaab 	.word	0xaaaaaaab
 80065d0:	00015180 	.word	0x00015180

080065d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	2300      	movs	r3, #0
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <HAL_RTC_SetDate+0x24>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0fc      	b.n	80067f6 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_RTC_SetDate+0x3e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d004      	beq.n	8006612 <HAL_RTC_SetDate+0x3e>
 8006608:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800660c:	487c      	ldr	r0, [pc, #496]	; (8006800 <HAL_RTC_SetDate+0x22c>)
 800660e:	f7fb f8f1 	bl	80017f4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	7c1b      	ldrb	r3, [r3, #16]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_RTC_SetDate+0x4a>
 800661a:	2302      	movs	r3, #2
 800661c:	e0eb      	b.n	80067f6 <HAL_RTC_SetDate+0x222>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2202      	movs	r2, #2
 8006628:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d12f      	bne.n	8006690 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	78db      	ldrb	r3, [r3, #3]
 8006634:	2b63      	cmp	r3, #99	; 0x63
 8006636:	d904      	bls.n	8006642 <HAL_RTC_SetDate+0x6e>
 8006638:	f240 31a5 	movw	r1, #933	; 0x3a5
 800663c:	4870      	ldr	r0, [pc, #448]	; (8006800 <HAL_RTC_SetDate+0x22c>)
 800663e:	f7fb f8d9 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_RTC_SetDate+0x7e>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	785b      	ldrb	r3, [r3, #1]
 800664e:	2b0c      	cmp	r3, #12
 8006650:	d904      	bls.n	800665c <HAL_RTC_SetDate+0x88>
 8006652:	f240 31a6 	movw	r1, #934	; 0x3a6
 8006656:	486a      	ldr	r0, [pc, #424]	; (8006800 <HAL_RTC_SetDate+0x22c>)
 8006658:	f7fb f8cc 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	789b      	ldrb	r3, [r3, #2]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_RTC_SetDate+0x98>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	789b      	ldrb	r3, [r3, #2]
 8006668:	2b1f      	cmp	r3, #31
 800666a:	d904      	bls.n	8006676 <HAL_RTC_SetDate+0xa2>
 800666c:	f240 31a7 	movw	r1, #935	; 0x3a7
 8006670:	4863      	ldr	r0, [pc, #396]	; (8006800 <HAL_RTC_SetDate+0x22c>)
 8006672:	f7fb f8bf 	bl	80017f4 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	78da      	ldrb	r2, [r3, #3]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	785a      	ldrb	r2, [r3, #1]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	789a      	ldrb	r2, [r3, #2]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	739a      	strb	r2, [r3, #14]
 800668e:	e051      	b.n	8006734 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	78db      	ldrb	r3, [r3, #3]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fb8b 	bl	8006db0 <RTC_Bcd2ToByte>
 800669a:	4603      	mov	r3, r0
 800669c:	2b63      	cmp	r3, #99	; 0x63
 800669e:	d904      	bls.n	80066aa <HAL_RTC_SetDate+0xd6>
 80066a0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80066a4:	4856      	ldr	r0, [pc, #344]	; (8006800 <HAL_RTC_SetDate+0x22c>)
 80066a6:	f7fb f8a5 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	785b      	ldrb	r3, [r3, #1]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fb7e 	bl	8006db0 <RTC_Bcd2ToByte>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d007      	beq.n	80066ca <HAL_RTC_SetDate+0xf6>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fb76 	bl	8006db0 <RTC_Bcd2ToByte>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b0c      	cmp	r3, #12
 80066c8:	d904      	bls.n	80066d4 <HAL_RTC_SetDate+0x100>
 80066ca:	f240 31b1 	movw	r1, #945	; 0x3b1
 80066ce:	484c      	ldr	r0, [pc, #304]	; (8006800 <HAL_RTC_SetDate+0x22c>)
 80066d0:	f7fb f890 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	789b      	ldrb	r3, [r3, #2]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fb69 	bl	8006db0 <RTC_Bcd2ToByte>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <HAL_RTC_SetDate+0x120>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	789b      	ldrb	r3, [r3, #2]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fb61 	bl	8006db0 <RTC_Bcd2ToByte>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b1f      	cmp	r3, #31
 80066f2:	d904      	bls.n	80066fe <HAL_RTC_SetDate+0x12a>
 80066f4:	f240 31b2 	movw	r1, #946	; 0x3b2
 80066f8:	4841      	ldr	r0, [pc, #260]	; (8006800 <HAL_RTC_SetDate+0x22c>)
 80066fa:	f7fb f87b 	bl	80017f4 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	78db      	ldrb	r3, [r3, #3]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fb54 	bl	8006db0 <RTC_Bcd2ToByte>
 8006708:	4603      	mov	r3, r0
 800670a:	461a      	mov	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fb4b 	bl	8006db0 <RTC_Bcd2ToByte>
 800671a:	4603      	mov	r3, r0
 800671c:	461a      	mov	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	789b      	ldrb	r3, [r3, #2]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fb42 	bl	8006db0 <RTC_Bcd2ToByte>
 800672c:	4603      	mov	r3, r0
 800672e:	461a      	mov	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	7bdb      	ldrb	r3, [r3, #15]
 8006738:	4618      	mov	r0, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	7b59      	ldrb	r1, [r3, #13]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	7b9b      	ldrb	r3, [r3, #14]
 8006742:	461a      	mov	r2, r3
 8006744:	f000 fc2c 	bl	8006fa0 <RTC_WeekDayNum>
 8006748:	4603      	mov	r3, r0
 800674a:	461a      	mov	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	7b1a      	ldrb	r2, [r3, #12]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 fa25 	bl	8006ba8 <RTC_ReadTimeCounter>
 800675e:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	4a28      	ldr	r2, [pc, #160]	; (8006804 <HAL_RTC_SetDate+0x230>)
 8006764:	fba2 2303 	umull	r2, r3, r2, r3
 8006768:	0adb      	lsrs	r3, r3, #11
 800676a:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b18      	cmp	r3, #24
 8006770:	d93a      	bls.n	80067e8 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	4a24      	ldr	r2, [pc, #144]	; (8006808 <HAL_RTC_SetDate+0x234>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	091b      	lsrs	r3, r3, #4
 800677c:	4a23      	ldr	r2, [pc, #140]	; (800680c <HAL_RTC_SetDate+0x238>)
 800677e:	fb02 f303 	mul.w	r3, r2, r3
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006788:	69f9      	ldr	r1, [r7, #28]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 fa3c 	bl	8006c08 <RTC_WriteTimeCounter>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2204      	movs	r2, #4
 800679a:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e027      	b.n	80067f6 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fa55 	bl	8006c56 <RTC_ReadAlarmCounter>
 80067ac:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d018      	beq.n	80067e8 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d214      	bcs.n	80067e8 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80067c4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80067c8:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80067ca:	69b9      	ldr	r1, [r7, #24]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 fa5b 	bl	8006c88 <RTC_WriteAlarmCounter>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2204      	movs	r2, #4
 80067dc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e006      	b.n	80067f6 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	08007338 	.word	0x08007338
 8006804:	91a2b3c5 	.word	0x91a2b3c5
 8006808:	aaaaaaab 	.word	0xaaaaaaab
 800680c:	00015180 	.word	0x00015180

08006810 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800681c:	f107 0314 	add.w	r3, r7, #20
 8006820:	2100      	movs	r1, #0
 8006822:	460a      	mov	r2, r1
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	460a      	mov	r2, r1
 8006828:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_RTC_GetDate+0x26>
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e045      	b.n	80068c6 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <HAL_RTC_GetDate+0x40>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d004      	beq.n	8006850 <HAL_RTC_GetDate+0x40>
 8006846:	f240 410e 	movw	r1, #1038	; 0x40e
 800684a:	4821      	ldr	r0, [pc, #132]	; (80068d0 <HAL_RTC_GetDate+0xc0>)
 800684c:	f7fa ffd2 	bl	80017f4 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8006850:	f107 0314 	add.w	r3, r7, #20
 8006854:	2200      	movs	r2, #0
 8006856:	4619      	mov	r1, r3
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f7ff fdd5 	bl	8006408 <HAL_RTC_GetTime>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e02e      	b.n	80068c6 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	7b1a      	ldrb	r2, [r3, #12]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	7bda      	ldrb	r2, [r3, #15]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	7b5a      	ldrb	r2, [r3, #13]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	7b9a      	ldrb	r2, [r3, #14]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01a      	beq.n	80068c4 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	78db      	ldrb	r3, [r3, #3]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fa6f 	bl	8006d76 <RTC_ByteToBcd2>
 8006898:	4603      	mov	r3, r0
 800689a:	461a      	mov	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	785b      	ldrb	r3, [r3, #1]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fa66 	bl	8006d76 <RTC_ByteToBcd2>
 80068aa:	4603      	mov	r3, r0
 80068ac:	461a      	mov	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	789b      	ldrb	r3, [r3, #2]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fa5d 	bl	8006d76 <RTC_ByteToBcd2>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	08007338 	.word	0x08007338

080068d4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80068d4:	b590      	push	{r4, r7, lr}
 80068d6:	b089      	sub	sp, #36	; 0x24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80068e4:	f107 0314 	add.w	r3, r7, #20
 80068e8:	2100      	movs	r1, #0
 80068ea:	460a      	mov	r2, r1
 80068ec:	801a      	strh	r2, [r3, #0]
 80068ee:	460a      	mov	r2, r1
 80068f0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_RTC_SetAlarm_IT+0x2a>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e0ec      	b.n	8006adc <HAL_RTC_SetAlarm_IT+0x208>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d007      	beq.n	8006918 <HAL_RTC_SetAlarm_IT+0x44>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d004      	beq.n	8006918 <HAL_RTC_SetAlarm_IT+0x44>
 800690e:	f240 41ac 	movw	r1, #1196	; 0x4ac
 8006912:	4874      	ldr	r0, [pc, #464]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006914:	f7fa ff6e 	bl	80017f4 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <HAL_RTC_SetAlarm_IT+0x56>
 8006920:	f240 41ad 	movw	r1, #1197	; 0x4ad
 8006924:	486f      	ldr	r0, [pc, #444]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006926:	f7fa ff65 	bl	80017f4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	7c1b      	ldrb	r3, [r3, #16]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <HAL_RTC_SetAlarm_IT+0x62>
 8006932:	2302      	movs	r3, #2
 8006934:	e0d2      	b.n	8006adc <HAL_RTC_SetAlarm_IT+0x208>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2202      	movs	r2, #2
 8006940:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8006942:	f107 0314 	add.w	r3, r7, #20
 8006946:	2200      	movs	r2, #0
 8006948:	4619      	mov	r1, r3
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fd5c 	bl	8006408 <HAL_RTC_GetTime>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <HAL_RTC_SetAlarm_IT+0x86>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e0c0      	b.n	8006adc <HAL_RTC_SetAlarm_IT+0x208>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800695a:	7d3b      	ldrb	r3, [r7, #20]
 800695c:	461a      	mov	r2, r3
 800695e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006962:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8006966:	7d7b      	ldrb	r3, [r7, #21]
 8006968:	4619      	mov	r1, r3
 800696a:	460b      	mov	r3, r1
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	1a5b      	subs	r3, r3, r1
 8006970:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006972:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8006974:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006976:	4413      	add	r3, r2
 8006978:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d12e      	bne.n	80069de <HAL_RTC_SetAlarm_IT+0x10a>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b17      	cmp	r3, #23
 8006986:	d904      	bls.n	8006992 <HAL_RTC_SetAlarm_IT+0xbe>
 8006988:	f240 41c1 	movw	r1, #1217	; 0x4c1
 800698c:	4855      	ldr	r0, [pc, #340]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 800698e:	f7fa ff31 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b3b      	cmp	r3, #59	; 0x3b
 8006998:	d904      	bls.n	80069a4 <HAL_RTC_SetAlarm_IT+0xd0>
 800699a:	f240 41c2 	movw	r1, #1218	; 0x4c2
 800699e:	4851      	ldr	r0, [pc, #324]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 80069a0:	f7fa ff28 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	789b      	ldrb	r3, [r3, #2]
 80069a8:	2b3b      	cmp	r3, #59	; 0x3b
 80069aa:	d904      	bls.n	80069b6 <HAL_RTC_SetAlarm_IT+0xe2>
 80069ac:	f240 41c3 	movw	r1, #1219	; 0x4c3
 80069b0:	484c      	ldr	r0, [pc, #304]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 80069b2:	f7fa ff1f 	bl	80017f4 <assert_failed>

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80069c0:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	4619      	mov	r1, r3
 80069ca:	460b      	mov	r3, r1
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	1a5b      	subs	r3, r3, r1
 80069d0:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80069d2:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80069d8:	4413      	add	r3, r2
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	e045      	b.n	8006a6a <HAL_RTC_SetAlarm_IT+0x196>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f9e4 	bl	8006db0 <RTC_Bcd2ToByte>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b17      	cmp	r3, #23
 80069ec:	d904      	bls.n	80069f8 <HAL_RTC_SetAlarm_IT+0x124>
 80069ee:	f240 41cb 	movw	r1, #1227	; 0x4cb
 80069f2:	483c      	ldr	r0, [pc, #240]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 80069f4:	f7fa fefe 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	785b      	ldrb	r3, [r3, #1]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 f9d7 	bl	8006db0 <RTC_Bcd2ToByte>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b3b      	cmp	r3, #59	; 0x3b
 8006a06:	d904      	bls.n	8006a12 <HAL_RTC_SetAlarm_IT+0x13e>
 8006a08:	f240 41cc 	movw	r1, #1228	; 0x4cc
 8006a0c:	4835      	ldr	r0, [pc, #212]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a0e:	f7fa fef1 	bl	80017f4 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	789b      	ldrb	r3, [r3, #2]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f9ca 	bl	8006db0 <RTC_Bcd2ToByte>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b3b      	cmp	r3, #59	; 0x3b
 8006a20:	d904      	bls.n	8006a2c <HAL_RTC_SetAlarm_IT+0x158>
 8006a22:	f240 41cd 	movw	r1, #1229	; 0x4cd
 8006a26:	482f      	ldr	r0, [pc, #188]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a28:	f7fa fee4 	bl	80017f4 <assert_failed>

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 f9bd 	bl	8006db0 <RTC_Bcd2ToByte>
 8006a36:	4603      	mov	r3, r0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006a3e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f9b2 	bl	8006db0 <RTC_Bcd2ToByte>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4613      	mov	r3, r2
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	1a9b      	subs	r3, r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006a58:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	789b      	ldrb	r3, [r3, #2]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 f9a6 	bl	8006db0 <RTC_Bcd2ToByte>
 8006a64:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006a66:	4423      	add	r3, r4
 8006a68:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d205      	bcs.n	8006a7e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006a78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006a7c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006a7e:	69f9      	ldr	r1, [r7, #28]
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f901 	bl	8006c88 <RTC_WriteAlarmCounter>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <HAL_RTC_SetAlarm_IT+0x1c8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2204      	movs	r2, #4
 8006a90:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e01f      	b.n	8006adc <HAL_RTC_SetAlarm_IT+0x208>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0202 	mvn.w	r2, #2
 8006aa4:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0202 	orr.w	r2, r2, #2
 8006ab4:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006ab6:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a0b      	ldr	r2, [pc, #44]	; (8006ae8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac0:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006ac2:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006acc:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006ada:	2300      	movs	r3, #0
  }
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3724      	adds	r7, #36	; 0x24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd90      	pop	{r4, r7, pc}
 8006ae4:	08007338 	.word	0x08007338
 8006ae8:	40010400 	.word	0x40010400

08006aec <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00e      	beq.n	8006b20 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f813 	bl	8006b3c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f06f 0202 	mvn.w	r2, #2
 8006b1e:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006b20:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8006b22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b26:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	745a      	strb	r2, [r3, #17]
}
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	40010400 	.word	0x40010400

08006b3c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bc80      	pop	{r7}
 8006b4c:	4770      	bx	lr

08006b4e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e01d      	b.n	8006ba0 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0208 	bic.w	r2, r2, #8
 8006b72:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006b74:	f7fb f85a 	bl	8001c2c <HAL_GetTick>
 8006b78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006b7a:	e009      	b.n	8006b90 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006b7c:	f7fb f856 	bl	8001c2c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b8a:	d901      	bls.n	8006b90 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e007      	b.n	8006ba0 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0ee      	beq.n	8006b7c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	827b      	strh	r3, [r7, #18]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	823b      	strh	r3, [r7, #16]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006bd8:	8a7a      	ldrh	r2, [r7, #18]
 8006bda:	8a3b      	ldrh	r3, [r7, #16]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d008      	beq.n	8006bf2 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006be0:	8a3b      	ldrh	r3, [r7, #16]
 8006be2:	041a      	lsls	r2, r3, #16
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e004      	b.n	8006bfc <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006bf2:	8a7b      	ldrh	r3, [r7, #18]
 8006bf4:	041a      	lsls	r2, r3, #16
 8006bf6:	89fb      	ldrh	r3, [r7, #14]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006bfc:	697b      	ldr	r3, [r7, #20]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f85d 	bl	8006cd6 <RTC_EnterInitMode>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	73fb      	strb	r3, [r7, #15]
 8006c26:	e011      	b.n	8006c4c <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	0c12      	lsrs	r2, r2, #16
 8006c30:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	b292      	uxth	r2, r2
 8006c3a:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f872 	bl	8006d26 <RTC_ExitInitMode>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	81fb      	strh	r3, [r7, #14]
 8006c62:	2300      	movs	r3, #0
 8006c64:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006c76:	89fb      	ldrh	r3, [r7, #14]
 8006c78:	041a      	lsls	r2, r3, #16
 8006c7a:	89bb      	ldrh	r3, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr

08006c88 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f81d 	bl	8006cd6 <RTC_EnterInitMode>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	73fb      	strb	r3, [r7, #15]
 8006ca6:	e011      	b.n	8006ccc <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	0c12      	lsrs	r2, r2, #16
 8006cb0:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	b292      	uxth	r2, r2
 8006cba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f832 	bl	8006d26 <RTC_ExitInitMode>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006ce2:	f7fa ffa3 	bl	8001c2c <HAL_GetTick>
 8006ce6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006ce8:	e009      	b.n	8006cfe <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006cea:	f7fa ff9f 	bl	8001c2c <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cf8:	d901      	bls.n	8006cfe <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e00f      	b.n	8006d1e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0ee      	beq.n	8006cea <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0210 	orr.w	r2, r2, #16
 8006d1a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0210 	bic.w	r2, r2, #16
 8006d40:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006d42:	f7fa ff73 	bl	8001c2c <HAL_GetTick>
 8006d46:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006d48:	e009      	b.n	8006d5e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006d4a:	f7fa ff6f 	bl	8001c2c <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d58:	d901      	bls.n	8006d5e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e007      	b.n	8006d6e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f003 0320 	and.w	r3, r3, #32
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0ee      	beq.n	8006d4a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006d84:	e005      	b.n	8006d92 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	3b0a      	subs	r3, #10
 8006d90:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	2b09      	cmp	r3, #9
 8006d96:	d8f6      	bhi.n	8006d86 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	79fb      	ldrb	r3, [r7, #7]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	b2db      	uxtb	r3, r3
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr

08006db0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	4603      	mov	r3, r0
 8006db8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	091b      	lsrs	r3, r3, #4
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006dd0:	79fb      	ldrb	r3, [r7, #7]
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	4413      	add	r3, r2
 8006dde:	b2db      	uxtb	r3, r3
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr

08006dea <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7bdb      	ldrb	r3, [r3, #15]
 8006e08:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7b5b      	ldrb	r3, [r3, #13]
 8006e0e:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7b9b      	ldrb	r3, [r3, #14]
 8006e14:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	e06f      	b.n	8006efc <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d011      	beq.n	8006e46 <RTC_DateUpdate+0x5c>
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d00e      	beq.n	8006e46 <RTC_DateUpdate+0x5c>
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	d00b      	beq.n	8006e46 <RTC_DateUpdate+0x5c>
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b07      	cmp	r3, #7
 8006e32:	d008      	beq.n	8006e46 <RTC_DateUpdate+0x5c>
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d005      	beq.n	8006e46 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2b0a      	cmp	r3, #10
 8006e3e:	d002      	beq.n	8006e46 <RTC_DateUpdate+0x5c>
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b0c      	cmp	r3, #12
 8006e44:	d117      	bne.n	8006e76 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b1e      	cmp	r3, #30
 8006e4a:	d803      	bhi.n	8006e54 <RTC_DateUpdate+0x6a>
      {
        day++;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006e52:	e050      	b.n	8006ef6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b0c      	cmp	r3, #12
 8006e58:	d005      	beq.n	8006e66 <RTC_DateUpdate+0x7c>
        {
          month++;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006e60:	2301      	movs	r3, #1
 8006e62:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006e64:	e047      	b.n	8006ef6 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006e66:	2301      	movs	r3, #1
 8006e68:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]
          year++;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	3301      	adds	r3, #1
 8006e72:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006e74:	e03f      	b.n	8006ef6 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d008      	beq.n	8006e8e <RTC_DateUpdate+0xa4>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2b06      	cmp	r3, #6
 8006e80:	d005      	beq.n	8006e8e <RTC_DateUpdate+0xa4>
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2b09      	cmp	r3, #9
 8006e86:	d002      	beq.n	8006e8e <RTC_DateUpdate+0xa4>
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b0b      	cmp	r3, #11
 8006e8c:	d10c      	bne.n	8006ea8 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b1d      	cmp	r3, #29
 8006e92:	d803      	bhi.n	8006e9c <RTC_DateUpdate+0xb2>
      {
        day++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3301      	adds	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006e9a:	e02c      	b.n	8006ef6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006ea6:	e026      	b.n	8006ef6 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d123      	bne.n	8006ef6 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b1b      	cmp	r3, #27
 8006eb2:	d803      	bhi.n	8006ebc <RTC_DateUpdate+0xd2>
      {
        day++;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	e01c      	b.n	8006ef6 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b1c      	cmp	r3, #28
 8006ec0:	d111      	bne.n	8006ee6 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f838 	bl	8006f3c <RTC_IsLeapYear>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <RTC_DateUpdate+0xf0>
        {
          day++;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	e00d      	b.n	8006ef6 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	3301      	adds	r3, #1
 8006ede:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e007      	b.n	8006ef6 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b1d      	cmp	r3, #29
 8006eea:	d104      	bne.n	8006ef6 <RTC_DateUpdate+0x10c>
      {
        month++;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60bb      	str	r3, [r7, #8]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d38b      	bcc.n	8006e1c <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	4619      	mov	r1, r3
 8006f26:	6978      	ldr	r0, [r7, #20]
 8006f28:	f000 f83a 	bl	8006fa0 <RTC_WeekDayNum>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	731a      	strb	r2, [r3, #12]
}
 8006f34:	bf00      	nop
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	f003 0303 	and.w	r3, r3, #3
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e01d      	b.n	8006f92 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	4a10      	ldr	r2, [pc, #64]	; (8006f9c <RTC_IsLeapYear+0x60>)
 8006f5a:	fba2 1203 	umull	r1, r2, r2, r3
 8006f5e:	0952      	lsrs	r2, r2, #5
 8006f60:	2164      	movs	r1, #100	; 0x64
 8006f62:	fb01 f202 	mul.w	r2, r1, r2
 8006f66:	1a9b      	subs	r3, r3, r2
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e00f      	b.n	8006f92 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	4a09      	ldr	r2, [pc, #36]	; (8006f9c <RTC_IsLeapYear+0x60>)
 8006f76:	fba2 1203 	umull	r1, r2, r2, r3
 8006f7a:	09d2      	lsrs	r2, r2, #7
 8006f7c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006f80:	fb01 f202 	mul.w	r2, r1, r2
 8006f84:	1a9b      	subs	r3, r3, r2
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e000      	b.n	8006f92 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006f90:	2300      	movs	r3, #0
  }
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr
 8006f9c:	51eb851f 	.word	0x51eb851f

08006fa0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
 8006fac:	4613      	mov	r3, r2
 8006fae:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60bb      	str	r3, [r7, #8]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006fbe:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d82d      	bhi.n	8007022 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006fc6:	78fa      	ldrb	r2, [r7, #3]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	4413      	add	r3, r2
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	4a2c      	ldr	r2, [pc, #176]	; (8007084 <RTC_WeekDayNum+0xe4>)
 8006fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd8:	085a      	lsrs	r2, r3, #1
 8006fda:	78bb      	ldrb	r3, [r7, #2]
 8006fdc:	441a      	add	r2, r3
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	441a      	add	r2, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	089b      	lsrs	r3, r3, #2
 8006fe8:	441a      	add	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4926      	ldr	r1, [pc, #152]	; (8007088 <RTC_WeekDayNum+0xe8>)
 8006ff0:	fba1 1303 	umull	r1, r3, r1, r3
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	1ad2      	subs	r2, r2, r3
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	4922      	ldr	r1, [pc, #136]	; (8007088 <RTC_WeekDayNum+0xe8>)
 8006ffe:	fba1 1303 	umull	r1, r3, r1, r3
 8007002:	09db      	lsrs	r3, r3, #7
 8007004:	4413      	add	r3, r2
 8007006:	1d1a      	adds	r2, r3, #4
 8007008:	4b20      	ldr	r3, [pc, #128]	; (800708c <RTC_WeekDayNum+0xec>)
 800700a:	fba3 1302 	umull	r1, r3, r3, r2
 800700e:	1ad1      	subs	r1, r2, r3
 8007010:	0849      	lsrs	r1, r1, #1
 8007012:	440b      	add	r3, r1
 8007014:	0899      	lsrs	r1, r3, #2
 8007016:	460b      	mov	r3, r1
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	1a5b      	subs	r3, r3, r1
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e029      	b.n	8007076 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	4613      	mov	r3, r2
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	4413      	add	r3, r2
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	4a15      	ldr	r2, [pc, #84]	; (8007084 <RTC_WeekDayNum+0xe4>)
 8007030:	fba2 2303 	umull	r2, r3, r2, r3
 8007034:	085a      	lsrs	r2, r3, #1
 8007036:	78bb      	ldrb	r3, [r7, #2]
 8007038:	441a      	add	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	441a      	add	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	089b      	lsrs	r3, r3, #2
 8007042:	441a      	add	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4910      	ldr	r1, [pc, #64]	; (8007088 <RTC_WeekDayNum+0xe8>)
 8007048:	fba1 1303 	umull	r1, r3, r1, r3
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	490d      	ldr	r1, [pc, #52]	; (8007088 <RTC_WeekDayNum+0xe8>)
 8007054:	fba1 1303 	umull	r1, r3, r1, r3
 8007058:	09db      	lsrs	r3, r3, #7
 800705a:	4413      	add	r3, r2
 800705c:	1c9a      	adds	r2, r3, #2
 800705e:	4b0b      	ldr	r3, [pc, #44]	; (800708c <RTC_WeekDayNum+0xec>)
 8007060:	fba3 1302 	umull	r1, r3, r3, r2
 8007064:	1ad1      	subs	r1, r2, r3
 8007066:	0849      	lsrs	r1, r1, #1
 8007068:	440b      	add	r3, r1
 800706a:	0899      	lsrs	r1, r3, #2
 800706c:	460b      	mov	r3, r1
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	1a5b      	subs	r3, r3, r1
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	b2db      	uxtb	r3, r3
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr
 8007084:	38e38e39 	.word	0x38e38e39
 8007088:	51eb851f 	.word	0x51eb851f
 800708c:	24924925 	.word	0x24924925

08007090 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d024      	beq.n	80070f0 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01d      	beq.n	80070f0 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00b      	beq.n	80070da <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f818 	bl	80070f8 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0204 	mvn.w	r2, #4
 80070d0:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2204      	movs	r2, #4
 80070d6:	745a      	strb	r2, [r3, #17]
 80070d8:	e005      	b.n	80070e6 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fa faa6 	bl	800162c <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f06f 0201 	mvn.w	r2, #1
 80070ee:	605a      	str	r2, [r3, #4]
    }
  }
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr
	...

0800710c <__libc_init_array>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	2500      	movs	r5, #0
 8007110:	4e0c      	ldr	r6, [pc, #48]	; (8007144 <__libc_init_array+0x38>)
 8007112:	4c0d      	ldr	r4, [pc, #52]	; (8007148 <__libc_init_array+0x3c>)
 8007114:	1ba4      	subs	r4, r4, r6
 8007116:	10a4      	asrs	r4, r4, #2
 8007118:	42a5      	cmp	r5, r4
 800711a:	d109      	bne.n	8007130 <__libc_init_array+0x24>
 800711c:	f000 f822 	bl	8007164 <_init>
 8007120:	2500      	movs	r5, #0
 8007122:	4e0a      	ldr	r6, [pc, #40]	; (800714c <__libc_init_array+0x40>)
 8007124:	4c0a      	ldr	r4, [pc, #40]	; (8007150 <__libc_init_array+0x44>)
 8007126:	1ba4      	subs	r4, r4, r6
 8007128:	10a4      	asrs	r4, r4, #2
 800712a:	42a5      	cmp	r5, r4
 800712c:	d105      	bne.n	800713a <__libc_init_array+0x2e>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007134:	4798      	blx	r3
 8007136:	3501      	adds	r5, #1
 8007138:	e7ee      	b.n	8007118 <__libc_init_array+0xc>
 800713a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800713e:	4798      	blx	r3
 8007140:	3501      	adds	r5, #1
 8007142:	e7f2      	b.n	800712a <__libc_init_array+0x1e>
 8007144:	08007388 	.word	0x08007388
 8007148:	08007388 	.word	0x08007388
 800714c:	08007388 	.word	0x08007388
 8007150:	0800738c 	.word	0x0800738c

08007154 <memset>:
 8007154:	4603      	mov	r3, r0
 8007156:	4402      	add	r2, r0
 8007158:	4293      	cmp	r3, r2
 800715a:	d100      	bne.n	800715e <memset+0xa>
 800715c:	4770      	bx	lr
 800715e:	f803 1b01 	strb.w	r1, [r3], #1
 8007162:	e7f9      	b.n	8007158 <memset+0x4>

08007164 <_init>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	bf00      	nop
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr

08007170 <_fini>:
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	bf00      	nop
 8007174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007176:	bc08      	pop	{r3}
 8007178:	469e      	mov	lr, r3
 800717a:	4770      	bx	lr
