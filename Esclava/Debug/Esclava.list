
Esclava.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cfc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08006e0c  08006e0c  00016e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007018  08007018  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007018  08007018  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007018  08007018  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007018  08007018  00017018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800701c  0800701c  0001701c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000014  08007034  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08007034  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d985  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002671  00000000  00000000  0002d9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000060c0  00000000  00000000  00030033  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c10  00000000  00000000  000360f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ac8  00000000  00000000  00036d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00014793  00000000  00000000  000377d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d321  00000000  00000000  0004bf63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006c45e  00000000  00000000  00059284  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c56e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fc0  00000000  00000000  000c5760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08006df4 	.word	0x08006df4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08006df4 	.word	0x08006df4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80005e8:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <MX_ADC1_Init+0x104>)
 80005ea:	4a3d      	ldr	r2, [pc, #244]	; (80006e0 <MX_ADC1_Init+0x108>)
 80005ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005ee:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <MX_ADC1_Init+0x104>)
 80005f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <MX_ADC1_Init+0x104>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <MX_ADC1_Init+0x104>)
 80005fe:	2200      	movs	r2, #0
 8000600:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000602:	4b36      	ldr	r3, [pc, #216]	; (80006dc <MX_ADC1_Init+0x104>)
 8000604:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000608:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060a:	4b34      	ldr	r3, [pc, #208]	; (80006dc <MX_ADC1_Init+0x104>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8000610:	4b32      	ldr	r3, [pc, #200]	; (80006dc <MX_ADC1_Init+0x104>)
 8000612:	2206      	movs	r2, #6
 8000614:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000616:	4831      	ldr	r0, [pc, #196]	; (80006dc <MX_ADC1_Init+0x104>)
 8000618:	f001 f97c 	bl	8001914 <HAL_ADC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000622:	f000 ff23 	bl	800146c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800062a:	2301      	movs	r3, #1
 800062c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800062e:	2306      	movs	r3, #6
 8000630:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4829      	ldr	r0, [pc, #164]	; (80006dc <MX_ADC1_Init+0x104>)
 8000638:	f001 fcce 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 ff13 	bl	800146c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000646:	2301      	movs	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800064a:	2302      	movs	r3, #2
 800064c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	4822      	ldr	r0, [pc, #136]	; (80006dc <MX_ADC1_Init+0x104>)
 8000654:	f001 fcc0 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800065e:	f000 ff05 	bl	800146c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000662:	2302      	movs	r3, #2
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000666:	2303      	movs	r3, #3
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	481b      	ldr	r0, [pc, #108]	; (80006dc <MX_ADC1_Init+0x104>)
 8000670:	f001 fcb2 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800067a:	f000 fef7 	bl	800146c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800067e:	2303      	movs	r3, #3
 8000680:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000682:	2304      	movs	r3, #4
 8000684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4619      	mov	r1, r3
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_ADC1_Init+0x104>)
 800068c:	f001 fca4 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000696:	f000 fee9 	bl	800146c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800069a:	2304      	movs	r3, #4
 800069c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800069e:	2305      	movs	r3, #5
 80006a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_ADC1_Init+0x104>)
 80006a8:	f001 fc96 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006b2:	f000 fedb 	bl	800146c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006b6:	2305      	movs	r3, #5
 80006b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006ba:	2306      	movs	r3, #6
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_ADC1_Init+0x104>)
 80006c4:	f001 fc88 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ce:	f000 fecd 	bl	800146c <Error_Handler>
  }

}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000004c 	.word	0x2000004c
 80006e0:	40012400 	.word	0x40012400

080006e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a2d      	ldr	r2, [pc, #180]	; (80007b4 <HAL_ADC_MspInit+0xd0>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d152      	bne.n	80007aa <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 800070a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a25      	ldr	r2, [pc, #148]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = FASE1_SENSOR_Pin|FASE2_SENSOR_Pin|FASE3_SENSOR_Pin|FASE4_SENSOR_Pin 
 8000734:	233f      	movs	r3, #63	; 0x3f
 8000736:	613b      	str	r3, [r7, #16]
                          |FASE5_SENSOR_Pin|FASE6_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000738:	2303      	movs	r3, #3
 800073a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	481e      	ldr	r0, [pc, #120]	; (80007bc <HAL_ADC_MspInit+0xd8>)
 8000744:	f002 fb68 	bl	8002e18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 800074a:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <HAL_ADC_MspInit+0xe0>)
 800074c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 8000762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000766:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 800076a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 8000778:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800077c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800077e:	4810      	ldr	r0, [pc, #64]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 8000780:	f002 f826 	bl	80027d0 <HAL_DMA_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800078a:	f000 fe6f 	bl	800146c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 8000792:	621a      	str	r2, [r3, #32]
 8000794:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_ADC_MspInit+0xdc>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2012      	movs	r0, #18
 80007a0:	f001 ffc6 	bl	8002730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007a4:	2012      	movs	r0, #18
 80007a6:	f001 ffef 	bl	8002788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40012400 	.word	0x40012400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800
 80007c0:	2000007c 	.word	0x2000007c
 80007c4:	40020008 	.word	0x40020008

080007c8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_DMA_Init+0x38>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <MX_DMA_Init+0x38>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_DMA_Init+0x38>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	200b      	movs	r0, #11
 80007ec:	f001 ffa0 	bl	8002730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007f0:	200b      	movs	r0, #11
 80007f2:	f001 ffc9 	bl	8002788 <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <Fases_Auto>:

volatile uint8_t c6Fase = 0;
volatile uint8_t f6Actual = 1;

void Fases_Auto(uint8_t tiempos[18])
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
/********************************* FASE 1*************************************/

	switch(f1Actual)
 800080c:	4bac      	ldr	r3, [pc, #688]	; (8000ac0 <Fases_Auto+0x2bc>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b02      	cmp	r3, #2
 8000814:	d01d      	beq.n	8000852 <Fases_Auto+0x4e>
 8000816:	2b03      	cmp	r3, #3
 8000818:	d036      	beq.n	8000888 <Fases_Auto+0x84>
 800081a:	2b01      	cmp	r3, #1
 800081c:	d14f      	bne.n	80008be <Fases_Auto+0xba>
	{
	case 1:
	{
		HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	48a7      	ldr	r0, [pc, #668]	; (8000ac4 <Fases_Auto+0x2c0>)
 8000826:	f002 fd1f 	bl	8003268 <HAL_GPIO_WritePin>
		if(c1Fase == tiempos[0])
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	4ba6      	ldr	r3, [pc, #664]	; (8000ac8 <Fases_Auto+0x2c4>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	429a      	cmp	r2, r3
 8000836:	d145      	bne.n	80008c4 <Fases_Auto+0xc0>
		{
			HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083e:	48a1      	ldr	r0, [pc, #644]	; (8000ac4 <Fases_Auto+0x2c0>)
 8000840:	f002 fd12 	bl	8003268 <HAL_GPIO_WritePin>
			f1Actual = 2;
 8000844:	4b9e      	ldr	r3, [pc, #632]	; (8000ac0 <Fases_Auto+0x2bc>)
 8000846:	2202      	movs	r2, #2
 8000848:	701a      	strb	r2, [r3, #0]
			c1Fase = 0;
 800084a:	4b9f      	ldr	r3, [pc, #636]	; (8000ac8 <Fases_Auto+0x2c4>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
			break;
 8000850:	e03d      	b.n	80008ce <Fases_Auto+0xca>
		}
	}
	break;
	case 2:
	{
		HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000858:	489c      	ldr	r0, [pc, #624]	; (8000acc <Fases_Auto+0x2c8>)
 800085a:	f002 fd05 	bl	8003268 <HAL_GPIO_WritePin>
		if(c1Fase == tiempos[1])
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3301      	adds	r3, #1
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4b98      	ldr	r3, [pc, #608]	; (8000ac8 <Fases_Auto+0x2c4>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	429a      	cmp	r2, r3
 800086c:	d12c      	bne.n	80008c8 <Fases_Auto+0xc4>
		{
			HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000874:	4895      	ldr	r0, [pc, #596]	; (8000acc <Fases_Auto+0x2c8>)
 8000876:	f002 fcf7 	bl	8003268 <HAL_GPIO_WritePin>
			f1Actual = 3;
 800087a:	4b91      	ldr	r3, [pc, #580]	; (8000ac0 <Fases_Auto+0x2bc>)
 800087c:	2203      	movs	r2, #3
 800087e:	701a      	strb	r2, [r3, #0]
			c1Fase = 0;
 8000880:	4b91      	ldr	r3, [pc, #580]	; (8000ac8 <Fases_Auto+0x2c4>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
			break;
 8000886:	e022      	b.n	80008ce <Fases_Auto+0xca>
		}
	}
	break;
	case 3:
	{
		HAL_GPIO_WritePin(GPIOA,FASE1_ROJO_Pin,GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088e:	488f      	ldr	r0, [pc, #572]	; (8000acc <Fases_Auto+0x2c8>)
 8000890:	f002 fcea 	bl	8003268 <HAL_GPIO_WritePin>
		if(c1Fase == tiempos[2])
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3302      	adds	r3, #2
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	4b8b      	ldr	r3, [pc, #556]	; (8000ac8 <Fases_Auto+0x2c4>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d113      	bne.n	80008cc <Fases_Auto+0xc8>
		{
			HAL_GPIO_WritePin(GPIOA,FASE1_ROJO_Pin,GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008aa:	4888      	ldr	r0, [pc, #544]	; (8000acc <Fases_Auto+0x2c8>)
 80008ac:	f002 fcdc 	bl	8003268 <HAL_GPIO_WritePin>
			f1Actual = 1;
 80008b0:	4b83      	ldr	r3, [pc, #524]	; (8000ac0 <Fases_Auto+0x2bc>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
			c1Fase = 0;
 80008b6:	4b84      	ldr	r3, [pc, #528]	; (8000ac8 <Fases_Auto+0x2c4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
			break;
 80008bc:	e007      	b.n	80008ce <Fases_Auto+0xca>
		}
	}
	break;
	default:
	{
		Error_Handler();
 80008be:	f000 fdd5 	bl	800146c <Error_Handler>
	}
	break;
 80008c2:	e004      	b.n	80008ce <Fases_Auto+0xca>
	break;
 80008c4:	bf00      	nop
 80008c6:	e002      	b.n	80008ce <Fases_Auto+0xca>
	break;
 80008c8:	bf00      	nop
 80008ca:	e000      	b.n	80008ce <Fases_Auto+0xca>
	break;
 80008cc:	bf00      	nop
	}
	c1Fase++;
 80008ce:	4b7e      	ldr	r3, [pc, #504]	; (8000ac8 <Fases_Auto+0x2c4>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3301      	adds	r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b7b      	ldr	r3, [pc, #492]	; (8000ac8 <Fases_Auto+0x2c4>)
 80008da:	701a      	strb	r2, [r3, #0]

/********************************* FASE 2*************************************/
	switch(f2Actual)
 80008dc:	4b7c      	ldr	r3, [pc, #496]	; (8000ad0 <Fases_Auto+0x2cc>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d01e      	beq.n	8000924 <Fases_Auto+0x120>
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d037      	beq.n	800095a <Fases_Auto+0x156>
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d150      	bne.n	8000990 <Fases_Auto+0x18c>
	{
	case 1:
	{
		HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin,GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f4:	4875      	ldr	r0, [pc, #468]	; (8000acc <Fases_Auto+0x2c8>)
 80008f6:	f002 fcb7 	bl	8003268 <HAL_GPIO_WritePin>
		if(c2Fase == tiempos[3])
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3303      	adds	r3, #3
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	4b74      	ldr	r3, [pc, #464]	; (8000ad4 <Fases_Auto+0x2d0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	429a      	cmp	r2, r3
 8000908:	d145      	bne.n	8000996 <Fases_Auto+0x192>
		{
			HAL_GPIO_WritePin(GPIOA,FASE2_VERDE_Pin,GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000910:	486e      	ldr	r0, [pc, #440]	; (8000acc <Fases_Auto+0x2c8>)
 8000912:	f002 fca9 	bl	8003268 <HAL_GPIO_WritePin>
			f2Actual = 2;
 8000916:	4b6e      	ldr	r3, [pc, #440]	; (8000ad0 <Fases_Auto+0x2cc>)
 8000918:	2202      	movs	r2, #2
 800091a:	701a      	strb	r2, [r3, #0]
			c2Fase = 0;
 800091c:	4b6d      	ldr	r3, [pc, #436]	; (8000ad4 <Fases_Auto+0x2d0>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
			break;
 8000922:	e03d      	b.n	80009a0 <Fases_Auto+0x19c>
		}
	}
	break;
	case 2:
	{
		HAL_GPIO_WritePin(GPIOA,FASE2_AMA_Pin,GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800092a:	4868      	ldr	r0, [pc, #416]	; (8000acc <Fases_Auto+0x2c8>)
 800092c:	f002 fc9c 	bl	8003268 <HAL_GPIO_WritePin>
		if(c2Fase == tiempos[4])
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3304      	adds	r3, #4
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	4b67      	ldr	r3, [pc, #412]	; (8000ad4 <Fases_Auto+0x2d0>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	429a      	cmp	r2, r3
 800093e:	d12c      	bne.n	800099a <Fases_Auto+0x196>
		{
			HAL_GPIO_WritePin(GPIOA,FASE2_AMA_Pin,GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000946:	4861      	ldr	r0, [pc, #388]	; (8000acc <Fases_Auto+0x2c8>)
 8000948:	f002 fc8e 	bl	8003268 <HAL_GPIO_WritePin>
			f2Actual = 3;
 800094c:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <Fases_Auto+0x2cc>)
 800094e:	2203      	movs	r2, #3
 8000950:	701a      	strb	r2, [r3, #0]
			c2Fase = 0;
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <Fases_Auto+0x2d0>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
			break;
 8000958:	e022      	b.n	80009a0 <Fases_Auto+0x19c>
		}
	}
	break;
	case 3:
	{
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000960:	485a      	ldr	r0, [pc, #360]	; (8000acc <Fases_Auto+0x2c8>)
 8000962:	f002 fc81 	bl	8003268 <HAL_GPIO_WritePin>
		if(c2Fase == tiempos[5])
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3305      	adds	r3, #5
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	4b59      	ldr	r3, [pc, #356]	; (8000ad4 <Fases_Auto+0x2d0>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	429a      	cmp	r2, r3
 8000974:	d113      	bne.n	800099e <Fases_Auto+0x19a>
		{
			HAL_GPIO_WritePin(GPIOA,FASE2_ROJO_Pin,GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097c:	4853      	ldr	r0, [pc, #332]	; (8000acc <Fases_Auto+0x2c8>)
 800097e:	f002 fc73 	bl	8003268 <HAL_GPIO_WritePin>
			f2Actual = 1;
 8000982:	4b53      	ldr	r3, [pc, #332]	; (8000ad0 <Fases_Auto+0x2cc>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
			c2Fase = 0;
 8000988:	4b52      	ldr	r3, [pc, #328]	; (8000ad4 <Fases_Auto+0x2d0>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
			break;
 800098e:	e007      	b.n	80009a0 <Fases_Auto+0x19c>
		}
	}
	break;
	default:
	{
		Error_Handler();
 8000990:	f000 fd6c 	bl	800146c <Error_Handler>
	}
	break;
 8000994:	e004      	b.n	80009a0 <Fases_Auto+0x19c>
	break;
 8000996:	bf00      	nop
 8000998:	e002      	b.n	80009a0 <Fases_Auto+0x19c>
	break;
 800099a:	bf00      	nop
 800099c:	e000      	b.n	80009a0 <Fases_Auto+0x19c>
	break;
 800099e:	bf00      	nop
	}
	c2Fase++;
 80009a0:	4b4c      	ldr	r3, [pc, #304]	; (8000ad4 <Fases_Auto+0x2d0>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	3301      	adds	r3, #1
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b4a      	ldr	r3, [pc, #296]	; (8000ad4 <Fases_Auto+0x2d0>)
 80009ac:	701a      	strb	r2, [r3, #0]

/********************************* FASE 3*************************************/
	switch(f3Actual)
 80009ae:	4b4a      	ldr	r3, [pc, #296]	; (8000ad8 <Fases_Auto+0x2d4>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d01c      	beq.n	80009f2 <Fases_Auto+0x1ee>
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d035      	beq.n	8000a28 <Fases_Auto+0x224>
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d14e      	bne.n	8000a5e <Fases_Auto+0x25a>
	{
	case 1:
	{
		HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin,GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2104      	movs	r1, #4
 80009c4:	483f      	ldr	r0, [pc, #252]	; (8000ac4 <Fases_Auto+0x2c0>)
 80009c6:	f002 fc4f 	bl	8003268 <HAL_GPIO_WritePin>
		if(c3Fase == tiempos[6])
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3306      	adds	r3, #6
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	4b42      	ldr	r3, [pc, #264]	; (8000adc <Fases_Auto+0x2d8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d144      	bne.n	8000a64 <Fases_Auto+0x260>
		{
			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin,GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	2104      	movs	r1, #4
 80009de:	4839      	ldr	r0, [pc, #228]	; (8000ac4 <Fases_Auto+0x2c0>)
 80009e0:	f002 fc42 	bl	8003268 <HAL_GPIO_WritePin>
			f3Actual = 2;
 80009e4:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <Fases_Auto+0x2d4>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	701a      	strb	r2, [r3, #0]
			c3Fase = 0;
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <Fases_Auto+0x2d8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
			break;
 80009f0:	e03d      	b.n	8000a6e <Fases_Auto+0x26a>
		}
	}
	break;
	case 2:
	{
		HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin,GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <Fases_Auto+0x2c0>)
 80009fa:	f002 fc35 	bl	8003268 <HAL_GPIO_WritePin>
		if(c3Fase == tiempos[7])
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3307      	adds	r3, #7
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4b35      	ldr	r3, [pc, #212]	; (8000adc <Fases_Auto+0x2d8>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d12c      	bne.n	8000a68 <Fases_Auto+0x264>
		{
			HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin,GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a14:	482b      	ldr	r0, [pc, #172]	; (8000ac4 <Fases_Auto+0x2c0>)
 8000a16:	f002 fc27 	bl	8003268 <HAL_GPIO_WritePin>
			f3Actual = 3;
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <Fases_Auto+0x2d4>)
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	701a      	strb	r2, [r3, #0]
			c3Fase = 0;
 8000a20:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <Fases_Auto+0x2d8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
			break;
 8000a26:	e022      	b.n	8000a6e <Fases_Auto+0x26a>
		}
	}
	break;
	case 3:
	{
		HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a2e:	4827      	ldr	r0, [pc, #156]	; (8000acc <Fases_Auto+0x2c8>)
 8000a30:	f002 fc1a 	bl	8003268 <HAL_GPIO_WritePin>
		if(c3Fase == tiempos[8])
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3308      	adds	r3, #8
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <Fases_Auto+0x2d8>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d113      	bne.n	8000a6c <Fases_Auto+0x268>
		{
			HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <Fases_Auto+0x2c8>)
 8000a4c:	f002 fc0c 	bl	8003268 <HAL_GPIO_WritePin>
			f3Actual = 1;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <Fases_Auto+0x2d4>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
			c3Fase = 0;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <Fases_Auto+0x2d8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
			break;
 8000a5c:	e007      	b.n	8000a6e <Fases_Auto+0x26a>
		}
	}
	break;
	default:
	{
		Error_Handler();
 8000a5e:	f000 fd05 	bl	800146c <Error_Handler>
	}
	break;
 8000a62:	e004      	b.n	8000a6e <Fases_Auto+0x26a>
	break;
 8000a64:	bf00      	nop
 8000a66:	e002      	b.n	8000a6e <Fases_Auto+0x26a>
	break;
 8000a68:	bf00      	nop
 8000a6a:	e000      	b.n	8000a6e <Fases_Auto+0x26a>
	break;
 8000a6c:	bf00      	nop
	}
	c3Fase++;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <Fases_Auto+0x2d8>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	3301      	adds	r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <Fases_Auto+0x2d8>)
 8000a7a:	701a      	strb	r2, [r3, #0]

/********************************* FASE 4*************************************/
	switch(f4Actual)
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <Fases_Auto+0x2dc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d030      	beq.n	8000ae8 <Fases_Auto+0x2e4>
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d047      	beq.n	8000b1a <Fases_Auto+0x316>
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d15e      	bne.n	8000b4c <Fases_Auto+0x348>
	{
	case 1:
	{
		HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin,GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2108      	movs	r1, #8
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <Fases_Auto+0x2c0>)
 8000a94:	f002 fbe8 	bl	8003268 <HAL_GPIO_WritePin>
		if(c4Fase == tiempos[9])
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3309      	adds	r3, #9
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <Fases_Auto+0x2e0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d154      	bne.n	8000b52 <Fases_Auto+0x34e>
		{
			HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin,GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2108      	movs	r1, #8
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <Fases_Auto+0x2c0>)
 8000aae:	f002 fbdb 	bl	8003268 <HAL_GPIO_WritePin>
			f4Actual = 2;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <Fases_Auto+0x2dc>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	701a      	strb	r2, [r3, #0]
			c4Fase = 0;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <Fases_Auto+0x2e0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
			break;
 8000abe:	e04d      	b.n	8000b5c <Fases_Auto+0x358>
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	40010c00 	.word	0x40010c00
 8000ac8:	20000042 	.word	0x20000042
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	20000001 	.word	0x20000001
 8000ad4:	20000043 	.word	0x20000043
 8000ad8:	20000002 	.word	0x20000002
 8000adc:	20000044 	.word	0x20000044
 8000ae0:	20000003 	.word	0x20000003
 8000ae4:	20000045 	.word	0x20000045
		}
	}
	break;
	case 2:
	{
		HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin,GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2110      	movs	r1, #16
 8000aec:	4889      	ldr	r0, [pc, #548]	; (8000d14 <Fases_Auto+0x510>)
 8000aee:	f002 fbbb 	bl	8003268 <HAL_GPIO_WritePin>
		if(c4Fase == tiempos[10])
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	330a      	adds	r3, #10
 8000af6:	781a      	ldrb	r2, [r3, #0]
 8000af8:	4b87      	ldr	r3, [pc, #540]	; (8000d18 <Fases_Auto+0x514>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d129      	bne.n	8000b56 <Fases_Auto+0x352>
		{
			HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin,GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2110      	movs	r1, #16
 8000b06:	4883      	ldr	r0, [pc, #524]	; (8000d14 <Fases_Auto+0x510>)
 8000b08:	f002 fbae 	bl	8003268 <HAL_GPIO_WritePin>
			f4Actual = 3;
 8000b0c:	4b83      	ldr	r3, [pc, #524]	; (8000d1c <Fases_Auto+0x518>)
 8000b0e:	2203      	movs	r2, #3
 8000b10:	701a      	strb	r2, [r3, #0]
			c4Fase = 0;
 8000b12:	4b81      	ldr	r3, [pc, #516]	; (8000d18 <Fases_Auto+0x514>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
			break;
 8000b18:	e020      	b.n	8000b5c <Fases_Auto+0x358>
		}
	}
	break;
	case 3:
	{
		HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin,GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	487d      	ldr	r0, [pc, #500]	; (8000d14 <Fases_Auto+0x510>)
 8000b20:	f002 fba2 	bl	8003268 <HAL_GPIO_WritePin>
		if(c4Fase == tiempos[11])
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	330b      	adds	r3, #11
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <Fases_Auto+0x514>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d112      	bne.n	8000b5a <Fases_Auto+0x356>
		{
			HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin,GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2120      	movs	r1, #32
 8000b38:	4876      	ldr	r0, [pc, #472]	; (8000d14 <Fases_Auto+0x510>)
 8000b3a:	f002 fb95 	bl	8003268 <HAL_GPIO_WritePin>
			f4Actual = 1;
 8000b3e:	4b77      	ldr	r3, [pc, #476]	; (8000d1c <Fases_Auto+0x518>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
			c4Fase = 0;
 8000b44:	4b74      	ldr	r3, [pc, #464]	; (8000d18 <Fases_Auto+0x514>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
			break;
 8000b4a:	e007      	b.n	8000b5c <Fases_Auto+0x358>
		}
	}
	break;
	default:
	{
		Error_Handler();
 8000b4c:	f000 fc8e 	bl	800146c <Error_Handler>
	}
	break;
 8000b50:	e004      	b.n	8000b5c <Fases_Auto+0x358>
	break;
 8000b52:	bf00      	nop
 8000b54:	e002      	b.n	8000b5c <Fases_Auto+0x358>
	break;
 8000b56:	bf00      	nop
 8000b58:	e000      	b.n	8000b5c <Fases_Auto+0x358>
	break;
 8000b5a:	bf00      	nop
	}
	c4Fase++;
 8000b5c:	4b6e      	ldr	r3, [pc, #440]	; (8000d18 <Fases_Auto+0x514>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	3301      	adds	r3, #1
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b6c      	ldr	r3, [pc, #432]	; (8000d18 <Fases_Auto+0x514>)
 8000b68:	701a      	strb	r2, [r3, #0]

/********************************* FASE 5*************************************/
	switch(f5Actual)
 8000b6a:	4b6d      	ldr	r3, [pc, #436]	; (8000d20 <Fases_Auto+0x51c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d01e      	beq.n	8000bb2 <Fases_Auto+0x3ae>
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d037      	beq.n	8000be8 <Fases_Auto+0x3e4>
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d150      	bne.n	8000c1e <Fases_Auto+0x41a>
	{
	case 1:
	{
		HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin,GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b82:	4864      	ldr	r0, [pc, #400]	; (8000d14 <Fases_Auto+0x510>)
 8000b84:	f002 fb70 	bl	8003268 <HAL_GPIO_WritePin>
		if(c5Fase == tiempos[12])
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	330c      	adds	r3, #12
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	4b65      	ldr	r3, [pc, #404]	; (8000d24 <Fases_Auto+0x520>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d145      	bne.n	8000c24 <Fases_Auto+0x420>
		{
			HAL_GPIO_WritePin(GPIOB,FASE5_VERDE_Pin,GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9e:	485d      	ldr	r0, [pc, #372]	; (8000d14 <Fases_Auto+0x510>)
 8000ba0:	f002 fb62 	bl	8003268 <HAL_GPIO_WritePin>
			f5Actual = 2;
 8000ba4:	4b5e      	ldr	r3, [pc, #376]	; (8000d20 <Fases_Auto+0x51c>)
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	701a      	strb	r2, [r3, #0]
			c5Fase = 0;
 8000baa:	4b5e      	ldr	r3, [pc, #376]	; (8000d24 <Fases_Auto+0x520>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
			break;
 8000bb0:	e03d      	b.n	8000c2e <Fases_Auto+0x42a>
		}
	}
	break;
	case 2:
	{
		HAL_GPIO_WritePin(GPIOB,FASE5_AMA_Pin,GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb8:	4856      	ldr	r0, [pc, #344]	; (8000d14 <Fases_Auto+0x510>)
 8000bba:	f002 fb55 	bl	8003268 <HAL_GPIO_WritePin>
		if(c5Fase == tiempos[13])
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	330d      	adds	r3, #13
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	4b57      	ldr	r3, [pc, #348]	; (8000d24 <Fases_Auto+0x520>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d12c      	bne.n	8000c28 <Fases_Auto+0x424>
		{
			HAL_GPIO_WritePin(GPIOB,FASE5_AMA_Pin,GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd4:	484f      	ldr	r0, [pc, #316]	; (8000d14 <Fases_Auto+0x510>)
 8000bd6:	f002 fb47 	bl	8003268 <HAL_GPIO_WritePin>
			f5Actual = 3;
 8000bda:	4b51      	ldr	r3, [pc, #324]	; (8000d20 <Fases_Auto+0x51c>)
 8000bdc:	2203      	movs	r2, #3
 8000bde:	701a      	strb	r2, [r3, #0]
			c5Fase = 0;
 8000be0:	4b50      	ldr	r3, [pc, #320]	; (8000d24 <Fases_Auto+0x520>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
			break;
 8000be6:	e022      	b.n	8000c2e <Fases_Auto+0x42a>
		}
	}
	break;
	case 3:
	{
		HAL_GPIO_WritePin(GPIOB,FASE5_ROJO_Pin,GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bee:	4849      	ldr	r0, [pc, #292]	; (8000d14 <Fases_Auto+0x510>)
 8000bf0:	f002 fb3a 	bl	8003268 <HAL_GPIO_WritePin>
		if(c5Fase == tiempos[14])
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	330e      	adds	r3, #14
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	; (8000d24 <Fases_Auto+0x520>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d113      	bne.n	8000c2c <Fases_Auto+0x428>
		{
			HAL_GPIO_WritePin(GPIOB,FASE5_ROJO_Pin,GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0a:	4842      	ldr	r0, [pc, #264]	; (8000d14 <Fases_Auto+0x510>)
 8000c0c:	f002 fb2c 	bl	8003268 <HAL_GPIO_WritePin>
			f5Actual = 1;
 8000c10:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <Fases_Auto+0x51c>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
			c5Fase = 0;
 8000c16:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <Fases_Auto+0x520>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
			break;
 8000c1c:	e007      	b.n	8000c2e <Fases_Auto+0x42a>
		}
	}
	break;
	default:
	{
		Error_Handler();
 8000c1e:	f000 fc25 	bl	800146c <Error_Handler>
	}
	break;
 8000c22:	e004      	b.n	8000c2e <Fases_Auto+0x42a>
	break;
 8000c24:	bf00      	nop
 8000c26:	e002      	b.n	8000c2e <Fases_Auto+0x42a>
	break;
 8000c28:	bf00      	nop
 8000c2a:	e000      	b.n	8000c2e <Fases_Auto+0x42a>
	break;
 8000c2c:	bf00      	nop
	}
	c5Fase++;
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <Fases_Auto+0x520>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	3301      	adds	r3, #1
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <Fases_Auto+0x520>)
 8000c3a:	701a      	strb	r2, [r3, #0]

/********************************* FASE 6*************************************/
	switch(f6Actual)
 8000c3c:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <Fases_Auto+0x524>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d01e      	beq.n	8000c84 <Fases_Auto+0x480>
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d037      	beq.n	8000cba <Fases_Auto+0x4b6>
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d14e      	bne.n	8000cec <Fases_Auto+0x4e8>
	{
	case 1:
	{
		HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin,GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c54:	482f      	ldr	r0, [pc, #188]	; (8000d14 <Fases_Auto+0x510>)
 8000c56:	f002 fb07 	bl	8003268 <HAL_GPIO_WritePin>
		if(c6Fase == tiempos[15])
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	330f      	adds	r3, #15
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <Fases_Auto+0x528>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d143      	bne.n	8000cf2 <Fases_Auto+0x4ee>
		{
			HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin,GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c70:	4828      	ldr	r0, [pc, #160]	; (8000d14 <Fases_Auto+0x510>)
 8000c72:	f002 faf9 	bl	8003268 <HAL_GPIO_WritePin>
			f6Actual = 2;
 8000c76:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <Fases_Auto+0x524>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	701a      	strb	r2, [r3, #0]
			c6Fase = 0;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <Fases_Auto+0x528>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
			break;
 8000c82:	e03b      	b.n	8000cfc <Fases_Auto+0x4f8>
		}
	}
	break;
	case 2:
	{
		HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin,GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8a:	4822      	ldr	r0, [pc, #136]	; (8000d14 <Fases_Auto+0x510>)
 8000c8c:	f002 faec 	bl	8003268 <HAL_GPIO_WritePin>
		if(c6Fase == tiempos[16])
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3310      	adds	r3, #16
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <Fases_Auto+0x528>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d12a      	bne.n	8000cf6 <Fases_Auto+0x4f2>
		{
			HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin,GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca6:	481b      	ldr	r0, [pc, #108]	; (8000d14 <Fases_Auto+0x510>)
 8000ca8:	f002 fade 	bl	8003268 <HAL_GPIO_WritePin>
			f6Actual = 3;
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <Fases_Auto+0x524>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	701a      	strb	r2, [r3, #0]
			c6Fase = 0;
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <Fases_Auto+0x528>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			break;
 8000cb8:	e020      	b.n	8000cfc <Fases_Auto+0x4f8>
		}
	}
	break;
	case 3:
	{
		HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	481c      	ldr	r0, [pc, #112]	; (8000d30 <Fases_Auto+0x52c>)
 8000cc0:	f002 fad2 	bl	8003268 <HAL_GPIO_WritePin>
		if(c6Fase == tiempos[17])
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3311      	adds	r3, #17
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <Fases_Auto+0x528>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d112      	bne.n	8000cfa <Fases_Auto+0x4f6>
		{
			HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	4815      	ldr	r0, [pc, #84]	; (8000d30 <Fases_Auto+0x52c>)
 8000cda:	f002 fac5 	bl	8003268 <HAL_GPIO_WritePin>
			f6Actual = 1;
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <Fases_Auto+0x524>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
			c6Fase = 0;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <Fases_Auto+0x528>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
			break;
 8000cea:	e007      	b.n	8000cfc <Fases_Auto+0x4f8>
		}
	}
	break;
	default:
	{
		Error_Handler();
 8000cec:	f000 fbbe 	bl	800146c <Error_Handler>
	}
	break;
 8000cf0:	e004      	b.n	8000cfc <Fases_Auto+0x4f8>
	break;
 8000cf2:	bf00      	nop
 8000cf4:	e002      	b.n	8000cfc <Fases_Auto+0x4f8>
	break;
 8000cf6:	bf00      	nop
 8000cf8:	e000      	b.n	8000cfc <Fases_Auto+0x4f8>
	break;
 8000cfa:	bf00      	nop
	}
	c6Fase++;
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <Fases_Auto+0x528>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	3301      	adds	r3, #1
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <Fases_Auto+0x528>)
 8000d08:	701a      	strb	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40010c00 	.word	0x40010c00
 8000d18:	20000045 	.word	0x20000045
 8000d1c:	20000003 	.word	0x20000003
 8000d20:	20000004 	.word	0x20000004
 8000d24:	20000046 	.word	0x20000046
 8000d28:	20000005 	.word	0x20000005
 8000d2c:	20000047 	.word	0x20000047
 8000d30:	40010800 	.word	0x40010800

08000d34 <Corrige_Med16>:

}


void Corrige_Med16(uint32_t *arreglo, uint32_t tamano)/* Función para        */
 {									/* eliminar los 16 bits altos de la      */
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	for(uint8_t indice = 0; indice <= BUFFER_ADC; indice++)/* medición del   */
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e00d      	b.n	8000d60 <Corrige_Med16+0x2c>
	{								/* ADC. 								 */
		arreglo[indice] &= 0x0000ffff;/* Borra los 16 bits más altos del
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	6819      	ldr	r1, [r3, #0]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	b28a      	uxth	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
	for(uint8_t indice = 0; indice <= BUFFER_ADC; indice++)/* medición del   */
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2b0d      	cmp	r3, #13
 8000d64:	d9ee      	bls.n	8000d44 <Corrige_Med16+0x10>
									 * registro ya que tienen el dato
									 * repetido.							 */
	}
 }
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <Valor_Max>:

uint16_t Valor_Max(uint32_t *arreglo, uint8_t tamano)/* Función para calcular el valor máximo*/
{									 /* de cualquier arreglo.                */
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
	uint16_t max = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	81fb      	strh	r3, [r7, #14]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	737b      	strb	r3, [r7, #13]
 8000d84:	e010      	b.n	8000da8 <Valor_Max+0x38>
	{
		if(max < arreglo[cont])
 8000d86:	89fa      	ldrh	r2, [r7, #14]
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	440b      	add	r3, r1
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d205      	bcs.n	8000da2 <Valor_Max+0x32>
		{
			max = arreglo[cont];
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	81fb      	strh	r3, [r7, #14]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000da2:	7b7b      	ldrb	r3, [r7, #13]
 8000da4:	3301      	adds	r3, #1
 8000da6:	737b      	strb	r3, [r7, #13]
 8000da8:	7b7a      	ldrb	r2, [r7, #13]
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d3ea      	bcc.n	8000d86 <Valor_Max+0x16>
		}
	}
	return max;
 8000db0:	89fb      	ldrh	r3, [r7, #14]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <Valor_Min>:

uint32_t Valor_Min(uint32_t *arreglo, uint8_t tamano)/* Función para calcular*/
{									 /* el valor mínimo de cualquier arreglo.*/
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	uint32_t min = arreglo[0];
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	72fb      	strb	r3, [r7, #11]
 8000dd2:	e010      	b.n	8000df6 <Valor_Min+0x3a>
	{
		if( arreglo[cont] < min)
 8000dd4:	7afb      	ldrb	r3, [r7, #11]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d905      	bls.n	8000df0 <Valor_Min+0x34>
		{
			min = arreglo[cont];
 8000de4:	7afb      	ldrb	r3, [r7, #11]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	60fb      	str	r3, [r7, #12]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	3301      	adds	r3, #1
 8000df4:	72fb      	strb	r3, [r7, #11]
 8000df6:	7afa      	ldrb	r2, [r7, #11]
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d3ea      	bcc.n	8000dd4 <Valor_Min+0x18>
		}
	}
	return min;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <Valor_Prom>:

uint32_t Valor_Prom(uint32_t *arreglo, uint8_t tamano)/* Función para		 */
{									/* calcular el valor promedio de cualquier arreglo.		 */
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	70fb      	strb	r3, [r7, #3]
	uint32_t promedio = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	72fb      	strb	r3, [r7, #11]
 8000e1e:	e00a      	b.n	8000e36 <Valor_Prom+0x2c>
	{
		promedio += arreglo[cont];
 8000e20:	7afb      	ldrb	r3, [r7, #11]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
	for(uint8_t cont = 0; cont < tamano; cont++)
 8000e30:	7afb      	ldrb	r3, [r7, #11]
 8000e32:	3301      	adds	r3, #1
 8000e34:	72fb      	strb	r3, [r7, #11]
 8000e36:	7afa      	ldrb	r2, [r7, #11]
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3f0      	bcc.n	8000e20 <Valor_Prom+0x16>
	}
	return promedio/tamano;
 8000e3e:	78fb      	ldrb	r3, [r7, #3]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <Verif_Med>:

uint32_t Verif_Med(uint32_t *arreglo, uint8_t tamano)/* Función para         */
{   								/* verificar si la señal medida está     */
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
									/* dentro de los parámetros correctos.   */
	if ((Valor_Max(arreglo, tamano)) > VIMAX ||
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff85 	bl	8000d70 <Valor_Max>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f640 03b6 	movw	r3, #2230	; 0x8b6
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d82b      	bhi.n	8000eca <Verif_Med+0x7a>
		((Valor_Min(arreglo, tamano)) < VIMIN) ||
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa0 	bl	8000dbc <Valor_Min>
 8000e7c:	4602      	mov	r2, r0
	if ((Valor_Max(arreglo, tamano)) > VIMAX ||
 8000e7e:	f240 7343 	movw	r3, #1859	; 0x743
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d921      	bls.n	8000eca <Verif_Med+0x7a>
		((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffbd 	bl	8000e0a <Valor_Prom>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fa9e 	bl	80003d4 <__aeabi_ui2d>
		((Valor_Min(arreglo, tamano)) < VIMIN) ||
 8000e98:	a30f      	add	r3, pc, #60	; (adr r3, 8000ed8 <Verif_Med+0x88>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff fb91 	bl	80005c4 <__aeabi_dcmpgt>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d110      	bne.n	8000eca <Verif_Med+0x7a>
		((Valor_Prom(arreglo, tamano)) < (VIMED*0.9)))
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ffac 	bl	8000e0a <Valor_Prom>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fa8d 	bl	80003d4 <__aeabi_ui2d>
		((Valor_Prom(arreglo, tamano)) > (VIMED*1.1)) ||
 8000eba:	a309      	add	r3, pc, #36	; (adr r3, 8000ee0 <Verif_Med+0x90>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	f7ff fb62 	bl	8000588 <__aeabi_dcmplt>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <Verif_Med+0x7e>
	{
		return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <Verif_Med+0x80>
	}
	else
	{
		return HAL_OK;
 8000ece:	2300      	movs	r3, #0
	}
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	9999999a 	.word	0x9999999a
 8000edc:	40a19999 	.word	0x40a19999
 8000ee0:	cccccccd 	.word	0xcccccccd
 8000ee4:	409ccccc 	.word	0x409ccccc

08000ee8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <MX_GPIO_Init+0x140>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a49      	ldr	r2, [pc, #292]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b47      	ldr	r3, [pc, #284]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f14:	4b44      	ldr	r3, [pc, #272]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a43      	ldr	r2, [pc, #268]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f1a:	f043 0320 	orr.w	r3, r3, #32
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b41      	ldr	r3, [pc, #260]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0320 	and.w	r3, r3, #32
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a3d      	ldr	r2, [pc, #244]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a37      	ldr	r2, [pc, #220]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b35      	ldr	r3, [pc, #212]	; (8001028 <MX_GPIO_Init+0x140>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f649 7180 	movw	r1, #40832	; 0x9f80
 8000f62:	4832      	ldr	r0, [pc, #200]	; (800102c <MX_GPIO_Init+0x144>)
 8000f64:	f002 f980 	bl	8003268 <HAL_GPIO_WritePin>
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin|FASE3_ROJO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f24f 713f 	movw	r1, #63295	; 0xf73f
 8000f6e:	4830      	ldr	r0, [pc, #192]	; (8001030 <MX_GPIO_Init+0x148>)
 8000f70:	f002 f97a 	bl	8003268 <HAL_GPIO_WritePin>
                          |FASE3_AMA_Pin|FASE6_VERDE_Pin|FASE6_AMA_Pin|FASE1_VERDE_Pin 
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	482b      	ldr	r0, [pc, #172]	; (8001034 <MX_GPIO_Init+0x14c>)
 8000f86:	f001 ff47 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	4827      	ldr	r0, [pc, #156]	; (8001038 <MX_GPIO_Init+0x150>)
 8000f9a:	f001 ff3d 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	481f      	ldr	r0, [pc, #124]	; (800102c <MX_GPIO_Init+0x144>)
 8000fae:	f001 ff33 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000fb2:	f649 7380 	movw	r3, #40832	; 0x9f80
 8000fb6:	617b      	str	r3, [r7, #20]
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin|FASE3_ROJO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4818      	ldr	r0, [pc, #96]	; (800102c <MX_GPIO_Init+0x144>)
 8000fcc:	f001 ff24 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 8000fd0:	f24f 733f 	movw	r3, #63295	; 0xf73f
 8000fd4:	617b      	str	r3, [r7, #20]
                          |FASE3_AMA_Pin|FASE6_VERDE_Pin|FASE6_AMA_Pin|FASE1_VERDE_Pin 
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4811      	ldr	r0, [pc, #68]	; (8001030 <MX_GPIO_Init+0x148>)
 8000fea:	f001 ff15 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <MX_GPIO_Init+0x148>)
 8001000:	f001 ff0a 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <MX_GPIO_Init+0x154>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <MX_GPIO_Init+0x154>)
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	6053      	str	r3, [r2, #4]

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021000 	.word	0x40021000
 800102c:	40010800 	.word	0x40010800
 8001030:	40010c00 	.word	0x40010c00
 8001034:	40011000 	.word	0x40011000
 8001038:	40011400 	.word	0x40011400
 800103c:	40010000 	.word	0x40010000

08001040 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_I2C1_Init+0x50>)
 8001046:	4a13      	ldr	r2, [pc, #76]	; (8001094 <MX_I2C1_Init+0x54>)
 8001048:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_I2C1_Init+0x50>)
 800104c:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_I2C1_Init+0x58>)
 800104e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_I2C1_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_I2C1_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_I2C1_Init+0x50>)
 800105e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001062:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_I2C1_Init+0x50>)
 800107e:	f002 f94b 	bl	8003318 <HAL_I2C_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001088:	f000 f9f0 	bl	800146c <Error_Handler>
  }

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000c0 	.word	0x200000c0
 8001094:	40005400 	.word	0x40005400
 8001098:	000186a0 	.word	0x000186a0

0800109c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <HAL_I2C_MspInit+0x94>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d135      	bne.n	8001128 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_I2C_MspInit+0x98>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_I2C_MspInit+0x98>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_I2C_MspInit+0x98>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d4:	23c0      	movs	r3, #192	; 0xc0
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d8:	2312      	movs	r3, #18
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	4813      	ldr	r0, [pc, #76]	; (8001138 <HAL_I2C_MspInit+0x9c>)
 80010ec:	f001 fe94 	bl	8002e18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_I2C_MspInit+0x98>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_I2C_MspInit+0x98>)
 80010f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fa:	61d3      	str	r3, [r2, #28]
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_I2C_MspInit+0x98>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	201f      	movs	r0, #31
 800110e:	f001 fb0f 	bl	8002730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001112:	201f      	movs	r0, #31
 8001114:	f001 fb38 	bl	8002788 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2020      	movs	r0, #32
 800111e:	f001 fb07 	bl	8002730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001122:	2020      	movs	r0, #32
 8001124:	f001 fb30 	bl	8002788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001128:	bf00      	nop
 800112a:	3720      	adds	r7, #32
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40005400 	.word	0x40005400
 8001134:	40021000 	.word	0x40021000
 8001138:	40010c00 	.word	0x40010c00

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	reg_Esp();

	fasesTiempo[0] = 5;				/* Tiempos de encendido de la fase 1, se */
 8001140:	4b32      	ldr	r3, [pc, #200]	; (800120c <main+0xd0>)
 8001142:	2205      	movs	r2, #5
 8001144:	701a      	strb	r2, [r3, #0]
	fasesTiempo[1] = 2;				/* debe eliminar esta asignación y tomar */
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <main+0xd0>)
 8001148:	2202      	movs	r2, #2
 800114a:	705a      	strb	r2, [r3, #1]
	fasesTiempo[2] = 4;				/* los valores del comando recibido una  */
 800114c:	4b2f      	ldr	r3, [pc, #188]	; (800120c <main+0xd0>)
 800114e:	2204      	movs	r2, #4
 8001150:	709a      	strb	r2, [r3, #2]
									/* vez se reciban por I2C.               */

	fasesTiempo[3] = 5;				/* Tiempos de encendido de la fase 2, se */
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <main+0xd0>)
 8001154:	2205      	movs	r2, #5
 8001156:	70da      	strb	r2, [r3, #3]
	fasesTiempo[4] = 2;				/* debe eliminar esta asignación y tomar */
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <main+0xd0>)
 800115a:	2202      	movs	r2, #2
 800115c:	711a      	strb	r2, [r3, #4]
	fasesTiempo[5] = 4;				/* los valores del comando recibido una  */
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <main+0xd0>)
 8001160:	2204      	movs	r2, #4
 8001162:	715a      	strb	r2, [r3, #5]
									/* vez se reciban por I2C.               */

	fasesTiempo[6] = 5;				/* Tiempos de encendido de la fase 3, se */
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <main+0xd0>)
 8001166:	2205      	movs	r2, #5
 8001168:	719a      	strb	r2, [r3, #6]
	fasesTiempo[7] = 2;				/* debe eliminar esta asignación y tomar */
 800116a:	4b28      	ldr	r3, [pc, #160]	; (800120c <main+0xd0>)
 800116c:	2202      	movs	r2, #2
 800116e:	71da      	strb	r2, [r3, #7]
	fasesTiempo[8] = 4;				/* los valores del comando recibido una  */
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <main+0xd0>)
 8001172:	2204      	movs	r2, #4
 8001174:	721a      	strb	r2, [r3, #8]
									/* vez se reciban por I2C.               */

	fasesTiempo[9] = 5;				/* Tiempos de encendido de la fase 4, se */
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <main+0xd0>)
 8001178:	2205      	movs	r2, #5
 800117a:	725a      	strb	r2, [r3, #9]
	fasesTiempo[10] = 2;			/* debe eliminar esta asignación y tomar */
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <main+0xd0>)
 800117e:	2202      	movs	r2, #2
 8001180:	729a      	strb	r2, [r3, #10]
	fasesTiempo[11] = 4;			/* los valores del comando recibido una  */
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <main+0xd0>)
 8001184:	2204      	movs	r2, #4
 8001186:	72da      	strb	r2, [r3, #11]
									/* vez se reciban por I2C.               */

	fasesTiempo[12] = 5;			/* Tiempos de encendido de la fase 5, se */
 8001188:	4b20      	ldr	r3, [pc, #128]	; (800120c <main+0xd0>)
 800118a:	2205      	movs	r2, #5
 800118c:	731a      	strb	r2, [r3, #12]
	fasesTiempo[13] = 2;			/* debe eliminar esta asignación y tomar */
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <main+0xd0>)
 8001190:	2202      	movs	r2, #2
 8001192:	735a      	strb	r2, [r3, #13]
	fasesTiempo[14] = 4;			/* los valores del comando recibido una  */
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <main+0xd0>)
 8001196:	2204      	movs	r2, #4
 8001198:	739a      	strb	r2, [r3, #14]
									/* vez se reciban por I2C.               */

	fasesTiempo[15] = 5;			/* Tiempos de encendido de la fase 6, se */
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <main+0xd0>)
 800119c:	2205      	movs	r2, #5
 800119e:	73da      	strb	r2, [r3, #15]
	fasesTiempo[16] = 2;			/* debe eliminar esta asignación y tomar */
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <main+0xd0>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	741a      	strb	r2, [r3, #16]
	fasesTiempo[17] = 4;			/* los valores del comando recibido una  */
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <main+0xd0>)
 80011a8:	2204      	movs	r2, #4
 80011aa:	745a      	strb	r2, [r3, #17]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ac:	f000 fb2e 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b0:	f000 f838 	bl	8001224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b4:	f7ff fe98 	bl	8000ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b8:	f7ff fb06 	bl	80007c8 <MX_DMA_Init>
  MX_ADC1_Init();
 80011bc:	f7ff fa0c 	bl	80005d8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011c0:	f7ff ff3e 	bl	8001040 <MX_I2C1_Init>
  MX_RTC_Init();
 80011c4:	f000 f968 	bl	8001498 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin | FASE1_AMA_Pin | FASE1_ROJO_Pin |
 80011c8:	2201      	movs	r2, #1
 80011ca:	f649 7180 	movw	r1, #40832	; 0x9f80
 80011ce:	4810      	ldr	r0, [pc, #64]	; (8001210 <main+0xd4>)
 80011d0:	f002 f84a 	bl	8003268 <HAL_GPIO_WritePin>
		  FASE2_VERDE_Pin | FASE2_AMA_Pin | FASE2_ROJO_Pin | FASE3_ROJO_Pin,
		  GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOB,LED_STATUS_Pin | LED_FALLA_Pin | FASE3_VERDE_Pin |
 80011d4:	2201      	movs	r2, #1
 80011d6:	f24f 513f 	movw	r1, #62783	; 0xf53f
 80011da:	480e      	ldr	r0, [pc, #56]	; (8001214 <main+0xd8>)
 80011dc:	f002 f844 	bl	8003268 <HAL_GPIO_WritePin>
		  FASE4_VERDE_Pin | FASE4_AMA_Pin | FASE4_ROJO_Pin | FASE5_VERDE_Pin |
		  FASE5_ROJO_Pin | FASE3_AMA_Pin | FASE6_VERDE_Pin | FASE6_AMA_Pin |
		  FASE1_VERDE_Pin,GPIO_PIN_SET);
  //HAL_I2C_MspInit(&hi2c1);			/* Inicializando el modo I2C.            */
  HAL_RTC_MspInit(&hrtc);			/* Inicializando el RTC.                 */
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <main+0xdc>)
 80011e2:	f000 f9a3 	bl	800152c <HAL_RTC_MspInit>
  HAL_ADC_MspInit(&hadc1);			/* Inicializando el ADC1.                */
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <main+0xe0>)
 80011e8:	f7ff fa7c 	bl	80006e4 <HAL_ADC_MspInit>
//    if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)/*Intenta calibrar el ADC */
//    {									/* y en caso de haber un error de        */
//  	  Error_Handler();				/* calibración, llama a la función de    */
//    }									/* manejo de errores.                    */
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_SEC);/* Se habilita la interrupción */
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <main+0xdc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <main+0xdc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0201 	orr.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);	/* del RTC cada segundo y luego se       */
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <main+0xe4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <main+0xe4>)
 8001202:	f023 0310 	bic.w	r3, r3, #16
 8001206:	6053      	str	r3, [r2, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	e7fe      	b.n	8001208 <main+0xcc>
 800120a:	bf00      	nop
 800120c:	20000030 	.word	0x20000030
 8001210:	40010800 	.word	0x40010800
 8001214:	40010c00 	.word	0x40010c00
 8001218:	20000164 	.word	0x20000164
 800121c:	2000004c 	.word	0x2000004c
 8001220:	40002800 	.word	0x40002800

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	; 0x50
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122e:	2228      	movs	r2, #40	; 0x28
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fdd6 	bl	8006de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001254:	2306      	movs	r3, #6
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001260:	2310      	movs	r3, #16
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001264:	2300      	movs	r3, #0
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126c:	4618      	mov	r0, r3
 800126e:	f003 fdd5 	bl	8004e1c <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001278:	f000 f8f8 	bl	800146c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	230f      	movs	r3, #15
 800127e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800128c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001290:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f004 f92f 	bl	80054fc <HAL_RCC_ClockConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012a4:	f000 f8e2 	bl	800146c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80012a8:	2303      	movs	r3, #3
 80012aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80012b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fb60 	bl	8005980 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012c6:	f000 f8d1 	bl	800146c <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3750      	adds	r7, #80	; 0x50
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_RTCEx_RTCEventCallback>:
//	_FAULTMASK = __get_FAULTMASK();
//	_ISPR0 = __get_IPSR();
//}

void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)/* Cada vez que hay  */
{									/* una interrupción por evento de segundo*/
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	HAL_RTC_WaitForSynchro(hrtc);	/* lee la hora y la fecha.               */
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f005 fa7e 	bl	80067de <HAL_RTC_WaitForSynchro>
	HAL_RTC_GetTime(hrtc,&horaLeida, RTC_FORMAT_BCD);
 80012e2:	2201      	movs	r2, #1
 80012e4:	490e      	ldr	r1, [pc, #56]	; (8001320 <HAL_RTCEx_RTCEventCallback+0x4c>)
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f004 fed6 	bl	8006098 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc,&fechaLeida, RTC_FORMAT_BCD);
 80012ec:	2201      	movs	r2, #1
 80012ee:	490d      	ldr	r1, [pc, #52]	; (8001324 <HAL_RTCEx_RTCEventCallback+0x50>)
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f005 f8d5 	bl	80064a0 <HAL_RTC_GetDate>

	//HAL_ADC_Stop_DMA(&hadc1);		/* Se asegura que el ADC no esté midiendo*/
									/* los sensores antes de hacer un cambio */
									/* de estados de fase.					 */
	Fases_Auto(fasesTiempo);		/* Manejo de fases en automático, usará  */
 80012f6:	480c      	ldr	r0, [pc, #48]	; (8001328 <HAL_RTCEx_RTCEventCallback+0x54>)
 80012f8:	f7ff fa84 	bl	8000804 <Fases_Auto>
									/* el tiempo enviado por mensaje para    */
									/* iniciar el manejo de las fases.       */
  	if(HAL_ADC_Start_DMA(&hadc1,sensorLeido,2*BUFFER_ADC) != HAL_OK)
 80012fc:	221a      	movs	r2, #26
 80012fe:	490b      	ldr	r1, [pc, #44]	; (800132c <HAL_RTCEx_RTCEventCallback+0x58>)
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <HAL_RTCEx_RTCEventCallback+0x5c>)
 8001302:	f000 fc71 	bl	8001be8 <HAL_ADC_Start_DMA>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_RTCEx_RTCEventCallback+0x3c>
  	{								/* Se inicia la conversión de los sensores*/
  		Error_Handler();	  		/* por DMA para poder almacenar los       */
 800130c:	f000 f8ae 	bl	800146c <Error_Handler>
  	}						 		/* valores convertidos. La cantidad de    */
	iniciaDMA = 1;					/* veces que se van a enviar datos es     */
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_RTCEx_RTCEventCallback+0x60>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
									/* debido a que como el ADC no soporta la
									 * lectura/escritura de 32 bits, entonces
									 * el DMA duplica el dato enviado en la
									 * parte alta del registro de destino y lo
									 * cuenta.                                */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000118 	.word	0x20000118
 8001324:	20000160 	.word	0x20000160
 8001328:	20000030 	.word	0x20000030
 800132c:	2000011c 	.word	0x2000011c
 8001330:	2000004c 	.word	0x2000004c
 8001334:	20000048 	.word	0x20000048

08001338 <HAL_ADC_ConvCpltCallback>:

* @param hadc: adc handle
* @retval None */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig;
	uint8_t tam = sizeof(sensorLeido)/sizeof(sensorLeido[0]);
 8001340:	230d      	movs	r3, #13
 8001342:	75fb      	strb	r3, [r7, #23]
	Corrige_Med16(sensorLeido, tam);
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	4619      	mov	r1, r3
 8001348:	4846      	ldr	r0, [pc, #280]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 800134a:	f7ff fcf3 	bl	8000d34 <Corrige_Med16>
	if(Verif_Med(sensorLeido, tam) != HAL_OK)
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	4619      	mov	r1, r3
 8001352:	4844      	ldr	r0, [pc, #272]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001354:	f7ff fd7c 	bl	8000e50 <Verif_Med>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_ADC_ConvCpltCallback+0x2a>
	{
		Error_Handler();
 800135e:	f000 f885 	bl	800146c <Error_Handler>
//	  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
//	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//	{
//		Error_Handler();
//	}
	if(HAL_ADC_Start_DMA(&hadc1,sensorLeido,2*BUFFER_ADC) != HAL_OK)
 8001362:	221a      	movs	r2, #26
 8001364:	493f      	ldr	r1, [pc, #252]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001366:	4840      	ldr	r0, [pc, #256]	; (8001468 <HAL_ADC_ConvCpltCallback+0x130>)
 8001368:	f000 fc3e 	bl	8001be8 <HAL_ADC_Start_DMA>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_ADC_ConvCpltCallback+0x3e>
	{
		Error_Handler();
 8001372:	f000 f87b 	bl	800146c <Error_Handler>
	}
	Corrige_Med16(sensorLeido, tam);
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	4619      	mov	r1, r3
 800137a:	483a      	ldr	r0, [pc, #232]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 800137c:	f7ff fcda 	bl	8000d34 <Corrige_Med16>
	if(Verif_Med(sensorLeido, tam) != HAL_OK)
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	4619      	mov	r1, r3
 8001384:	4837      	ldr	r0, [pc, #220]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001386:	f7ff fd63 	bl	8000e50 <Verif_Med>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_ADC_ConvCpltCallback+0x5c>
	{
		Error_Handler();
 8001390:	f000 f86c 	bl	800146c <Error_Handler>
//	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;/* sensor de fase 3.	 */
//	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//	{
//		Error_Handler();
//	}
	if(HAL_ADC_Start_DMA(&hadc1,sensorLeido,2*BUFFER_ADC) != HAL_OK)
 8001394:	221a      	movs	r2, #26
 8001396:	4933      	ldr	r1, [pc, #204]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001398:	4833      	ldr	r0, [pc, #204]	; (8001468 <HAL_ADC_ConvCpltCallback+0x130>)
 800139a:	f000 fc25 	bl	8001be8 <HAL_ADC_Start_DMA>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_ADC_ConvCpltCallback+0x70>
	{
		Error_Handler();
 80013a4:	f000 f862 	bl	800146c <Error_Handler>
	}
	Corrige_Med16(sensorLeido, tam);
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	4619      	mov	r1, r3
 80013ac:	482d      	ldr	r0, [pc, #180]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 80013ae:	f7ff fcc1 	bl	8000d34 <Corrige_Med16>
	if(Verif_Med(sensorLeido, tam) != HAL_OK)
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	4619      	mov	r1, r3
 80013b6:	482b      	ldr	r0, [pc, #172]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 80013b8:	f7ff fd4a 	bl	8000e50 <Verif_Med>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_ADC_ConvCpltCallback+0x8e>
	{
		Error_Handler();
 80013c2:	f000 f853 	bl	800146c <Error_Handler>
//	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;/* sensor de fase 4.	 */
//	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//	{
//		Error_Handler();
//	}
	if(HAL_ADC_Start_DMA(&hadc1,sensorLeido,2*BUFFER_ADC) != HAL_OK)
 80013c6:	221a      	movs	r2, #26
 80013c8:	4926      	ldr	r1, [pc, #152]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 80013ca:	4827      	ldr	r0, [pc, #156]	; (8001468 <HAL_ADC_ConvCpltCallback+0x130>)
 80013cc:	f000 fc0c 	bl	8001be8 <HAL_ADC_Start_DMA>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_ADC_ConvCpltCallback+0xa2>
	{
		Error_Handler();
 80013d6:	f000 f849 	bl	800146c <Error_Handler>
	}
	Corrige_Med16(sensorLeido, tam);
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	4619      	mov	r1, r3
 80013de:	4821      	ldr	r0, [pc, #132]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 80013e0:	f7ff fca8 	bl	8000d34 <Corrige_Med16>
	if(Verif_Med(sensorLeido, tam) != HAL_OK)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	4619      	mov	r1, r3
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 80013ea:	f7ff fd31 	bl	8000e50 <Verif_Med>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_ADC_ConvCpltCallback+0xc0>
	{
		Error_Handler();
 80013f4:	f000 f83a 	bl	800146c <Error_Handler>
//	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;/* sensor de fase 5.	 */
//	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//	{
//		Error_Handler();
//	}
	if(HAL_ADC_Start_DMA(&hadc1,sensorLeido,2*BUFFER_ADC) != HAL_OK)
 80013f8:	221a      	movs	r2, #26
 80013fa:	491a      	ldr	r1, [pc, #104]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 80013fc:	481a      	ldr	r0, [pc, #104]	; (8001468 <HAL_ADC_ConvCpltCallback+0x130>)
 80013fe:	f000 fbf3 	bl	8001be8 <HAL_ADC_Start_DMA>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_ADC_ConvCpltCallback+0xd4>
	{
		Error_Handler();
 8001408:	f000 f830 	bl	800146c <Error_Handler>
	}
	Corrige_Med16(sensorLeido, tam);
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	4619      	mov	r1, r3
 8001410:	4814      	ldr	r0, [pc, #80]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001412:	f7ff fc8f 	bl	8000d34 <Corrige_Med16>
	if(Verif_Med(sensorLeido, tam) != HAL_OK)
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	4619      	mov	r1, r3
 800141a:	4812      	ldr	r0, [pc, #72]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 800141c:	f7ff fd18 	bl	8000e50 <Verif_Med>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_ADC_ConvCpltCallback+0xf2>
	{
		Error_Handler();
 8001426:	f000 f821 	bl	800146c <Error_Handler>
//	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;/* sensor de fase 6.	 */
//	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//	{
//		Error_Handler();
//	}
	if(HAL_ADC_Start_DMA(&hadc1,sensorLeido,2*BUFFER_ADC) != HAL_OK)
 800142a:	221a      	movs	r2, #26
 800142c:	490d      	ldr	r1, [pc, #52]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <HAL_ADC_ConvCpltCallback+0x130>)
 8001430:	f000 fbda 	bl	8001be8 <HAL_ADC_Start_DMA>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_ADC_ConvCpltCallback+0x106>
	{
		Error_Handler();
 800143a:	f000 f817 	bl	800146c <Error_Handler>
	}
	Corrige_Med16(sensorLeido, tam);
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	4619      	mov	r1, r3
 8001442:	4808      	ldr	r0, [pc, #32]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001444:	f7ff fc76 	bl	8000d34 <Corrige_Med16>
	if(Verif_Med(sensorLeido, tam) != HAL_OK)
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <HAL_ADC_ConvCpltCallback+0x12c>)
 800144e:	f7ff fcff 	bl	8000e50 <Verif_Med>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_ADC_ConvCpltCallback+0x124>
	{
		Error_Handler();
 8001458:	f000 f808 	bl	800146c <Error_Handler>
//									   transferencia por DMA al terminar todas
//									   las conversiones y transferencia para
//									   disminuir el consumo de energía. Se
//									   vuelve a activa en la función callback
//									   de evento de RTC.                     */
}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000011c 	.word	0x2000011c
 8001468:	2000004c 	.word	0x2000004c

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB,LED_FALLA_Pin,GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2102      	movs	r1, #2
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <Error_Handler+0x14>)
 8001476:	f001 fef7 	bl	8003268 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40010c00 	.word	0x40010c00

08001484 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2100      	movs	r1, #0
 80014a2:	460a      	mov	r2, r1
 80014a4:	801a      	strh	r2, [r3, #0]
 80014a6:	460a      	mov	r2, r1
 80014a8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MX_RTC_Init+0x8c>)
 80014b0:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <MX_RTC_Init+0x90>)
 80014b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <MX_RTC_Init+0x8c>)
 80014b6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <MX_RTC_Init+0x8c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014c2:	4818      	ldr	r0, [pc, #96]	; (8001524 <MX_RTC_Init+0x8c>)
 80014c4:	f004 fc38 	bl	8005d38 <HAL_RTC_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80014ce:	f7ff ffcd 	bl	800146c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 80014d6:	2320      	movs	r3, #32
 80014d8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80014da:	2300      	movs	r3, #0
 80014dc:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2201      	movs	r2, #1
 80014e2:	4619      	mov	r1, r3
 80014e4:	480f      	ldr	r0, [pc, #60]	; (8001524 <MX_RTC_Init+0x8c>)
 80014e6:	f004 fcf1 	bl	8005ecc <HAL_RTC_SetTime>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80014f0:	f7ff ffbc 	bl	800146c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80014f4:	2306      	movs	r3, #6
 80014f6:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_AUGUST;
 80014f8:	2308      	movs	r3, #8
 80014fa:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x20;
 8001500:	2320      	movs	r3, #32
 8001502:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	2201      	movs	r2, #1
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_RTC_Init+0x8c>)
 800150c:	f004 feaa 	bl	8006264 <HAL_RTC_SetDate>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001516:	f7ff ffa9 	bl	800146c <Error_Handler>
  }

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000164 	.word	0x20000164
 8001528:	40002800 	.word	0x40002800

0800152c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a13      	ldr	r2, [pc, #76]	; (8001588 <HAL_RTC_MspInit+0x5c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d120      	bne.n	8001580 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800153e:	f003 fc61 	bl	8004e04 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_RTC_MspInit+0x60>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <HAL_RTC_MspInit+0x60>)
 8001548:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_RTC_MspInit+0x60>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_RTC_MspInit+0x64>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2003      	movs	r0, #3
 8001566:	f001 f8e3 	bl	8002730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800156a:	2003      	movs	r0, #3
 800156c:	f001 f90c 	bl	8002788 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	2029      	movs	r0, #41	; 0x29
 8001576:	f001 f8db 	bl	8002730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800157a:	2029      	movs	r0, #41	; 0x29
 800157c:	f001 f904 	bl	8002788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40002800 	.word	0x40002800
 800158c:	40021000 	.word	0x40021000
 8001590:	4242043c 	.word	0x4242043c

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_MspInit+0x70>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_MspInit+0x70>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <HAL_MspInit+0x70>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_MspInit+0x70>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a13      	ldr	r2, [pc, #76]	; (8001604 <HAL_MspInit+0x70>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_MspInit+0x70>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ca:	2007      	movs	r0, #7
 80015cc:	f001 f890 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2005      	movs	r0, #5
 80015d6:	f001 f8ab 	bl	8002730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80015da:	2005      	movs	r0, #5
 80015dc:	f001 f8d4 	bl	8002788 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_MspInit+0x74>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_MspInit+0x74>)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
//		volatile unsigned long _ISPR0 = __get_IPSR();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, LED_STATUS_Pin);/* El led de estado se queda */
 800161c:	2101      	movs	r1, #1
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <HardFault_Handler+0x14>)
 8001620:	f001 fe54 	bl	80032cc <HAL_GPIO_TogglePin>
	  HAL_Delay(200);				/* titilando si hay una hard fault.      */
 8001624:	20c8      	movs	r0, #200	; 0xc8
 8001626:	f000 f953 	bl	80018d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LED_STATUS_Pin);/* El led de estado se queda */
 800162a:	e7f7      	b.n	800161c <HardFault_Handler+0x4>
 800162c:	40010c00 	.word	0x40010c00

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166a:	f000 f915 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <RTC_IRQHandler+0x1c>)
 800167a:	f005 fb51 	bl	8006d20 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);	/* Para salir del modo de configuración  */
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <RTC_IRQHandler+0x20>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <RTC_IRQHandler+0x20>)
 8001684:	f023 0310 	bic.w	r3, r3, #16
 8001688:	6053      	str	r3, [r2, #4]
  	  	  	  	  	  	  	  	  	/* del RTC.								 */
  /* USER CODE END RTC_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000164 	.word	0x20000164
 8001694:	40002800 	.word	0x40002800

08001698 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA1_Channel1_IRQHandler+0x10>)
 80016aa:	f001 fa75 	bl	8002b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000007c 	.word	0x2000007c

080016b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <ADC1_2_IRQHandler+0x10>)
 80016be:	f000 fb7d 	bl	8001dbc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000004c 	.word	0x2000004c

080016cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <I2C1_EV_IRQHandler+0x10>)
 80016d2:	f001 ffc3 	bl	800365c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200000c0 	.word	0x200000c0

080016e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <I2C1_ER_IRQHandler+0x10>)
 80016e6:	f002 f91f 	bl	8003928 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200000c0 	.word	0x200000c0

080016f4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80016f8:	4813      	ldr	r0, [pc, #76]	; (8001748 <RTC_Alarm_IRQHandler+0x54>)
 80016fa:	f005 f83f 	bl	800677c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
    HAL_RTC_AlarmIRQHandler(&hrtc);
 80016fe:	4812      	ldr	r0, [pc, #72]	; (8001748 <RTC_Alarm_IRQHandler+0x54>)
 8001700:	f005 f83c 	bl	800677c <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_WaitForSynchro(&hrtc);
 8001704:	4810      	ldr	r0, [pc, #64]	; (8001748 <RTC_Alarm_IRQHandler+0x54>)
 8001706:	f005 f86a 	bl	80067de <HAL_RTC_WaitForSynchro>
	  HAL_RTC_GetTime(&hrtc,&horaLeida, RTC_FORMAT_BCD);
 800170a:	2201      	movs	r2, #1
 800170c:	490f      	ldr	r1, [pc, #60]	; (800174c <RTC_Alarm_IRQHandler+0x58>)
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <RTC_Alarm_IRQHandler+0x54>)
 8001710:	f004 fcc2 	bl	8006098 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&fechaLeida, RTC_FORMAT_BCD);
 8001714:	2201      	movs	r2, #1
 8001716:	490e      	ldr	r1, [pc, #56]	; (8001750 <RTC_Alarm_IRQHandler+0x5c>)
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <RTC_Alarm_IRQHandler+0x54>)
 800171a:	f004 fec1 	bl	80064a0 <HAL_RTC_GetDate>
    intAlarma.AlarmTime.Hours = horaLeida.Hours;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <RTC_Alarm_IRQHandler+0x58>)
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <RTC_Alarm_IRQHandler+0x60>)
 8001724:	701a      	strb	r2, [r3, #0]
    intAlarma.AlarmTime.Minutes = horaLeida.Minutes;
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <RTC_Alarm_IRQHandler+0x58>)
 8001728:	785a      	ldrb	r2, [r3, #1]
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <RTC_Alarm_IRQHandler+0x60>)
 800172c:	705a      	strb	r2, [r3, #1]
    intAlarma.AlarmTime.Seconds = horaLeida.Seconds + 2;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <RTC_Alarm_IRQHandler+0x58>)
 8001730:	789b      	ldrb	r3, [r3, #2]
 8001732:	3302      	adds	r3, #2
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <RTC_Alarm_IRQHandler+0x60>)
 8001738:	709a      	strb	r2, [r3, #2]
    HAL_RTC_SetAlarm_IT(&hrtc, &intAlarma, RTC_FORMAT_BCD);
 800173a:	2201      	movs	r2, #1
 800173c:	4905      	ldr	r1, [pc, #20]	; (8001754 <RTC_Alarm_IRQHandler+0x60>)
 800173e:	4802      	ldr	r0, [pc, #8]	; (8001748 <RTC_Alarm_IRQHandler+0x54>)
 8001740:	f004 ff10 	bl	8006564 <HAL_RTC_SetAlarm_IT>
    //HAL_RTC_GetAlarm(&hrtc,&alarmaLeida,RTC_ALARM_A, RTC_FORMAT_BCD);
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000164 	.word	0x20000164
 800174c:	20000118 	.word	0x20000118
 8001750:	20000160 	.word	0x20000160
 8001754:	20000150 	.word	0x20000150

08001758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <SystemInit+0x5c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <SystemInit+0x5c>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <SystemInit+0x5c>)
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4911      	ldr	r1, [pc, #68]	; (80017b4 <SystemInit+0x5c>)
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <SystemInit+0x60>)
 8001770:	4013      	ands	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <SystemInit+0x5c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <SystemInit+0x5c>)
 800177a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800177e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <SystemInit+0x5c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SystemInit+0x5c>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <SystemInit+0x5c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <SystemInit+0x5c>)
 8001796:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800179a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SystemInit+0x5c>)
 800179e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80017a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SystemInit+0x64>)
 80017a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000
 80017b8:	f8ff0000 	.word	0xf8ff0000
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017c2:	e003      	b.n	80017cc <LoopCopyDataInit>

080017c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017ca:	3104      	adds	r1, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017d4:	d3f6      	bcc.n	80017c4 <CopyDataInit>
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017d8:	e002      	b.n	80017e0 <LoopFillZerobss>

080017da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017dc:	f842 3b04 	str.w	r3, [r2], #4

080017e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017e4:	d3f9      	bcc.n	80017da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017e6:	f7ff ffb7 	bl	8001758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f005 fad7 	bl	8006d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ee:	f7ff fca5 	bl	800113c <main>
  bx lr
 80017f2:	4770      	bx	lr
  ldr r3, =_sidata
 80017f4:	08007020 	.word	0x08007020
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017fc:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001800:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001804:	2000017c 	.word	0x2000017c

08001808 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <CAN1_RX1_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_Init+0x28>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_Init+0x28>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 ff67 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff feb4 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 ffae 	bl	80027b8 <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 ff5c 	bl	8002730 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000008 	.word	0x20000008
 8001890:	20000010 	.word	0x20000010
 8001894:	2000000c 	.word	0x2000000c

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x1c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x20>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_IncTick+0x20>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000010 	.word	0x20000010
 80018b8:	20000178 	.word	0x20000178

080018bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b02      	ldr	r3, [pc, #8]	; (80018cc <HAL_GetTick+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000178 	.word	0x20000178

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff fff0 	bl	80018bc <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_Delay+0x40>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffe0 	bl	80018bc <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000010 	.word	0x20000010

08001914 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e153      	b.n	8001bde <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a9f      	ldr	r2, [pc, #636]	; (8001bb8 <HAL_ADC_Init+0x2a4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d009      	beq.n	8001954 <HAL_ADC_Init+0x40>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a9d      	ldr	r2, [pc, #628]	; (8001bbc <HAL_ADC_Init+0x2a8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d004      	beq.n	8001954 <HAL_ADC_Init+0x40>
 800194a:	f240 11b3 	movw	r1, #435	; 0x1b3
 800194e:	489c      	ldr	r0, [pc, #624]	; (8001bc0 <HAL_ADC_Init+0x2ac>)
 8001950:	f7ff fd98 	bl	8001484 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d009      	beq.n	8001970 <HAL_ADC_Init+0x5c>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001964:	d004      	beq.n	8001970 <HAL_ADC_Init+0x5c>
 8001966:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800196a:	4895      	ldr	r0, [pc, #596]	; (8001bc0 <HAL_ADC_Init+0x2ac>)
 800196c:	f7ff fd8a 	bl	8001484 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d009      	beq.n	800198c <HAL_ADC_Init+0x78>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001980:	d004      	beq.n	800198c <HAL_ADC_Init+0x78>
 8001982:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001986:	488e      	ldr	r0, [pc, #568]	; (8001bc0 <HAL_ADC_Init+0x2ac>)
 8001988:	f7ff fd7c 	bl	8001484 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7b1b      	ldrb	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_ADC_Init+0x92>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d004      	beq.n	80019a6 <HAL_ADC_Init+0x92>
 800199c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80019a0:	4887      	ldr	r0, [pc, #540]	; (8001bc0 <HAL_ADC_Init+0x2ac>)
 80019a2:	f7ff fd6f 	bl	8001484 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d022      	beq.n	80019f4 <HAL_ADC_Init+0xe0>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019b6:	d01d      	beq.n	80019f4 <HAL_ADC_Init+0xe0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80019c0:	d018      	beq.n	80019f4 <HAL_ADC_Init+0xe0>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80019ca:	d013      	beq.n	80019f4 <HAL_ADC_Init+0xe0>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80019d4:	d00e      	beq.n	80019f4 <HAL_ADC_Init+0xe0>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80019de:	d009      	beq.n	80019f4 <HAL_ADC_Init+0xe0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019e8:	d004      	beq.n	80019f4 <HAL_ADC_Init+0xe0>
 80019ea:	f240 11b7 	movw	r1, #439	; 0x1b7
 80019ee:	4874      	ldr	r0, [pc, #464]	; (8001bc0 <HAL_ADC_Init+0x2ac>)
 80019f0:	f7ff fd48 	bl	8001484 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d02a      	beq.n	8001a52 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_ADC_Init+0xf8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d904      	bls.n	8001a16 <HAL_ADC_Init+0x102>
 8001a0c:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001a10:	486b      	ldr	r0, [pc, #428]	; (8001bc0 <HAL_ADC_Init+0x2ac>)
 8001a12:	f7ff fd37 	bl	8001484 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7d1b      	ldrb	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d008      	beq.n	8001a30 <HAL_ADC_Init+0x11c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7d1b      	ldrb	r3, [r3, #20]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d004      	beq.n	8001a30 <HAL_ADC_Init+0x11c>
 8001a26:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001a2a:	4865      	ldr	r0, [pc, #404]	; (8001bc0 <HAL_ADC_Init+0x2ac>)
 8001a2c:	f7ff fd2a 	bl	8001484 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7d1b      	ldrb	r3, [r3, #20]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00c      	beq.n	8001a52 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_ADC_Init+0x134>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d904      	bls.n	8001a52 <HAL_ADC_Init+0x13e>
 8001a48:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001a4c:	485c      	ldr	r0, [pc, #368]	; (8001bc0 <HAL_ADC_Init+0x2ac>)
 8001a4e:	f7ff fd19 	bl	8001484 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7fe fe3b 	bl	80006e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fcc8 	bl	8002404 <ADC_ConversionStop_Disable>
 8001a74:	4603      	mov	r3, r0
 8001a76:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f040 80a3 	bne.w	8001bcc <HAL_ADC_Init+0x2b8>
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f040 809f 	bne.w	8001bcc <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a96:	f023 0302 	bic.w	r3, r3, #2
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aaa:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7b1b      	ldrb	r3, [r3, #12]
 8001ab0:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ab2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac2:	d003      	beq.n	8001acc <HAL_ADC_Init+0x1b8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d102      	bne.n	8001ad2 <HAL_ADC_Init+0x1be>
 8001acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad0:	e000      	b.n	8001ad4 <HAL_ADC_Init+0x1c0>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7d1b      	ldrb	r3, [r3, #20]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d119      	bne.n	8001b16 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7b1b      	ldrb	r3, [r3, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	035a      	lsls	r2, r3, #13
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	e00b      	b.n	8001b16 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	f043 0220 	orr.w	r2, r3, #32
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	f043 0201 	orr.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_ADC_Init+0x2b0>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b46:	d003      	beq.n	8001b50 <HAL_ADC_Init+0x23c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d104      	bne.n	8001b5a <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	051b      	lsls	r3, r3, #20
 8001b58:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_ADC_Init+0x2b4>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d10b      	bne.n	8001b96 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	f023 0303 	bic.w	r3, r3, #3
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b94:	e022      	b.n	8001bdc <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	f023 0312 	bic.w	r3, r3, #18
 8001b9e:	f043 0210 	orr.w	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bb6:	e011      	b.n	8001bdc <HAL_ADC_Init+0x2c8>
 8001bb8:	40012400 	.word	0x40012400
 8001bbc:	40012800 	.word	0x40012800
 8001bc0:	08006e0c 	.word	0x08006e0c
 8001bc4:	ffe1f7fd 	.word	0xffe1f7fd
 8001bc8:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	f043 0210 	orr.w	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop

08001be8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a69      	ldr	r2, [pc, #420]	; (8001da4 <HAL_ADC_Start_DMA+0x1bc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_ADC_Start_DMA+0x24>
 8001c02:	f240 6114 	movw	r1, #1556	; 0x614
 8001c06:	4868      	ldr	r0, [pc, #416]	; (8001da8 <HAL_ADC_Start_DMA+0x1c0>)
 8001c08:	f7ff fc3c 	bl	8001484 <assert_failed>
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a64      	ldr	r2, [pc, #400]	; (8001da4 <HAL_ADC_Start_DMA+0x1bc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_ADC_Start_DMA+0x38>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a64      	ldr	r2, [pc, #400]	; (8001dac <HAL_ADC_Start_DMA+0x1c4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_Start_DMA+0x46>
 8001c20:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <HAL_ADC_Start_DMA+0x1bc>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 80b3 	bne.w	8001d94 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_Start_DMA+0x54>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e0ae      	b.n	8001d9a <HAL_ADC_Start_DMA+0x1b2>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 fb8b 	bl	8002360 <ADC_Enable>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 809a 	bne.w	8001d8a <HAL_ADC_Start_DMA+0x1a2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a4f      	ldr	r2, [pc, #316]	; (8001dac <HAL_ADC_Start_DMA+0x1c4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d105      	bne.n	8001c80 <HAL_ADC_Start_DMA+0x98>
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <HAL_ADC_Start_DMA+0x1bc>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d115      	bne.n	8001cac <HAL_ADC_Start_DMA+0xc4>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d026      	beq.n	8001ce8 <HAL_ADC_Start_DMA+0x100>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ca2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001caa:	e01d      	b.n	8001ce8 <HAL_ADC_Start_DMA+0x100>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a39      	ldr	r2, [pc, #228]	; (8001da4 <HAL_ADC_Start_DMA+0x1bc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_ADC_Start_DMA+0xe4>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a39      	ldr	r2, [pc, #228]	; (8001dac <HAL_ADC_Start_DMA+0x1c4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d10d      	bne.n	8001ce8 <HAL_ADC_Start_DMA+0x100>
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <HAL_ADC_Start_DMA+0x1bc>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_ADC_Start_DMA+0x100>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ce0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_ADC_Start_DMA+0x11a>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	f023 0206 	bic.w	r2, r3, #6
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d00:	e002      	b.n	8001d08 <HAL_ADC_Start_DMA+0x120>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <HAL_ADC_Start_DMA+0x1c8>)
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <HAL_ADC_Start_DMA+0x1cc>)
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <HAL_ADC_Start_DMA+0x1d0>)
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0202 	mvn.w	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d40:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a18      	ldr	r0, [r3, #32]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	334c      	adds	r3, #76	; 0x4c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f000 fe3d 	bl	80029d0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d60:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d64:	d108      	bne.n	8001d78 <HAL_ADC_Start_DMA+0x190>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d74:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d76:	e00f      	b.n	8001d98 <HAL_ADC_Start_DMA+0x1b0>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d86:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d88:	e006      	b.n	8001d98 <HAL_ADC_Start_DMA+0x1b0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001d92:	e001      	b.n	8001d98 <HAL_ADC_Start_DMA+0x1b0>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40012400 	.word	0x40012400
 8001da8:	08006e0c 	.word	0x08006e0c
 8001dac:	40012800 	.word	0x40012800
 8001db0:	08002479 	.word	0x08002479
 8001db4:	080024f5 	.word	0x080024f5
 8001db8:	08002511 	.word	0x08002511

08001dbc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a72      	ldr	r2, [pc, #456]	; (8001f94 <HAL_ADC_IRQHandler+0x1d8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d009      	beq.n	8001de2 <HAL_ADC_IRQHandler+0x26>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a71      	ldr	r2, [pc, #452]	; (8001f98 <HAL_ADC_IRQHandler+0x1dc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d004      	beq.n	8001de2 <HAL_ADC_IRQHandler+0x26>
 8001dd8:	f240 61f1 	movw	r1, #1777	; 0x6f1
 8001ddc:	486f      	ldr	r0, [pc, #444]	; (8001f9c <HAL_ADC_IRQHandler+0x1e0>)
 8001dde:	f7ff fb51 	bl	8001484 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7b1b      	ldrb	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_ADC_IRQHandler+0x40>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7b1b      	ldrb	r3, [r3, #12]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d004      	beq.n	8001dfc <HAL_ADC_IRQHandler+0x40>
 8001df2:	f240 61f2 	movw	r1, #1778	; 0x6f2
 8001df6:	4869      	ldr	r0, [pc, #420]	; (8001f9c <HAL_ADC_IRQHandler+0x1e0>)
 8001df8:	f7ff fb44 	bl	8001484 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x50>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d904      	bls.n	8001e16 <HAL_ADC_IRQHandler+0x5a>
 8001e0c:	f240 61f3 	movw	r1, #1779	; 0x6f3
 8001e10:	4862      	ldr	r0, [pc, #392]	; (8001f9c <HAL_ADC_IRQHandler+0x1e0>)
 8001e12:	f7ff fb37 	bl	8001484 <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d140      	bne.n	8001ea6 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d139      	bne.n	8001ea6 <HAL_ADC_IRQHandler+0xea>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_IRQHandler+0x8e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e54:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e58:	d11d      	bne.n	8001e96 <HAL_ADC_IRQHandler+0xda>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d119      	bne.n	8001e96 <HAL_ADC_IRQHandler+0xda>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0220 	bic.w	r2, r2, #32
 8001e70:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <HAL_ADC_IRQHandler+0xda>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fa4e 	bl	8001338 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0212 	mvn.w	r2, #18
 8001ea4:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	d14f      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x198>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d148      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d105      	bne.n	8001eda <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001ee4:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001ee8:	d012      	beq.n	8001f10 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d125      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f06:	d11d      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d119      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f1e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fafd 	bl	8002544 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 020c 	mvn.w	r2, #12
 8001f52:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d114      	bne.n	8001f8c <HAL_ADC_IRQHandler+0x1d0>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10d      	bne.n	8001f8c <HAL_ADC_IRQHandler+0x1d0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f818 	bl	8001fb2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0201 	mvn.w	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40012400 	.word	0x40012400
 8001f98:	40012800 	.word	0x40012800
 8001f9c:	08006e0c 	.word	0x08006e0c

08001fa0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a88      	ldr	r2, [pc, #544]	; (8002210 <HAL_ADC_ConfigChannel+0x238>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d009      	beq.n	8002008 <HAL_ADC_ConfigChannel+0x30>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a86      	ldr	r2, [pc, #536]	; (8002214 <HAL_ADC_ConfigChannel+0x23c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_ADC_ConfigChannel+0x30>
 8001ffe:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8002002:	4885      	ldr	r0, [pc, #532]	; (8002218 <HAL_ADC_ConfigChannel+0x240>)
 8002004:	f7ff fa3e 	bl	8001484 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d048      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d044      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d040      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d03c      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b04      	cmp	r3, #4
 800202e:	d038      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d034      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b06      	cmp	r3, #6
 800203e:	d030      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b07      	cmp	r3, #7
 8002046:	d02c      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d028      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b09      	cmp	r3, #9
 8002056:	d024      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b0a      	cmp	r3, #10
 800205e:	d020      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b0b      	cmp	r3, #11
 8002066:	d01c      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b0c      	cmp	r3, #12
 800206e:	d018      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b0d      	cmp	r3, #13
 8002076:	d014      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b0e      	cmp	r3, #14
 800207e:	d010      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b0f      	cmp	r3, #15
 8002086:	d00c      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b10      	cmp	r3, #16
 800208e:	d008      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b11      	cmp	r3, #17
 8002096:	d004      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xca>
 8002098:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800209c:	485e      	ldr	r0, [pc, #376]	; (8002218 <HAL_ADC_ConfigChannel+0x240>)
 800209e:	f7ff f9f1 	bl	8001484 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d040      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d03c      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d038      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d034      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b05      	cmp	r3, #5
 80020c8:	d030      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d02c      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b07      	cmp	r3, #7
 80020d8:	d028      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d024      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b09      	cmp	r3, #9
 80020e8:	d020      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b0a      	cmp	r3, #10
 80020f0:	d01c      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b0b      	cmp	r3, #11
 80020f8:	d018      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d014      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b0d      	cmp	r3, #13
 8002108:	d010      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b0e      	cmp	r3, #14
 8002110:	d00c      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	d008      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b10      	cmp	r3, #16
 8002120:	d004      	beq.n	800212c <HAL_ADC_ConfigChannel+0x154>
 8002122:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002126:	483c      	ldr	r0, [pc, #240]	; (8002218 <HAL_ADC_ConfigChannel+0x240>)
 8002128:	f7ff f9ac 	bl	8001484 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x19e>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d01c      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x19e>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d018      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x19e>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d014      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x19e>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b04      	cmp	r3, #4
 8002152:	d010      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x19e>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d00c      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x19e>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b06      	cmp	r3, #6
 8002162:	d008      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x19e>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b07      	cmp	r3, #7
 800216a:	d004      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x19e>
 800216c:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8002170:	4829      	ldr	r0, [pc, #164]	; (8002218 <HAL_ADC_ConfigChannel+0x240>)
 8002172:	f7ff f987 	bl	8001484 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x1ac>
 8002180:	2302      	movs	r3, #2
 8002182:	e0e2      	b.n	800234a <HAL_ADC_ConfigChannel+0x372>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b06      	cmp	r3, #6
 8002192:	d81c      	bhi.n	80021ce <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3b05      	subs	r3, #5
 80021a6:	221f      	movs	r2, #31
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	4019      	ands	r1, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	3b05      	subs	r3, #5
 80021c0:	fa00 f203 	lsl.w	r2, r0, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
 80021cc:	e042      	b.n	8002254 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d822      	bhi.n	800221c <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b23      	subs	r3, #35	; 0x23
 80021e8:	221f      	movs	r2, #31
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4019      	ands	r1, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3b23      	subs	r3, #35	; 0x23
 8002202:	fa00 f203 	lsl.w	r2, r0, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
 800220e:	e021      	b.n	8002254 <HAL_ADC_ConfigChannel+0x27c>
 8002210:	40012400 	.word	0x40012400
 8002214:	40012800 	.word	0x40012800
 8002218:	08006e0c 	.word	0x08006e0c
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b41      	subs	r3, #65	; 0x41
 800222e:	221f      	movs	r2, #31
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	4019      	ands	r1, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b41      	subs	r3, #65	; 0x41
 8002248:	fa00 f203 	lsl.w	r2, r0, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b09      	cmp	r3, #9
 800225a:	d91c      	bls.n	8002296 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68d9      	ldr	r1, [r3, #12]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	3b1e      	subs	r3, #30
 800226e:	2207      	movs	r2, #7
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	4019      	ands	r1, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6898      	ldr	r0, [r3, #8]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	3b1e      	subs	r3, #30
 8002288:	fa00 f203 	lsl.w	r2, r0, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	e019      	b.n	80022ca <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6919      	ldr	r1, [r3, #16]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	2207      	movs	r2, #7
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4019      	ands	r1, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6898      	ldr	r0, [r3, #8]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	fa00 f203 	lsl.w	r2, r0, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d003      	beq.n	80022da <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022d6:	2b11      	cmp	r3, #17
 80022d8:	d132      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <HAL_ADC_ConfigChannel+0x37c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d125      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d126      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002300:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b10      	cmp	r3, #16
 8002308:	d11a      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_ADC_ConfigChannel+0x380>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a13      	ldr	r2, [pc, #76]	; (800235c <HAL_ADC_ConfigChannel+0x384>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	0c9a      	lsrs	r2, r3, #18
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002320:	e002      	b.n	8002328 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	3b01      	subs	r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f9      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x34a>
 800232e:	e007      	b.n	8002340 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40012400 	.word	0x40012400
 8002358:	20000008 	.word	0x20000008
 800235c:	431bde83 	.word	0x431bde83

08002360 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d039      	beq.n	80023f2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <ADC_Enable+0x9c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1b      	ldr	r2, [pc, #108]	; (8002400 <ADC_Enable+0xa0>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	0c9b      	lsrs	r3, r3, #18
 800239a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800239c:	e002      	b.n	80023a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f9      	bne.n	800239e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023aa:	f7ff fa87 	bl	80018bc <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023b0:	e018      	b.n	80023e4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023b2:	f7ff fa83 	bl	80018bc <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d911      	bls.n	80023e4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	f043 0210 	orr.w	r2, r3, #16
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e007      	b.n	80023f4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d1df      	bne.n	80023b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000008 	.word	0x20000008
 8002400:	431bde83 	.word	0x431bde83

08002404 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d127      	bne.n	800246e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0201 	bic.w	r2, r2, #1
 800242c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800242e:	f7ff fa45 	bl	80018bc <HAL_GetTick>
 8002432:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002434:	e014      	b.n	8002460 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002436:	f7ff fa41 	bl	80018bc <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d90d      	bls.n	8002460 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f043 0210 	orr.w	r2, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e007      	b.n	8002470 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b01      	cmp	r3, #1
 800246c:	d0e3      	beq.n	8002436 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d127      	bne.n	80024e2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024ac:	d115      	bne.n	80024da <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d111      	bne.n	80024da <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d105      	bne.n	80024da <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f7fe ff2c 	bl	8001338 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80024e0:	e004      	b.n	80024ec <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f7ff fd4c 	bl	8001fa0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	f043 0204 	orr.w	r2, r3, #4
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f7ff fd44 	bl	8001fc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
	...

08002558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60d3      	str	r3, [r2, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_GetPriorityGrouping+0x18>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 0307 	and.w	r3, r3, #7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db0b      	blt.n	80025e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4906      	ldr	r1, [pc, #24]	; (80025f0 <__NVIC_EnableIRQ+0x34>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2001      	movs	r0, #1
 80025de:	fa00 f202 	lsl.w	r2, r0, r2
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff90 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b07      	cmp	r3, #7
 80026fc:	d00f      	beq.n	800271e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b06      	cmp	r3, #6
 8002702:	d00c      	beq.n	800271e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d009      	beq.n	800271e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d006      	beq.n	800271e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d003      	beq.n	800271e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002716:	2192      	movs	r1, #146	; 0x92
 8002718:	4804      	ldr	r0, [pc, #16]	; (800272c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800271a:	f7fe feb3 	bl	8001484 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ff1a 	bl	8002558 <__NVIC_SetPriorityGrouping>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	08006e44 	.word	0x08006e44

08002730 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b0f      	cmp	r3, #15
 8002746:	d903      	bls.n	8002750 <HAL_NVIC_SetPriority+0x20>
 8002748:	21aa      	movs	r1, #170	; 0xaa
 800274a:	480e      	ldr	r0, [pc, #56]	; (8002784 <HAL_NVIC_SetPriority+0x54>)
 800274c:	f7fe fe9a 	bl	8001484 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	d903      	bls.n	800275e <HAL_NVIC_SetPriority+0x2e>
 8002756:	21ab      	movs	r1, #171	; 0xab
 8002758:	480a      	ldr	r0, [pc, #40]	; (8002784 <HAL_NVIC_SetPriority+0x54>)
 800275a:	f7fe fe93 	bl	8001484 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275e:	f7ff ff1f 	bl	80025a0 <__NVIC_GetPriorityGrouping>
 8002762:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	6978      	ldr	r0, [r7, #20]
 800276a:	f7ff ff6d 	bl	8002648 <NVIC_EncodePriority>
 800276e:	4602      	mov	r2, r0
 8002770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ff3c 	bl	80025f4 <__NVIC_SetPriority>
}
 800277c:	bf00      	nop
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	08006e44 	.word	0x08006e44

08002788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	da03      	bge.n	80027a2 <HAL_NVIC_EnableIRQ+0x1a>
 800279a:	21be      	movs	r1, #190	; 0xbe
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <HAL_NVIC_EnableIRQ+0x2c>)
 800279e:	f7fe fe71 	bl	8001484 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff08 	bl	80025bc <__NVIC_EnableIRQ>
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	08006e44 	.word	0x08006e44

080027b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff73 	bl	80026ac <SysTick_Config>
 80027c6:	4603      	mov	r3, r0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e0da      	b.n	800299c <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6e      	ldr	r2, [pc, #440]	; (80029a4 <HAL_DMA_Init+0x1d4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d021      	beq.n	8002834 <HAL_DMA_Init+0x64>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a6c      	ldr	r2, [pc, #432]	; (80029a8 <HAL_DMA_Init+0x1d8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01c      	beq.n	8002834 <HAL_DMA_Init+0x64>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6b      	ldr	r2, [pc, #428]	; (80029ac <HAL_DMA_Init+0x1dc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d017      	beq.n	8002834 <HAL_DMA_Init+0x64>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a69      	ldr	r2, [pc, #420]	; (80029b0 <HAL_DMA_Init+0x1e0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d012      	beq.n	8002834 <HAL_DMA_Init+0x64>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a68      	ldr	r2, [pc, #416]	; (80029b4 <HAL_DMA_Init+0x1e4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00d      	beq.n	8002834 <HAL_DMA_Init+0x64>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a66      	ldr	r2, [pc, #408]	; (80029b8 <HAL_DMA_Init+0x1e8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d008      	beq.n	8002834 <HAL_DMA_Init+0x64>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a65      	ldr	r2, [pc, #404]	; (80029bc <HAL_DMA_Init+0x1ec>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d003      	beq.n	8002834 <HAL_DMA_Init+0x64>
 800282c:	219a      	movs	r1, #154	; 0x9a
 800282e:	4864      	ldr	r0, [pc, #400]	; (80029c0 <HAL_DMA_Init+0x1f0>)
 8002830:	f7fe fe28 	bl	8001484 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <HAL_DMA_Init+0x86>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b10      	cmp	r3, #16
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Init+0x86>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800284c:	d003      	beq.n	8002856 <HAL_DMA_Init+0x86>
 800284e:	219b      	movs	r1, #155	; 0x9b
 8002850:	485b      	ldr	r0, [pc, #364]	; (80029c0 <HAL_DMA_Init+0x1f0>)
 8002852:	f7fe fe17 	bl	8001484 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d007      	beq.n	800286e <HAL_DMA_Init+0x9e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_DMA_Init+0x9e>
 8002866:	219c      	movs	r1, #156	; 0x9c
 8002868:	4855      	ldr	r0, [pc, #340]	; (80029c0 <HAL_DMA_Init+0x1f0>)
 800286a:	f7fe fe0b 	bl	8001484 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b80      	cmp	r3, #128	; 0x80
 8002874:	d007      	beq.n	8002886 <HAL_DMA_Init+0xb6>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_DMA_Init+0xb6>
 800287e:	219d      	movs	r1, #157	; 0x9d
 8002880:	484f      	ldr	r0, [pc, #316]	; (80029c0 <HAL_DMA_Init+0x1f0>)
 8002882:	f7fe fdff 	bl	8001484 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_DMA_Init+0xda>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002896:	d008      	beq.n	80028aa <HAL_DMA_Init+0xda>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a0:	d003      	beq.n	80028aa <HAL_DMA_Init+0xda>
 80028a2:	219e      	movs	r1, #158	; 0x9e
 80028a4:	4846      	ldr	r0, [pc, #280]	; (80029c0 <HAL_DMA_Init+0x1f0>)
 80028a6:	f7fe fded 	bl	8001484 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00d      	beq.n	80028ce <HAL_DMA_Init+0xfe>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ba:	d008      	beq.n	80028ce <HAL_DMA_Init+0xfe>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c4:	d003      	beq.n	80028ce <HAL_DMA_Init+0xfe>
 80028c6:	219f      	movs	r1, #159	; 0x9f
 80028c8:	483d      	ldr	r0, [pc, #244]	; (80029c0 <HAL_DMA_Init+0x1f0>)
 80028ca:	f7fe fddb 	bl	8001484 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_DMA_Init+0x116>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b20      	cmp	r3, #32
 80028dc:	d003      	beq.n	80028e6 <HAL_DMA_Init+0x116>
 80028de:	21a0      	movs	r1, #160	; 0xa0
 80028e0:	4837      	ldr	r0, [pc, #220]	; (80029c0 <HAL_DMA_Init+0x1f0>)
 80028e2:	f7fe fdcf 	bl	8001484 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d012      	beq.n	8002914 <HAL_DMA_Init+0x144>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f6:	d00d      	beq.n	8002914 <HAL_DMA_Init+0x144>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002900:	d008      	beq.n	8002914 <HAL_DMA_Init+0x144>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800290a:	d003      	beq.n	8002914 <HAL_DMA_Init+0x144>
 800290c:	21a1      	movs	r1, #161	; 0xa1
 800290e:	482c      	ldr	r0, [pc, #176]	; (80029c0 <HAL_DMA_Init+0x1f0>)
 8002910:	f7fe fdb8 	bl	8001484 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <HAL_DMA_Init+0x1f4>)
 800291c:	4413      	add	r3, r2
 800291e:	4a2a      	ldr	r2, [pc, #168]	; (80029c8 <HAL_DMA_Init+0x1f8>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	009a      	lsls	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a27      	ldr	r2, [pc, #156]	; (80029cc <HAL_DMA_Init+0x1fc>)
 8002930:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002948:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800294c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002956:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40020008 	.word	0x40020008
 80029a8:	4002001c 	.word	0x4002001c
 80029ac:	40020030 	.word	0x40020030
 80029b0:	40020044 	.word	0x40020044
 80029b4:	40020058 	.word	0x40020058
 80029b8:	4002006c 	.word	0x4002006c
 80029bc:	40020080 	.word	0x40020080
 80029c0:	08006e80 	.word	0x08006e80
 80029c4:	bffdfff8 	.word	0xbffdfff8
 80029c8:	cccccccd 	.word	0xcccccccd
 80029cc:	40020000 	.word	0x40020000

080029d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_DMA_Start_IT+0x20>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ee:	d304      	bcc.n	80029fa <HAL_DMA_Start_IT+0x2a>
 80029f0:	f240 116f 	movw	r1, #367	; 0x16f
 80029f4:	482c      	ldr	r0, [pc, #176]	; (8002aa8 <HAL_DMA_Start_IT+0xd8>)
 80029f6:	f7fe fd45 	bl	8001484 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_DMA_Start_IT+0x38>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e04a      	b.n	8002a9e <HAL_DMA_Start_IT+0xce>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d13a      	bne.n	8002a90 <HAL_DMA_Start_IT+0xc0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f9bc 	bl	8002dbc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Start_IT+0x8e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 020e 	orr.w	r2, r2, #14
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e00f      	b.n	8002a7e <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0204 	bic.w	r2, r2, #4
 8002a6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 020a 	orr.w	r2, r2, #10
 8002a7c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e005      	b.n	8002a9c <HAL_DMA_Start_IT+0xcc>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	08006e80 	.word	0x08006e80

08002aac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d005      	beq.n	8002ace <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e051      	b.n	8002b72 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 020e 	bic.w	r2, r2, #14
 8002adc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_DMA_Abort_IT+0xd0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d029      	beq.n	8002b4c <HAL_DMA_Abort_IT+0xa0>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_DMA_Abort_IT+0xd4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d022      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x9c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_DMA_Abort_IT+0xd8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d01a      	beq.n	8002b42 <HAL_DMA_Abort_IT+0x96>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_DMA_Abort_IT+0xdc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d012      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x90>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <HAL_DMA_Abort_IT+0xe0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00a      	beq.n	8002b36 <HAL_DMA_Abort_IT+0x8a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <HAL_DMA_Abort_IT+0xe4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d102      	bne.n	8002b30 <HAL_DMA_Abort_IT+0x84>
 8002b2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b2e:	e00e      	b.n	8002b4e <HAL_DMA_Abort_IT+0xa2>
 8002b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b34:	e00b      	b.n	8002b4e <HAL_DMA_Abort_IT+0xa2>
 8002b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b3a:	e008      	b.n	8002b4e <HAL_DMA_Abort_IT+0xa2>
 8002b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b40:	e005      	b.n	8002b4e <HAL_DMA_Abort_IT+0xa2>
 8002b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b46:	e002      	b.n	8002b4e <HAL_DMA_Abort_IT+0xa2>
 8002b48:	2310      	movs	r3, #16
 8002b4a:	e000      	b.n	8002b4e <HAL_DMA_Abort_IT+0xa2>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <HAL_DMA_Abort_IT+0xe8>)
 8002b50:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
    } 
  }
  return status;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40020008 	.word	0x40020008
 8002b80:	4002001c 	.word	0x4002001c
 8002b84:	40020030 	.word	0x40020030
 8002b88:	40020044 	.word	0x40020044
 8002b8c:	40020058 	.word	0x40020058
 8002b90:	4002006c 	.word	0x4002006c
 8002b94:	40020000 	.word	0x40020000

08002b98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d04f      	beq.n	8002c60 <HAL_DMA_IRQHandler+0xc8>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d04a      	beq.n	8002c60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0204 	bic.w	r2, r2, #4
 8002be6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a66      	ldr	r2, [pc, #408]	; (8002d88 <HAL_DMA_IRQHandler+0x1f0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d029      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xae>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a65      	ldr	r2, [pc, #404]	; (8002d8c <HAL_DMA_IRQHandler+0x1f4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d022      	beq.n	8002c42 <HAL_DMA_IRQHandler+0xaa>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a63      	ldr	r2, [pc, #396]	; (8002d90 <HAL_DMA_IRQHandler+0x1f8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01a      	beq.n	8002c3c <HAL_DMA_IRQHandler+0xa4>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a62      	ldr	r2, [pc, #392]	; (8002d94 <HAL_DMA_IRQHandler+0x1fc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d012      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x9e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a60      	ldr	r2, [pc, #384]	; (8002d98 <HAL_DMA_IRQHandler+0x200>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00a      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x98>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5f      	ldr	r2, [pc, #380]	; (8002d9c <HAL_DMA_IRQHandler+0x204>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d102      	bne.n	8002c2a <HAL_DMA_IRQHandler+0x92>
 8002c24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c28:	e00e      	b.n	8002c48 <HAL_DMA_IRQHandler+0xb0>
 8002c2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c2e:	e00b      	b.n	8002c48 <HAL_DMA_IRQHandler+0xb0>
 8002c30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c34:	e008      	b.n	8002c48 <HAL_DMA_IRQHandler+0xb0>
 8002c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c3a:	e005      	b.n	8002c48 <HAL_DMA_IRQHandler+0xb0>
 8002c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c40:	e002      	b.n	8002c48 <HAL_DMA_IRQHandler+0xb0>
 8002c42:	2340      	movs	r3, #64	; 0x40
 8002c44:	e000      	b.n	8002c48 <HAL_DMA_IRQHandler+0xb0>
 8002c46:	2304      	movs	r3, #4
 8002c48:	4a55      	ldr	r2, [pc, #340]	; (8002da0 <HAL_DMA_IRQHandler+0x208>)
 8002c4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8094 	beq.w	8002d7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c5e:	e08e      	b.n	8002d7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	2202      	movs	r2, #2
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d056      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x186>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d051      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 020a 	bic.w	r2, r2, #10
 8002c96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a38      	ldr	r2, [pc, #224]	; (8002d88 <HAL_DMA_IRQHandler+0x1f0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d029      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x166>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a37      	ldr	r2, [pc, #220]	; (8002d8c <HAL_DMA_IRQHandler+0x1f4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d022      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x162>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a35      	ldr	r2, [pc, #212]	; (8002d90 <HAL_DMA_IRQHandler+0x1f8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01a      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x15c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a34      	ldr	r2, [pc, #208]	; (8002d94 <HAL_DMA_IRQHandler+0x1fc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d012      	beq.n	8002cee <HAL_DMA_IRQHandler+0x156>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a32      	ldr	r2, [pc, #200]	; (8002d98 <HAL_DMA_IRQHandler+0x200>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x150>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a31      	ldr	r2, [pc, #196]	; (8002d9c <HAL_DMA_IRQHandler+0x204>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d102      	bne.n	8002ce2 <HAL_DMA_IRQHandler+0x14a>
 8002cdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ce0:	e00e      	b.n	8002d00 <HAL_DMA_IRQHandler+0x168>
 8002ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce6:	e00b      	b.n	8002d00 <HAL_DMA_IRQHandler+0x168>
 8002ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cec:	e008      	b.n	8002d00 <HAL_DMA_IRQHandler+0x168>
 8002cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf2:	e005      	b.n	8002d00 <HAL_DMA_IRQHandler+0x168>
 8002cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf8:	e002      	b.n	8002d00 <HAL_DMA_IRQHandler+0x168>
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e000      	b.n	8002d00 <HAL_DMA_IRQHandler+0x168>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_DMA_IRQHandler+0x208>)
 8002d02:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d034      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d1c:	e02f      	b.n	8002d7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2208      	movs	r2, #8
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d028      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x1e8>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d023      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 020e 	bic.w	r2, r2, #14
 8002d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f202 	lsl.w	r2, r1, r2
 8002d56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
    }
  }
  return;
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
}
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40020008 	.word	0x40020008
 8002d8c:	4002001c 	.word	0x4002001c
 8002d90:	40020030 	.word	0x40020030
 8002d94:	40020044 	.word	0x40020044
 8002d98:	40020058 	.word	0x40020058
 8002d9c:	4002006c 	.word	0x4002006c
 8002da0:	40020000 	.word	0x40020000

08002da4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d108      	bne.n	8002dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dfa:	e007      	b.n	8002e0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e26:	2300      	movs	r3, #0
 8002e28:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a9c      	ldr	r2, [pc, #624]	; (80030a0 <HAL_GPIO_Init+0x288>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00f      	beq.n	8002e52 <HAL_GPIO_Init+0x3a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a9b      	ldr	r2, [pc, #620]	; (80030a4 <HAL_GPIO_Init+0x28c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <HAL_GPIO_Init+0x3a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a9a      	ldr	r2, [pc, #616]	; (80030a8 <HAL_GPIO_Init+0x290>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_GPIO_Init+0x3a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a99      	ldr	r2, [pc, #612]	; (80030ac <HAL_GPIO_Init+0x294>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x3a>
 8002e4a:	21bd      	movs	r1, #189	; 0xbd
 8002e4c:	4898      	ldr	r0, [pc, #608]	; (80030b0 <HAL_GPIO_Init+0x298>)
 8002e4e:	f7fe fb19 	bl	8001484 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_GPIO_Init+0x50>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x58>
 8002e68:	21be      	movs	r1, #190	; 0xbe
 8002e6a:	4891      	ldr	r0, [pc, #580]	; (80030b0 <HAL_GPIO_Init+0x298>)
 8002e6c:	f7fe fb0a 	bl	8001484 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 81df 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	f000 81da 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b11      	cmp	r3, #17
 8002e8a:	f000 81d5 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	f000 81d0 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b12      	cmp	r3, #18
 8002e9e:	f000 81cb 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4a83      	ldr	r2, [pc, #524]	; (80030b4 <HAL_GPIO_Init+0x29c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	f000 81c5 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a81      	ldr	r2, [pc, #516]	; (80030b8 <HAL_GPIO_Init+0x2a0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	f000 81bf 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a7f      	ldr	r2, [pc, #508]	; (80030bc <HAL_GPIO_Init+0x2a4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f000 81b9 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4a7d      	ldr	r2, [pc, #500]	; (80030c0 <HAL_GPIO_Init+0x2a8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	f000 81b3 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4a7b      	ldr	r2, [pc, #492]	; (80030c4 <HAL_GPIO_Init+0x2ac>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	f000 81ad 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a79      	ldr	r2, [pc, #484]	; (80030c8 <HAL_GPIO_Init+0x2b0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	f000 81a7 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	f000 81a2 	beq.w	8003238 <HAL_GPIO_Init+0x420>
 8002ef4:	21bf      	movs	r1, #191	; 0xbf
 8002ef6:	486e      	ldr	r0, [pc, #440]	; (80030b0 <HAL_GPIO_Init+0x298>)
 8002ef8:	f7fe fac4 	bl	8001484 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efc:	e19c      	b.n	8003238 <HAL_GPIO_Init+0x420>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002efe:	2201      	movs	r2, #1
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	f040 818b 	bne.w	8003232 <HAL_GPIO_Init+0x41a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a60      	ldr	r2, [pc, #384]	; (80030a0 <HAL_GPIO_Init+0x288>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00f      	beq.n	8002f44 <HAL_GPIO_Init+0x12c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a5f      	ldr	r2, [pc, #380]	; (80030a4 <HAL_GPIO_Init+0x28c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00b      	beq.n	8002f44 <HAL_GPIO_Init+0x12c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a5e      	ldr	r2, [pc, #376]	; (80030a8 <HAL_GPIO_Init+0x290>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <HAL_GPIO_Init+0x12c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a5d      	ldr	r2, [pc, #372]	; (80030ac <HAL_GPIO_Init+0x294>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x12c>
 8002f3c:	21cd      	movs	r1, #205	; 0xcd
 8002f3e:	485c      	ldr	r0, [pc, #368]	; (80030b0 <HAL_GPIO_Init+0x298>)
 8002f40:	f7fe faa0 	bl	8001484 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b12      	cmp	r3, #18
 8002f4a:	d065      	beq.n	8003018 <HAL_GPIO_Init+0x200>
 8002f4c:	2b12      	cmp	r3, #18
 8002f4e:	d80e      	bhi.n	8002f6e <HAL_GPIO_Init+0x156>
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d04c      	beq.n	8002fee <HAL_GPIO_Init+0x1d6>
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d804      	bhi.n	8002f62 <HAL_GPIO_Init+0x14a>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d072      	beq.n	8003042 <HAL_GPIO_Init+0x22a>
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d01d      	beq.n	8002f9c <HAL_GPIO_Init+0x184>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f60:	e099      	b.n	8003096 <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	f000 8094 	beq.w	8003090 <HAL_GPIO_Init+0x278>
 8002f68:	2b11      	cmp	r3, #17
 8002f6a:	d02b      	beq.n	8002fc4 <HAL_GPIO_Init+0x1ac>
          break;
 8002f6c:	e093      	b.n	8003096 <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 8002f6e:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_GPIO_Init+0x2a0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d066      	beq.n	8003042 <HAL_GPIO_Init+0x22a>
 8002f74:	4a50      	ldr	r2, [pc, #320]	; (80030b8 <HAL_GPIO_Init+0x2a0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d806      	bhi.n	8002f88 <HAL_GPIO_Init+0x170>
 8002f7a:	4a4e      	ldr	r2, [pc, #312]	; (80030b4 <HAL_GPIO_Init+0x29c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d060      	beq.n	8003042 <HAL_GPIO_Init+0x22a>
 8002f80:	4a4f      	ldr	r2, [pc, #316]	; (80030c0 <HAL_GPIO_Init+0x2a8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d05d      	beq.n	8003042 <HAL_GPIO_Init+0x22a>
          break;
 8002f86:	e086      	b.n	8003096 <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 8002f88:	4a4c      	ldr	r2, [pc, #304]	; (80030bc <HAL_GPIO_Init+0x2a4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d059      	beq.n	8003042 <HAL_GPIO_Init+0x22a>
 8002f8e:	4a4e      	ldr	r2, [pc, #312]	; (80030c8 <HAL_GPIO_Init+0x2b0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d056      	beq.n	8003042 <HAL_GPIO_Init+0x22a>
 8002f94:	4a4b      	ldr	r2, [pc, #300]	; (80030c4 <HAL_GPIO_Init+0x2ac>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d053      	beq.n	8003042 <HAL_GPIO_Init+0x22a>
          break;
 8002f9a:	e07c      	b.n	8003096 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d00b      	beq.n	8002fbc <HAL_GPIO_Init+0x1a4>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d007      	beq.n	8002fbc <HAL_GPIO_Init+0x1a4>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x1a4>
 8002fb4:	21d5      	movs	r1, #213	; 0xd5
 8002fb6:	483e      	ldr	r0, [pc, #248]	; (80030b0 <HAL_GPIO_Init+0x298>)
 8002fb8:	f7fe fa64 	bl	8001484 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	623b      	str	r3, [r7, #32]
          break;
 8002fc2:	e068      	b.n	8003096 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d00b      	beq.n	8002fe4 <HAL_GPIO_Init+0x1cc>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d007      	beq.n	8002fe4 <HAL_GPIO_Init+0x1cc>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x1cc>
 8002fdc:	21dc      	movs	r1, #220	; 0xdc
 8002fde:	4834      	ldr	r0, [pc, #208]	; (80030b0 <HAL_GPIO_Init+0x298>)
 8002fe0:	f7fe fa50 	bl	8001484 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	623b      	str	r3, [r7, #32]
          break;
 8002fec:	e053      	b.n	8003096 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d00b      	beq.n	800300e <HAL_GPIO_Init+0x1f6>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d007      	beq.n	800300e <HAL_GPIO_Init+0x1f6>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x1f6>
 8003006:	21e3      	movs	r1, #227	; 0xe3
 8003008:	4829      	ldr	r0, [pc, #164]	; (80030b0 <HAL_GPIO_Init+0x298>)
 800300a:	f7fe fa3b 	bl	8001484 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	3308      	adds	r3, #8
 8003014:	623b      	str	r3, [r7, #32]
          break;
 8003016:	e03e      	b.n	8003096 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d00b      	beq.n	8003038 <HAL_GPIO_Init+0x220>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d007      	beq.n	8003038 <HAL_GPIO_Init+0x220>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x220>
 8003030:	21ea      	movs	r1, #234	; 0xea
 8003032:	481f      	ldr	r0, [pc, #124]	; (80030b0 <HAL_GPIO_Init+0x298>)
 8003034:	f7fe fa26 	bl	8001484 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	330c      	adds	r3, #12
 800303e:	623b      	str	r3, [r7, #32]
          break;
 8003040:	e029      	b.n	8003096 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_GPIO_Init+0x24a>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d007      	beq.n	8003062 <HAL_GPIO_Init+0x24a>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x24a>
 800305a:	21f7      	movs	r1, #247	; 0xf7
 800305c:	4814      	ldr	r0, [pc, #80]	; (80030b0 <HAL_GPIO_Init+0x298>)
 800305e:	f7fe fa11 	bl	8001484 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <HAL_GPIO_Init+0x258>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800306a:	2304      	movs	r3, #4
 800306c:	623b      	str	r3, [r7, #32]
          break;
 800306e:	e012      	b.n	8003096 <HAL_GPIO_Init+0x27e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_GPIO_Init+0x26c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003078:	2308      	movs	r3, #8
 800307a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	611a      	str	r2, [r3, #16]
          break;
 8003082:	e008      	b.n	8003096 <HAL_GPIO_Init+0x27e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003084:	2308      	movs	r3, #8
 8003086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	615a      	str	r2, [r3, #20]
          break;
 800308e:	e002      	b.n	8003096 <HAL_GPIO_Init+0x27e>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
          break;
 8003094:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2bff      	cmp	r3, #255	; 0xff
 800309a:	d817      	bhi.n	80030cc <HAL_GPIO_Init+0x2b4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	e017      	b.n	80030d0 <HAL_GPIO_Init+0x2b8>
 80030a0:	40010800 	.word	0x40010800
 80030a4:	40010c00 	.word	0x40010c00
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40011400 	.word	0x40011400
 80030b0:	08006eb8 	.word	0x08006eb8
 80030b4:	10110000 	.word	0x10110000
 80030b8:	10210000 	.word	0x10210000
 80030bc:	10310000 	.word	0x10310000
 80030c0:	10120000 	.word	0x10120000
 80030c4:	10220000 	.word	0x10220000
 80030c8:	10320000 	.word	0x10320000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3304      	adds	r3, #4
 80030d0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2bff      	cmp	r3, #255	; 0xff
 80030d6:	d802      	bhi.n	80030de <HAL_GPIO_Init+0x2c6>
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	e002      	b.n	80030e4 <HAL_GPIO_Init+0x2cc>
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	3b08      	subs	r3, #8
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	210f      	movs	r1, #15
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	401a      	ands	r2, r3
 80030f6:	6a39      	ldr	r1, [r7, #32]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	431a      	orrs	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8090 	beq.w	8003232 <HAL_GPIO_Init+0x41a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003112:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <HAL_GPIO_Init+0x438>)
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	4a4e      	ldr	r2, [pc, #312]	; (8003250 <HAL_GPIO_Init+0x438>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6193      	str	r3, [r2, #24]
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_GPIO_Init+0x438>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800312a:	4a4a      	ldr	r2, [pc, #296]	; (8003254 <HAL_GPIO_Init+0x43c>)
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	3302      	adds	r3, #2
 8003132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003136:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4013      	ands	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a41      	ldr	r2, [pc, #260]	; (8003258 <HAL_GPIO_Init+0x440>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00d      	beq.n	8003172 <HAL_GPIO_Init+0x35a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a40      	ldr	r2, [pc, #256]	; (800325c <HAL_GPIO_Init+0x444>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <HAL_GPIO_Init+0x356>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a3f      	ldr	r2, [pc, #252]	; (8003260 <HAL_GPIO_Init+0x448>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_GPIO_Init+0x352>
 8003166:	2302      	movs	r3, #2
 8003168:	e004      	b.n	8003174 <HAL_GPIO_Init+0x35c>
 800316a:	2303      	movs	r3, #3
 800316c:	e002      	b.n	8003174 <HAL_GPIO_Init+0x35c>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_GPIO_Init+0x35c>
 8003172:	2300      	movs	r3, #0
 8003174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003176:	f002 0203 	and.w	r2, r2, #3
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	4093      	lsls	r3, r2
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003184:	4933      	ldr	r1, [pc, #204]	; (8003254 <HAL_GPIO_Init+0x43c>)
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <HAL_GPIO_Init+0x394>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4930      	ldr	r1, [pc, #192]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
 80031aa:	e006      	b.n	80031ba <HAL_GPIO_Init+0x3a2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	492b      	ldr	r1, [pc, #172]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d006      	beq.n	80031d4 <HAL_GPIO_Init+0x3bc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031c6:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4926      	ldr	r1, [pc, #152]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
 80031d2:	e006      	b.n	80031e2 <HAL_GPIO_Init+0x3ca>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031d4:	4b23      	ldr	r3, [pc, #140]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	43db      	mvns	r3, r3
 80031dc:	4921      	ldr	r1, [pc, #132]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031de:	4013      	ands	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <HAL_GPIO_Init+0x3e4>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	491c      	ldr	r1, [pc, #112]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
 80031fa:	e006      	b.n	800320a <HAL_GPIO_Init+0x3f2>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_GPIO_Init+0x44c>)
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	43db      	mvns	r3, r3
 8003204:	4917      	ldr	r1, [pc, #92]	; (8003264 <HAL_GPIO_Init+0x44c>)
 8003206:	4013      	ands	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <HAL_GPIO_Init+0x40c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <HAL_GPIO_Init+0x44c>)
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	4912      	ldr	r1, [pc, #72]	; (8003264 <HAL_GPIO_Init+0x44c>)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	60cb      	str	r3, [r1, #12]
 8003222:	e006      	b.n	8003232 <HAL_GPIO_Init+0x41a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_GPIO_Init+0x44c>)
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	43db      	mvns	r3, r3
 800322c:	490d      	ldr	r1, [pc, #52]	; (8003264 <HAL_GPIO_Init+0x44c>)
 800322e:	4013      	ands	r3, r2
 8003230:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	3301      	adds	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	f47f ae5b 	bne.w	8002efe <HAL_GPIO_Init+0xe6>
  }
}
 8003248:	bf00      	nop
 800324a:	3728      	adds	r7, #40	; 0x28
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	40010000 	.word	0x40010000
 8003258:	40010800 	.word	0x40010800
 800325c:	40010c00 	.word	0x40010c00
 8003260:	40011000 	.word	0x40011000
 8003264:	40010400 	.word	0x40010400

08003268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d004      	beq.n	8003288 <HAL_GPIO_WritePin+0x20>
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	041b      	lsls	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_GPIO_WritePin+0x2a>
 8003288:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800328c:	480e      	ldr	r0, [pc, #56]	; (80032c8 <HAL_GPIO_WritePin+0x60>)
 800328e:	f7fe f8f9 	bl	8001484 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003292:	787b      	ldrb	r3, [r7, #1]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <HAL_GPIO_WritePin+0x40>
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d004      	beq.n	80032a8 <HAL_GPIO_WritePin+0x40>
 800329e:	f240 11d5 	movw	r1, #469	; 0x1d5
 80032a2:	4809      	ldr	r0, [pc, #36]	; (80032c8 <HAL_GPIO_WritePin+0x60>)
 80032a4:	f7fe f8ee 	bl	8001484 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80032a8:	787b      	ldrb	r3, [r7, #1]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032b4:	e003      	b.n	80032be <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032b6:	887b      	ldrh	r3, [r7, #2]
 80032b8:	041a      	lsls	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	08006eb8 	.word	0x08006eb8

080032cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <HAL_GPIO_TogglePin+0x1c>
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_GPIO_TogglePin+0x26>
 80032e8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80032ec:	4809      	ldr	r0, [pc, #36]	; (8003314 <HAL_GPIO_TogglePin+0x48>)
 80032ee:	f7fe f8c9 	bl	8001484 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	887b      	ldrh	r3, [r7, #2]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003304:	e002      	b.n	800330c <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	08006eb8 	.word	0x08006eb8

08003318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e193      	b.n	8003652 <HAL_I2C_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a95      	ldr	r2, [pc, #596]	; (8003584 <HAL_I2C_Init+0x26c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_I2C_Init+0x26>
 8003334:	f240 11cd 	movw	r1, #461	; 0x1cd
 8003338:	4893      	ldr	r0, [pc, #588]	; (8003588 <HAL_I2C_Init+0x270>)
 800333a:	f7fe f8a3 	bl	8001484 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_I2C_Init+0x38>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4a90      	ldr	r2, [pc, #576]	; (800358c <HAL_I2C_Init+0x274>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d904      	bls.n	800335a <HAL_I2C_Init+0x42>
 8003350:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8003354:	488c      	ldr	r0, [pc, #560]	; (8003588 <HAL_I2C_Init+0x270>)
 8003356:	f7fe f895 	bl	8001484 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_I2C_Init+0x5e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800336a:	d004      	beq.n	8003376 <HAL_I2C_Init+0x5e>
 800336c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003370:	4885      	ldr	r0, [pc, #532]	; (8003588 <HAL_I2C_Init+0x270>)
 8003372:	f7fe f887 	bl	8001484 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800337e:	f023 0303 	bic.w	r3, r3, #3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_I2C_Init+0x78>
 8003386:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800338a:	487f      	ldr	r0, [pc, #508]	; (8003588 <HAL_I2C_Init+0x270>)
 800338c:	f7fe f87a 	bl	8001484 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003398:	d009      	beq.n	80033ae <HAL_I2C_Init+0x96>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033a2:	d004      	beq.n	80033ae <HAL_I2C_Init+0x96>
 80033a4:	f240 11d1 	movw	r1, #465	; 0x1d1
 80033a8:	4877      	ldr	r0, [pc, #476]	; (8003588 <HAL_I2C_Init+0x270>)
 80033aa:	f7fe f86b 	bl	8001484 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_I2C_Init+0xb0>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d004      	beq.n	80033c8 <HAL_I2C_Init+0xb0>
 80033be:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80033c2:	4871      	ldr	r0, [pc, #452]	; (8003588 <HAL_I2C_Init+0x270>)
 80033c4:	f7fe f85e 	bl	8001484 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <HAL_I2C_Init+0xc6>
 80033d4:	f240 11d3 	movw	r1, #467	; 0x1d3
 80033d8:	486b      	ldr	r0, [pc, #428]	; (8003588 <HAL_I2C_Init+0x270>)
 80033da:	f7fe f853 	bl	8001484 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_I2C_Init+0xe0>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d004      	beq.n	80033f8 <HAL_I2C_Init+0xe0>
 80033ee:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80033f2:	4865      	ldr	r0, [pc, #404]	; (8003588 <HAL_I2C_Init+0x270>)
 80033f4:	f7fe f846 	bl	8001484 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_I2C_Init+0xfa>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	2b80      	cmp	r3, #128	; 0x80
 8003406:	d004      	beq.n	8003412 <HAL_I2C_Init+0xfa>
 8003408:	f240 11d5 	movw	r1, #469	; 0x1d5
 800340c:	485e      	ldr	r0, [pc, #376]	; (8003588 <HAL_I2C_Init+0x270>)
 800340e:	f7fe f839 	bl	8001484 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_I2C_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fe38 	bl	800109c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2224      	movs	r2, #36	; 0x24
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003444:	f002 fa56 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 8003448:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4a50      	ldr	r2, [pc, #320]	; (8003590 <HAL_I2C_Init+0x278>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d807      	bhi.n	8003464 <HAL_I2C_Init+0x14c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a4f      	ldr	r2, [pc, #316]	; (8003594 <HAL_I2C_Init+0x27c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	bf94      	ite	ls
 800345c:	2301      	movls	r3, #1
 800345e:	2300      	movhi	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e006      	b.n	8003472 <HAL_I2C_Init+0x15a>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a4c      	ldr	r2, [pc, #304]	; (8003598 <HAL_I2C_Init+0x280>)
 8003468:	4293      	cmp	r3, r2
 800346a:	bf94      	ite	ls
 800346c:	2301      	movls	r3, #1
 800346e:	2300      	movhi	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_Init+0x162>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0eb      	b.n	8003652 <HAL_I2C_Init+0x33a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a47      	ldr	r2, [pc, #284]	; (800359c <HAL_I2C_Init+0x284>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0c9b      	lsrs	r3, r3, #18
 8003484:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a39      	ldr	r2, [pc, #228]	; (8003590 <HAL_I2C_Init+0x278>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d802      	bhi.n	80034b4 <HAL_I2C_Init+0x19c>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3301      	adds	r3, #1
 80034b2:	e009      	b.n	80034c8 <HAL_I2C_Init+0x1b0>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	4a38      	ldr	r2, [pc, #224]	; (80035a0 <HAL_I2C_Init+0x288>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	3301      	adds	r3, #1
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	492b      	ldr	r1, [pc, #172]	; (8003590 <HAL_I2C_Init+0x278>)
 80034e4:	428b      	cmp	r3, r1
 80034e6:	d80d      	bhi.n	8003504 <HAL_I2C_Init+0x1ec>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1e59      	subs	r1, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	bf38      	it	cc
 8003500:	2304      	movcc	r3, #4
 8003502:	e05f      	b.n	80035c4 <HAL_I2C_Init+0x2ac>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d111      	bne.n	8003530 <HAL_I2C_Init+0x218>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1e58      	subs	r0, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	440b      	add	r3, r1
 800351a:	fbb0 f3f3 	udiv	r3, r0, r3
 800351e:	3301      	adds	r3, #1
 8003520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e012      	b.n	8003556 <HAL_I2C_Init+0x23e>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	0099      	lsls	r1, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	fbb0 f3f3 	udiv	r3, r0, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Init+0x246>
 800355a:	2301      	movs	r3, #1
 800355c:	e032      	b.n	80035c4 <HAL_I2C_Init+0x2ac>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d11e      	bne.n	80035a4 <HAL_I2C_Init+0x28c>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1e58      	subs	r0, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	460b      	mov	r3, r1
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	440b      	add	r3, r1
 8003574:	fbb0 f3f3 	udiv	r3, r0, r3
 8003578:	3301      	adds	r3, #1
 800357a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003582:	e01f      	b.n	80035c4 <HAL_I2C_Init+0x2ac>
 8003584:	40005400 	.word	0x40005400
 8003588:	08006ef4 	.word	0x08006ef4
 800358c:	00061a80 	.word	0x00061a80
 8003590:	000186a0 	.word	0x000186a0
 8003594:	001e847f 	.word	0x001e847f
 8003598:	003d08ff 	.word	0x003d08ff
 800359c:	431bde83 	.word	0x431bde83
 80035a0:	10624dd3 	.word	0x10624dd3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1e58      	subs	r0, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	0099      	lsls	r1, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	6809      	ldr	r1, [r1, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6911      	ldr	r1, [r2, #16]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	430b      	orrs	r3, r1
 8003606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop

0800365c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800367c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b10      	cmp	r3, #16
 800368a:	d003      	beq.n	8003694 <HAL_I2C_EV_IRQHandler+0x38>
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	f040 80b6 	bne.w	8003800 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <HAL_I2C_EV_IRQHandler+0x6e>
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80036b4:	d003      	beq.n	80036be <HAL_I2C_EV_IRQHandler+0x62>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80036bc:	d101      	bne.n	80036c2 <HAL_I2C_EV_IRQHandler+0x66>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_I2C_EV_IRQHandler+0x68>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	f000 8127 	beq.w	8003918 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x92>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	0a5b      	lsrs	r3, r3, #9
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d006      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f001 fb74 	bl	8004dce <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fd03 	bl	80040f2 <I2C_Master_SB>
 80036ec:	e087      	b.n	80037fe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	08db      	lsrs	r3, r3, #3
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0xb2>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	0a5b      	lsrs	r3, r3, #9
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fd78 	bl	80041fc <I2C_Master_ADD10>
 800370c:	e077      	b.n	80037fe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_I2C_EV_IRQHandler+0xd2>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	0a5b      	lsrs	r3, r3, #9
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fd91 	bl	800424e <I2C_Master_ADDR>
 800372c:	e067      	b.n	80037fe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d030      	beq.n	800379c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003748:	f000 80e8 	beq.w	800391c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	09db      	lsrs	r3, r3, #7
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00f      	beq.n	8003778 <HAL_I2C_EV_IRQHandler+0x11c>
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	0a9b      	lsrs	r3, r3, #10
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <HAL_I2C_EV_IRQHandler+0x11c>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f9e4 	bl	8003b3e <I2C_MasterTransmit_TXE>
 8003776:	e042      	b.n	80037fe <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80cb 	beq.w	800391c <HAL_I2C_EV_IRQHandler+0x2c0>
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	0a5b      	lsrs	r3, r3, #9
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80c4 	beq.w	800391c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 faca 	bl	8003d2e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800379a:	e0bf      	b.n	800391c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037aa:	f000 80b7 	beq.w	800391c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00f      	beq.n	80037da <HAL_I2C_EV_IRQHandler+0x17e>
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	0a9b      	lsrs	r3, r3, #10
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <HAL_I2C_EV_IRQHandler+0x17e>
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fb21 	bl	8003e1a <I2C_MasterReceive_RXNE>
 80037d8:	e011      	b.n	80037fe <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 809a 	beq.w	800391c <HAL_I2C_EV_IRQHandler+0x2c0>
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	0a5b      	lsrs	r3, r3, #9
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8093 	beq.w	800391c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fb91 	bl	8003f1e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037fc:	e08e      	b.n	800391c <HAL_I2C_EV_IRQHandler+0x2c0>
 80037fe:	e08d      	b.n	800391c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d004      	beq.n	8003812 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	e007      	b.n	8003822 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d012      	beq.n	8003854 <HAL_I2C_EV_IRQHandler+0x1f8>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	0a5b      	lsrs	r3, r3, #9
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00c      	beq.n	8003854 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 ff55 	bl	80046fc <I2C_Slave_ADDR>
 8003852:	e066      	b.n	8003922 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0x218>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	0a5b      	lsrs	r3, r3, #9
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 ff89 	bl	8004784 <I2C_Slave_STOPF>
 8003872:	e056      	b.n	8003922 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003874:	7bbb      	ldrb	r3, [r7, #14]
 8003876:	2b21      	cmp	r3, #33	; 0x21
 8003878:	d002      	beq.n	8003880 <HAL_I2C_EV_IRQHandler+0x224>
 800387a:	7bbb      	ldrb	r3, [r7, #14]
 800387c:	2b29      	cmp	r3, #41	; 0x29
 800387e:	d125      	bne.n	80038cc <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	09db      	lsrs	r3, r3, #7
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00f      	beq.n	80038ac <HAL_I2C_EV_IRQHandler+0x250>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	0a9b      	lsrs	r3, r3, #10
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_I2C_EV_IRQHandler+0x250>
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fe6d 	bl	8004584 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038aa:	e039      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d033      	beq.n	8003920 <HAL_I2C_EV_IRQHandler+0x2c4>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	0a5b      	lsrs	r3, r3, #9
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02d      	beq.n	8003920 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fe9a 	bl	80045fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038ca:	e029      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00f      	beq.n	80038f8 <HAL_I2C_EV_IRQHandler+0x29c>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	0a9b      	lsrs	r3, r3, #10
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d009      	beq.n	80038f8 <HAL_I2C_EV_IRQHandler+0x29c>
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d103      	bne.n	80038f8 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fea4 	bl	800463e <I2C_SlaveReceive_RXNE>
 80038f6:	e014      	b.n	8003922 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00e      	beq.n	8003922 <HAL_I2C_EV_IRQHandler+0x2c6>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	0a5b      	lsrs	r3, r3, #9
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fed2 	bl	80046ba <I2C_SlaveReceive_BTF>
 8003916:	e004      	b.n	8003922 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003918:	bf00      	nop
 800391a:	e002      	b.n	8003922 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003920:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003940:	2300      	movs	r3, #0
 8003942:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d016      	beq.n	800397e <HAL_I2C_ER_IRQHandler+0x56>
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d010      	beq.n	800397e <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800396c:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	0a5b      	lsrs	r3, r3, #9
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00e      	beq.n	80039a8 <HAL_I2C_ER_IRQHandler+0x80>
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80039a6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	0a9b      	lsrs	r3, r3, #10
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d041      	beq.n	8003a38 <HAL_I2C_ER_IRQHandler+0x110>
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d03b      	beq.n	8003a38 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c6:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80039de:	7efb      	ldrb	r3, [r7, #27]
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d112      	bne.n	8003a0a <HAL_I2C_ER_IRQHandler+0xe2>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_I2C_ER_IRQHandler+0xe2>
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b21      	cmp	r3, #33	; 0x21
 80039ee:	d008      	beq.n	8003a02 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80039f0:	7cfb      	ldrb	r3, [r7, #19]
 80039f2:	2b29      	cmp	r3, #41	; 0x29
 80039f4:	d005      	beq.n	8003a02 <HAL_I2C_ER_IRQHandler+0xda>
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	2b28      	cmp	r3, #40	; 0x28
 80039fa:	d106      	bne.n	8003a0a <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b21      	cmp	r3, #33	; 0x21
 8003a00:	d103      	bne.n	8003a0a <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 ffee 	bl	80049e4 <I2C_Slave_AF>
 8003a08:	e016      	b.n	8003a38 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a12:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d107      	bne.n	8003a38 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a36:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	0adb      	lsrs	r3, r3, #11
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00e      	beq.n	8003a62 <HAL_I2C_ER_IRQHandler+0x13a>
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f043 0308 	orr.w	r3, r3, #8
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003a60:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f001 f825 	bl	8004ac4 <I2C_ITError>
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3728      	adds	r7, #40	; 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	70fb      	strb	r3, [r7, #3]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b54:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d150      	bne.n	8003c06 <I2C_MasterTransmit_TXE+0xc8>
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b21      	cmp	r3, #33	; 0x21
 8003b68:	d14d      	bne.n	8003c06 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d01d      	beq.n	8003bac <I2C_MasterTransmit_TXE+0x6e>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d01a      	beq.n	8003bac <I2C_MasterTransmit_TXE+0x6e>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b7c:	d016      	beq.n	8003bac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b8c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2211      	movs	r2, #17
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff6c 	bl	8003a82 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003baa:	e0bc      	b.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d107      	bne.n	8003bf6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ff81 	bl	8003af6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bf4:	e097      	b.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff ff3f 	bl	8003a82 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c04:	e08f      	b.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b21      	cmp	r3, #33	; 0x21
 8003c0a:	d007      	beq.n	8003c1c <I2C_MasterTransmit_TXE+0xde>
 8003c0c:	7bbb      	ldrb	r3, [r7, #14]
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	f040 8089 	bne.w	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b22      	cmp	r3, #34	; 0x22
 8003c18:	f040 8085 	bne.w	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d108      	bne.n	8003c38 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c34:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c36:	e076      	b.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d15d      	bne.n	8003d00 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d11d      	bne.n	8003c88 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d10b      	bne.n	8003c6c <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c64:	1c9a      	adds	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c6a:	e05c      	b.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	121b      	asrs	r3, r3, #8
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c86:	e04e      	b.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d10b      	bne.n	8003ca8 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ca6:	e03e      	b.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d13a      	bne.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b22      	cmp	r3, #34	; 0x22
 8003cba:	d108      	bne.n	8003cce <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cca:	601a      	str	r2, [r3, #0]
}
 8003ccc:	e02b      	b.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b21      	cmp	r3, #33	; 0x21
 8003cd8:	d125      	bne.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cfe:	e012      	b.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d24:	e7ff      	b.n	8003d26 <I2C_MasterTransmit_TXE+0x1e8>
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b21      	cmp	r3, #33	; 0x21
 8003d46:	d164      	bne.n	8003e12 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d012      	beq.n	8003d78 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8003d76:	e04c      	b.n	8003e12 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d01d      	beq.n	8003dba <I2C_MasterTransmit_BTF+0x8c>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d01a      	beq.n	8003dba <I2C_MasterTransmit_BTF+0x8c>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d8a:	d016      	beq.n	8003dba <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d9a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2211      	movs	r2, #17
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff fe65 	bl	8003a82 <HAL_I2C_MasterTxCpltCallback>
}
 8003db8:	e02b      	b.n	8003e12 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dc8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b40      	cmp	r3, #64	; 0x40
 8003df2:	d107      	bne.n	8003e04 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff fe7a 	bl	8003af6 <HAL_I2C_MemTxCpltCallback>
}
 8003e02:	e006      	b.n	8003e12 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff fe38 	bl	8003a82 <HAL_I2C_MasterTxCpltCallback>
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b22      	cmp	r3, #34	; 0x22
 8003e2c:	d173      	bne.n	8003f16 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d920      	bls.n	8003e7e <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d154      	bne.n	8003f16 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003e7c:	e04b      	b.n	8003f16 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d047      	beq.n	8003f16 <I2C_MasterReceive_RXNE+0xfc>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d002      	beq.n	8003e92 <I2C_MasterReceive_RXNE+0x78>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d141      	bne.n	8003f16 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eb0:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d10a      	bne.n	8003f02 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fe04 	bl	8003b08 <HAL_I2C_MemRxCpltCallback>
}
 8003f00:	e009      	b.n	8003f16 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2212      	movs	r2, #18
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fdbf 	bl	8003a94 <HAL_I2C_MasterRxCpltCallback>
}
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d11b      	bne.n	8003f6e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f44:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f6c:	e0bd      	b.n	80040ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d129      	bne.n	8003fcc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f86:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d00a      	beq.n	8003fa4 <I2C_MasterReceive_BTF+0x86>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d007      	beq.n	8003fa4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fca:	e08e      	b.n	80040ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d176      	bne.n	80040c4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d002      	beq.n	8003fe2 <I2C_MasterReceive_BTF+0xc4>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d108      	bne.n	8003ff4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e019      	b.n	8004028 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d002      	beq.n	8004000 <I2C_MasterReceive_BTF+0xe2>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d108      	bne.n	8004012 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e00a      	b.n	8004028 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b10      	cmp	r3, #16
 8004016:	d007      	beq.n	8004028 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004082:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d10a      	bne.n	80040ae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fd2e 	bl	8003b08 <HAL_I2C_MemRxCpltCallback>
}
 80040ac:	e01d      	b.n	80040ea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2212      	movs	r2, #18
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff fce9 	bl	8003a94 <HAL_I2C_MasterRxCpltCallback>
}
 80040c2:	e012      	b.n	80040ea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d117      	bne.n	8004136 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800411e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004120:	e067      	b.n	80041f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	b2da      	uxtb	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]
}
 8004134:	e05d      	b.n	80041f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800413e:	d133      	bne.n	80041a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b21      	cmp	r3, #33	; 0x21
 800414a:	d109      	bne.n	8004160 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800415c:	611a      	str	r2, [r3, #16]
 800415e:	e008      	b.n	8004172 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	2b00      	cmp	r3, #0
 8004178:	d103      	bne.n	8004182 <I2C_Master_SB+0x90>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	2b00      	cmp	r3, #0
 8004180:	d037      	beq.n	80041f2 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <I2C_Master_SB+0xa4>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	2b00      	cmp	r3, #0
 8004194:	d02d      	beq.n	80041f2 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a4:	605a      	str	r2, [r3, #4]
}
 80041a6:	e024      	b.n	80041f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10e      	bne.n	80041ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	11db      	asrs	r3, r3, #7
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 0306 	and.w	r3, r3, #6
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f063 030f 	orn	r3, r3, #15
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]
}
 80041cc:	e011      	b.n	80041f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10d      	bne.n	80041f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	b29b      	uxth	r3, r3
 80041dc:	11db      	asrs	r3, r3, #7
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f003 0306 	and.w	r3, r3, #6
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f063 030e 	orn	r3, r3, #14
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	611a      	str	r2, [r3, #16]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	b2da      	uxtb	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <I2C_Master_ADD10+0x24>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d011      	beq.n	8004244 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <I2C_Master_ADD10+0x38>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004242:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800424e:	b480      	push	{r7}
 8004250:	b091      	sub	sp, #68	; 0x44
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800425c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b22      	cmp	r3, #34	; 0x22
 8004276:	f040 8174 	bne.w	8004562 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10f      	bne.n	80042a2 <I2C_Master_ADDR+0x54>
 8004282:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d10b      	bne.n	80042a2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428a:	2300      	movs	r3, #0
 800428c:	633b      	str	r3, [r7, #48]	; 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	633b      	str	r3, [r7, #48]	; 0x30
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	633b      	str	r3, [r7, #48]	; 0x30
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	e16b      	b.n	800457a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d11d      	bne.n	80042e6 <I2C_Master_ADDR+0x98>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042b2:	d118      	bne.n	80042e6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b4:	2300      	movs	r3, #0
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50
 80042e4:	e149      	b.n	800457a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d113      	bne.n	8004318 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f0:	2300      	movs	r3, #0
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e120      	b.n	800455a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	f040 808a 	bne.w	8004438 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800432a:	d137      	bne.n	800439c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800433a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434a:	d113      	bne.n	8004374 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	e0f2      	b.n	800455a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004374:	2300      	movs	r3, #0
 8004376:	623b      	str	r3, [r7, #32]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	623b      	str	r3, [r7, #32]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e0de      	b.n	800455a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d02e      	beq.n	8004400 <I2C_Master_ADDR+0x1b2>
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d02b      	beq.n	8004400 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80043a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043aa:	2b12      	cmp	r3, #18
 80043ac:	d102      	bne.n	80043b4 <I2C_Master_ADDR+0x166>
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d125      	bne.n	8004400 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d00e      	beq.n	80043d8 <I2C_Master_ADDR+0x18a>
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d00b      	beq.n	80043d8 <I2C_Master_ADDR+0x18a>
 80043c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d008      	beq.n	80043d8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e007      	b.n	80043e8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	e0ac      	b.n	800455a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	61bb      	str	r3, [r7, #24]
 8004424:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e090      	b.n	800455a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d158      	bne.n	80044f4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	2b04      	cmp	r3, #4
 8004446:	d021      	beq.n	800448c <I2C_Master_ADDR+0x23e>
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	2b02      	cmp	r3, #2
 800444c:	d01e      	beq.n	800448c <I2C_Master_ADDR+0x23e>
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b10      	cmp	r3, #16
 8004452:	d01b      	beq.n	800448c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004462:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e012      	b.n	80044b2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800449a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c0:	d14b      	bne.n	800455a <I2C_Master_ADDR+0x30c>
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044c8:	d00b      	beq.n	80044e2 <I2C_Master_ADDR+0x294>
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d008      	beq.n	80044e2 <I2C_Master_ADDR+0x294>
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d005      	beq.n	80044e2 <I2C_Master_ADDR+0x294>
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d002      	beq.n	80044e2 <I2C_Master_ADDR+0x294>
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d13b      	bne.n	800455a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	e032      	b.n	800455a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004502:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004512:	d117      	bne.n	8004544 <I2C_Master_ADDR+0x2f6>
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800451a:	d00b      	beq.n	8004534 <I2C_Master_ADDR+0x2e6>
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	2b01      	cmp	r3, #1
 8004520:	d008      	beq.n	8004534 <I2C_Master_ADDR+0x2e6>
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	2b08      	cmp	r3, #8
 8004526:	d005      	beq.n	8004534 <I2C_Master_ADDR+0x2e6>
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	2b10      	cmp	r3, #16
 800452c:	d002      	beq.n	8004534 <I2C_Master_ADDR+0x2e6>
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	2b20      	cmp	r3, #32
 8004532:	d107      	bne.n	8004544 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004542:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004560:	e00b      	b.n	800457a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	68bb      	ldr	r3, [r7, #8]
}
 8004578:	e7ff      	b.n	800457a <I2C_Master_ADDR+0x32c>
 800457a:	bf00      	nop
 800457c:	3744      	adds	r7, #68	; 0x44
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004592:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d02b      	beq.n	80045f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	781a      	ldrb	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d114      	bne.n	80045f6 <I2C_SlaveTransmit_TXE+0x72>
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b29      	cmp	r3, #41	; 0x29
 80045d0:	d111      	bne.n	80045f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2221      	movs	r2, #33	; 0x21
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2228      	movs	r2, #40	; 0x28
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff fa58 	bl	8003aa6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d011      	beq.n	8004634 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d02c      	beq.n	80046b2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d114      	bne.n	80046b2 <I2C_SlaveReceive_RXNE+0x74>
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b2a      	cmp	r3, #42	; 0x2a
 800468c:	d111      	bne.n	80046b2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2222      	movs	r2, #34	; 0x22
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2228      	movs	r2, #40	; 0x28
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fa03 	bl	8003ab8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d012      	beq.n	80046f2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004716:	2b28      	cmp	r3, #40	; 0x28
 8004718:	d127      	bne.n	800476a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004728:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	09db      	lsrs	r3, r3, #7
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	81bb      	strh	r3, [r7, #12]
 800474c:	e002      	b.n	8004754 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800475c:	89ba      	ldrh	r2, [r7, #12]
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff f9b1 	bl	8003aca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004768:	e008      	b.n	800477c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f06f 0202 	mvn.w	r2, #2
 8004772:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004792:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80047a4:	2300      	movs	r3, #0
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e0:	d172      	bne.n	80048c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b22      	cmp	r3, #34	; 0x22
 80047e6:	d002      	beq.n	80047ee <I2C_Slave_STOPF+0x6a>
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b2a      	cmp	r3, #42	; 0x2a
 80047ec:	d135      	bne.n	800485a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004820:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fabc 	bl	8002da4 <HAL_DMA_GetState>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d049      	beq.n	80048c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	4a69      	ldr	r2, [pc, #420]	; (80049dc <I2C_Slave_STOPF+0x258>)
 8004838:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe f934 	bl	8002aac <HAL_DMA_Abort_IT>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d03d      	beq.n	80048c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004854:	4610      	mov	r0, r2
 8004856:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004858:	e035      	b.n	80048c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	b29a      	uxth	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0204 	orr.w	r2, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800488c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fa86 	bl	8002da4 <HAL_DMA_GetState>
 8004898:	4603      	mov	r3, r0
 800489a:	2b01      	cmp	r3, #1
 800489c:	d014      	beq.n	80048c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	4a4e      	ldr	r2, [pc, #312]	; (80049dc <I2C_Slave_STOPF+0x258>)
 80048a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe f8fe 	bl	8002aac <HAL_DMA_Abort_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048c0:	4610      	mov	r0, r2
 80048c2:	4798      	blx	r3
 80048c4:	e000      	b.n	80048c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d03e      	beq.n	8004950 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d112      	bne.n	8004906 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d112      	bne.n	800493a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f043 0204 	orr.w	r2, r3, #4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f8b3 	bl	8004ac4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800495e:	e039      	b.n	80049d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b2a      	cmp	r3, #42	; 0x2a
 8004964:	d109      	bne.n	800497a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2228      	movs	r2, #40	; 0x28
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff f89f 	bl	8003ab8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b28      	cmp	r3, #40	; 0x28
 8004984:	d111      	bne.n	80049aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <I2C_Slave_STOPF+0x25c>)
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff f89e 	bl	8003ae4 <HAL_I2C_ListenCpltCallback>
}
 80049a8:	e014      	b.n	80049d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	2b22      	cmp	r3, #34	; 0x22
 80049b0:	d002      	beq.n	80049b8 <I2C_Slave_STOPF+0x234>
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	2b22      	cmp	r3, #34	; 0x22
 80049b6:	d10d      	bne.n	80049d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff f872 	bl	8003ab8 <HAL_I2C_SlaveRxCpltCallback>
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	08004cf1 	.word	0x08004cf1
 80049e0:	ffff0000 	.word	0xffff0000

080049e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d002      	beq.n	8004a06 <I2C_Slave_AF+0x22>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d129      	bne.n	8004a5a <I2C_Slave_AF+0x76>
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b28      	cmp	r3, #40	; 0x28
 8004a0a:	d126      	bne.n	8004a5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ac0 <I2C_Slave_AF+0xdc>)
 8004a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff f846 	bl	8003ae4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a58:	e02e      	b.n	8004ab8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b21      	cmp	r3, #33	; 0x21
 8004a5e:	d126      	bne.n	8004aae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <I2C_Slave_AF+0xdc>)
 8004a64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2221      	movs	r2, #33	; 0x21
 8004a6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fe fffd 	bl	8003aa6 <HAL_I2C_SlaveTxCpltCallback>
}
 8004aac:	e004      	b.n	8004ab8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ab6:	615a      	str	r2, [r3, #20]
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	ffff0000 	.word	0xffff0000

08004ac4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad2:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d10a      	bne.n	8004af6 <I2C_ITError+0x32>
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b22      	cmp	r3, #34	; 0x22
 8004ae4:	d107      	bne.n	8004af6 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004afc:	2b28      	cmp	r3, #40	; 0x28
 8004afe:	d107      	bne.n	8004b10 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2228      	movs	r2, #40	; 0x28
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b0e:	e015      	b.n	8004b3c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1e:	d006      	beq.n	8004b2e <I2C_ITError+0x6a>
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b60      	cmp	r3, #96	; 0x60
 8004b24:	d003      	beq.n	8004b2e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4a:	d161      	bne.n	8004c10 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d020      	beq.n	8004baa <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6c:	4a5e      	ldr	r2, [pc, #376]	; (8004ce8 <I2C_ITError+0x224>)
 8004b6e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fd ff99 	bl	8002aac <HAL_DMA_Abort_IT>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8089 	beq.w	8004c94 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4798      	blx	r3
 8004ba8:	e074      	b.n	8004c94 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	4a4e      	ldr	r2, [pc, #312]	; (8004ce8 <I2C_ITError+0x224>)
 8004bb0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fd ff78 	bl	8002aac <HAL_DMA_Abort_IT>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d068      	beq.n	8004c94 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d10b      	bne.n	8004be8 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4798      	blx	r3
 8004c0e:	e041      	b.n	8004c94 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b60      	cmp	r3, #96	; 0x60
 8004c1a:	d125      	bne.n	8004c68 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d10b      	bne.n	8004c50 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7fe ff63 	bl	8003b2c <HAL_I2C_AbortCpltCallback>
 8004c66:	e015      	b.n	8004c94 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d10b      	bne.n	8004c8e <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fe ff43 	bl	8003b1a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d11b      	bne.n	8004ce0 <I2C_ITError+0x21c>
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b28      	cmp	r3, #40	; 0x28
 8004cac:	d118      	bne.n	8004ce0 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cbc:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <I2C_ITError+0x228>)
 8004cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fe ff02 	bl	8003ae4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	08004cf1 	.word	0x08004cf1
 8004cec:	ffff0000 	.word	0xffff0000

08004cf0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	2200      	movs	r2, #0
 8004d14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d30:	2200      	movs	r2, #0
 8004d32:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	2200      	movs	r2, #0
 8004d3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b60      	cmp	r3, #96	; 0x60
 8004d56:	d10e      	bne.n	8004d76 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f7fe fedc 	bl	8003b2c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d74:	e027      	b.n	8004dc6 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d76:	7afb      	ldrb	r3, [r7, #11]
 8004d78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d7c:	2b28      	cmp	r3, #40	; 0x28
 8004d7e:	d117      	bne.n	8004db0 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2228      	movs	r2, #40	; 0x28
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dae:	e007      	b.n	8004dc0 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7fe feaa 	bl	8003b1a <HAL_I2C_ErrorCallback>
}
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004dde:	d103      	bne.n	8004de8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004de6:	e007      	b.n	8004df8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004df0:	d102      	bne.n	8004df8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2208      	movs	r2, #8
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr
	...

08004e04 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004e08:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
}
 8004e0e:	bf00      	nop
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	420e0020 	.word	0x420e0020

08004e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e35c      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01c      	beq.n	8004e70 <HAL_RCC_OscConfig+0x54>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d116      	bne.n	8004e70 <HAL_RCC_OscConfig+0x54>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d110      	bne.n	8004e70 <HAL_RCC_OscConfig+0x54>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <HAL_RCC_OscConfig+0x54>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <HAL_RCC_OscConfig+0x54>
 8004e66:	f240 1167 	movw	r1, #359	; 0x167
 8004e6a:	48a5      	ldr	r0, [pc, #660]	; (8005100 <HAL_RCC_OscConfig+0x2e4>)
 8004e6c:	f7fc fb0a 	bl	8001484 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 809a 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00e      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x88>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8e:	d009      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x88>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e98:	d004      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x88>
 8004e9a:	f240 116d 	movw	r1, #365	; 0x16d
 8004e9e:	4898      	ldr	r0, [pc, #608]	; (8005100 <HAL_RCC_OscConfig+0x2e4>)
 8004ea0:	f7fc faf0 	bl	8001484 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ea4:	4b97      	ldr	r3, [pc, #604]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 030c 	and.w	r3, r3, #12
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d00c      	beq.n	8004eca <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004eb0:	4b94      	ldr	r3, [pc, #592]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d112      	bne.n	8004ee2 <HAL_RCC_OscConfig+0xc6>
 8004ebc:	4b91      	ldr	r3, [pc, #580]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eca:	4b8e      	ldr	r3, [pc, #568]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d06c      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x194>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d168      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e302      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eea:	d106      	bne.n	8004efa <HAL_RCC_OscConfig+0xde>
 8004eec:	4b85      	ldr	r3, [pc, #532]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a84      	ldr	r2, [pc, #528]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	e02e      	b.n	8004f58 <HAL_RCC_OscConfig+0x13c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x100>
 8004f02:	4b80      	ldr	r3, [pc, #512]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7f      	ldr	r2, [pc, #508]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b7d      	ldr	r3, [pc, #500]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a7c      	ldr	r2, [pc, #496]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e01d      	b.n	8004f58 <HAL_RCC_OscConfig+0x13c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x124>
 8004f26:	4b77      	ldr	r3, [pc, #476]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a76      	ldr	r2, [pc, #472]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b74      	ldr	r3, [pc, #464]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a73      	ldr	r2, [pc, #460]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e00b      	b.n	8004f58 <HAL_RCC_OscConfig+0x13c>
 8004f40:	4b70      	ldr	r3, [pc, #448]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a6f      	ldr	r2, [pc, #444]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b6d      	ldr	r3, [pc, #436]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a6c      	ldr	r2, [pc, #432]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fc fcac 	bl	80018bc <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fc fca8 	bl	80018bc <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e2b6      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b62      	ldr	r3, [pc, #392]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0x14c>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7fc fc98 	bl	80018bc <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fc fc94 	bl	80018bc <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e2a2      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	4b58      	ldr	r3, [pc, #352]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x174>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d079      	beq.n	80050b2 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x1bc>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d004      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x1bc>
 8004fce:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004fd2:	484b      	ldr	r0, [pc, #300]	; (8005100 <HAL_RCC_OscConfig+0x2e4>)
 8004fd4:	f7fc fa56 	bl	8001484 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	2b1f      	cmp	r3, #31
 8004fde:	d904      	bls.n	8004fea <HAL_RCC_OscConfig+0x1ce>
 8004fe0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004fe4:	4846      	ldr	r0, [pc, #280]	; (8005100 <HAL_RCC_OscConfig+0x2e4>)
 8004fe6:	f7fc fa4d 	bl	8001484 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fea:	4b46      	ldr	r3, [pc, #280]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ff6:	4b43      	ldr	r3, [pc, #268]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d11c      	bne.n	800503c <HAL_RCC_OscConfig+0x220>
 8005002:	4b40      	ldr	r3, [pc, #256]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d116      	bne.n	800503c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	4b3d      	ldr	r3, [pc, #244]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <HAL_RCC_OscConfig+0x20a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d001      	beq.n	8005026 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e260      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005026:	4b37      	ldr	r3, [pc, #220]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4933      	ldr	r1, [pc, #204]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800503a:	e03a      	b.n	80050b2 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d020      	beq.n	8005086 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005044:	4b30      	ldr	r3, [pc, #192]	; (8005108 <HAL_RCC_OscConfig+0x2ec>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504a:	f7fc fc37 	bl	80018bc <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005052:	f7fc fc33 	bl	80018bc <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e241      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005064:	4b27      	ldr	r3, [pc, #156]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005070:	4b24      	ldr	r3, [pc, #144]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4921      	ldr	r1, [pc, #132]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 8005080:	4313      	orrs	r3, r2
 8005082:	600b      	str	r3, [r1, #0]
 8005084:	e015      	b.n	80050b2 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <HAL_RCC_OscConfig+0x2ec>)
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7fc fc16 	bl	80018bc <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005094:	f7fc fc12 	bl	80018bc <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e220      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050a6:	4b17      	ldr	r3, [pc, #92]	; (8005104 <HAL_RCC_OscConfig+0x2e8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d048      	beq.n	8005150 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <HAL_RCC_OscConfig+0x2bc>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d004      	beq.n	80050d8 <HAL_RCC_OscConfig+0x2bc>
 80050ce:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80050d2:	480b      	ldr	r0, [pc, #44]	; (8005100 <HAL_RCC_OscConfig+0x2e4>)
 80050d4:	f7fc f9d6 	bl	8001484 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d021      	beq.n	8005124 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <HAL_RCC_OscConfig+0x2f0>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e6:	f7fc fbe9 	bl	80018bc <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ec:	e010      	b.n	8005110 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ee:	f7fc fbe5 	bl	80018bc <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d909      	bls.n	8005110 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e1f3      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
 8005100:	08006f2c 	.word	0x08006f2c
 8005104:	40021000 	.word	0x40021000
 8005108:	42420000 	.word	0x42420000
 800510c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005110:	4b67      	ldr	r3, [pc, #412]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0e8      	beq.n	80050ee <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800511c:	2001      	movs	r0, #1
 800511e:	f000 fc11 	bl	8005944 <RCC_Delay>
 8005122:	e015      	b.n	8005150 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005124:	4b63      	ldr	r3, [pc, #396]	; (80052b4 <HAL_RCC_OscConfig+0x498>)
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800512a:	f7fc fbc7 	bl	80018bc <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005132:	f7fc fbc3 	bl	80018bc <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e1d1      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005144:	4b5a      	ldr	r3, [pc, #360]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f0      	bne.n	8005132 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80c0 	beq.w	80052de <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_RCC_OscConfig+0x368>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d008      	beq.n	8005184 <HAL_RCC_OscConfig+0x368>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	2b05      	cmp	r3, #5
 8005178:	d004      	beq.n	8005184 <HAL_RCC_OscConfig+0x368>
 800517a:	f240 2111 	movw	r1, #529	; 0x211
 800517e:	484e      	ldr	r0, [pc, #312]	; (80052b8 <HAL_RCC_OscConfig+0x49c>)
 8005180:	f7fc f980 	bl	8001484 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005184:	4b4a      	ldr	r3, [pc, #296]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10d      	bne.n	80051ac <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005190:	4b47      	ldr	r3, [pc, #284]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	4a46      	ldr	r2, [pc, #280]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519a:	61d3      	str	r3, [r2, #28]
 800519c:	4b44      	ldr	r3, [pc, #272]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a8:	2301      	movs	r3, #1
 80051aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ac:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCC_OscConfig+0x4a0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d118      	bne.n	80051ea <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b8:	4b40      	ldr	r3, [pc, #256]	; (80052bc <HAL_RCC_OscConfig+0x4a0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a3f      	ldr	r2, [pc, #252]	; (80052bc <HAL_RCC_OscConfig+0x4a0>)
 80051be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c4:	f7fc fb7a 	bl	80018bc <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051cc:	f7fc fb76 	bl	80018bc <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b64      	cmp	r3, #100	; 0x64
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e184      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051de:	4b37      	ldr	r3, [pc, #220]	; (80052bc <HAL_RCC_OscConfig+0x4a0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d106      	bne.n	8005200 <HAL_RCC_OscConfig+0x3e4>
 80051f2:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	4a2e      	ldr	r2, [pc, #184]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	6213      	str	r3, [r2, #32]
 80051fe:	e02d      	b.n	800525c <HAL_RCC_OscConfig+0x440>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10c      	bne.n	8005222 <HAL_RCC_OscConfig+0x406>
 8005208:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	4a28      	ldr	r2, [pc, #160]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	6213      	str	r3, [r2, #32]
 8005214:	4b26      	ldr	r3, [pc, #152]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	4a25      	ldr	r2, [pc, #148]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 800521a:	f023 0304 	bic.w	r3, r3, #4
 800521e:	6213      	str	r3, [r2, #32]
 8005220:	e01c      	b.n	800525c <HAL_RCC_OscConfig+0x440>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	2b05      	cmp	r3, #5
 8005228:	d10c      	bne.n	8005244 <HAL_RCC_OscConfig+0x428>
 800522a:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	4a20      	ldr	r2, [pc, #128]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005230:	f043 0304 	orr.w	r3, r3, #4
 8005234:	6213      	str	r3, [r2, #32]
 8005236:	4b1e      	ldr	r3, [pc, #120]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	6213      	str	r3, [r2, #32]
 8005242:	e00b      	b.n	800525c <HAL_RCC_OscConfig+0x440>
 8005244:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	6213      	str	r3, [r2, #32]
 8005250:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005256:	f023 0304 	bic.w	r3, r3, #4
 800525a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005264:	f7fc fb2a 	bl	80018bc <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526a:	e00a      	b.n	8005282 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f7fc fb26 	bl	80018bc <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	; 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e132      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_OscConfig+0x494>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ee      	beq.n	800526c <HAL_RCC_OscConfig+0x450>
 800528e:	e01d      	b.n	80052cc <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005290:	f7fc fb14 	bl	80018bc <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005296:	e013      	b.n	80052c0 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005298:	f7fc fb10 	bl	80018bc <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d90a      	bls.n	80052c0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e11c      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000
 80052b4:	42420480 	.word	0x42420480
 80052b8:	08006f2c 	.word	0x08006f2c
 80052bc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c0:	4b8b      	ldr	r3, [pc, #556]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e5      	bne.n	8005298 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d2:	4b87      	ldr	r3, [pc, #540]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	4a86      	ldr	r2, [pc, #536]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 80052d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052dc:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00c      	beq.n	8005300 <HAL_RCC_OscConfig+0x4e4>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d008      	beq.n	8005300 <HAL_RCC_OscConfig+0x4e4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d004      	beq.n	8005300 <HAL_RCC_OscConfig+0x4e4>
 80052f6:	f240 21af 	movw	r1, #687	; 0x2af
 80052fa:	487e      	ldr	r0, [pc, #504]	; (80054f4 <HAL_RCC_OscConfig+0x6d8>)
 80052fc:	f7fc f8c2 	bl	8001484 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80ee 	beq.w	80054e6 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800530a:	4b79      	ldr	r3, [pc, #484]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f003 030c 	and.w	r3, r3, #12
 8005312:	2b08      	cmp	r3, #8
 8005314:	f000 80ce 	beq.w	80054b4 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	2b02      	cmp	r3, #2
 800531e:	f040 80b2 	bne.w	8005486 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <HAL_RCC_OscConfig+0x522>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005332:	d004      	beq.n	800533e <HAL_RCC_OscConfig+0x522>
 8005334:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8005338:	486e      	ldr	r0, [pc, #440]	; (80054f4 <HAL_RCC_OscConfig+0x6d8>)
 800533a:	f7fc f8a3 	bl	8001484 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d04a      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800534e:	d045      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005358:	d040      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005362:	d03b      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536c:	d036      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005376:	d031      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005380:	d02c      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800538a:	d027      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005394:	d022      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800539e:	d01d      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80053a8:	d018      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80053b2:	d013      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053bc:	d00e      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80053c6:	d009      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80053d0:	d004      	beq.n	80053dc <HAL_RCC_OscConfig+0x5c0>
 80053d2:	f240 21b9 	movw	r1, #697	; 0x2b9
 80053d6:	4847      	ldr	r0, [pc, #284]	; (80054f4 <HAL_RCC_OscConfig+0x6d8>)
 80053d8:	f7fc f854 	bl	8001484 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053dc:	4b46      	ldr	r3, [pc, #280]	; (80054f8 <HAL_RCC_OscConfig+0x6dc>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e2:	f7fc fa6b 	bl	80018bc <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ea:	f7fc fa67 	bl	80018bc <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e075      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053fc:	4b3c      	ldr	r3, [pc, #240]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1f0      	bne.n	80053ea <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005410:	d116      	bne.n	8005440 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_RCC_OscConfig+0x612>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005422:	d004      	beq.n	800542e <HAL_RCC_OscConfig+0x612>
 8005424:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005428:	4832      	ldr	r0, [pc, #200]	; (80054f4 <HAL_RCC_OscConfig+0x6d8>)
 800542a:	f7fc f82b 	bl	8001484 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800542e:	4b30      	ldr	r3, [pc, #192]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	492d      	ldr	r1, [pc, #180]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005440:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a19      	ldr	r1, [r3, #32]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	430b      	orrs	r3, r1
 8005452:	4927      	ldr	r1, [pc, #156]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 8005454:	4313      	orrs	r3, r2
 8005456:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005458:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <HAL_RCC_OscConfig+0x6dc>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545e:	f7fc fa2d 	bl	80018bc <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005466:	f7fc fa29 	bl	80018bc <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e037      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCC_OscConfig+0x64a>
 8005484:	e02f      	b.n	80054e6 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005486:	4b1c      	ldr	r3, [pc, #112]	; (80054f8 <HAL_RCC_OscConfig+0x6dc>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548c:	f7fc fa16 	bl	80018bc <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005494:	f7fc fa12 	bl	80018bc <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e020      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054a6:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0x678>
 80054b2:	e018      	b.n	80054e6 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e013      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_RCC_OscConfig+0x6d4>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d106      	bne.n	80054e2 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d001      	beq.n	80054e6 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40021000 	.word	0x40021000
 80054f4:	08006f2c 	.word	0x08006f2c
 80054f8:	42420060 	.word	0x42420060

080054fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e176      	b.n	80057fe <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d116      	bne.n	800554a <HAL_RCC_ClockConfig+0x4e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d110      	bne.n	800554a <HAL_RCC_ClockConfig+0x4e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <HAL_RCC_ClockConfig+0x4e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_RCC_ClockConfig+0x4e>
 8005540:	f44f 714e 	mov.w	r1, #824	; 0x338
 8005544:	4874      	ldr	r0, [pc, #464]	; (8005718 <HAL_RCC_ClockConfig+0x21c>)
 8005546:	f7fb ff9d 	bl	8001484 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <HAL_RCC_ClockConfig+0x6a>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d007      	beq.n	8005566 <HAL_RCC_ClockConfig+0x6a>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d004      	beq.n	8005566 <HAL_RCC_ClockConfig+0x6a>
 800555c:	f240 3139 	movw	r1, #825	; 0x339
 8005560:	486d      	ldr	r0, [pc, #436]	; (8005718 <HAL_RCC_ClockConfig+0x21c>)
 8005562:	f7fb ff8f 	bl	8001484 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005566:	4b6d      	ldr	r3, [pc, #436]	; (800571c <HAL_RCC_ClockConfig+0x220>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d910      	bls.n	8005596 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005574:	4b69      	ldr	r3, [pc, #420]	; (800571c <HAL_RCC_ClockConfig+0x220>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 0207 	bic.w	r2, r3, #7
 800557c:	4967      	ldr	r1, [pc, #412]	; (800571c <HAL_RCC_ClockConfig+0x220>)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	4313      	orrs	r3, r2
 8005582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005584:	4b65      	ldr	r3, [pc, #404]	; (800571c <HAL_RCC_ClockConfig+0x220>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d001      	beq.n	8005596 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e133      	b.n	80057fe <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d049      	beq.n	8005636 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055ae:	4b5c      	ldr	r3, [pc, #368]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4a5b      	ldr	r2, [pc, #364]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 80055b4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055b8:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c6:	4b56      	ldr	r3, [pc, #344]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	4a55      	ldr	r2, [pc, #340]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 80055cc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80055d0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d024      	beq.n	8005624 <HAL_RCC_ClockConfig+0x128>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b80      	cmp	r3, #128	; 0x80
 80055e0:	d020      	beq.n	8005624 <HAL_RCC_ClockConfig+0x128>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b90      	cmp	r3, #144	; 0x90
 80055e8:	d01c      	beq.n	8005624 <HAL_RCC_ClockConfig+0x128>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2ba0      	cmp	r3, #160	; 0xa0
 80055f0:	d018      	beq.n	8005624 <HAL_RCC_ClockConfig+0x128>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2bb0      	cmp	r3, #176	; 0xb0
 80055f8:	d014      	beq.n	8005624 <HAL_RCC_ClockConfig+0x128>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005600:	d010      	beq.n	8005624 <HAL_RCC_ClockConfig+0x128>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2bd0      	cmp	r3, #208	; 0xd0
 8005608:	d00c      	beq.n	8005624 <HAL_RCC_ClockConfig+0x128>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2be0      	cmp	r3, #224	; 0xe0
 8005610:	d008      	beq.n	8005624 <HAL_RCC_ClockConfig+0x128>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2bf0      	cmp	r3, #240	; 0xf0
 8005618:	d004      	beq.n	8005624 <HAL_RCC_ClockConfig+0x128>
 800561a:	f240 315f 	movw	r1, #863	; 0x35f
 800561e:	483e      	ldr	r0, [pc, #248]	; (8005718 <HAL_RCC_ClockConfig+0x21c>)
 8005620:	f7fb ff30 	bl	8001484 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005624:	4b3e      	ldr	r3, [pc, #248]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	493b      	ldr	r1, [pc, #236]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 8005632:	4313      	orrs	r3, r2
 8005634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d051      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00c      	beq.n	8005664 <HAL_RCC_ClockConfig+0x168>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d008      	beq.n	8005664 <HAL_RCC_ClockConfig+0x168>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d004      	beq.n	8005664 <HAL_RCC_ClockConfig+0x168>
 800565a:	f240 3166 	movw	r1, #870	; 0x366
 800565e:	482e      	ldr	r0, [pc, #184]	; (8005718 <HAL_RCC_ClockConfig+0x21c>)
 8005660:	f7fb ff10 	bl	8001484 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d107      	bne.n	800567c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566c:	4b2c      	ldr	r3, [pc, #176]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d115      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0c0      	b.n	80057fe <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d107      	bne.n	8005694 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	4b26      	ldr	r3, [pc, #152]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0b4      	b.n	80057fe <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005694:	4b22      	ldr	r3, [pc, #136]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0ac      	b.n	80057fe <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056a4:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f023 0203 	bic.w	r2, r3, #3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	491b      	ldr	r1, [pc, #108]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056b6:	f7fc f901 	bl	80018bc <HAL_GetTick>
 80056ba:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056bc:	e00a      	b.n	80056d4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056be:	f7fc f8fd 	bl	80018bc <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e094      	b.n	80057fe <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <HAL_RCC_ClockConfig+0x224>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 020c 	and.w	r2, r3, #12
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d1eb      	bne.n	80056be <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056e6:	4b0d      	ldr	r3, [pc, #52]	; (800571c <HAL_RCC_ClockConfig+0x220>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d217      	bcs.n	8005724 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f4:	4b09      	ldr	r3, [pc, #36]	; (800571c <HAL_RCC_ClockConfig+0x220>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f023 0207 	bic.w	r2, r3, #7
 80056fc:	4907      	ldr	r1, [pc, #28]	; (800571c <HAL_RCC_ClockConfig+0x220>)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	4313      	orrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_RCC_ClockConfig+0x220>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d008      	beq.n	8005724 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e073      	b.n	80057fe <HAL_RCC_ClockConfig+0x302>
 8005716:	bf00      	nop
 8005718:	08006f2c 	.word	0x08006f2c
 800571c:	40022000 	.word	0x40022000
 8005720:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d025      	beq.n	800577c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d018      	beq.n	800576a <HAL_RCC_ClockConfig+0x26e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005740:	d013      	beq.n	800576a <HAL_RCC_ClockConfig+0x26e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800574a:	d00e      	beq.n	800576a <HAL_RCC_ClockConfig+0x26e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005754:	d009      	beq.n	800576a <HAL_RCC_ClockConfig+0x26e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800575e:	d004      	beq.n	800576a <HAL_RCC_ClockConfig+0x26e>
 8005760:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8005764:	4828      	ldr	r0, [pc, #160]	; (8005808 <HAL_RCC_ClockConfig+0x30c>)
 8005766:	f7fb fe8d 	bl	8001484 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800576a:	4b28      	ldr	r3, [pc, #160]	; (800580c <HAL_RCC_ClockConfig+0x310>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	4925      	ldr	r1, [pc, #148]	; (800580c <HAL_RCC_ClockConfig+0x310>)
 8005778:	4313      	orrs	r3, r2
 800577a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d026      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d018      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x2c6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d013      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x2c6>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80057a2:	d00e      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x2c6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057ac:	d009      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x2c6>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057b6:	d004      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x2c6>
 80057b8:	f240 31ab 	movw	r1, #939	; 0x3ab
 80057bc:	4812      	ldr	r0, [pc, #72]	; (8005808 <HAL_RCC_ClockConfig+0x30c>)
 80057be:	f7fb fe61 	bl	8001484 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <HAL_RCC_ClockConfig+0x310>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	490e      	ldr	r1, [pc, #56]	; (800580c <HAL_RCC_ClockConfig+0x310>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057d6:	f000 f821 	bl	800581c <HAL_RCC_GetSysClockFreq>
 80057da:	4601      	mov	r1, r0
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCC_ClockConfig+0x310>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	091b      	lsrs	r3, r3, #4
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <HAL_RCC_ClockConfig+0x314>)
 80057e8:	5cd3      	ldrb	r3, [r2, r3]
 80057ea:	fa21 f303 	lsr.w	r3, r1, r3
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <HAL_RCC_ClockConfig+0x318>)
 80057f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057f2:	4b09      	ldr	r3, [pc, #36]	; (8005818 <HAL_RCC_ClockConfig+0x31c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fc f81e 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	08006f2c 	.word	0x08006f2c
 800580c:	40021000 	.word	0x40021000
 8005810:	08007000 	.word	0x08007000
 8005814:	20000008 	.word	0x20000008
 8005818:	2000000c 	.word	0x2000000c

0800581c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800581c:	b490      	push	{r4, r7}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005822:	4b2a      	ldr	r3, [pc, #168]	; (80058cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005824:	1d3c      	adds	r4, r7, #4
 8005826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800582c:	4b28      	ldr	r3, [pc, #160]	; (80058d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	2300      	movs	r3, #0
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005846:	4b23      	ldr	r3, [pc, #140]	; (80058d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 030c 	and.w	r3, r3, #12
 8005852:	2b04      	cmp	r3, #4
 8005854:	d002      	beq.n	800585c <HAL_RCC_GetSysClockFreq+0x40>
 8005856:	2b08      	cmp	r3, #8
 8005858:	d003      	beq.n	8005862 <HAL_RCC_GetSysClockFreq+0x46>
 800585a:	e02d      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800585c:	4b1e      	ldr	r3, [pc, #120]	; (80058d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800585e:	623b      	str	r3, [r7, #32]
      break;
 8005860:	e02d      	b.n	80058be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	0c9b      	lsrs	r3, r3, #18
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800586e:	4413      	add	r3, r2
 8005870:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005874:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d013      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005880:	4b14      	ldr	r3, [pc, #80]	; (80058d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	0c5b      	lsrs	r3, r3, #17
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800588e:	4413      	add	r3, r2
 8005890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005894:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	4a0f      	ldr	r2, [pc, #60]	; (80058d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800589a:	fb02 f203 	mul.w	r2, r2, r3
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 80058a6:	e004      	b.n	80058b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4a0c      	ldr	r2, [pc, #48]	; (80058dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80058ac:	fb02 f303 	mul.w	r3, r2, r3
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	623b      	str	r3, [r7, #32]
      break;
 80058b6:	e002      	b.n	80058be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058b8:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058ba:	623b      	str	r3, [r7, #32]
      break;
 80058bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058be:	6a3b      	ldr	r3, [r7, #32]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3728      	adds	r7, #40	; 0x28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc90      	pop	{r4, r7}
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	08006f64 	.word	0x08006f64
 80058d0:	08006f74 	.word	0x08006f74
 80058d4:	40021000 	.word	0x40021000
 80058d8:	007a1200 	.word	0x007a1200
 80058dc:	003d0900 	.word	0x003d0900

080058e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e4:	4b02      	ldr	r3, [pc, #8]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80058e6:	681b      	ldr	r3, [r3, #0]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	20000008 	.word	0x20000008

080058f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058f8:	f7ff fff2 	bl	80058e0 <HAL_RCC_GetHCLKFreq>
 80058fc:	4601      	mov	r1, r0
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	4a03      	ldr	r2, [pc, #12]	; (8005918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800590a:	5cd3      	ldrb	r3, [r2, r3]
 800590c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40021000 	.word	0x40021000
 8005918:	08007010 	.word	0x08007010

0800591c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005920:	f7ff ffde 	bl	80058e0 <HAL_RCC_GetHCLKFreq>
 8005924:	4601      	mov	r1, r0
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	0adb      	lsrs	r3, r3, #11
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	4a03      	ldr	r2, [pc, #12]	; (8005940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005932:	5cd3      	ldrb	r3, [r2, r3]
 8005934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40021000 	.word	0x40021000
 8005940:	08007010 	.word	0x08007010

08005944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <RCC_Delay+0x34>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a0a      	ldr	r2, [pc, #40]	; (800597c <RCC_Delay+0x38>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	0a5b      	lsrs	r3, r3, #9
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005960:	bf00      	nop
  }
  while (Delay --);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1e5a      	subs	r2, r3, #1
 8005966:	60fa      	str	r2, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f9      	bne.n	8005960 <RCC_Delay+0x1c>
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	20000008 	.word	0x20000008
 800597c:	10624dd3 	.word	0x10624dd3

08005980 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10f      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d103      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80059b4:	216c      	movs	r1, #108	; 0x6c
 80059b6:	4873      	ldr	r0, [pc, #460]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80059b8:	f7fb fd64 	bl	8001484 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8095 	beq.w	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d012      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059da:	d00d      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e4:	d008      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ee:	d003      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80059f0:	2172      	movs	r1, #114	; 0x72
 80059f2:	4864      	ldr	r0, [pc, #400]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80059f4:	f7fb fd46 	bl	8001484 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059fc:	4b62      	ldr	r3, [pc, #392]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10d      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a08:	4b5f      	ldr	r3, [pc, #380]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	4a5e      	ldr	r2, [pc, #376]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a12:	61d3      	str	r3, [r2, #28]
 8005a14:	4b5c      	ldr	r3, [pc, #368]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a24:	4b59      	ldr	r3, [pc, #356]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d118      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a30:	4b56      	ldr	r3, [pc, #344]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a55      	ldr	r2, [pc, #340]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a3c:	f7fb ff3e 	bl	80018bc <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a42:	e008      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a44:	f7fb ff3a 	bl	80018bc <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b64      	cmp	r3, #100	; 0x64
 8005a50:	d901      	bls.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e092      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a56:	4b4d      	ldr	r3, [pc, #308]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a62:	4b49      	ldr	r3, [pc, #292]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d02e      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d027      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a80:	4b41      	ldr	r3, [pc, #260]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a8a:	4b41      	ldr	r3, [pc, #260]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a90:	4b3f      	ldr	r3, [pc, #252]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a96:	4a3c      	ldr	r2, [pc, #240]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d014      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa6:	f7fb ff09 	bl	80018bc <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aac:	e00a      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aae:	f7fb ff05 	bl	80018bc <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e05b      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac4:	4b30      	ldr	r3, [pc, #192]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0ee      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ad0:	4b2d      	ldr	r3, [pc, #180]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	492a      	ldr	r1, [pc, #168]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d105      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ae8:	4b27      	ldr	r3, [pc, #156]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	4a26      	ldr	r2, [pc, #152]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01f      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d012      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b10:	d00d      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1a:	d008      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b24:	d003      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005b26:	21b9      	movs	r1, #185	; 0xb9
 8005b28:	4816      	ldr	r0, [pc, #88]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005b2a:	f7fb fcab 	bl	8001484 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b2e:	4b16      	ldr	r3, [pc, #88]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	4913      	ldr	r1, [pc, #76]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d016      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b54:	d008      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005b5e:	f240 1115 	movw	r1, #277	; 0x115
 8005b62:	4808      	ldr	r0, [pc, #32]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005b64:	f7fb fc8e 	bl	8001484 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b68:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4904      	ldr	r1, [pc, #16]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	08006f78 	.word	0x08006f78
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	40007000 	.word	0x40007000
 8005b90:	42420440 	.word	0x42420440

08005b94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b08d      	sub	sp, #52	; 0x34
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b9c:	4b5f      	ldr	r3, [pc, #380]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 8005b9e:	f107 040c 	add.w	r4, r7, #12
 8005ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005ba8:	4b5d      	ldr	r3, [pc, #372]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10e      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8005be0:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8005be4:	484f      	ldr	r0, [pc, #316]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 8005be6:	f7fb fc4d 	bl	8001484 <assert_failed>

  switch (PeriphClk)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d07f      	beq.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d002      	beq.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d048      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005bf8:	e08b      	b.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      temp_reg = RCC->CFGR;
 8005bfa:	4b4b      	ldr	r3, [pc, #300]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005c00:	4b49      	ldr	r3, [pc, #292]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d07f      	beq.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x178>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	0c9b      	lsrs	r3, r3, #18
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c18:	4413      	add	r3, r2
 8005c1a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c1e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d018      	beq.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c2a:	4b3f      	ldr	r3, [pc, #252]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	0c5b      	lsrs	r3, r3, #17
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c38:	4413      	add	r3, r2
 8005c3a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00d      	beq.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005c4a:	4a38      	ldr	r2, [pc, #224]	; (8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c5a:	e004      	b.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	4a34      	ldr	r2, [pc, #208]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8005c60:	fb02 f303 	mul.w	r3, r2, r3
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005c66:	4b30      	ldr	r3, [pc, #192]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c72:	d102      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = pllclk;
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005c78:	e048      	b.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          frequency = (pllclk * 2) / 3;
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005c88:	e040      	b.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x178>
      temp_reg = RCC->BDCR;
 8005c8a:	4b27      	ldr	r3, [pc, #156]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9a:	d108      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSE_VALUE;
 8005ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cac:	e01f      	b.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb8:	d109      	bne.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8005cba:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        frequency = LSI_VALUE;
 8005cc6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ccc:	e00f      	b.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd8:	d11a      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8005cda:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d014      	beq.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
        frequency = HSE_VALUE / 128U;
 8005ce6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005cec:	e010      	b.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8005cee:	e00f      	b.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005cf0:	f7ff fe14 	bl	800591c <HAL_RCC_GetPCLK2Freq>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	0b9b      	lsrs	r3, r3, #14
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	3301      	adds	r3, #1
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005d0a:	e002      	b.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 8005d0c:	bf00      	nop
 8005d0e:	e000      	b.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 8005d10:	bf00      	nop
    }
  }
  return (frequency);
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3734      	adds	r7, #52	; 0x34
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd90      	pop	{r4, r7, pc}
 8005d1c:	08006fb4 	.word	0x08006fb4
 8005d20:	08006fc4 	.word	0x08006fc4
 8005d24:	08006f78 	.word	0x08006f78
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	007a1200 	.word	0x007a1200
 8005d30:	003d0900 	.word	0x003d0900
 8005d34:	aaaaaaab 	.word	0xaaaaaaab

08005d38 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e0b4      	b.n	8005eb8 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a5b      	ldr	r2, [pc, #364]	; (8005ec0 <HAL_RTC_Init+0x188>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <HAL_RTC_Init+0x2a>
 8005d58:	f240 111d 	movw	r1, #285	; 0x11d
 8005d5c:	4859      	ldr	r0, [pc, #356]	; (8005ec4 <HAL_RTC_Init+0x18c>)
 8005d5e:	f7fb fb91 	bl	8001484 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d012      	beq.n	8005d90 <HAL_RTC_Init+0x58>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2b80      	cmp	r3, #128	; 0x80
 8005d70:	d00e      	beq.n	8005d90 <HAL_RTC_Init+0x58>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7a:	d009      	beq.n	8005d90 <HAL_RTC_Init+0x58>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d84:	d004      	beq.n	8005d90 <HAL_RTC_Init+0x58>
 8005d86:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005d8a:	484e      	ldr	r0, [pc, #312]	; (8005ec4 <HAL_RTC_Init+0x18c>)
 8005d8c:	f7fb fb7a 	bl	8001484 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d98:	d309      	bcc.n	8005dae <HAL_RTC_Init+0x76>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d004      	beq.n	8005dae <HAL_RTC_Init+0x76>
 8005da4:	f240 111f 	movw	r1, #287	; 0x11f
 8005da8:	4846      	ldr	r0, [pc, #280]	; (8005ec4 <HAL_RTC_Init+0x18c>)
 8005daa:	f7fb fb6b 	bl	8001484 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7c5b      	ldrb	r3, [r3, #17]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fb fbb4 	bl	800152c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fd07 	bl	80067de <HAL_RTC_WaitForSynchro>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e06b      	b.n	8005eb8 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fdc0 	bl	8006966 <RTC_EnterInitMode>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2204      	movs	r2, #4
 8005df0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e060      	b.n	8005eb8 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0207 	bic.w	r2, r2, #7
 8005e04:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005e0e:	4b2e      	ldr	r3, [pc, #184]	; (8005ec8 <HAL_RTC_Init+0x190>)
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	4a2d      	ldr	r2, [pc, #180]	; (8005ec8 <HAL_RTC_Init+0x190>)
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005e1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ec8 <HAL_RTC_Init+0x190>)
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	4928      	ldr	r1, [pc, #160]	; (8005ec8 <HAL_RTC_Init+0x190>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e34:	d003      	beq.n	8005e3e <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e00e      	b.n	8005e5c <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005e3e:	2001      	movs	r0, #1
 8005e40:	f7ff fea8 	bl	8005b94 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e44:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d104      	bne.n	8005e56 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2204      	movs	r2, #4
 8005e50:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e030      	b.n	8005eb8 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f023 010f 	bic.w	r1, r3, #15
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	0c1a      	lsrs	r2, r3, #16
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	0c1b      	lsrs	r3, r3, #16
 8005e7a:	041b      	lsls	r3, r3, #16
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	b291      	uxth	r1, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	430b      	orrs	r3, r1
 8005e86:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fd94 	bl	80069b6 <RTC_ExitInitMode>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2204      	movs	r2, #4
 8005e98:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e00c      	b.n	8005eb8 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
  }
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40002800 	.word	0x40002800
 8005ec4:	08006fc8 	.word	0x08006fc8
 8005ec8:	40006c00 	.word	0x40006c00

08005ecc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_RTC_SetTime+0x20>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0cd      	b.n	800608c <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <HAL_RTC_SetTime+0x3a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d004      	beq.n	8005f06 <HAL_RTC_SetTime+0x3a>
 8005efc:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005f00:	4864      	ldr	r0, [pc, #400]	; (8006094 <HAL_RTC_SetTime+0x1c8>)
 8005f02:	f7fb fabf 	bl	8001484 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	7c1b      	ldrb	r3, [r3, #16]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_RTC_SetTime+0x46>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e0bc      	b.n	800608c <HAL_RTC_SetTime+0x1c0>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d12e      	bne.n	8005f82 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b17      	cmp	r3, #23
 8005f2a:	d904      	bls.n	8005f36 <HAL_RTC_SetTime+0x6a>
 8005f2c:	f240 21d3 	movw	r1, #723	; 0x2d3
 8005f30:	4858      	ldr	r0, [pc, #352]	; (8006094 <HAL_RTC_SetTime+0x1c8>)
 8005f32:	f7fb faa7 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	2b3b      	cmp	r3, #59	; 0x3b
 8005f3c:	d904      	bls.n	8005f48 <HAL_RTC_SetTime+0x7c>
 8005f3e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8005f42:	4854      	ldr	r0, [pc, #336]	; (8006094 <HAL_RTC_SetTime+0x1c8>)
 8005f44:	f7fb fa9e 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	789b      	ldrb	r3, [r3, #2]
 8005f4c:	2b3b      	cmp	r3, #59	; 0x3b
 8005f4e:	d904      	bls.n	8005f5a <HAL_RTC_SetTime+0x8e>
 8005f50:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005f54:	484f      	ldr	r0, [pc, #316]	; (8006094 <HAL_RTC_SetTime+0x1c8>)
 8005f56:	f7fb fa95 	bl	8001484 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005f64:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	460b      	mov	r3, r1
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	1a5b      	subs	r3, r3, r1
 8005f74:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005f76:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005f7c:	4413      	add	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	e045      	b.n	800600e <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fd5a 	bl	8006a40 <RTC_Bcd2ToByte>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b17      	cmp	r3, #23
 8005f90:	d904      	bls.n	8005f9c <HAL_RTC_SetTime+0xd0>
 8005f92:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005f96:	483f      	ldr	r0, [pc, #252]	; (8006094 <HAL_RTC_SetTime+0x1c8>)
 8005f98:	f7fb fa74 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fd4d 	bl	8006a40 <RTC_Bcd2ToByte>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b3b      	cmp	r3, #59	; 0x3b
 8005faa:	d904      	bls.n	8005fb6 <HAL_RTC_SetTime+0xea>
 8005fac:	f240 21de 	movw	r1, #734	; 0x2de
 8005fb0:	4838      	ldr	r0, [pc, #224]	; (8006094 <HAL_RTC_SetTime+0x1c8>)
 8005fb2:	f7fb fa67 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	789b      	ldrb	r3, [r3, #2]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fd40 	bl	8006a40 <RTC_Bcd2ToByte>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b3b      	cmp	r3, #59	; 0x3b
 8005fc4:	d904      	bls.n	8005fd0 <HAL_RTC_SetTime+0x104>
 8005fc6:	f240 21df 	movw	r1, #735	; 0x2df
 8005fca:	4832      	ldr	r0, [pc, #200]	; (8006094 <HAL_RTC_SetTime+0x1c8>)
 8005fcc:	f7fb fa5a 	bl	8001484 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fd33 	bl	8006a40 <RTC_Bcd2ToByte>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005fe2:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	785b      	ldrb	r3, [r3, #1]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fd28 	bl	8006a40 <RTC_Bcd2ToByte>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	1a9b      	subs	r3, r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005ffc:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	789b      	ldrb	r3, [r3, #2]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fd1c 	bl	8006a40 <RTC_Bcd2ToByte>
 8006008:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800600a:	4423      	add	r3, r4
 800600c:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800600e:	6979      	ldr	r1, [r7, #20]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fc41 	bl	8006898 <RTC_WriteTimeCounter>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2204      	movs	r2, #4
 8006020:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e02f      	b.n	800608c <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0205 	bic.w	r2, r2, #5
 800603a:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fc52 	bl	80068e6 <RTC_ReadAlarmCounter>
 8006042:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d018      	beq.n	800607e <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	429a      	cmp	r2, r3
 8006052:	d214      	bcs.n	800607e <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800605a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800605e:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006060:	6939      	ldr	r1, [r7, #16]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fc58 	bl	8006918 <RTC_WriteAlarmCounter>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2204      	movs	r2, #4
 8006072:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e006      	b.n	800608c <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800608a:	2300      	movs	r3, #0
  }
}
 800608c:	4618      	mov	r0, r3
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	bd90      	pop	{r4, r7, pc}
 8006094:	08006fc8 	.word	0x08006fc8

08006098 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_RTC_GetTime+0x28>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0c0      	b.n	8006246 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <HAL_RTC_GetTime+0x42>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d004      	beq.n	80060da <HAL_RTC_GetTime+0x42>
 80060d0:	f240 312d 	movw	r1, #813	; 0x32d
 80060d4:	485e      	ldr	r0, [pc, #376]	; (8006250 <HAL_RTC_GetTime+0x1b8>)
 80060d6:	f7fb f9d5 	bl	8001484 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0ac      	b.n	8006246 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fba3 	bl	8006838 <RTC_ReadTimeCounter>
 80060f2:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	4a57      	ldr	r2, [pc, #348]	; (8006254 <HAL_RTC_GetTime+0x1bc>)
 80060f8:	fba2 2303 	umull	r2, r3, r2, r3
 80060fc:	0adb      	lsrs	r3, r3, #11
 80060fe:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	4b54      	ldr	r3, [pc, #336]	; (8006254 <HAL_RTC_GetTime+0x1bc>)
 8006104:	fba3 1302 	umull	r1, r3, r3, r2
 8006108:	0adb      	lsrs	r3, r3, #11
 800610a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800610e:	fb01 f303 	mul.w	r3, r1, r3
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	4a50      	ldr	r2, [pc, #320]	; (8006258 <HAL_RTC_GetTime+0x1c0>)
 8006116:	fba2 2303 	umull	r2, r3, r2, r3
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	4a4b      	ldr	r2, [pc, #300]	; (8006254 <HAL_RTC_GetTime+0x1bc>)
 8006126:	fba2 1203 	umull	r1, r2, r2, r3
 800612a:	0ad2      	lsrs	r2, r2, #11
 800612c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006130:	fb01 f202 	mul.w	r2, r1, r2
 8006134:	1a9a      	subs	r2, r3, r2
 8006136:	4b48      	ldr	r3, [pc, #288]	; (8006258 <HAL_RTC_GetTime+0x1c0>)
 8006138:	fba3 1302 	umull	r1, r3, r3, r2
 800613c:	0959      	lsrs	r1, r3, #5
 800613e:	460b      	mov	r3, r1
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	1a5b      	subs	r3, r3, r1
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	1ad1      	subs	r1, r2, r3
 8006148:	b2ca      	uxtb	r2, r1
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b17      	cmp	r3, #23
 8006152:	d955      	bls.n	8006200 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4a41      	ldr	r2, [pc, #260]	; (800625c <HAL_RTC_GetTime+0x1c4>)
 8006158:	fba2 2303 	umull	r2, r3, r2, r3
 800615c:	091b      	lsrs	r3, r3, #4
 800615e:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8006160:	6939      	ldr	r1, [r7, #16]
 8006162:	4b3e      	ldr	r3, [pc, #248]	; (800625c <HAL_RTC_GetTime+0x1c4>)
 8006164:	fba3 2301 	umull	r2, r3, r3, r1
 8006168:	091a      	lsrs	r2, r3, #4
 800616a:	4613      	mov	r3, r2
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	4413      	add	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	1aca      	subs	r2, r1, r3
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 fbb3 	bl	80068e6 <RTC_ReadAlarmCounter>
 8006180:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d008      	beq.n	800619c <HAL_RTC_GetTime+0x104>
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	429a      	cmp	r2, r3
 8006190:	d904      	bls.n	800619c <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e002      	b.n	80061a2 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800619c:	f04f 33ff 	mov.w	r3, #4294967295
 80061a0:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4a2e      	ldr	r2, [pc, #184]	; (8006260 <HAL_RTC_GetTime+0x1c8>)
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80061b0:	69b9      	ldr	r1, [r7, #24]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fb70 	bl	8006898 <RTC_WriteTimeCounter>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e041      	b.n	8006246 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d00c      	beq.n	80061e4 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	4413      	add	r3, r2
 80061d0:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fb9f 	bl	8006918 <RTC_WriteAlarmCounter>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e030      	b.n	8006246 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80061e4:	69f9      	ldr	r1, [r7, #28]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fb96 	bl	8006918 <RTC_WriteAlarmCounter>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e027      	b.n	8006246 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80061f6:	6979      	ldr	r1, [r7, #20]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fc3e 	bl	8006a7a <RTC_DateUpdate>
 80061fe:	e003      	b.n	8006208 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	b2da      	uxtb	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01a      	beq.n	8006244 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fbf7 	bl	8006a06 <RTC_ByteToBcd2>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fbee 	bl	8006a06 <RTC_ByteToBcd2>
 800622a:	4603      	mov	r3, r0
 800622c:	461a      	mov	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	789b      	ldrb	r3, [r3, #2]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fbe5 	bl	8006a06 <RTC_ByteToBcd2>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	08006fc8 	.word	0x08006fc8
 8006254:	91a2b3c5 	.word	0x91a2b3c5
 8006258:	88888889 	.word	0x88888889
 800625c:	aaaaaaab 	.word	0xaaaaaaab
 8006260:	00015180 	.word	0x00015180

08006264 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	2300      	movs	r3, #0
 8006276:	61bb      	str	r3, [r7, #24]
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_RTC_SetDate+0x24>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0fc      	b.n	8006486 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_RTC_SetDate+0x3e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d004      	beq.n	80062a2 <HAL_RTC_SetDate+0x3e>
 8006298:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800629c:	487c      	ldr	r0, [pc, #496]	; (8006490 <HAL_RTC_SetDate+0x22c>)
 800629e:	f7fb f8f1 	bl	8001484 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	7c1b      	ldrb	r3, [r3, #16]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_RTC_SetDate+0x4a>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e0eb      	b.n	8006486 <HAL_RTC_SetDate+0x222>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2202      	movs	r2, #2
 80062b8:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d12f      	bne.n	8006320 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	78db      	ldrb	r3, [r3, #3]
 80062c4:	2b63      	cmp	r3, #99	; 0x63
 80062c6:	d904      	bls.n	80062d2 <HAL_RTC_SetDate+0x6e>
 80062c8:	f240 31a5 	movw	r1, #933	; 0x3a5
 80062cc:	4870      	ldr	r0, [pc, #448]	; (8006490 <HAL_RTC_SetDate+0x22c>)
 80062ce:	f7fb f8d9 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_RTC_SetDate+0x7e>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d904      	bls.n	80062ec <HAL_RTC_SetDate+0x88>
 80062e2:	f240 31a6 	movw	r1, #934	; 0x3a6
 80062e6:	486a      	ldr	r0, [pc, #424]	; (8006490 <HAL_RTC_SetDate+0x22c>)
 80062e8:	f7fb f8cc 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	789b      	ldrb	r3, [r3, #2]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_RTC_SetDate+0x98>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	789b      	ldrb	r3, [r3, #2]
 80062f8:	2b1f      	cmp	r3, #31
 80062fa:	d904      	bls.n	8006306 <HAL_RTC_SetDate+0xa2>
 80062fc:	f240 31a7 	movw	r1, #935	; 0x3a7
 8006300:	4863      	ldr	r0, [pc, #396]	; (8006490 <HAL_RTC_SetDate+0x22c>)
 8006302:	f7fb f8bf 	bl	8001484 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	78da      	ldrb	r2, [r3, #3]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	785a      	ldrb	r2, [r3, #1]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	789a      	ldrb	r2, [r3, #2]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	739a      	strb	r2, [r3, #14]
 800631e:	e051      	b.n	80063c4 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	78db      	ldrb	r3, [r3, #3]
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fb8b 	bl	8006a40 <RTC_Bcd2ToByte>
 800632a:	4603      	mov	r3, r0
 800632c:	2b63      	cmp	r3, #99	; 0x63
 800632e:	d904      	bls.n	800633a <HAL_RTC_SetDate+0xd6>
 8006330:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8006334:	4856      	ldr	r0, [pc, #344]	; (8006490 <HAL_RTC_SetDate+0x22c>)
 8006336:	f7fb f8a5 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fb7e 	bl	8006a40 <RTC_Bcd2ToByte>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <HAL_RTC_SetDate+0xf6>
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fb76 	bl	8006a40 <RTC_Bcd2ToByte>
 8006354:	4603      	mov	r3, r0
 8006356:	2b0c      	cmp	r3, #12
 8006358:	d904      	bls.n	8006364 <HAL_RTC_SetDate+0x100>
 800635a:	f240 31b1 	movw	r1, #945	; 0x3b1
 800635e:	484c      	ldr	r0, [pc, #304]	; (8006490 <HAL_RTC_SetDate+0x22c>)
 8006360:	f7fb f890 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	789b      	ldrb	r3, [r3, #2]
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fb69 	bl	8006a40 <RTC_Bcd2ToByte>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <HAL_RTC_SetDate+0x120>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	789b      	ldrb	r3, [r3, #2]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fb61 	bl	8006a40 <RTC_Bcd2ToByte>
 800637e:	4603      	mov	r3, r0
 8006380:	2b1f      	cmp	r3, #31
 8006382:	d904      	bls.n	800638e <HAL_RTC_SetDate+0x12a>
 8006384:	f240 31b2 	movw	r1, #946	; 0x3b2
 8006388:	4841      	ldr	r0, [pc, #260]	; (8006490 <HAL_RTC_SetDate+0x22c>)
 800638a:	f7fb f87b 	bl	8001484 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	78db      	ldrb	r3, [r3, #3]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fb54 	bl	8006a40 <RTC_Bcd2ToByte>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fb4b 	bl	8006a40 <RTC_Bcd2ToByte>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	789b      	ldrb	r3, [r3, #2]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fb42 	bl	8006a40 <RTC_Bcd2ToByte>
 80063bc:	4603      	mov	r3, r0
 80063be:	461a      	mov	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	7bdb      	ldrb	r3, [r3, #15]
 80063c8:	4618      	mov	r0, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	7b59      	ldrb	r1, [r3, #13]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	7b9b      	ldrb	r3, [r3, #14]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 fc2c 	bl	8006c30 <RTC_WeekDayNum>
 80063d8:	4603      	mov	r3, r0
 80063da:	461a      	mov	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	7b1a      	ldrb	r2, [r3, #12]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 fa25 	bl	8006838 <RTC_ReadTimeCounter>
 80063ee:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4a28      	ldr	r2, [pc, #160]	; (8006494 <HAL_RTC_SetDate+0x230>)
 80063f4:	fba2 2303 	umull	r2, r3, r2, r3
 80063f8:	0adb      	lsrs	r3, r3, #11
 80063fa:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b18      	cmp	r3, #24
 8006400:	d93a      	bls.n	8006478 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	4a24      	ldr	r2, [pc, #144]	; (8006498 <HAL_RTC_SetDate+0x234>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	091b      	lsrs	r3, r3, #4
 800640c:	4a23      	ldr	r2, [pc, #140]	; (800649c <HAL_RTC_SetDate+0x238>)
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006418:	69f9      	ldr	r1, [r7, #28]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fa3c 	bl	8006898 <RTC_WriteTimeCounter>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2204      	movs	r2, #4
 800642a:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e027      	b.n	8006486 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 fa55 	bl	80068e6 <RTC_ReadAlarmCounter>
 800643c:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d018      	beq.n	8006478 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	429a      	cmp	r2, r3
 800644c:	d214      	bcs.n	8006478 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006454:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006458:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800645a:	69b9      	ldr	r1, [r7, #24]
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fa5b 	bl	8006918 <RTC_WriteAlarmCounter>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2204      	movs	r2, #4
 800646c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e006      	b.n	8006486 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	08006fc8 	.word	0x08006fc8
 8006494:	91a2b3c5 	.word	0x91a2b3c5
 8006498:	aaaaaaab 	.word	0xaaaaaaab
 800649c:	00015180 	.word	0x00015180

080064a0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80064ac:	f107 0314 	add.w	r3, r7, #20
 80064b0:	2100      	movs	r1, #0
 80064b2:	460a      	mov	r2, r1
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	460a      	mov	r2, r1
 80064b8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_RTC_GetDate+0x26>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e045      	b.n	8006556 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <HAL_RTC_GetDate+0x40>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d004      	beq.n	80064e0 <HAL_RTC_GetDate+0x40>
 80064d6:	f240 410e 	movw	r1, #1038	; 0x40e
 80064da:	4821      	ldr	r0, [pc, #132]	; (8006560 <HAL_RTC_GetDate+0xc0>)
 80064dc:	f7fa ffd2 	bl	8001484 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80064e0:	f107 0314 	add.w	r3, r7, #20
 80064e4:	2200      	movs	r2, #0
 80064e6:	4619      	mov	r1, r3
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fdd5 	bl	8006098 <HAL_RTC_GetTime>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e02e      	b.n	8006556 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	7b1a      	ldrb	r2, [r3, #12]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	7bda      	ldrb	r2, [r3, #15]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	7b5a      	ldrb	r2, [r3, #13]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	7b9a      	ldrb	r2, [r3, #14]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01a      	beq.n	8006554 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	78db      	ldrb	r3, [r3, #3]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fa6f 	bl	8006a06 <RTC_ByteToBcd2>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fa66 	bl	8006a06 <RTC_ByteToBcd2>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	789b      	ldrb	r3, [r3, #2]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fa5d 	bl	8006a06 <RTC_ByteToBcd2>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	08006fc8 	.word	0x08006fc8

08006564 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006564:	b590      	push	{r4, r7, lr}
 8006566:	b089      	sub	sp, #36	; 0x24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8006570:	2300      	movs	r3, #0
 8006572:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8006574:	f107 0314 	add.w	r3, r7, #20
 8006578:	2100      	movs	r1, #0
 800657a:	460a      	mov	r2, r1
 800657c:	801a      	strh	r2, [r3, #0]
 800657e:	460a      	mov	r2, r1
 8006580:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <HAL_RTC_SetAlarm_IT+0x2a>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e0ec      	b.n	800676c <HAL_RTC_SetAlarm_IT+0x208>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <HAL_RTC_SetAlarm_IT+0x44>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d004      	beq.n	80065a8 <HAL_RTC_SetAlarm_IT+0x44>
 800659e:	f240 41ac 	movw	r1, #1196	; 0x4ac
 80065a2:	4874      	ldr	r0, [pc, #464]	; (8006774 <HAL_RTC_SetAlarm_IT+0x210>)
 80065a4:	f7fa ff6e 	bl	8001484 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <HAL_RTC_SetAlarm_IT+0x56>
 80065b0:	f240 41ad 	movw	r1, #1197	; 0x4ad
 80065b4:	486f      	ldr	r0, [pc, #444]	; (8006774 <HAL_RTC_SetAlarm_IT+0x210>)
 80065b6:	f7fa ff65 	bl	8001484 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	7c1b      	ldrb	r3, [r3, #16]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_RTC_SetAlarm_IT+0x62>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e0d2      	b.n	800676c <HAL_RTC_SetAlarm_IT+0x208>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2202      	movs	r2, #2
 80065d0:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80065d2:	f107 0314 	add.w	r3, r7, #20
 80065d6:	2200      	movs	r2, #0
 80065d8:	4619      	mov	r1, r3
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff fd5c 	bl	8006098 <HAL_RTC_GetTime>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <HAL_RTC_SetAlarm_IT+0x86>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e0c0      	b.n	800676c <HAL_RTC_SetAlarm_IT+0x208>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80065ea:	7d3b      	ldrb	r3, [r7, #20]
 80065ec:	461a      	mov	r2, r3
 80065ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80065f2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80065f6:	7d7b      	ldrb	r3, [r7, #21]
 80065f8:	4619      	mov	r1, r3
 80065fa:	460b      	mov	r3, r1
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	1a5b      	subs	r3, r3, r1
 8006600:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006602:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8006604:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006606:	4413      	add	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d12e      	bne.n	800666e <HAL_RTC_SetAlarm_IT+0x10a>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b17      	cmp	r3, #23
 8006616:	d904      	bls.n	8006622 <HAL_RTC_SetAlarm_IT+0xbe>
 8006618:	f240 41c1 	movw	r1, #1217	; 0x4c1
 800661c:	4855      	ldr	r0, [pc, #340]	; (8006774 <HAL_RTC_SetAlarm_IT+0x210>)
 800661e:	f7fa ff31 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2b3b      	cmp	r3, #59	; 0x3b
 8006628:	d904      	bls.n	8006634 <HAL_RTC_SetAlarm_IT+0xd0>
 800662a:	f240 41c2 	movw	r1, #1218	; 0x4c2
 800662e:	4851      	ldr	r0, [pc, #324]	; (8006774 <HAL_RTC_SetAlarm_IT+0x210>)
 8006630:	f7fa ff28 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	789b      	ldrb	r3, [r3, #2]
 8006638:	2b3b      	cmp	r3, #59	; 0x3b
 800663a:	d904      	bls.n	8006646 <HAL_RTC_SetAlarm_IT+0xe2>
 800663c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8006640:	484c      	ldr	r0, [pc, #304]	; (8006774 <HAL_RTC_SetAlarm_IT+0x210>)
 8006642:	f7fa ff1f 	bl	8001484 <assert_failed>

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006650:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	785b      	ldrb	r3, [r3, #1]
 8006658:	4619      	mov	r1, r3
 800665a:	460b      	mov	r3, r1
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	1a5b      	subs	r3, r3, r1
 8006660:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006662:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006668:	4413      	add	r3, r2
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	e045      	b.n	80066fa <HAL_RTC_SetAlarm_IT+0x196>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f9e4 	bl	8006a40 <RTC_Bcd2ToByte>
 8006678:	4603      	mov	r3, r0
 800667a:	2b17      	cmp	r3, #23
 800667c:	d904      	bls.n	8006688 <HAL_RTC_SetAlarm_IT+0x124>
 800667e:	f240 41cb 	movw	r1, #1227	; 0x4cb
 8006682:	483c      	ldr	r0, [pc, #240]	; (8006774 <HAL_RTC_SetAlarm_IT+0x210>)
 8006684:	f7fa fefe 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	4618      	mov	r0, r3
 800668e:	f000 f9d7 	bl	8006a40 <RTC_Bcd2ToByte>
 8006692:	4603      	mov	r3, r0
 8006694:	2b3b      	cmp	r3, #59	; 0x3b
 8006696:	d904      	bls.n	80066a2 <HAL_RTC_SetAlarm_IT+0x13e>
 8006698:	f240 41cc 	movw	r1, #1228	; 0x4cc
 800669c:	4835      	ldr	r0, [pc, #212]	; (8006774 <HAL_RTC_SetAlarm_IT+0x210>)
 800669e:	f7fa fef1 	bl	8001484 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	789b      	ldrb	r3, [r3, #2]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f9ca 	bl	8006a40 <RTC_Bcd2ToByte>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b3b      	cmp	r3, #59	; 0x3b
 80066b0:	d904      	bls.n	80066bc <HAL_RTC_SetAlarm_IT+0x158>
 80066b2:	f240 41cd 	movw	r1, #1229	; 0x4cd
 80066b6:	482f      	ldr	r0, [pc, #188]	; (8006774 <HAL_RTC_SetAlarm_IT+0x210>)
 80066b8:	f7fa fee4 	bl	8001484 <assert_failed>

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 f9bd 	bl	8006a40 <RTC_Bcd2ToByte>
 80066c6:	4603      	mov	r3, r0
 80066c8:	461a      	mov	r2, r3
 80066ca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80066ce:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 f9b2 	bl	8006a40 <RTC_Bcd2ToByte>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	4613      	mov	r3, r2
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80066e8:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	789b      	ldrb	r3, [r3, #2]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f9a6 	bl	8006a40 <RTC_Bcd2ToByte>
 80066f4:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80066f6:	4423      	add	r3, r4
 80066f8:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d205      	bcs.n	800670e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006708:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800670c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800670e:	69f9      	ldr	r1, [r7, #28]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f901 	bl	8006918 <RTC_WriteAlarmCounter>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_RTC_SetAlarm_IT+0x1c8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2204      	movs	r2, #4
 8006720:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e01f      	b.n	800676c <HAL_RTC_SetAlarm_IT+0x208>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0202 	mvn.w	r2, #2
 8006734:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0202 	orr.w	r2, r2, #2
 8006744:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <HAL_RTC_SetAlarm_IT+0x214>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a0b      	ldr	r2, [pc, #44]	; (8006778 <HAL_RTC_SetAlarm_IT+0x214>)
 800674c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006750:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006752:	4b09      	ldr	r3, [pc, #36]	; (8006778 <HAL_RTC_SetAlarm_IT+0x214>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	4a08      	ldr	r2, [pc, #32]	; (8006778 <HAL_RTC_SetAlarm_IT+0x214>)
 8006758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675c:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800676a:	2300      	movs	r3, #0
  }
}
 800676c:	4618      	mov	r0, r3
 800676e:	3724      	adds	r7, #36	; 0x24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd90      	pop	{r4, r7, pc}
 8006774:	08006fc8 	.word	0x08006fc8
 8006778:	40010400 	.word	0x40010400

0800677c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f813 	bl	80067cc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f06f 0202 	mvn.w	r2, #2
 80067ae:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80067b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067b6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	745a      	strb	r2, [r3, #17]
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40010400 	.word	0x40010400

080067cc <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr

080067de <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e01d      	b.n	8006830 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0208 	bic.w	r2, r2, #8
 8006802:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006804:	f7fb f85a 	bl	80018bc <HAL_GetTick>
 8006808:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800680a:	e009      	b.n	8006820 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800680c:	f7fb f856 	bl	80018bc <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800681a:	d901      	bls.n	8006820 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e007      	b.n	8006830 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0ee      	beq.n	800680c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	827b      	strh	r3, [r7, #18]
 8006844:	2300      	movs	r3, #0
 8006846:	823b      	strh	r3, [r7, #16]
 8006848:	2300      	movs	r3, #0
 800684a:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006868:	8a7a      	ldrh	r2, [r7, #18]
 800686a:	8a3b      	ldrh	r3, [r7, #16]
 800686c:	429a      	cmp	r2, r3
 800686e:	d008      	beq.n	8006882 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006870:	8a3b      	ldrh	r3, [r7, #16]
 8006872:	041a      	lsls	r2, r3, #16
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	b29b      	uxth	r3, r3
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	e004      	b.n	800688c <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006882:	8a7b      	ldrh	r3, [r7, #18]
 8006884:	041a      	lsls	r2, r3, #16
 8006886:	89fb      	ldrh	r3, [r7, #14]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800688c:	697b      	ldr	r3, [r7, #20]
}
 800688e:	4618      	mov	r0, r3
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr

08006898 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f85d 	bl	8006966 <RTC_EnterInitMode>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	73fb      	strb	r3, [r7, #15]
 80068b6:	e011      	b.n	80068dc <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	0c12      	lsrs	r2, r2, #16
 80068c0:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	b292      	uxth	r2, r2
 80068ca:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f872 	bl	80069b6 <RTC_ExitInitMode>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	81fb      	strh	r3, [r7, #14]
 80068f2:	2300      	movs	r3, #0
 80068f4:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006906:	89fb      	ldrh	r3, [r7, #14]
 8006908:	041a      	lsls	r2, r3, #16
 800690a:	89bb      	ldrh	r3, [r7, #12]
 800690c:	4313      	orrs	r3, r2
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr

08006918 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f81d 	bl	8006966 <RTC_EnterInitMode>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]
 8006936:	e011      	b.n	800695c <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	0c12      	lsrs	r2, r2, #16
 8006940:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	b292      	uxth	r2, r2
 800694a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f832 	bl	80069b6 <RTC_ExitInitMode>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006972:	f7fa ffa3 	bl	80018bc <HAL_GetTick>
 8006976:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006978:	e009      	b.n	800698e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800697a:	f7fa ff9f 	bl	80018bc <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006988:	d901      	bls.n	800698e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e00f      	b.n	80069ae <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0ee      	beq.n	800697a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0210 	orr.w	r2, r2, #16
 80069aa:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0210 	bic.w	r2, r2, #16
 80069d0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80069d2:	f7fa ff73 	bl	80018bc <HAL_GetTick>
 80069d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80069d8:	e009      	b.n	80069ee <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80069da:	f7fa ff6f 	bl	80018bc <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069e8:	d901      	bls.n	80069ee <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e007      	b.n	80069fe <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0ee      	beq.n	80069da <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006a14:	e005      	b.n	8006a22 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	3b0a      	subs	r3, #10
 8006a20:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	2b09      	cmp	r3, #9
 8006a26:	d8f6      	bhi.n	8006a16 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	b2db      	uxtb	r3, r3
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr

08006a40 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	b2db      	uxtb	r3, r3
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr

08006a7a <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b086      	sub	sp, #24
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	7bdb      	ldrb	r3, [r3, #15]
 8006a98:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	7b5b      	ldrb	r3, [r3, #13]
 8006a9e:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	7b9b      	ldrb	r3, [r3, #14]
 8006aa4:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	e06f      	b.n	8006b8c <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d011      	beq.n	8006ad6 <RTC_DateUpdate+0x5c>
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d00e      	beq.n	8006ad6 <RTC_DateUpdate+0x5c>
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	2b05      	cmp	r3, #5
 8006abc:	d00b      	beq.n	8006ad6 <RTC_DateUpdate+0x5c>
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	2b07      	cmp	r3, #7
 8006ac2:	d008      	beq.n	8006ad6 <RTC_DateUpdate+0x5c>
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	d005      	beq.n	8006ad6 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b0a      	cmp	r3, #10
 8006ace:	d002      	beq.n	8006ad6 <RTC_DateUpdate+0x5c>
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2b0c      	cmp	r3, #12
 8006ad4:	d117      	bne.n	8006b06 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b1e      	cmp	r3, #30
 8006ada:	d803      	bhi.n	8006ae4 <RTC_DateUpdate+0x6a>
      {
        day++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006ae2:	e050      	b.n	8006b86 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b0c      	cmp	r3, #12
 8006ae8:	d005      	beq.n	8006af6 <RTC_DateUpdate+0x7c>
        {
          month++;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3301      	adds	r3, #1
 8006aee:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006af0:	2301      	movs	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006af4:	e047      	b.n	8006b86 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006af6:	2301      	movs	r3, #1
 8006af8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006afa:	2301      	movs	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
          year++;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	3301      	adds	r3, #1
 8006b02:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006b04:	e03f      	b.n	8006b86 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d008      	beq.n	8006b1e <RTC_DateUpdate+0xa4>
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b06      	cmp	r3, #6
 8006b10:	d005      	beq.n	8006b1e <RTC_DateUpdate+0xa4>
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b09      	cmp	r3, #9
 8006b16:	d002      	beq.n	8006b1e <RTC_DateUpdate+0xa4>
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b0b      	cmp	r3, #11
 8006b1c:	d10c      	bne.n	8006b38 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b1d      	cmp	r3, #29
 8006b22:	d803      	bhi.n	8006b2c <RTC_DateUpdate+0xb2>
      {
        day++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3301      	adds	r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006b2a:	e02c      	b.n	8006b86 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006b32:	2301      	movs	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006b36:	e026      	b.n	8006b86 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d123      	bne.n	8006b86 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b1b      	cmp	r3, #27
 8006b42:	d803      	bhi.n	8006b4c <RTC_DateUpdate+0xd2>
      {
        day++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	e01c      	b.n	8006b86 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b1c      	cmp	r3, #28
 8006b50:	d111      	bne.n	8006b76 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 f838 	bl	8006bcc <RTC_IsLeapYear>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <RTC_DateUpdate+0xf0>
        {
          day++;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	e00d      	b.n	8006b86 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006b70:	2301      	movs	r3, #1
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	e007      	b.n	8006b86 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b1d      	cmp	r3, #29
 8006b7a:	d104      	bne.n	8006b86 <RTC_DateUpdate+0x10c>
      {
        month++;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006b82:	2301      	movs	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	60bb      	str	r3, [r7, #8]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d38b      	bcc.n	8006aac <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6978      	ldr	r0, [r7, #20]
 8006bb8:	f000 f83a 	bl	8006c30 <RTC_WeekDayNum>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	731a      	strb	r2, [r3, #12]
}
 8006bc4:	bf00      	nop
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e01d      	b.n	8006c22 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	4a10      	ldr	r2, [pc, #64]	; (8006c2c <RTC_IsLeapYear+0x60>)
 8006bea:	fba2 1203 	umull	r1, r2, r2, r3
 8006bee:	0952      	lsrs	r2, r2, #5
 8006bf0:	2164      	movs	r1, #100	; 0x64
 8006bf2:	fb01 f202 	mul.w	r2, r1, r2
 8006bf6:	1a9b      	subs	r3, r3, r2
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e00f      	b.n	8006c22 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <RTC_IsLeapYear+0x60>)
 8006c06:	fba2 1203 	umull	r1, r2, r2, r3
 8006c0a:	09d2      	lsrs	r2, r2, #7
 8006c0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c10:	fb01 f202 	mul.w	r2, r1, r2
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e000      	b.n	8006c22 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006c20:	2300      	movs	r3, #0
  }
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr
 8006c2c:	51eb851f 	.word	0x51eb851f

08006c30 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60bb      	str	r3, [r7, #8]
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006c4e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d82d      	bhi.n	8006cb2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006c56:	78fa      	ldrb	r2, [r7, #3]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	4a2c      	ldr	r2, [pc, #176]	; (8006d14 <RTC_WeekDayNum+0xe4>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	085a      	lsrs	r2, r3, #1
 8006c6a:	78bb      	ldrb	r3, [r7, #2]
 8006c6c:	441a      	add	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	441a      	add	r2, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	089b      	lsrs	r3, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	4926      	ldr	r1, [pc, #152]	; (8006d18 <RTC_WeekDayNum+0xe8>)
 8006c80:	fba1 1303 	umull	r1, r3, r1, r3
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	1ad2      	subs	r2, r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	4922      	ldr	r1, [pc, #136]	; (8006d18 <RTC_WeekDayNum+0xe8>)
 8006c8e:	fba1 1303 	umull	r1, r3, r1, r3
 8006c92:	09db      	lsrs	r3, r3, #7
 8006c94:	4413      	add	r3, r2
 8006c96:	1d1a      	adds	r2, r3, #4
 8006c98:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <RTC_WeekDayNum+0xec>)
 8006c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c9e:	1ad1      	subs	r1, r2, r3
 8006ca0:	0849      	lsrs	r1, r1, #1
 8006ca2:	440b      	add	r3, r1
 8006ca4:	0899      	lsrs	r1, r3, #2
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	1a5b      	subs	r3, r3, r1
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	e029      	b.n	8006d06 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006cb2:	78fa      	ldrb	r2, [r7, #3]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	4413      	add	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	4a15      	ldr	r2, [pc, #84]	; (8006d14 <RTC_WeekDayNum+0xe4>)
 8006cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc4:	085a      	lsrs	r2, r3, #1
 8006cc6:	78bb      	ldrb	r3, [r7, #2]
 8006cc8:	441a      	add	r2, r3
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	441a      	add	r2, r3
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	089b      	lsrs	r3, r3, #2
 8006cd2:	441a      	add	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4910      	ldr	r1, [pc, #64]	; (8006d18 <RTC_WeekDayNum+0xe8>)
 8006cd8:	fba1 1303 	umull	r1, r3, r1, r3
 8006cdc:	095b      	lsrs	r3, r3, #5
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	490d      	ldr	r1, [pc, #52]	; (8006d18 <RTC_WeekDayNum+0xe8>)
 8006ce4:	fba1 1303 	umull	r1, r3, r1, r3
 8006ce8:	09db      	lsrs	r3, r3, #7
 8006cea:	4413      	add	r3, r2
 8006cec:	1c9a      	adds	r2, r3, #2
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <RTC_WeekDayNum+0xec>)
 8006cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf4:	1ad1      	subs	r1, r2, r3
 8006cf6:	0849      	lsrs	r1, r1, #1
 8006cf8:	440b      	add	r3, r1
 8006cfa:	0899      	lsrs	r1, r3, #2
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	1a5b      	subs	r3, r3, r1
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	b2db      	uxtb	r3, r3
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr
 8006d14:	38e38e39 	.word	0x38e38e39
 8006d18:	51eb851f 	.word	0x51eb851f
 8006d1c:	24924925 	.word	0x24924925

08006d20 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d024      	beq.n	8006d80 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01d      	beq.n	8006d80 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f818 	bl	8006d88 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0204 	mvn.w	r2, #4
 8006d60:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2204      	movs	r2, #4
 8006d66:	745a      	strb	r2, [r3, #17]
 8006d68:	e005      	b.n	8006d76 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fa fab2 	bl	80012d4 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f06f 0201 	mvn.w	r2, #1
 8006d7e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
	...

08006d9c <__libc_init_array>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	2500      	movs	r5, #0
 8006da0:	4e0c      	ldr	r6, [pc, #48]	; (8006dd4 <__libc_init_array+0x38>)
 8006da2:	4c0d      	ldr	r4, [pc, #52]	; (8006dd8 <__libc_init_array+0x3c>)
 8006da4:	1ba4      	subs	r4, r4, r6
 8006da6:	10a4      	asrs	r4, r4, #2
 8006da8:	42a5      	cmp	r5, r4
 8006daa:	d109      	bne.n	8006dc0 <__libc_init_array+0x24>
 8006dac:	f000 f822 	bl	8006df4 <_init>
 8006db0:	2500      	movs	r5, #0
 8006db2:	4e0a      	ldr	r6, [pc, #40]	; (8006ddc <__libc_init_array+0x40>)
 8006db4:	4c0a      	ldr	r4, [pc, #40]	; (8006de0 <__libc_init_array+0x44>)
 8006db6:	1ba4      	subs	r4, r4, r6
 8006db8:	10a4      	asrs	r4, r4, #2
 8006dba:	42a5      	cmp	r5, r4
 8006dbc:	d105      	bne.n	8006dca <__libc_init_array+0x2e>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dc4:	4798      	blx	r3
 8006dc6:	3501      	adds	r5, #1
 8006dc8:	e7ee      	b.n	8006da8 <__libc_init_array+0xc>
 8006dca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dce:	4798      	blx	r3
 8006dd0:	3501      	adds	r5, #1
 8006dd2:	e7f2      	b.n	8006dba <__libc_init_array+0x1e>
 8006dd4:	08007018 	.word	0x08007018
 8006dd8:	08007018 	.word	0x08007018
 8006ddc:	08007018 	.word	0x08007018
 8006de0:	0800701c 	.word	0x0800701c

08006de4 <memset>:
 8006de4:	4603      	mov	r3, r0
 8006de6:	4402      	add	r2, r0
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d100      	bne.n	8006dee <memset+0xa>
 8006dec:	4770      	bx	lr
 8006dee:	f803 1b01 	strb.w	r1, [r3], #1
 8006df2:	e7f9      	b.n	8006de8 <memset+0x4>

08006df4 <_init>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	bf00      	nop
 8006df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfa:	bc08      	pop	{r3}
 8006dfc:	469e      	mov	lr, r3
 8006dfe:	4770      	bx	lr

08006e00 <_fini>:
 8006e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e02:	bf00      	nop
 8006e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e06:	bc08      	pop	{r3}
 8006e08:	469e      	mov	lr, r3
 8006e0a:	4770      	bx	lr
