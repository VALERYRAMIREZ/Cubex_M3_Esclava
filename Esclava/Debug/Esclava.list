
Esclava.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f54  08004f54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f54  08004f54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f54  08004f54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f58  08004f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08004f68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08004f68  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000beff  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002193  00000000  00000000  0002bf34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000058ee  00000000  00000000  0002e0c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000af8  00000000  00000000  000339b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001421a  00000000  00000000  00034e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000b830  00000000  00000000  000490aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006c02e  00000000  00000000  000548da  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c0908  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a70  00000000  00000000  000c0984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d68 	.word	0x08004d68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004d68 	.word	0x08004d68

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fc05 	bl	8000998 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fa07 	bl	80005a6 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f000 fd5f 	bl	8000c6c <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 f9f7 	bl	80005a6 <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = FASE1_SENSOR_Pin|FASE2_SENSOR_Pin|FASE3_SENSOR_Pin|FASE4_SENSOR_Pin 
 8000218:	233f      	movs	r3, #63	; 0x3f
 800021a:	613b      	str	r3, [r7, #16]
                          |FASE5_SENSOR_Pin|FASE6_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f001 f8dc 	bl	80013e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b08a      	sub	sp, #40	; 0x28
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000254:	4b4b      	ldr	r3, [pc, #300]	; (8000384 <MX_GPIO_Init+0x144>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a4a      	ldr	r2, [pc, #296]	; (8000384 <MX_GPIO_Init+0x144>)
 800025a:	f043 0310 	orr.w	r3, r3, #16
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b48      	ldr	r3, [pc, #288]	; (8000384 <MX_GPIO_Init+0x144>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0310 	and.w	r3, r3, #16
 8000268:	613b      	str	r3, [r7, #16]
 800026a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026c:	4b45      	ldr	r3, [pc, #276]	; (8000384 <MX_GPIO_Init+0x144>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a44      	ldr	r2, [pc, #272]	; (8000384 <MX_GPIO_Init+0x144>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b42      	ldr	r3, [pc, #264]	; (8000384 <MX_GPIO_Init+0x144>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0320 	and.w	r3, r3, #32
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b3f      	ldr	r3, [pc, #252]	; (8000384 <MX_GPIO_Init+0x144>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a3e      	ldr	r2, [pc, #248]	; (8000384 <MX_GPIO_Init+0x144>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b3c      	ldr	r3, [pc, #240]	; (8000384 <MX_GPIO_Init+0x144>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	60bb      	str	r3, [r7, #8]
 800029a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029c:	4b39      	ldr	r3, [pc, #228]	; (8000384 <MX_GPIO_Init+0x144>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a38      	ldr	r2, [pc, #224]	; (8000384 <MX_GPIO_Init+0x144>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b36      	ldr	r3, [pc, #216]	; (8000384 <MX_GPIO_Init+0x144>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0308 	and.w	r3, r3, #8
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80002ba:	4833      	ldr	r0, [pc, #204]	; (8000388 <MX_GPIO_Init+0x148>)
 80002bc:	f001 faba 	bl	8001834 <HAL_GPIO_WritePin>
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 80002c0:	2200      	movs	r2, #0
 80002c2:	f24f 713f 	movw	r1, #63295	; 0xf73f
 80002c6:	4831      	ldr	r0, [pc, #196]	; (800038c <MX_GPIO_Init+0x14c>)
 80002c8:	f001 fab4 	bl	8001834 <HAL_GPIO_WritePin>
                          |FASE3_AMA_Pin|FASE6_VERDE_Pin|FASE6_AMA_Pin|FASE1_VERDE_Pin 
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002d2:	2303      	movs	r3, #3
 80002d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	4619      	mov	r1, r3
 80002dc:	482c      	ldr	r0, [pc, #176]	; (8000390 <MX_GPIO_Init+0x150>)
 80002de:	f001 f881 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80002e2:	2303      	movs	r3, #3
 80002e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e6:	2303      	movs	r3, #3
 80002e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	4619      	mov	r1, r3
 80002f0:	4828      	ldr	r0, [pc, #160]	; (8000394 <MX_GPIO_Init+0x154>)
 80002f2:	f001 f877 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80002f6:	f24e 0340 	movw	r3, #57408	; 0xe040
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fc:	2303      	movs	r3, #3
 80002fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4619      	mov	r1, r3
 8000306:	4820      	ldr	r0, [pc, #128]	; (8000388 <MX_GPIO_Init+0x148>)
 8000308:	f001 f86c 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 800030c:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 8000310:	617b      	str	r3, [r7, #20]
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000312:	2301      	movs	r3, #1
 8000314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031a:	2302      	movs	r3, #2
 800031c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	4619      	mov	r1, r3
 8000324:	4818      	ldr	r0, [pc, #96]	; (8000388 <MX_GPIO_Init+0x148>)
 8000326:	f001 f85d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 800032a:	f24f 733f 	movw	r3, #63295	; 0xf73f
 800032e:	617b      	str	r3, [r7, #20]
                          |FASE3_AMA_Pin|FASE6_VERDE_Pin|FASE6_AMA_Pin|FASE1_VERDE_Pin 
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	2301      	movs	r3, #1
 8000332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2302      	movs	r3, #2
 800033a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033c:	f107 0314 	add.w	r3, r7, #20
 8000340:	4619      	mov	r1, r3
 8000342:	4812      	ldr	r0, [pc, #72]	; (800038c <MX_GPIO_Init+0x14c>)
 8000344:	f001 f84e 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800034c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800034e:	2303      	movs	r3, #3
 8000350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	4619      	mov	r1, r3
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <MX_GPIO_Init+0x14c>)
 800035a:	f001 f843 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_GPIO_Init+0x158>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	627b      	str	r3, [r7, #36]	; 0x24
 8000364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000366:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800036a:	627b      	str	r3, [r7, #36]	; 0x24
 800036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800036e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000372:	627b      	str	r3, [r7, #36]	; 0x24
 8000374:	4a08      	ldr	r2, [pc, #32]	; (8000398 <MX_GPIO_Init+0x158>)
 8000376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000378:	6053      	str	r3, [r2, #4]

}
 800037a:	bf00      	nop
 800037c:	3728      	adds	r7, #40	; 0x28
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000
 8000388:	40010800 	.word	0x40010800
 800038c:	40010c00 	.word	0x40010c00
 8000390:	40011000 	.word	0x40011000
 8000394:	40011400 	.word	0x40011400
 8000398:	40010000 	.word	0x40010000

0800039c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_I2C1_Init+0x50>)
 80003a2:	4a13      	ldr	r2, [pc, #76]	; (80003f0 <MX_I2C1_Init+0x54>)
 80003a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_I2C1_Init+0x50>)
 80003a8:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <MX_I2C1_Init+0x58>)
 80003aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_I2C1_Init+0x50>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 34;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_I2C1_Init+0x50>)
 80003b4:	2222      	movs	r2, #34	; 0x22
 80003b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_I2C1_Init+0x50>)
 80003ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <MX_I2C1_Init+0x50>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_I2C1_Init+0x50>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <MX_I2C1_Init+0x50>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_I2C1_Init+0x50>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d8:	4804      	ldr	r0, [pc, #16]	; (80003ec <MX_I2C1_Init+0x50>)
 80003da:	f001 fa5d 	bl	8001898 <HAL_I2C_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003e4:	f000 f8df 	bl	80005a6 <Error_Handler>
  }

}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000058 	.word	0x20000058
 80003f0:	40005400 	.word	0x40005400
 80003f4:	000186a0 	.word	0x000186a0

080003f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a1e      	ldr	r2, [pc, #120]	; (800048c <HAL_I2C_MspInit+0x94>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d135      	bne.n	8000484 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <HAL_I2C_MspInit+0x98>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <HAL_I2C_MspInit+0x98>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <HAL_I2C_MspInit+0x98>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000430:	23c0      	movs	r3, #192	; 0xc0
 8000432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000434:	2312      	movs	r3, #18
 8000436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000438:	2301      	movs	r3, #1
 800043a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043c:	2303      	movs	r3, #3
 800043e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	4813      	ldr	r0, [pc, #76]	; (8000494 <HAL_I2C_MspInit+0x9c>)
 8000448:	f000 ffcc 	bl	80013e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800044c:	4b10      	ldr	r3, [pc, #64]	; (8000490 <HAL_I2C_MspInit+0x98>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <HAL_I2C_MspInit+0x98>)
 8000452:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000456:	61d3      	str	r3, [r2, #28]
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <HAL_I2C_MspInit+0x98>)
 800045a:	69db      	ldr	r3, [r3, #28]
 800045c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 1);
 8000464:	2201      	movs	r2, #1
 8000466:	2100      	movs	r1, #0
 8000468:	201f      	movs	r0, #31
 800046a:	f000 fee9 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800046e:	201f      	movs	r0, #31
 8000470:	f000 ff12 	bl	8001298 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 2);
 8000474:	2202      	movs	r2, #2
 8000476:	2100      	movs	r1, #0
 8000478:	2020      	movs	r0, #32
 800047a:	f000 fee1 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800047e:	2020      	movs	r0, #32
 8000480:	f000 ff0a 	bl	8001298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40005400 	.word	0x40005400
 8000490:	40021000 	.word	0x40021000
 8000494:	40010c00 	.word	0x40010c00

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049c:	f000 fa1a 	bl	80008d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a0:	f000 f82c 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a4:	f7ff fecc 	bl	8000240 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004a8:	f7ff fe50 	bl	800014c <MX_ADC1_Init>
  MX_I2C1_Init();
 80004ac:	f7ff ff76 	bl	800039c <MX_I2C1_Init>
  MX_RTC_Init();
 80004b0:	f000 f88a 	bl	80005c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_MspInit(&hi2c1);
 80004b4:	480e      	ldr	r0, [pc, #56]	; (80004f0 <main+0x58>)
 80004b6:	f7ff ff9f 	bl	80003f8 <HAL_I2C_MspInit>

  HAL_GPIO_WritePin(GPIOA,FASE6_ROJO_Pin,GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	480d      	ldr	r0, [pc, #52]	; (80004f4 <main+0x5c>)
 80004c0:	f001 f9b8 	bl	8001834 <HAL_GPIO_WritePin>
  if(HAL_I2C_Slave_Receive_IT(&hi2c1,mensaje,1) != HAL_OK)
 80004c4:	2201      	movs	r2, #1
 80004c6:	490c      	ldr	r1, [pc, #48]	; (80004f8 <main+0x60>)
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <main+0x58>)
 80004ca:	f001 fb87 	bl	8001bdc <HAL_I2C_Slave_Receive_IT>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d005      	beq.n	80004e0 <main+0x48>
  {
	  HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004da:	4806      	ldr	r0, [pc, #24]	; (80004f4 <main+0x5c>)
 80004dc:	f001 f9aa 	bl	8001834 <HAL_GPIO_WritePin>
  }
  HAL_GPIO_WritePin(GPIOA,FASE1_AMA_Pin,GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <main+0x5c>)
 80004e8:	f001 f9a4 	bl	8001834 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <main+0x54>
 80004ee:	bf00      	nop
 80004f0:	20000058 	.word	0x20000058
 80004f4:	40010800 	.word	0x40010800
 80004f8:	200000ac 	.word	0x200000ac

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000506:	2228      	movs	r2, #40	; 0x28
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f004 fc24 	bl	8004d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800052c:	2306      	movs	r3, #6
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000530:	2301      	movs	r3, #1
 8000532:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000534:	2301      	movs	r3, #1
 8000536:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	2310      	movs	r3, #16
 800053a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053c:	2300      	movs	r3, #0
 800053e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000544:	4618      	mov	r0, r3
 8000546:	f002 ff97 	bl	8003478 <HAL_RCC_OscConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000550:	f000 f829 	bl	80005a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	230f      	movs	r3, #15
 8000556:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 faf2 	bl	8003b58 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800057a:	f000 f814 	bl	80005a6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800057e:	2303      	movs	r3, #3
 8000580:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000586:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fd24 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800059a:	f000 f804 	bl	80005a6 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3750      	adds	r7, #80	; 0x50
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
	...

080005c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2100      	movs	r1, #0
 80005d2:	460a      	mov	r2, r1
 80005d4:	801a      	strh	r2, [r3, #0]
 80005d6:	460a      	mov	r2, r1
 80005d8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_RTC_Init+0x8c>)
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <MX_RTC_Init+0x90>)
 80005e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_RTC_Init+0x8c>)
 80005e6:	f04f 32ff 	mov.w	r2, #4294967295
 80005ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_RTC_Init+0x8c>)
 80005ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005f4:	4817      	ldr	r0, [pc, #92]	; (8000654 <MX_RTC_Init+0x8c>)
 80005f6:	f003 fecd 	bl	8004394 <HAL_RTC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000600:	f7ff ffd1 	bl	80005a6 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000604:	2300      	movs	r3, #0
 8000606:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000608:	2300      	movs	r3, #0
 800060a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800060c:	2300      	movs	r3, #0
 800060e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <MX_RTC_Init+0x8c>)
 8000618:	f003 ff86 	bl	8004528 <HAL_RTC_SetTime>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000622:	f7ff ffc0 	bl	80005a6 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000626:	2301      	movs	r3, #1
 8000628:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800062a:	2301      	movs	r3, #1
 800062c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800062e:	2301      	movs	r3, #1
 8000630:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000632:	2300      	movs	r3, #0
 8000634:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	2201      	movs	r2, #1
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_RTC_Init+0x8c>)
 800063e:	f004 f859 	bl	80046f4 <HAL_RTC_SetDate>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000648:	f7ff ffad 	bl	80005a6 <Error_Handler>
  }

}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000b0 	.word	0x200000b0
 8000658:	40002800 	.word	0x40002800

0800065c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <HAL_RTC_MspInit+0x4c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d118      	bne.n	80006a0 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800066e:	f002 fef7 	bl	8003460 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_RTC_MspInit+0x50>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <HAL_RTC_MspInit+0x50>)
 8000678:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <HAL_RTC_MspInit+0x50>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_RTC_MspInit+0x54>)
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2003      	movs	r0, #3
 8000696:	f000 fdd3 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800069a:	2003      	movs	r0, #3
 800069c:	f000 fdfc 	bl	8001298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40002800 	.word	0x40002800
 80006ac:	40021000 	.word	0x40021000
 80006b0:	4242043c 	.word	0x4242043c

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_MspInit+0x6c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <HAL_MspInit+0x6c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <HAL_MspInit+0x6c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <HAL_MspInit+0x6c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <HAL_MspInit+0x6c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <HAL_MspInit+0x6c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2005      	movs	r0, #5
 80006f0:	f000 fda6 	bl	8001240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80006f4:	2005      	movs	r0, #5
 80006f6:	f000 fdcf 	bl	8001298 <HAL_NVIC_EnableIRQ>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_MspInit+0x70>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_MspInit+0x70>)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	40010000 	.word	0x40010000

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	volatile unsigned long _CFSR = (*((volatile unsigned long *)(0xE000ED28)));
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <_HALT+0x8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	617b      	str	r3, [r7, #20]
	volatile unsigned long _HFSR = (*((volatile unsigned long *)(0xE000ED2C)));
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <_HALT+0xc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	613b      	str	r3, [r7, #16]
	volatile unsigned long _DFSR = (*((volatile unsigned long *)(0xE000ED30)));
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <_HALT+0x10>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	60fb      	str	r3, [r7, #12]
	volatile unsigned long _AFSR = (*((volatile unsigned long *)(0xE000ED3C)));
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <_HALT+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	60bb      	str	r3, [r7, #8]
	volatile unsigned long _MMAR = (*((volatile unsigned long *)(0xE000ED34)));
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <_HALT+0x18>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	607b      	str	r3, [r7, #4]
	volatile unsigned long _BFAR = (*((volatile unsigned long *)(0xE000ED38)));
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <_HALT+0x1c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	603b      	str	r3, [r7, #0]
	__asm("bkpt #0");
 800075e:	be00      	bkpt	0x0000
	__asm volatile ("movs r0,#4");	/* Carga el número 4 a r0.  			 */
 8000760:	2004      	movs	r0, #4
	__asm volatile ("movs r1, lr");	/* Carga el link register a r1.          */
 8000762:	ea5f 010e 	movs.w	r1, lr
	__asm volatile ("tst r0, r1");	/* Prueba el valor de r0 contra r1 y     */
 8000766:	4208      	tst	r0, r1
									/* descarta el resultado pero actualiza  */
									/* las banderas.                         */
	__asm volatile ("beq _MSP");	/* Salta a la etiqueta _MSP si Z está en */
 8000768:	d002      	beq.n	8000770 <_MSP>
									/* 1, es decir, salta si el resultado de */
									/* la operación anterior es cero.        */
	__asm volatile ("mrs r0, psp");	/* Mueve el contenido del registo        */
 800076a:	f3ef 8009 	mrs	r0, PSP
									/* especial PSP a r0.                    */
	__asm volatile ("b _HALT");		/* Salta inmediatamente a la etiqueta    */
 800076e:	e001      	b.n	8000774 <_HALT>

08000770 <_MSP>:
	__asm volatile ("_MSP:");		/* _HALT.								 */
	__asm volatile ("mrs r0, msp");	/* Mueve el contenido del registro 		 */
 8000770:	f3ef 8008 	mrs	r0, MSP

08000774 <_HALT>:
									/* especial MSP a r0.               	 */
	__asm volatile ("_HALT:");		/* Etiqueta _HALT. 						 */
	__asm volatile ("ldr r1,[r0,#24]");/* Se carga a r1 con la dirección     */
 8000774:	6981      	ldr	r1, [r0, #24]
									/* contenida en r0 desplazada en 20.	 */
	__asm volatile ("bkpt #0");		/* Es un breakpoint.					 */
 8000776:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <_HALT+0x4>
 800077a:	bf00      	nop
 800077c:	e000ed28 	.word	0xe000ed28
 8000780:	e000ed2c 	.word	0xe000ed2c
 8000784:	e000ed30 	.word	0xe000ed30
 8000788:	e000ed3c 	.word	0xe000ed3c
 800078c:	e000ed34 	.word	0xe000ed34
 8000790:	e000ed38 	.word	0xe000ed38

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ce:	f000 f8c7 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <RTC_IRQHandler+0x10>)
 80007de:	f004 fa51 	bl	8004c84 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000b0 	.word	0x200000b0

080007ec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <I2C1_EV_IRQHandler+0x10>)
 80007fe:	f001 fa5b 	bl	8001cb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000058 	.word	0x20000058

0800080c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <I2C1_ER_IRQHandler+0x10>)
 8000812:	f001 fbb7 	bl	8001f84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000058 	.word	0x20000058

08000820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <SystemInit+0x5c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a14      	ldr	r2, [pc, #80]	; (800087c <SystemInit+0x5c>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <SystemInit+0x5c>)
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	4911      	ldr	r1, [pc, #68]	; (800087c <SystemInit+0x5c>)
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <SystemInit+0x60>)
 8000838:	4013      	ands	r3, r2
 800083a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <SystemInit+0x5c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <SystemInit+0x5c>)
 8000842:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800084a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <SystemInit+0x5c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SystemInit+0x5c>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000856:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <SystemInit+0x5c>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <SystemInit+0x5c>)
 800085e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000862:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SystemInit+0x5c>)
 8000866:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800086a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <SystemInit+0x64>)
 800086e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000872:	609a      	str	r2, [r3, #8]
#endif 
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	40021000 	.word	0x40021000
 8000880:	f8ff0000 	.word	0xf8ff0000
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000888:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800088a:	e003      	b.n	8000894 <LoopCopyDataInit>

0800088c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800088e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000890:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000892:	3104      	adds	r1, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000894:	480a      	ldr	r0, [pc, #40]	; (80008c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000898:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800089a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800089c:	d3f6      	bcc.n	800088c <CopyDataInit>
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008a0:	e002      	b.n	80008a8 <LoopFillZerobss>

080008a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008a4:	f842 3b04 	str.w	r3, [r2], #4

080008a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008ac:	d3f9      	bcc.n	80008a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ae:	f7ff ffb7 	bl	8000820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f004 fa2d 	bl	8004d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b6:	f7ff fdef 	bl	8000498 <main>
  bx lr
 80008ba:	4770      	bx	lr
  ldr r3, =_sidata
 80008bc:	08004f5c 	.word	0x08004f5c
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80008c8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008cc:	200000c8 	.word	0x200000c8

080008d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_2_IRQHandler>
	...

080008d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_Init+0x28>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_Init+0x28>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 fc8b 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f808 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f0:	f7ff fee0 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40022000 	.word	0x40022000

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x54>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fcd2 	bl	80012c8 <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e00e      	b.n	800094c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d80a      	bhi.n	800094a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f000 fc80 	bl	8001240 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <HAL_InitTick+0x5c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	20000008 	.word	0x20000008
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000008 	.word	0x20000008
 8000980:	200000c4 	.word	0x200000c4

08000984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	200000c4 	.word	0x200000c4

08000998 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e153      	b.n	8000c62 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a9f      	ldr	r2, [pc, #636]	; (8000c3c <HAL_ADC_Init+0x2a4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d009      	beq.n	80009d8 <HAL_ADC_Init+0x40>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a9d      	ldr	r2, [pc, #628]	; (8000c40 <HAL_ADC_Init+0x2a8>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d004      	beq.n	80009d8 <HAL_ADC_Init+0x40>
 80009ce:	f240 11b3 	movw	r1, #435	; 0x1b3
 80009d2:	489c      	ldr	r0, [pc, #624]	; (8000c44 <HAL_ADC_Init+0x2ac>)
 80009d4:	f7ff fded 	bl	80005b2 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d009      	beq.n	80009f4 <HAL_ADC_Init+0x5c>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009e8:	d004      	beq.n	80009f4 <HAL_ADC_Init+0x5c>
 80009ea:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80009ee:	4895      	ldr	r0, [pc, #596]	; (8000c44 <HAL_ADC_Init+0x2ac>)
 80009f0:	f7ff fddf 	bl	80005b2 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d009      	beq.n	8000a10 <HAL_ADC_Init+0x78>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a04:	d004      	beq.n	8000a10 <HAL_ADC_Init+0x78>
 8000a06:	f240 11b5 	movw	r1, #437	; 0x1b5
 8000a0a:	488e      	ldr	r0, [pc, #568]	; (8000c44 <HAL_ADC_Init+0x2ac>)
 8000a0c:	f7ff fdd1 	bl	80005b2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7b1b      	ldrb	r3, [r3, #12]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d008      	beq.n	8000a2a <HAL_ADC_Init+0x92>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7b1b      	ldrb	r3, [r3, #12]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d004      	beq.n	8000a2a <HAL_ADC_Init+0x92>
 8000a20:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000a24:	4887      	ldr	r0, [pc, #540]	; (8000c44 <HAL_ADC_Init+0x2ac>)
 8000a26:	f7ff fdc4 	bl	80005b2 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d022      	beq.n	8000a78 <HAL_ADC_Init+0xe0>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a3a:	d01d      	beq.n	8000a78 <HAL_ADC_Init+0xe0>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000a44:	d018      	beq.n	8000a78 <HAL_ADC_Init+0xe0>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000a4e:	d013      	beq.n	8000a78 <HAL_ADC_Init+0xe0>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8000a58:	d00e      	beq.n	8000a78 <HAL_ADC_Init+0xe0>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000a62:	d009      	beq.n	8000a78 <HAL_ADC_Init+0xe0>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	69db      	ldr	r3, [r3, #28]
 8000a68:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a6c:	d004      	beq.n	8000a78 <HAL_ADC_Init+0xe0>
 8000a6e:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000a72:	4874      	ldr	r0, [pc, #464]	; (8000c44 <HAL_ADC_Init+0x2ac>)
 8000a74:	f7ff fd9d 	bl	80005b2 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d02a      	beq.n	8000ad6 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <HAL_ADC_Init+0xf8>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	2b10      	cmp	r3, #16
 8000a8e:	d904      	bls.n	8000a9a <HAL_ADC_Init+0x102>
 8000a90:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000a94:	486b      	ldr	r0, [pc, #428]	; (8000c44 <HAL_ADC_Init+0x2ac>)
 8000a96:	f7ff fd8c 	bl	80005b2 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	7d1b      	ldrb	r3, [r3, #20]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d008      	beq.n	8000ab4 <HAL_ADC_Init+0x11c>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7d1b      	ldrb	r3, [r3, #20]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d004      	beq.n	8000ab4 <HAL_ADC_Init+0x11c>
 8000aaa:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8000aae:	4865      	ldr	r0, [pc, #404]	; (8000c44 <HAL_ADC_Init+0x2ac>)
 8000ab0:	f7ff fd7f 	bl	80005b2 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	7d1b      	ldrb	r3, [r3, #20]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00c      	beq.n	8000ad6 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_ADC_Init+0x134>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	2b08      	cmp	r3, #8
 8000aca:	d904      	bls.n	8000ad6 <HAL_ADC_Init+0x13e>
 8000acc:	f240 11bf 	movw	r1, #447	; 0x1bf
 8000ad0:	485c      	ldr	r0, [pc, #368]	; (8000c44 <HAL_ADC_Init+0x2ac>)
 8000ad2:	f7ff fd6e 	bl	80005b2 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d109      	bne.n	8000af2 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fb6b 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 fa7e 	bl	8000ff4 <ADC_ConversionStop_Disable>
 8000af8:	4603      	mov	r3, r0
 8000afa:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f040 80a3 	bne.w	8000c50 <HAL_ADC_Init+0x2b8>
 8000b0a:	7dfb      	ldrb	r3, [r7, #23]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	f040 809f 	bne.w	8000c50 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b1a:	f023 0302 	bic.w	r3, r3, #2
 8000b1e:	f043 0202 	orr.w	r2, r3, #2
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b2e:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7b1b      	ldrb	r3, [r3, #12]
 8000b34:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b36:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b46:	d003      	beq.n	8000b50 <HAL_ADC_Init+0x1b8>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d102      	bne.n	8000b56 <HAL_ADC_Init+0x1be>
 8000b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b54:	e000      	b.n	8000b58 <HAL_ADC_Init+0x1c0>
 8000b56:	2300      	movs	r3, #0
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	7d1b      	ldrb	r3, [r3, #20]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d119      	bne.n	8000b9a <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7b1b      	ldrb	r3, [r3, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d109      	bne.n	8000b82 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	035a      	lsls	r2, r3, #13
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	e00b      	b.n	8000b9a <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	f043 0220 	orr.w	r2, r3, #32
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	f043 0201 	orr.w	r2, r3, #1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	430a      	orrs	r2, r1
 8000bac:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_ADC_Init+0x2b0>)
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bca:	d003      	beq.n	8000bd4 <HAL_ADC_Init+0x23c>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d104      	bne.n	8000bde <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	051b      	lsls	r3, r3, #20
 8000bdc:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be4:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_ADC_Init+0x2b4>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d10b      	bne.n	8000c1a <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f023 0303 	bic.w	r3, r3, #3
 8000c10:	f043 0201 	orr.w	r2, r3, #1
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c18:	e022      	b.n	8000c60 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1e:	f023 0312 	bic.w	r3, r3, #18
 8000c22:	f043 0210 	orr.w	r2, r3, #16
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2e:	f043 0201 	orr.w	r2, r3, #1
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c3a:	e011      	b.n	8000c60 <HAL_ADC_Init+0x2c8>
 8000c3c:	40012400 	.word	0x40012400
 8000c40:	40012800 	.word	0x40012800
 8000c44:	08004d80 	.word	0x08004d80
 8000c48:	ffe1f7fd 	.word	0xffe1f7fd
 8000c4c:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	f043 0210 	orr.w	r2, r3, #16
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop

08000c6c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a88      	ldr	r2, [pc, #544]	; (8000ea4 <HAL_ADC_ConfigChannel+0x238>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d009      	beq.n	8000c9c <HAL_ADC_ConfigChannel+0x30>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a86      	ldr	r2, [pc, #536]	; (8000ea8 <HAL_ADC_ConfigChannel+0x23c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d004      	beq.n	8000c9c <HAL_ADC_ConfigChannel+0x30>
 8000c92:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8000c96:	4885      	ldr	r0, [pc, #532]	; (8000eac <HAL_ADC_ConfigChannel+0x240>)
 8000c98:	f7ff fc8b 	bl	80005b2 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d048      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d044      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d040      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d03c      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d038      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b05      	cmp	r3, #5
 8000cca:	d034      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b06      	cmp	r3, #6
 8000cd2:	d030      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b07      	cmp	r3, #7
 8000cda:	d02c      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d028      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b09      	cmp	r3, #9
 8000cea:	d024      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b0a      	cmp	r3, #10
 8000cf2:	d020      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b0b      	cmp	r3, #11
 8000cfa:	d01c      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b0c      	cmp	r3, #12
 8000d02:	d018      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b0d      	cmp	r3, #13
 8000d0a:	d014      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b0e      	cmp	r3, #14
 8000d12:	d010      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d00c      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b10      	cmp	r3, #16
 8000d22:	d008      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b11      	cmp	r3, #17
 8000d2a:	d004      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0xca>
 8000d2c:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8000d30:	485e      	ldr	r0, [pc, #376]	; (8000eac <HAL_ADC_ConfigChannel+0x240>)
 8000d32:	f7ff fc3e 	bl	80005b2 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d040      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d03c      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d038      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d034      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b05      	cmp	r3, #5
 8000d5c:	d030      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d02c      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b07      	cmp	r3, #7
 8000d6c:	d028      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d024      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b09      	cmp	r3, #9
 8000d7c:	d020      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b0a      	cmp	r3, #10
 8000d84:	d01c      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b0b      	cmp	r3, #11
 8000d8c:	d018      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b0c      	cmp	r3, #12
 8000d94:	d014      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b0d      	cmp	r3, #13
 8000d9c:	d010      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b0e      	cmp	r3, #14
 8000da4:	d00c      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b0f      	cmp	r3, #15
 8000dac:	d008      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b10      	cmp	r3, #16
 8000db4:	d004      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x154>
 8000db6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000dba:	483c      	ldr	r0, [pc, #240]	; (8000eac <HAL_ADC_ConfigChannel+0x240>)
 8000dbc:	f7ff fbf9 	bl	80005b2 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d020      	beq.n	8000e0a <HAL_ADC_ConfigChannel+0x19e>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d01c      	beq.n	8000e0a <HAL_ADC_ConfigChannel+0x19e>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d018      	beq.n	8000e0a <HAL_ADC_ConfigChannel+0x19e>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d014      	beq.n	8000e0a <HAL_ADC_ConfigChannel+0x19e>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d010      	beq.n	8000e0a <HAL_ADC_ConfigChannel+0x19e>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b05      	cmp	r3, #5
 8000dee:	d00c      	beq.n	8000e0a <HAL_ADC_ConfigChannel+0x19e>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b06      	cmp	r3, #6
 8000df6:	d008      	beq.n	8000e0a <HAL_ADC_ConfigChannel+0x19e>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b07      	cmp	r3, #7
 8000dfe:	d004      	beq.n	8000e0a <HAL_ADC_ConfigChannel+0x19e>
 8000e00:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8000e04:	4829      	ldr	r0, [pc, #164]	; (8000eac <HAL_ADC_ConfigChannel+0x240>)
 8000e06:	f7ff fbd4 	bl	80005b2 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x1ac>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e0e2      	b.n	8000fde <HAL_ADC_ConfigChannel+0x372>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d81c      	bhi.n	8000e62 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	3b05      	subs	r3, #5
 8000e3a:	221f      	movs	r2, #31
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4019      	ands	r1, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	3b05      	subs	r3, #5
 8000e54:	fa00 f203 	lsl.w	r2, r0, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e60:	e042      	b.n	8000ee8 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b0c      	cmp	r3, #12
 8000e68:	d822      	bhi.n	8000eb0 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	3b23      	subs	r3, #35	; 0x23
 8000e7c:	221f      	movs	r2, #31
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	4019      	ands	r1, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	3b23      	subs	r3, #35	; 0x23
 8000e96:	fa00 f203 	lsl.w	r2, r0, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ea2:	e021      	b.n	8000ee8 <HAL_ADC_ConfigChannel+0x27c>
 8000ea4:	40012400 	.word	0x40012400
 8000ea8:	40012800 	.word	0x40012800
 8000eac:	08004d80 	.word	0x08004d80
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b41      	subs	r3, #65	; 0x41
 8000ec2:	221f      	movs	r2, #31
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4019      	ands	r1, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	3b41      	subs	r3, #65	; 0x41
 8000edc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b09      	cmp	r3, #9
 8000eee:	d91c      	bls.n	8000f2a <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68d9      	ldr	r1, [r3, #12]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	3b1e      	subs	r3, #30
 8000f02:	2207      	movs	r2, #7
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4019      	ands	r1, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	6898      	ldr	r0, [r3, #8]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	3b1e      	subs	r3, #30
 8000f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	e019      	b.n	8000f5e <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6919      	ldr	r1, [r3, #16]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	4019      	ands	r1, r3
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	6898      	ldr	r0, [r3, #8]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	fa00 f203 	lsl.w	r2, r0, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b10      	cmp	r3, #16
 8000f64:	d003      	beq.n	8000f6e <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f6a:	2b11      	cmp	r3, #17
 8000f6c:	d132      	bne.n	8000fd4 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_ADC_ConfigChannel+0x37c>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d125      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d126      	bne.n	8000fd4 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f94:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b10      	cmp	r3, #16
 8000f9c:	d11a      	bne.n	8000fd4 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <HAL_ADC_ConfigChannel+0x380>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <HAL_ADC_ConfigChannel+0x384>)
 8000fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa8:	0c9a      	lsrs	r2, r3, #18
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb4:	e002      	b.n	8000fbc <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f9      	bne.n	8000fb6 <HAL_ADC_ConfigChannel+0x34a>
 8000fc2:	e007      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	f043 0220 	orr.w	r2, r3, #32
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012400 	.word	0x40012400
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	431bde83 	.word	0x431bde83

08000ff4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b01      	cmp	r3, #1
 800100c:	d127      	bne.n	800105e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 0201 	bic.w	r2, r2, #1
 800101c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800101e:	f7ff fcb1 	bl	8000984 <HAL_GetTick>
 8001022:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001024:	e014      	b.n	8001050 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001026:	f7ff fcad 	bl	8000984 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d90d      	bls.n	8001050 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	f043 0210 	orr.w	r2, r3, #16
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	f043 0201 	orr.w	r2, r3, #1
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e007      	b.n	8001060 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b01      	cmp	r3, #1
 800105c:	d0e3      	beq.n	8001026 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4906      	ldr	r1, [pc, #24]	; (8001100 <__NVIC_EnableIRQ+0x34>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011cc:	d301      	bcc.n	80011d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00f      	b.n	80011f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <SysTick_Config+0x40>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011da:	210f      	movs	r1, #15
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f7ff ff90 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SysTick_Config+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SysTick_Config+0x40>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b07      	cmp	r3, #7
 800120c:	d00f      	beq.n	800122e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b06      	cmp	r3, #6
 8001212:	d00c      	beq.n	800122e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b05      	cmp	r3, #5
 8001218:	d009      	beq.n	800122e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b04      	cmp	r3, #4
 800121e:	d006      	beq.n	800122e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d003      	beq.n	800122e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001226:	2192      	movs	r1, #146	; 0x92
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800122a:	f7ff f9c2 	bl	80005b2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff1a 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	08004db8 	.word	0x08004db8

08001240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d903      	bls.n	8001260 <HAL_NVIC_SetPriority+0x20>
 8001258:	21aa      	movs	r1, #170	; 0xaa
 800125a:	480e      	ldr	r0, [pc, #56]	; (8001294 <HAL_NVIC_SetPriority+0x54>)
 800125c:	f7ff f9a9 	bl	80005b2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	d903      	bls.n	800126e <HAL_NVIC_SetPriority+0x2e>
 8001266:	21ab      	movs	r1, #171	; 0xab
 8001268:	480a      	ldr	r0, [pc, #40]	; (8001294 <HAL_NVIC_SetPriority+0x54>)
 800126a:	f7ff f9a2 	bl	80005b2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126e:	f7ff ff1f 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001272:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	6978      	ldr	r0, [r7, #20]
 800127a:	f7ff ff6d 	bl	8001158 <NVIC_EncodePriority>
 800127e:	4602      	mov	r2, r0
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff3c 	bl	8001104 <__NVIC_SetPriority>
}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	08004db8 	.word	0x08004db8

08001298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da03      	bge.n	80012b2 <HAL_NVIC_EnableIRQ+0x1a>
 80012aa:	21be      	movs	r1, #190	; 0xbe
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_NVIC_EnableIRQ+0x2c>)
 80012ae:	f7ff f980 	bl	80005b2 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff08 	bl	80010cc <__NVIC_EnableIRQ>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	08004db8 	.word	0x08004db8

080012c8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff73 	bl	80011bc <SysTick_Config>
 80012d6:	4603      	mov	r3, r0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d005      	beq.n	8001302 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2204      	movs	r2, #4
 80012fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e051      	b.n	80013a6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 020e 	bic.w	r2, r2, #14
 8001310:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <HAL_DMA_Abort_IT+0xd0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d029      	beq.n	8001380 <HAL_DMA_Abort_IT+0xa0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <HAL_DMA_Abort_IT+0xd4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d022      	beq.n	800137c <HAL_DMA_Abort_IT+0x9c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <HAL_DMA_Abort_IT+0xd8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d01a      	beq.n	8001376 <HAL_DMA_Abort_IT+0x96>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <HAL_DMA_Abort_IT+0xdc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d012      	beq.n	8001370 <HAL_DMA_Abort_IT+0x90>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <HAL_DMA_Abort_IT+0xe0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00a      	beq.n	800136a <HAL_DMA_Abort_IT+0x8a>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <HAL_DMA_Abort_IT+0xe4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d102      	bne.n	8001364 <HAL_DMA_Abort_IT+0x84>
 800135e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001362:	e00e      	b.n	8001382 <HAL_DMA_Abort_IT+0xa2>
 8001364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001368:	e00b      	b.n	8001382 <HAL_DMA_Abort_IT+0xa2>
 800136a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136e:	e008      	b.n	8001382 <HAL_DMA_Abort_IT+0xa2>
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	e005      	b.n	8001382 <HAL_DMA_Abort_IT+0xa2>
 8001376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137a:	e002      	b.n	8001382 <HAL_DMA_Abort_IT+0xa2>
 800137c:	2310      	movs	r3, #16
 800137e:	e000      	b.n	8001382 <HAL_DMA_Abort_IT+0xa2>
 8001380:	2301      	movs	r3, #1
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_DMA_Abort_IT+0xe8>)
 8001384:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	4798      	blx	r3
    } 
  }
  return status;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40020008 	.word	0x40020008
 80013b4:	4002001c 	.word	0x4002001c
 80013b8:	40020030 	.word	0x40020030
 80013bc:	40020044 	.word	0x40020044
 80013c0:	40020058 	.word	0x40020058
 80013c4:	4002006c 	.word	0x4002006c
 80013c8:	40020000 	.word	0x40020000

080013cc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a9c      	ldr	r2, [pc, #624]	; (800166c <HAL_GPIO_Init+0x288>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00f      	beq.n	800141e <HAL_GPIO_Init+0x3a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a9b      	ldr	r2, [pc, #620]	; (8001670 <HAL_GPIO_Init+0x28c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00b      	beq.n	800141e <HAL_GPIO_Init+0x3a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a9a      	ldr	r2, [pc, #616]	; (8001674 <HAL_GPIO_Init+0x290>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x3a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a99      	ldr	r2, [pc, #612]	; (8001678 <HAL_GPIO_Init+0x294>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x3a>
 8001416:	21bd      	movs	r1, #189	; 0xbd
 8001418:	4898      	ldr	r0, [pc, #608]	; (800167c <HAL_GPIO_Init+0x298>)
 800141a:	f7ff f8ca 	bl	80005b2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_GPIO_Init+0x50>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	0c1b      	lsrs	r3, r3, #16
 800142e:	041b      	lsls	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x58>
 8001434:	21be      	movs	r1, #190	; 0xbe
 8001436:	4891      	ldr	r0, [pc, #580]	; (800167c <HAL_GPIO_Init+0x298>)
 8001438:	f7ff f8bb 	bl	80005b2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 81df 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	f000 81da 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b11      	cmp	r3, #17
 8001456:	f000 81d5 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b02      	cmp	r3, #2
 8001460:	f000 81d0 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b12      	cmp	r3, #18
 800146a:	f000 81cb 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a83      	ldr	r2, [pc, #524]	; (8001680 <HAL_GPIO_Init+0x29c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	f000 81c5 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a81      	ldr	r2, [pc, #516]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	f000 81bf 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4a7f      	ldr	r2, [pc, #508]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	f000 81b9 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4a7d      	ldr	r2, [pc, #500]	; (800168c <HAL_GPIO_Init+0x2a8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	f000 81b3 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4a7b      	ldr	r2, [pc, #492]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	f000 81ad 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4a79      	ldr	r2, [pc, #484]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	f000 81a7 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	f000 81a2 	beq.w	8001804 <HAL_GPIO_Init+0x420>
 80014c0:	21bf      	movs	r1, #191	; 0xbf
 80014c2:	486e      	ldr	r0, [pc, #440]	; (800167c <HAL_GPIO_Init+0x298>)
 80014c4:	f7ff f875 	bl	80005b2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c8:	e19c      	b.n	8001804 <HAL_GPIO_Init+0x420>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ca:	2201      	movs	r2, #1
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	f040 818b 	bne.w	80017fe <HAL_GPIO_Init+0x41a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a60      	ldr	r2, [pc, #384]	; (800166c <HAL_GPIO_Init+0x288>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d00f      	beq.n	8001510 <HAL_GPIO_Init+0x12c>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a5f      	ldr	r2, [pc, #380]	; (8001670 <HAL_GPIO_Init+0x28c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d00b      	beq.n	8001510 <HAL_GPIO_Init+0x12c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a5e      	ldr	r2, [pc, #376]	; (8001674 <HAL_GPIO_Init+0x290>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d007      	beq.n	8001510 <HAL_GPIO_Init+0x12c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a5d      	ldr	r2, [pc, #372]	; (8001678 <HAL_GPIO_Init+0x294>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x12c>
 8001508:	21cd      	movs	r1, #205	; 0xcd
 800150a:	485c      	ldr	r0, [pc, #368]	; (800167c <HAL_GPIO_Init+0x298>)
 800150c:	f7ff f851 	bl	80005b2 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b12      	cmp	r3, #18
 8001516:	d065      	beq.n	80015e4 <HAL_GPIO_Init+0x200>
 8001518:	2b12      	cmp	r3, #18
 800151a:	d80e      	bhi.n	800153a <HAL_GPIO_Init+0x156>
 800151c:	2b02      	cmp	r3, #2
 800151e:	d04c      	beq.n	80015ba <HAL_GPIO_Init+0x1d6>
 8001520:	2b02      	cmp	r3, #2
 8001522:	d804      	bhi.n	800152e <HAL_GPIO_Init+0x14a>
 8001524:	2b00      	cmp	r3, #0
 8001526:	d072      	beq.n	800160e <HAL_GPIO_Init+0x22a>
 8001528:	2b01      	cmp	r3, #1
 800152a:	d01d      	beq.n	8001568 <HAL_GPIO_Init+0x184>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800152c:	e099      	b.n	8001662 <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 800152e:	2b03      	cmp	r3, #3
 8001530:	f000 8094 	beq.w	800165c <HAL_GPIO_Init+0x278>
 8001534:	2b11      	cmp	r3, #17
 8001536:	d02b      	beq.n	8001590 <HAL_GPIO_Init+0x1ac>
          break;
 8001538:	e093      	b.n	8001662 <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 800153a:	4a52      	ldr	r2, [pc, #328]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d066      	beq.n	800160e <HAL_GPIO_Init+0x22a>
 8001540:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d806      	bhi.n	8001554 <HAL_GPIO_Init+0x170>
 8001546:	4a4e      	ldr	r2, [pc, #312]	; (8001680 <HAL_GPIO_Init+0x29c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d060      	beq.n	800160e <HAL_GPIO_Init+0x22a>
 800154c:	4a4f      	ldr	r2, [pc, #316]	; (800168c <HAL_GPIO_Init+0x2a8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d05d      	beq.n	800160e <HAL_GPIO_Init+0x22a>
          break;
 8001552:	e086      	b.n	8001662 <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 8001554:	4a4c      	ldr	r2, [pc, #304]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d059      	beq.n	800160e <HAL_GPIO_Init+0x22a>
 800155a:	4a4e      	ldr	r2, [pc, #312]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d056      	beq.n	800160e <HAL_GPIO_Init+0x22a>
 8001560:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d053      	beq.n	800160e <HAL_GPIO_Init+0x22a>
          break;
 8001566:	e07c      	b.n	8001662 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d00b      	beq.n	8001588 <HAL_GPIO_Init+0x1a4>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d007      	beq.n	8001588 <HAL_GPIO_Init+0x1a4>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x1a4>
 8001580:	21d5      	movs	r1, #213	; 0xd5
 8001582:	483e      	ldr	r0, [pc, #248]	; (800167c <HAL_GPIO_Init+0x298>)
 8001584:	f7ff f815 	bl	80005b2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	623b      	str	r3, [r7, #32]
          break;
 800158e:	e068      	b.n	8001662 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d00b      	beq.n	80015b0 <HAL_GPIO_Init+0x1cc>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d007      	beq.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015a8:	21dc      	movs	r1, #220	; 0xdc
 80015aa:	4834      	ldr	r0, [pc, #208]	; (800167c <HAL_GPIO_Init+0x298>)
 80015ac:	f7ff f801 	bl	80005b2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	3304      	adds	r3, #4
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	e053      	b.n	8001662 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d00b      	beq.n	80015da <HAL_GPIO_Init+0x1f6>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d007      	beq.n	80015da <HAL_GPIO_Init+0x1f6>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x1f6>
 80015d2:	21e3      	movs	r1, #227	; 0xe3
 80015d4:	4829      	ldr	r0, [pc, #164]	; (800167c <HAL_GPIO_Init+0x298>)
 80015d6:	f7fe ffec 	bl	80005b2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	3308      	adds	r3, #8
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e03e      	b.n	8001662 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d00b      	beq.n	8001604 <HAL_GPIO_Init+0x220>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d007      	beq.n	8001604 <HAL_GPIO_Init+0x220>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x220>
 80015fc:	21ea      	movs	r1, #234	; 0xea
 80015fe:	481f      	ldr	r0, [pc, #124]	; (800167c <HAL_GPIO_Init+0x298>)
 8001600:	f7fe ffd7 	bl	80005b2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	330c      	adds	r3, #12
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e029      	b.n	8001662 <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <HAL_GPIO_Init+0x24a>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d007      	beq.n	800162e <HAL_GPIO_Init+0x24a>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x24a>
 8001626:	21f7      	movs	r1, #247	; 0xf7
 8001628:	4814      	ldr	r0, [pc, #80]	; (800167c <HAL_GPIO_Init+0x298>)
 800162a:	f7fe ffc2 	bl	80005b2 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <HAL_GPIO_Init+0x258>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001636:	2304      	movs	r3, #4
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e012      	b.n	8001662 <HAL_GPIO_Init+0x27e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_GPIO_Init+0x26c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001644:	2308      	movs	r3, #8
 8001646:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	611a      	str	r2, [r3, #16]
          break;
 800164e:	e008      	b.n	8001662 <HAL_GPIO_Init+0x27e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001650:	2308      	movs	r3, #8
 8001652:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	615a      	str	r2, [r3, #20]
          break;
 800165a:	e002      	b.n	8001662 <HAL_GPIO_Init+0x27e>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2bff      	cmp	r3, #255	; 0xff
 8001666:	d817      	bhi.n	8001698 <HAL_GPIO_Init+0x2b4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	e017      	b.n	800169c <HAL_GPIO_Init+0x2b8>
 800166c:	40010800 	.word	0x40010800
 8001670:	40010c00 	.word	0x40010c00
 8001674:	40011000 	.word	0x40011000
 8001678:	40011400 	.word	0x40011400
 800167c:	08004df4 	.word	0x08004df4
 8001680:	10110000 	.word	0x10110000
 8001684:	10210000 	.word	0x10210000
 8001688:	10310000 	.word	0x10310000
 800168c:	10120000 	.word	0x10120000
 8001690:	10220000 	.word	0x10220000
 8001694:	10320000 	.word	0x10320000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3304      	adds	r3, #4
 800169c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2bff      	cmp	r3, #255	; 0xff
 80016a2:	d802      	bhi.n	80016aa <HAL_GPIO_Init+0x2c6>
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_Init+0x2cc>
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	3b08      	subs	r3, #8
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	210f      	movs	r1, #15
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	401a      	ands	r2, r3
 80016c2:	6a39      	ldr	r1, [r7, #32]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8090 	beq.w	80017fe <HAL_GPIO_Init+0x41a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <HAL_GPIO_Init+0x438>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	4a4e      	ldr	r2, [pc, #312]	; (800181c <HAL_GPIO_Init+0x438>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6193      	str	r3, [r2, #24]
 80016ea:	4b4c      	ldr	r3, [pc, #304]	; (800181c <HAL_GPIO_Init+0x438>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f6:	4a4a      	ldr	r2, [pc, #296]	; (8001820 <HAL_GPIO_Init+0x43c>)
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001702:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a41      	ldr	r2, [pc, #260]	; (8001824 <HAL_GPIO_Init+0x440>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x35a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a40      	ldr	r2, [pc, #256]	; (8001828 <HAL_GPIO_Init+0x444>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x356>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a3f      	ldr	r2, [pc, #252]	; (800182c <HAL_GPIO_Init+0x448>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x352>
 8001732:	2302      	movs	r3, #2
 8001734:	e004      	b.n	8001740 <HAL_GPIO_Init+0x35c>
 8001736:	2303      	movs	r3, #3
 8001738:	e002      	b.n	8001740 <HAL_GPIO_Init+0x35c>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x35c>
 800173e:	2300      	movs	r3, #0
 8001740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001742:	f002 0203 	and.w	r2, r2, #3
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	4093      	lsls	r3, r2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001750:	4933      	ldr	r1, [pc, #204]	; (8001820 <HAL_GPIO_Init+0x43c>)
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <HAL_GPIO_Init+0x394>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_GPIO_Init+0x44c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4930      	ldr	r1, [pc, #192]	; (8001830 <HAL_GPIO_Init+0x44c>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
 8001776:	e006      	b.n	8001786 <HAL_GPIO_Init+0x3a2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_GPIO_Init+0x44c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	43db      	mvns	r3, r3
 8001780:	492b      	ldr	r1, [pc, #172]	; (8001830 <HAL_GPIO_Init+0x44c>)
 8001782:	4013      	ands	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <HAL_GPIO_Init+0x3bc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HAL_GPIO_Init+0x44c>)
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	4926      	ldr	r1, [pc, #152]	; (8001830 <HAL_GPIO_Init+0x44c>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x3ca>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_GPIO_Init+0x44c>)
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	4921      	ldr	r1, [pc, #132]	; (8001830 <HAL_GPIO_Init+0x44c>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <HAL_GPIO_Init+0x3e4>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_GPIO_Init+0x44c>)
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	491c      	ldr	r1, [pc, #112]	; (8001830 <HAL_GPIO_Init+0x44c>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
 80017c6:	e006      	b.n	80017d6 <HAL_GPIO_Init+0x3f2>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_GPIO_Init+0x44c>)
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4917      	ldr	r1, [pc, #92]	; (8001830 <HAL_GPIO_Init+0x44c>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_GPIO_Init+0x40c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_GPIO_Init+0x44c>)
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	4912      	ldr	r1, [pc, #72]	; (8001830 <HAL_GPIO_Init+0x44c>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60cb      	str	r3, [r1, #12]
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x41a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_GPIO_Init+0x44c>)
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	490d      	ldr	r1, [pc, #52]	; (8001830 <HAL_GPIO_Init+0x44c>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	3301      	adds	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	f47f ae5b 	bne.w	80014ca <HAL_GPIO_Init+0xe6>
  }
}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000
 8001820:	40010000 	.word	0x40010000
 8001824:	40010800 	.word	0x40010800
 8001828:	40010c00 	.word	0x40010c00
 800182c:	40011000 	.word	0x40011000
 8001830:	40010400 	.word	0x40010400

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001844:	887b      	ldrh	r3, [r7, #2]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <HAL_GPIO_WritePin+0x20>
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	041b      	lsls	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <HAL_GPIO_WritePin+0x2a>
 8001854:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001858:	480e      	ldr	r0, [pc, #56]	; (8001894 <HAL_GPIO_WritePin+0x60>)
 800185a:	f7fe feaa 	bl	80005b2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800185e:	787b      	ldrb	r3, [r7, #1]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <HAL_GPIO_WritePin+0x40>
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d004      	beq.n	8001874 <HAL_GPIO_WritePin+0x40>
 800186a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800186e:	4809      	ldr	r0, [pc, #36]	; (8001894 <HAL_GPIO_WritePin+0x60>)
 8001870:	f7fe fe9f 	bl	80005b2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001880:	e003      	b.n	800188a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	611a      	str	r2, [r3, #16]
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	08004df4 	.word	0x08004df4

08001898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e193      	b.n	8001bd2 <HAL_I2C_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a95      	ldr	r2, [pc, #596]	; (8001b04 <HAL_I2C_Init+0x26c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d004      	beq.n	80018be <HAL_I2C_Init+0x26>
 80018b4:	f240 11cd 	movw	r1, #461	; 0x1cd
 80018b8:	4893      	ldr	r0, [pc, #588]	; (8001b08 <HAL_I2C_Init+0x270>)
 80018ba:	f7fe fe7a 	bl	80005b2 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d004      	beq.n	80018d0 <HAL_I2C_Init+0x38>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a90      	ldr	r2, [pc, #576]	; (8001b0c <HAL_I2C_Init+0x274>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d904      	bls.n	80018da <HAL_I2C_Init+0x42>
 80018d0:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80018d4:	488c      	ldr	r0, [pc, #560]	; (8001b08 <HAL_I2C_Init+0x270>)
 80018d6:	f7fe fe6c 	bl	80005b2 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <HAL_I2C_Init+0x5e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ea:	d004      	beq.n	80018f6 <HAL_I2C_Init+0x5e>
 80018ec:	f240 11cf 	movw	r1, #463	; 0x1cf
 80018f0:	4885      	ldr	r0, [pc, #532]	; (8001b08 <HAL_I2C_Init+0x270>)
 80018f2:	f7fe fe5e 	bl	80005b2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018fe:	f023 0303 	bic.w	r3, r3, #3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <HAL_I2C_Init+0x78>
 8001906:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800190a:	487f      	ldr	r0, [pc, #508]	; (8001b08 <HAL_I2C_Init+0x270>)
 800190c:	f7fe fe51 	bl	80005b2 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001918:	d009      	beq.n	800192e <HAL_I2C_Init+0x96>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001922:	d004      	beq.n	800192e <HAL_I2C_Init+0x96>
 8001924:	f240 11d1 	movw	r1, #465	; 0x1d1
 8001928:	4877      	ldr	r0, [pc, #476]	; (8001b08 <HAL_I2C_Init+0x270>)
 800192a:	f7fe fe42 	bl	80005b2 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d008      	beq.n	8001948 <HAL_I2C_Init+0xb0>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d004      	beq.n	8001948 <HAL_I2C_Init+0xb0>
 800193e:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8001942:	4871      	ldr	r0, [pc, #452]	; (8001b08 <HAL_I2C_Init+0x270>)
 8001944:	f7fe fe35 	bl	80005b2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_I2C_Init+0xc6>
 8001954:	f240 11d3 	movw	r1, #467	; 0x1d3
 8001958:	486b      	ldr	r0, [pc, #428]	; (8001b08 <HAL_I2C_Init+0x270>)
 800195a:	f7fe fe2a 	bl	80005b2 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <HAL_I2C_Init+0xe0>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d004      	beq.n	8001978 <HAL_I2C_Init+0xe0>
 800196e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001972:	4865      	ldr	r0, [pc, #404]	; (8001b08 <HAL_I2C_Init+0x270>)
 8001974:	f7fe fe1d 	bl	80005b2 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_I2C_Init+0xfa>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	2b80      	cmp	r3, #128	; 0x80
 8001986:	d004      	beq.n	8001992 <HAL_I2C_Init+0xfa>
 8001988:	f240 11d5 	movw	r1, #469	; 0x1d5
 800198c:	485e      	ldr	r0, [pc, #376]	; (8001b08 <HAL_I2C_Init+0x270>)
 800198e:	f7fe fe10 	bl	80005b2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_I2C_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7fe fd26 	bl	80003f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2224      	movs	r2, #36	; 0x24
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019c4:	f002 fac4 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 80019c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <HAL_I2C_Init+0x278>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d807      	bhi.n	80019e4 <HAL_I2C_Init+0x14c>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4a4f      	ldr	r2, [pc, #316]	; (8001b14 <HAL_I2C_Init+0x27c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	bf94      	ite	ls
 80019dc:	2301      	movls	r3, #1
 80019de:	2300      	movhi	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	e006      	b.n	80019f2 <HAL_I2C_Init+0x15a>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a4c      	ldr	r2, [pc, #304]	; (8001b18 <HAL_I2C_Init+0x280>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	bf94      	ite	ls
 80019ec:	2301      	movls	r3, #1
 80019ee:	2300      	movhi	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Init+0x162>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0eb      	b.n	8001bd2 <HAL_I2C_Init+0x33a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4a47      	ldr	r2, [pc, #284]	; (8001b1c <HAL_I2C_Init+0x284>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9b      	lsrs	r3, r3, #18
 8001a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a39      	ldr	r2, [pc, #228]	; (8001b10 <HAL_I2C_Init+0x278>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d802      	bhi.n	8001a34 <HAL_I2C_Init+0x19c>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	e009      	b.n	8001a48 <HAL_I2C_Init+0x1b0>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	4a38      	ldr	r2, [pc, #224]	; (8001b20 <HAL_I2C_Init+0x288>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	3301      	adds	r3, #1
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	492b      	ldr	r1, [pc, #172]	; (8001b10 <HAL_I2C_Init+0x278>)
 8001a64:	428b      	cmp	r3, r1
 8001a66:	d80d      	bhi.n	8001a84 <HAL_I2C_Init+0x1ec>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1e59      	subs	r1, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	bf38      	it	cc
 8001a80:	2304      	movcc	r3, #4
 8001a82:	e05f      	b.n	8001b44 <HAL_I2C_Init+0x2ac>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d111      	bne.n	8001ab0 <HAL_I2C_Init+0x218>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1e58      	subs	r0, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	440b      	add	r3, r1
 8001a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	e012      	b.n	8001ad6 <HAL_I2C_Init+0x23e>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1e58      	subs	r0, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	0099      	lsls	r1, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_Init+0x246>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e032      	b.n	8001b44 <HAL_I2C_Init+0x2ac>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d11e      	bne.n	8001b24 <HAL_I2C_Init+0x28c>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e58      	subs	r0, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6859      	ldr	r1, [r3, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	440b      	add	r3, r1
 8001af4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b02:	e01f      	b.n	8001b44 <HAL_I2C_Init+0x2ac>
 8001b04:	40005400 	.word	0x40005400
 8001b08:	08004e30 	.word	0x08004e30
 8001b0c:	00061a80 	.word	0x00061a80
 8001b10:	000186a0 	.word	0x000186a0
 8001b14:	001e847f 	.word	0x001e847f
 8001b18:	003d08ff 	.word	0x003d08ff
 8001b1c:	431bde83 	.word	0x431bde83
 8001b20:	10624dd3 	.word	0x10624dd3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e58      	subs	r0, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	0099      	lsls	r1, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	6809      	ldr	r1, [r1, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6911      	ldr	r1, [r2, #16]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68d2      	ldr	r2, [r2, #12]
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop

08001bdc <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	d158      	bne.n	8001ca8 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_I2C_Slave_Receive_IT+0x26>
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e051      	b.n	8001caa <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_I2C_Slave_Receive_IT+0x38>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e04a      	b.n	8001caa <HAL_I2C_Slave_Receive_IT+0xce>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d007      	beq.n	8001c3a <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c48:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2222      	movs	r2, #34	; 0x22
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_I2C_Slave_Receive_IT+0xd8>)
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001ca2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e000      	b.n	8001caa <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001ca8:	2302      	movs	r3, #2
  }
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	ffff0000 	.word	0xffff0000

08001cb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d003      	beq.n	8001cf0 <HAL_I2C_EV_IRQHandler+0x38>
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	f040 80b6 	bne.w	8001e5c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_I2C_EV_IRQHandler+0x6e>
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d10:	d003      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x62>
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d18:	d101      	bne.n	8001d1e <HAL_I2C_EV_IRQHandler+0x66>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_I2C_EV_IRQHandler+0x68>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	f000 8127 	beq.w	8001f74 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00c      	beq.n	8001d4a <HAL_I2C_EV_IRQHandler+0x92>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	0a5b      	lsrs	r3, r3, #9
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f001 fb74 	bl	800342a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fd03 	bl	800274e <I2C_Master_SB>
 8001d48:	e087      	b.n	8001e5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_I2C_EV_IRQHandler+0xb2>
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	0a5b      	lsrs	r3, r3, #9
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fd78 	bl	8002858 <I2C_Master_ADD10>
 8001d68:	e077      	b.n	8001e5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_I2C_EV_IRQHandler+0xd2>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	0a5b      	lsrs	r3, r3, #9
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fd91 	bl	80028aa <I2C_Master_ADDR>
 8001d88:	e067      	b.n	8001e5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d030      	beq.n	8001df8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001da4:	f000 80e8 	beq.w	8001f78 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	09db      	lsrs	r3, r3, #7
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00f      	beq.n	8001dd4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	0a9b      	lsrs	r3, r3, #10
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d009      	beq.n	8001dd4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d103      	bne.n	8001dd4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f9e4 	bl	800219a <I2C_MasterTransmit_TXE>
 8001dd2:	e042      	b.n	8001e5a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80cb 	beq.w	8001f78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	0a5b      	lsrs	r3, r3, #9
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80c4 	beq.w	8001f78 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 faca 	bl	800238a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001df6:	e0bf      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e06:	f000 80b7 	beq.w	8001f78 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00f      	beq.n	8001e36 <HAL_I2C_EV_IRQHandler+0x17e>
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	0a9b      	lsrs	r3, r3, #10
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_I2C_EV_IRQHandler+0x17e>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fb21 	bl	8002476 <I2C_MasterReceive_RXNE>
 8001e34:	e011      	b.n	8001e5a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 809a 	beq.w	8001f78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	0a5b      	lsrs	r3, r3, #9
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 8093 	beq.w	8001f78 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fb91 	bl	800257a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e58:	e08e      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001e5a:	e08d      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d004      	beq.n	8001e6e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	e007      	b.n	8001e7e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d012      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x1f8>
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	0a5b      	lsrs	r3, r3, #9
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ea6:	69b9      	ldr	r1, [r7, #24]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 ff55 	bl	8002d58 <I2C_Slave_ADDR>
 8001eae:	e066      	b.n	8001f7e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <HAL_I2C_EV_IRQHandler+0x218>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 ff89 	bl	8002de0 <I2C_Slave_STOPF>
 8001ece:	e056      	b.n	8001f7e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ed0:	7bbb      	ldrb	r3, [r7, #14]
 8001ed2:	2b21      	cmp	r3, #33	; 0x21
 8001ed4:	d002      	beq.n	8001edc <HAL_I2C_EV_IRQHandler+0x224>
 8001ed6:	7bbb      	ldrb	r3, [r7, #14]
 8001ed8:	2b29      	cmp	r3, #41	; 0x29
 8001eda:	d125      	bne.n	8001f28 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	09db      	lsrs	r3, r3, #7
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00f      	beq.n	8001f08 <HAL_I2C_EV_IRQHandler+0x250>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	0a9b      	lsrs	r3, r3, #10
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <HAL_I2C_EV_IRQHandler+0x250>
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d103      	bne.n	8001f08 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fe6d 	bl	8002be0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f06:	e039      	b.n	8001f7c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d033      	beq.n	8001f7c <HAL_I2C_EV_IRQHandler+0x2c4>
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02d      	beq.n	8001f7c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fe9a 	bl	8002c5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f26:	e029      	b.n	8001f7c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00f      	beq.n	8001f54 <HAL_I2C_EV_IRQHandler+0x29c>
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	0a9b      	lsrs	r3, r3, #10
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <HAL_I2C_EV_IRQHandler+0x29c>
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fea4 	bl	8002c9a <I2C_SlaveReceive_RXNE>
 8001f52:	e014      	b.n	8001f7e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <HAL_I2C_EV_IRQHandler+0x2c6>
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	0a5b      	lsrs	r3, r3, #9
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fed2 	bl	8002d16 <I2C_SlaveReceive_BTF>
 8001f72:	e004      	b.n	8001f7e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8001f74:	bf00      	nop
 8001f76:	e002      	b.n	8001f7e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f78:	bf00      	nop
 8001f7a:	e000      	b.n	8001f7e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f7c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d016      	beq.n	8001fda <HAL_I2C_ER_IRQHandler+0x56>
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d010      	beq.n	8001fda <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001fc8:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	0a5b      	lsrs	r3, r3, #9
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00e      	beq.n	8002004 <HAL_I2C_ER_IRQHandler+0x80>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002002:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	0a9b      	lsrs	r3, r3, #10
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d041      	beq.n	8002094 <HAL_I2C_ER_IRQHandler+0x110>
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d03b      	beq.n	8002094 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002022:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002032:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800203a:	7efb      	ldrb	r3, [r7, #27]
 800203c:	2b20      	cmp	r3, #32
 800203e:	d112      	bne.n	8002066 <HAL_I2C_ER_IRQHandler+0xe2>
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10f      	bne.n	8002066 <HAL_I2C_ER_IRQHandler+0xe2>
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	2b21      	cmp	r3, #33	; 0x21
 800204a:	d008      	beq.n	800205e <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	2b29      	cmp	r3, #41	; 0x29
 8002050:	d005      	beq.n	800205e <HAL_I2C_ER_IRQHandler+0xda>
 8002052:	7cfb      	ldrb	r3, [r7, #19]
 8002054:	2b28      	cmp	r3, #40	; 0x28
 8002056:	d106      	bne.n	8002066 <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b21      	cmp	r3, #33	; 0x21
 800205c:	d103      	bne.n	8002066 <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 ffee 	bl	8003040 <I2C_Slave_AF>
 8002064:	e016      	b.n	8002094 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800206e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b10      	cmp	r3, #16
 8002082:	d107      	bne.n	8002094 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00e      	beq.n	80020be <HAL_I2C_ER_IRQHandler+0x13a>
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80020bc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f001 f825 	bl	8003120 <I2C_ITError>
  }
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
 8002132:	4613      	mov	r3, r2
 8002134:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d150      	bne.n	8002262 <I2C_MasterTransmit_TXE+0xc8>
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b21      	cmp	r3, #33	; 0x21
 80021c4:	d14d      	bne.n	8002262 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d01d      	beq.n	8002208 <I2C_MasterTransmit_TXE+0x6e>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	d01a      	beq.n	8002208 <I2C_MasterTransmit_TXE+0x6e>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021d8:	d016      	beq.n	8002208 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2211      	movs	r2, #17
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ff6c 	bl	80020de <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002206:	e0bc      	b.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002216:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002226:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d107      	bne.n	8002252 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ff81 	bl	8002152 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002250:	e097      	b.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ff3f 	bl	80020de <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002260:	e08f      	b.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b21      	cmp	r3, #33	; 0x21
 8002266:	d007      	beq.n	8002278 <I2C_MasterTransmit_TXE+0xde>
 8002268:	7bbb      	ldrb	r3, [r7, #14]
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	f040 8089 	bne.w	8002382 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	2b22      	cmp	r3, #34	; 0x22
 8002274:	f040 8085 	bne.w	8002382 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d108      	bne.n	8002294 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002290:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002292:	e076      	b.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d15d      	bne.n	800235c <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d11d      	bne.n	80022e4 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d10b      	bne.n	80022c8 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c0:	1c9a      	adds	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022c6:	e05c      	b.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	121b      	asrs	r3, r3, #8
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022e2:	e04e      	b.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10b      	bne.n	8002304 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002302:	e03e      	b.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002308:	2b02      	cmp	r3, #2
 800230a:	d13a      	bne.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b22      	cmp	r3, #34	; 0x22
 8002316:	d108      	bne.n	800232a <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002326:	601a      	str	r2, [r3, #0]
}
 8002328:	e02b      	b.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b21      	cmp	r3, #33	; 0x21
 8002334:	d125      	bne.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800235a:	e012      	b.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002380:	e7ff      	b.n	8002382 <I2C_MasterTransmit_TXE+0x1e8>
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b21      	cmp	r3, #33	; 0x21
 80023a2:	d164      	bne.n	800246e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d012      	beq.n	80023d4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	781a      	ldrb	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80023d2:	e04c      	b.n	800246e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d01d      	beq.n	8002416 <I2C_MasterTransmit_BTF+0x8c>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d01a      	beq.n	8002416 <I2C_MasterTransmit_BTF+0x8c>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023e6:	d016      	beq.n	8002416 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023f6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2211      	movs	r2, #17
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fe65 	bl	80020de <HAL_I2C_MasterTxCpltCallback>
}
 8002414:	e02b      	b.n	800246e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002424:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002434:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d107      	bne.n	8002460 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fe7a 	bl	8002152 <HAL_I2C_MemTxCpltCallback>
}
 800245e:	e006      	b.n	800246e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fe38 	bl	80020de <HAL_I2C_MasterTxCpltCallback>
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b22      	cmp	r3, #34	; 0x22
 8002488:	d173      	bne.n	8002572 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d920      	bls.n	80024da <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d154      	bne.n	8002572 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80024d8:	e04b      	b.n	8002572 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d047      	beq.n	8002572 <I2C_MasterReceive_RXNE+0xfc>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d002      	beq.n	80024ee <I2C_MasterReceive_RXNE+0x78>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d141      	bne.n	8002572 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800250c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d10a      	bne.n	800255e <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fe04 	bl	8002164 <HAL_I2C_MemRxCpltCallback>
}
 800255c:	e009      	b.n	8002572 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2212      	movs	r2, #18
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fdbf 	bl	80020f0 <HAL_I2C_MasterRxCpltCallback>
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b04      	cmp	r3, #4
 8002590:	d11b      	bne.n	80025ca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80025c8:	e0bd      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d129      	bne.n	8002628 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00a      	beq.n	8002600 <I2C_MasterReceive_BTF+0x86>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d007      	beq.n	8002600 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002626:	e08e      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d176      	bne.n	8002720 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d002      	beq.n	800263e <I2C_MasterReceive_BTF+0xc4>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b10      	cmp	r3, #16
 800263c:	d108      	bne.n	8002650 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e019      	b.n	8002684 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d002      	beq.n	800265c <I2C_MasterReceive_BTF+0xe2>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d108      	bne.n	800266e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e00a      	b.n	8002684 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b10      	cmp	r3, #16
 8002672:	d007      	beq.n	8002684 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d10a      	bne.n	800270a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fd2e 	bl	8002164 <HAL_I2C_MemRxCpltCallback>
}
 8002708:	e01d      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2212      	movs	r2, #18
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fce9 	bl	80020f0 <HAL_I2C_MasterRxCpltCallback>
}
 800271e:	e012      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	d117      	bne.n	8002792 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800277a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800277c:	e067      	b.n	800284e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]
}
 8002790:	e05d      	b.n	800284e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800279a:	d133      	bne.n	8002804 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b21      	cmp	r3, #33	; 0x21
 80027a6:	d109      	bne.n	80027bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	e008      	b.n	80027ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <I2C_Master_SB+0x90>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d037      	beq.n	800284e <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d104      	bne.n	80027f2 <I2C_Master_SB+0xa4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02d      	beq.n	800284e <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002800:	605a      	str	r2, [r3, #4]
}
 8002802:	e024      	b.n	800284e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10e      	bne.n	800282a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	b29b      	uxth	r3, r3
 8002812:	11db      	asrs	r3, r3, #7
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0306 	and.w	r3, r3, #6
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f063 030f 	orn	r3, r3, #15
 8002820:	b2da      	uxtb	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]
}
 8002828:	e011      	b.n	800284e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10d      	bne.n	800284e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	b29b      	uxth	r3, r3
 8002838:	11db      	asrs	r3, r3, #7
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f003 0306 	and.w	r3, r3, #6
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f063 030e 	orn	r3, r3, #14
 8002846:	b2da      	uxtb	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	b2da      	uxtb	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <I2C_Master_ADD10+0x24>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	2b00      	cmp	r3, #0
 800287a:	d011      	beq.n	80028a0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <I2C_Master_ADD10+0x38>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289e:	605a      	str	r2, [r3, #4]
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b091      	sub	sp, #68	; 0x44
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b22      	cmp	r3, #34	; 0x22
 80028d2:	f040 8174 	bne.w	8002bbe <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <I2C_Master_ADDR+0x54>
 80028de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d10b      	bne.n	80028fe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e6:	2300      	movs	r3, #0
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	e16b      	b.n	8002bd6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	2b00      	cmp	r3, #0
 8002904:	d11d      	bne.n	8002942 <I2C_Master_ADDR+0x98>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800290e:	d118      	bne.n	8002942 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002910:	2300      	movs	r3, #0
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002934:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	651a      	str	r2, [r3, #80]	; 0x50
 8002940:	e149      	b.n	8002bd6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d113      	bne.n	8002974 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294c:	2300      	movs	r3, #0
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e120      	b.n	8002bb6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	f040 808a 	bne.w	8002a94 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002982:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002986:	d137      	bne.n	80029f8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002996:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a6:	d113      	bne.n	80029d0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	e0f2      	b.n	8002bb6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	623b      	str	r3, [r7, #32]
 80029e4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e0de      	b.n	8002bb6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d02e      	beq.n	8002a5c <I2C_Master_ADDR+0x1b2>
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d02b      	beq.n	8002a5c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a06:	2b12      	cmp	r3, #18
 8002a08:	d102      	bne.n	8002a10 <I2C_Master_ADDR+0x166>
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d125      	bne.n	8002a5c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d00e      	beq.n	8002a34 <I2C_Master_ADDR+0x18a>
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d00b      	beq.n	8002a34 <I2C_Master_ADDR+0x18a>
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d008      	beq.n	8002a34 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e007      	b.n	8002a44 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a42:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	e0ac      	b.n	8002bb6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e090      	b.n	8002bb6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d158      	bne.n	8002b50 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d021      	beq.n	8002ae8 <I2C_Master_ADDR+0x23e>
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d01e      	beq.n	8002ae8 <I2C_Master_ADDR+0x23e>
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d01b      	beq.n	8002ae8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002abe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e012      	b.n	8002b0e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002af6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b1c:	d14b      	bne.n	8002bb6 <I2C_Master_ADDR+0x30c>
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b24:	d00b      	beq.n	8002b3e <I2C_Master_ADDR+0x294>
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d008      	beq.n	8002b3e <I2C_Master_ADDR+0x294>
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d005      	beq.n	8002b3e <I2C_Master_ADDR+0x294>
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d002      	beq.n	8002b3e <I2C_Master_ADDR+0x294>
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d13b      	bne.n	8002bb6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	e032      	b.n	8002bb6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b5e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6e:	d117      	bne.n	8002ba0 <I2C_Master_ADDR+0x2f6>
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b76:	d00b      	beq.n	8002b90 <I2C_Master_ADDR+0x2e6>
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d008      	beq.n	8002b90 <I2C_Master_ADDR+0x2e6>
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d005      	beq.n	8002b90 <I2C_Master_ADDR+0x2e6>
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d002      	beq.n	8002b90 <I2C_Master_ADDR+0x2e6>
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d107      	bne.n	8002ba0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b9e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002bbc:	e00b      	b.n	8002bd6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
}
 8002bd4:	e7ff      	b.n	8002bd6 <I2C_Master_ADDR+0x32c>
 8002bd6:	bf00      	nop
 8002bd8:	3744      	adds	r7, #68	; 0x44
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d02b      	beq.n	8002c52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	781a      	ldrb	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d114      	bne.n	8002c52 <I2C_SlaveTransmit_TXE+0x72>
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b29      	cmp	r3, #41	; 0x29
 8002c2c:	d111      	bne.n	8002c52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2221      	movs	r2, #33	; 0x21
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2228      	movs	r2, #40	; 0x28
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fa58 	bl	8002102 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d011      	beq.n	8002c90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02c      	beq.n	8002d0e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d114      	bne.n	8002d0e <I2C_SlaveReceive_RXNE+0x74>
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ce8:	d111      	bne.n	8002d0e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2222      	movs	r2, #34	; 0x22
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2228      	movs	r2, #40	; 0x28
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fa03 	bl	8002114 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d72:	2b28      	cmp	r3, #40	; 0x28
 8002d74:	d127      	bne.n	8002dc6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d84:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	09db      	lsrs	r3, r3, #7
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	81bb      	strh	r3, [r7, #12]
 8002da8:	e002      	b.n	8002db0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002db8:	89ba      	ldrh	r2, [r7, #12]
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff f9b1 	bl	8002126 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002dc4:	e008      	b.n	8002dd8 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f06f 0202 	mvn.w	r2, #2
 8002dce:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dfe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e3c:	d172      	bne.n	8002f24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	2b22      	cmp	r3, #34	; 0x22
 8002e42:	d002      	beq.n	8002e4a <I2C_Slave_STOPF+0x6a>
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b2a      	cmp	r3, #42	; 0x2a
 8002e48:	d135      	bne.n	8002eb6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f043 0204 	orr.w	r2, r3, #4
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe faa2 	bl	80013cc <HAL_DMA_GetState>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d049      	beq.n	8002f22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <I2C_Slave_STOPF+0x258>)
 8002e94:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fa20 	bl	80012e0 <HAL_DMA_Abort_IT>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d03d      	beq.n	8002f22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eb4:	e035      	b.n	8002f22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f043 0204 	orr.w	r2, r3, #4
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe fa6c 	bl	80013cc <HAL_DMA_GetState>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d014      	beq.n	8002f24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	4a4e      	ldr	r2, [pc, #312]	; (8003038 <I2C_Slave_STOPF+0x258>)
 8002f00:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe f9ea 	bl	80012e0 <HAL_DMA_Abort_IT>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4798      	blx	r3
 8002f20:	e000      	b.n	8002f24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03e      	beq.n	8002fac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d112      	bne.n	8002f62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	d112      	bne.n	8002f96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f043 0204 	orr.w	r2, r3, #4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f8b3 	bl	8003120 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002fba:	e039      	b.n	8003030 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8002fc0:	d109      	bne.n	8002fd6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2228      	movs	r2, #40	; 0x28
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff f89f 	bl	8002114 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b28      	cmp	r3, #40	; 0x28
 8002fe0:	d111      	bne.n	8003006 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <I2C_Slave_STOPF+0x25c>)
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff f89e 	bl	8002140 <HAL_I2C_ListenCpltCallback>
}
 8003004:	e014      	b.n	8003030 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	2b22      	cmp	r3, #34	; 0x22
 800300c:	d002      	beq.n	8003014 <I2C_Slave_STOPF+0x234>
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b22      	cmp	r3, #34	; 0x22
 8003012:	d10d      	bne.n	8003030 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff f872 	bl	8002114 <HAL_I2C_SlaveRxCpltCallback>
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	0800334d 	.word	0x0800334d
 800303c:	ffff0000 	.word	0xffff0000

08003040 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d002      	beq.n	8003062 <I2C_Slave_AF+0x22>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b20      	cmp	r3, #32
 8003060:	d129      	bne.n	80030b6 <I2C_Slave_AF+0x76>
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b28      	cmp	r3, #40	; 0x28
 8003066:	d126      	bne.n	80030b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <I2C_Slave_AF+0xdc>)
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800307c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003086:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003096:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff f846 	bl	8002140 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80030b4:	e02e      	b.n	8003114 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b21      	cmp	r3, #33	; 0x21
 80030ba:	d126      	bne.n	800310a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a17      	ldr	r2, [pc, #92]	; (800311c <I2C_Slave_AF+0xdc>)
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2221      	movs	r2, #33	; 0x21
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003100:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe fffd 	bl	8002102 <HAL_I2C_SlaveTxCpltCallback>
}
 8003108:	e004      	b.n	8003114 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003112:	615a      	str	r2, [r3, #20]
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	ffff0000 	.word	0xffff0000

08003120 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312e:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b10      	cmp	r3, #16
 800313a:	d10a      	bne.n	8003152 <I2C_ITError+0x32>
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b22      	cmp	r3, #34	; 0x22
 8003140:	d107      	bne.n	8003152 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003150:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003158:	2b28      	cmp	r3, #40	; 0x28
 800315a:	d107      	bne.n	800316c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2228      	movs	r2, #40	; 0x28
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800316a:	e015      	b.n	8003198 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317a:	d006      	beq.n	800318a <I2C_ITError+0x6a>
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b60      	cmp	r3, #96	; 0x60
 8003180:	d003      	beq.n	800318a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a6:	d161      	bne.n	800326c <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d020      	beq.n	8003206 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c8:	4a5e      	ldr	r2, [pc, #376]	; (8003344 <I2C_ITError+0x224>)
 80031ca:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe f885 	bl	80012e0 <HAL_DMA_Abort_IT>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8089 	beq.w	80032f0 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003200:	4610      	mov	r0, r2
 8003202:	4798      	blx	r3
 8003204:	e074      	b.n	80032f0 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	4a4e      	ldr	r2, [pc, #312]	; (8003344 <I2C_ITError+0x224>)
 800320c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe f864 	bl	80012e0 <HAL_DMA_Abort_IT>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d068      	beq.n	80032f0 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d10b      	bne.n	8003244 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003266:	4610      	mov	r0, r2
 8003268:	4798      	blx	r3
 800326a:	e041      	b.n	80032f0 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b60      	cmp	r3, #96	; 0x60
 8003276:	d125      	bne.n	80032c4 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d10b      	bne.n	80032ac <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fe ff63 	bl	8002188 <HAL_I2C_AbortCpltCallback>
 80032c2:	e015      	b.n	80032f0 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d10b      	bne.n	80032ea <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fe ff43 	bl	8002176 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b04      	cmp	r3, #4
 8003302:	d11b      	bne.n	800333c <I2C_ITError+0x21c>
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b28      	cmp	r3, #40	; 0x28
 8003308:	d118      	bne.n	800333c <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003318:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <I2C_ITError+0x228>)
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe ff02 	bl	8002140 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	0800334d 	.word	0x0800334d
 8003348:	ffff0000 	.word	0xffff0000

0800334c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003366:	2200      	movs	r2, #0
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336e:	2200      	movs	r2, #0
 8003370:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003380:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	2200      	movs	r2, #0
 800338e:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	2200      	movs	r2, #0
 8003396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b60      	cmp	r3, #96	; 0x60
 80033b2:	d10e      	bne.n	80033d2 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7fe fedc 	bl	8002188 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033d0:	e027      	b.n	8003422 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d2:	7afb      	ldrb	r3, [r7, #11]
 80033d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033d8:	2b28      	cmp	r3, #40	; 0x28
 80033da:	d117      	bne.n	800340c <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2228      	movs	r2, #40	; 0x28
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800340a:	e007      	b.n	800341c <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7fe feaa 	bl	8002176 <HAL_I2C_ErrorCallback>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800343a:	d103      	bne.n	8003444 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003442:	e007      	b.n	8003454 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800344c:	d102      	bne.n	8003454 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2208      	movs	r2, #8
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr
	...

08003460 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	420e0020 	.word	0x420e0020

08003478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e35c      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01c      	beq.n	80034cc <HAL_RCC_OscConfig+0x54>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <HAL_RCC_OscConfig+0x54>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d110      	bne.n	80034cc <HAL_RCC_OscConfig+0x54>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_RCC_OscConfig+0x54>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d104      	bne.n	80034cc <HAL_RCC_OscConfig+0x54>
 80034c2:	f240 1167 	movw	r1, #359	; 0x167
 80034c6:	48a5      	ldr	r0, [pc, #660]	; (800375c <HAL_RCC_OscConfig+0x2e4>)
 80034c8:	f7fd f873 	bl	80005b2 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 809a 	beq.w	800360e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00e      	beq.n	8003500 <HAL_RCC_OscConfig+0x88>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ea:	d009      	beq.n	8003500 <HAL_RCC_OscConfig+0x88>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f4:	d004      	beq.n	8003500 <HAL_RCC_OscConfig+0x88>
 80034f6:	f240 116d 	movw	r1, #365	; 0x16d
 80034fa:	4898      	ldr	r0, [pc, #608]	; (800375c <HAL_RCC_OscConfig+0x2e4>)
 80034fc:	f7fd f859 	bl	80005b2 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003500:	4b97      	ldr	r3, [pc, #604]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b04      	cmp	r3, #4
 800350a:	d00c      	beq.n	8003526 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800350c:	4b94      	ldr	r3, [pc, #592]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d112      	bne.n	800353e <HAL_RCC_OscConfig+0xc6>
 8003518:	4b91      	ldr	r3, [pc, #580]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d10b      	bne.n	800353e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003526:	4b8e      	ldr	r3, [pc, #568]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d06c      	beq.n	800360c <HAL_RCC_OscConfig+0x194>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d168      	bne.n	800360c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e302      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0xde>
 8003548:	4b85      	ldr	r3, [pc, #532]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a84      	ldr	r2, [pc, #528]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 800354e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e02e      	b.n	80035b4 <HAL_RCC_OscConfig+0x13c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x100>
 800355e:	4b80      	ldr	r3, [pc, #512]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a7f      	ldr	r2, [pc, #508]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b7d      	ldr	r3, [pc, #500]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7c      	ldr	r2, [pc, #496]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0x13c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x124>
 8003582:	4b77      	ldr	r3, [pc, #476]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a76      	ldr	r2, [pc, #472]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b74      	ldr	r3, [pc, #464]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a73      	ldr	r2, [pc, #460]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0x13c>
 800359c:	4b70      	ldr	r3, [pc, #448]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6f      	ldr	r2, [pc, #444]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b6d      	ldr	r3, [pc, #436]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6c      	ldr	r2, [pc, #432]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fd f9e2 	bl	8000984 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fd f9de 	bl	8000984 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e2b6      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b62      	ldr	r3, [pc, #392]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x14c>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fd f9ce 	bl	8000984 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fd f9ca 	bl	8000984 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e2a2      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	4b58      	ldr	r3, [pc, #352]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x174>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d079      	beq.n	800370e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_RCC_OscConfig+0x1bc>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d004      	beq.n	8003634 <HAL_RCC_OscConfig+0x1bc>
 800362a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800362e:	484b      	ldr	r0, [pc, #300]	; (800375c <HAL_RCC_OscConfig+0x2e4>)
 8003630:	f7fc ffbf 	bl	80005b2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	2b1f      	cmp	r3, #31
 800363a:	d904      	bls.n	8003646 <HAL_RCC_OscConfig+0x1ce>
 800363c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003640:	4846      	ldr	r0, [pc, #280]	; (800375c <HAL_RCC_OscConfig+0x2e4>)
 8003642:	f7fc ffb6 	bl	80005b2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003646:	4b46      	ldr	r3, [pc, #280]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003652:	4b43      	ldr	r3, [pc, #268]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b08      	cmp	r3, #8
 800365c:	d11c      	bne.n	8003698 <HAL_RCC_OscConfig+0x220>
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d116      	bne.n	8003698 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x20a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e260      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4933      	ldr	r1, [pc, #204]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	e03a      	b.n	800370e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a0:	4b30      	ldr	r3, [pc, #192]	; (8003764 <HAL_RCC_OscConfig+0x2ec>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fd f96d 	bl	8000984 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ae:	f7fd f969 	bl	8000984 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e241      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4921      	ldr	r1, [pc, #132]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]
 80036e0:	e015      	b.n	800370e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_RCC_OscConfig+0x2ec>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fd f94c 	bl	8000984 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f0:	f7fd f948 	bl	8000984 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e220      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_RCC_OscConfig+0x2e8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d048      	beq.n	80037ac <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCC_OscConfig+0x2bc>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d004      	beq.n	8003734 <HAL_RCC_OscConfig+0x2bc>
 800372a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800372e:	480b      	ldr	r0, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x2e4>)
 8003730:	f7fc ff3f 	bl	80005b2 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d021      	beq.n	8003780 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_RCC_OscConfig+0x2f0>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003742:	f7fd f91f 	bl	8000984 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003748:	e010      	b.n	800376c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374a:	f7fd f91b 	bl	8000984 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d909      	bls.n	800376c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e1f3      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
 800375c:	08004e68 	.word	0x08004e68
 8003760:	40021000 	.word	0x40021000
 8003764:	42420000 	.word	0x42420000
 8003768:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376c:	4b67      	ldr	r3, [pc, #412]	; (800390c <HAL_RCC_OscConfig+0x494>)
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0e8      	beq.n	800374a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003778:	2001      	movs	r0, #1
 800377a:	f000 fc11 	bl	8003fa0 <RCC_Delay>
 800377e:	e015      	b.n	80037ac <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003780:	4b63      	ldr	r3, [pc, #396]	; (8003910 <HAL_RCC_OscConfig+0x498>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fd f8fd 	bl	8000984 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378e:	f7fd f8f9 	bl	8000984 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e1d1      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	4b5a      	ldr	r3, [pc, #360]	; (800390c <HAL_RCC_OscConfig+0x494>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80c0 	beq.w	800393a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x368>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d008      	beq.n	80037e0 <HAL_RCC_OscConfig+0x368>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d004      	beq.n	80037e0 <HAL_RCC_OscConfig+0x368>
 80037d6:	f240 2111 	movw	r1, #529	; 0x211
 80037da:	484e      	ldr	r0, [pc, #312]	; (8003914 <HAL_RCC_OscConfig+0x49c>)
 80037dc:	f7fc fee9 	bl	80005b2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e0:	4b4a      	ldr	r3, [pc, #296]	; (800390c <HAL_RCC_OscConfig+0x494>)
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10d      	bne.n	8003808 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ec:	4b47      	ldr	r3, [pc, #284]	; (800390c <HAL_RCC_OscConfig+0x494>)
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	4a46      	ldr	r2, [pc, #280]	; (800390c <HAL_RCC_OscConfig+0x494>)
 80037f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f6:	61d3      	str	r3, [r2, #28]
 80037f8:	4b44      	ldr	r3, [pc, #272]	; (800390c <HAL_RCC_OscConfig+0x494>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003804:	2301      	movs	r3, #1
 8003806:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b43      	ldr	r3, [pc, #268]	; (8003918 <HAL_RCC_OscConfig+0x4a0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d118      	bne.n	8003846 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003814:	4b40      	ldr	r3, [pc, #256]	; (8003918 <HAL_RCC_OscConfig+0x4a0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <HAL_RCC_OscConfig+0x4a0>)
 800381a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003820:	f7fd f8b0 	bl	8000984 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003828:	f7fd f8ac 	bl	8000984 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e184      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	4b37      	ldr	r3, [pc, #220]	; (8003918 <HAL_RCC_OscConfig+0x4a0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d106      	bne.n	800385c <HAL_RCC_OscConfig+0x3e4>
 800384e:	4b2f      	ldr	r3, [pc, #188]	; (800390c <HAL_RCC_OscConfig+0x494>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4a2e      	ldr	r2, [pc, #184]	; (800390c <HAL_RCC_OscConfig+0x494>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6213      	str	r3, [r2, #32]
 800385a:	e02d      	b.n	80038b8 <HAL_RCC_OscConfig+0x440>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10c      	bne.n	800387e <HAL_RCC_OscConfig+0x406>
 8003864:	4b29      	ldr	r3, [pc, #164]	; (800390c <HAL_RCC_OscConfig+0x494>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a28      	ldr	r2, [pc, #160]	; (800390c <HAL_RCC_OscConfig+0x494>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	4b26      	ldr	r3, [pc, #152]	; (800390c <HAL_RCC_OscConfig+0x494>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4a25      	ldr	r2, [pc, #148]	; (800390c <HAL_RCC_OscConfig+0x494>)
 8003876:	f023 0304 	bic.w	r3, r3, #4
 800387a:	6213      	str	r3, [r2, #32]
 800387c:	e01c      	b.n	80038b8 <HAL_RCC_OscConfig+0x440>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b05      	cmp	r3, #5
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x428>
 8003886:	4b21      	ldr	r3, [pc, #132]	; (800390c <HAL_RCC_OscConfig+0x494>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a20      	ldr	r2, [pc, #128]	; (800390c <HAL_RCC_OscConfig+0x494>)
 800388c:	f043 0304 	orr.w	r3, r3, #4
 8003890:	6213      	str	r3, [r2, #32]
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <HAL_RCC_OscConfig+0x494>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4a1d      	ldr	r2, [pc, #116]	; (800390c <HAL_RCC_OscConfig+0x494>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6213      	str	r3, [r2, #32]
 800389e:	e00b      	b.n	80038b8 <HAL_RCC_OscConfig+0x440>
 80038a0:	4b1a      	ldr	r3, [pc, #104]	; (800390c <HAL_RCC_OscConfig+0x494>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	4a19      	ldr	r2, [pc, #100]	; (800390c <HAL_RCC_OscConfig+0x494>)
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	6213      	str	r3, [r2, #32]
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <HAL_RCC_OscConfig+0x494>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4a16      	ldr	r2, [pc, #88]	; (800390c <HAL_RCC_OscConfig+0x494>)
 80038b2:	f023 0304 	bic.w	r3, r3, #4
 80038b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d015      	beq.n	80038ec <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c0:	f7fd f860 	bl	8000984 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c6:	e00a      	b.n	80038de <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c8:	f7fd f85c 	bl	8000984 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e132      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_OscConfig+0x494>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0ee      	beq.n	80038c8 <HAL_RCC_OscConfig+0x450>
 80038ea:	e01d      	b.n	8003928 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ec:	f7fd f84a 	bl	8000984 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f2:	e013      	b.n	800391c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f4:	f7fd f846 	bl	8000984 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d90a      	bls.n	800391c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e11c      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	42420480 	.word	0x42420480
 8003914:	08004e68 	.word	0x08004e68
 8003918:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391c:	4b8b      	ldr	r3, [pc, #556]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392e:	4b87      	ldr	r3, [pc, #540]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4a86      	ldr	r2, [pc, #536]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003938:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_RCC_OscConfig+0x4e4>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d008      	beq.n	800395c <HAL_RCC_OscConfig+0x4e4>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d004      	beq.n	800395c <HAL_RCC_OscConfig+0x4e4>
 8003952:	f240 21af 	movw	r1, #687	; 0x2af
 8003956:	487e      	ldr	r0, [pc, #504]	; (8003b50 <HAL_RCC_OscConfig+0x6d8>)
 8003958:	f7fc fe2b 	bl	80005b2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80ee 	beq.w	8003b42 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003966:	4b79      	ldr	r3, [pc, #484]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b08      	cmp	r3, #8
 8003970:	f000 80ce 	beq.w	8003b10 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b02      	cmp	r3, #2
 800397a:	f040 80b2 	bne.w	8003ae2 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_OscConfig+0x522>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398e:	d004      	beq.n	800399a <HAL_RCC_OscConfig+0x522>
 8003990:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003994:	486e      	ldr	r0, [pc, #440]	; (8003b50 <HAL_RCC_OscConfig+0x6d8>)
 8003996:	f7fc fe0c 	bl	80005b2 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d04a      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039aa:	d045      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039b4:	d040      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039be:	d03b      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c8:	d036      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039d2:	d031      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039dc:	d02c      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039e6:	d027      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f0:	d022      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039fa:	d01d      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a04:	d018      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a0e:	d013      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a18:	d00e      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003a22:	d009      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003a2c:	d004      	beq.n	8003a38 <HAL_RCC_OscConfig+0x5c0>
 8003a2e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003a32:	4847      	ldr	r0, [pc, #284]	; (8003b50 <HAL_RCC_OscConfig+0x6d8>)
 8003a34:	f7fc fdbd 	bl	80005b2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b46      	ldr	r3, [pc, #280]	; (8003b54 <HAL_RCC_OscConfig+0x6dc>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fc ffa1 	bl	8000984 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fc ff9d 	bl	8000984 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e075      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a58:	4b3c      	ldr	r3, [pc, #240]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6c:	d116      	bne.n	8003a9c <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_RCC_OscConfig+0x612>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a7e:	d004      	beq.n	8003a8a <HAL_RCC_OscConfig+0x612>
 8003a80:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003a84:	4832      	ldr	r0, [pc, #200]	; (8003b50 <HAL_RCC_OscConfig+0x6d8>)
 8003a86:	f7fc fd94 	bl	80005b2 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a8a:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	492d      	ldr	r1, [pc, #180]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a19      	ldr	r1, [r3, #32]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	430b      	orrs	r3, r1
 8003aae:	4927      	ldr	r1, [pc, #156]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <HAL_RCC_OscConfig+0x6dc>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fc ff63 	bl	8000984 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fc ff5f 	bl	8000984 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e037      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x64a>
 8003ae0:	e02f      	b.n	8003b42 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <HAL_RCC_OscConfig+0x6dc>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fc ff4c 	bl	8000984 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af0:	f7fc ff48 	bl	8000984 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e020      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x678>
 8003b0e:	e018      	b.n	8003b42 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e013      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_OscConfig+0x6d4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d001      	beq.n	8003b42 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	08004e68 	.word	0x08004e68
 8003b54:	42420060 	.word	0x42420060

08003b58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e176      	b.n	8003e5a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d116      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x4e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d110      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x4e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x4e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d104      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x4e>
 8003b9c:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003ba0:	4874      	ldr	r0, [pc, #464]	; (8003d74 <HAL_RCC_ClockConfig+0x21c>)
 8003ba2:	f7fc fd06 	bl	80005b2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x6a>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d007      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x6a>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x6a>
 8003bb8:	f240 3139 	movw	r1, #825	; 0x339
 8003bbc:	486d      	ldr	r0, [pc, #436]	; (8003d74 <HAL_RCC_ClockConfig+0x21c>)
 8003bbe:	f7fc fcf8 	bl	80005b2 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc2:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <HAL_RCC_ClockConfig+0x220>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d910      	bls.n	8003bf2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd0:	4b69      	ldr	r3, [pc, #420]	; (8003d78 <HAL_RCC_ClockConfig+0x220>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 0207 	bic.w	r2, r3, #7
 8003bd8:	4967      	ldr	r1, [pc, #412]	; (8003d78 <HAL_RCC_ClockConfig+0x220>)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be0:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <HAL_RCC_ClockConfig+0x220>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d001      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e133      	b.n	8003e5a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d049      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c0a:	4b5c      	ldr	r3, [pc, #368]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4a5b      	ldr	r2, [pc, #364]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003c10:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c14:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c22:	4b56      	ldr	r3, [pc, #344]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4a55      	ldr	r2, [pc, #340]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003c28:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c2c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d024      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x128>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d020      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x128>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b90      	cmp	r3, #144	; 0x90
 8003c44:	d01c      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x128>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2ba0      	cmp	r3, #160	; 0xa0
 8003c4c:	d018      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x128>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2bb0      	cmp	r3, #176	; 0xb0
 8003c54:	d014      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x128>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c5c:	d010      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x128>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2bd0      	cmp	r3, #208	; 0xd0
 8003c64:	d00c      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x128>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2be0      	cmp	r3, #224	; 0xe0
 8003c6c:	d008      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x128>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2bf0      	cmp	r3, #240	; 0xf0
 8003c74:	d004      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x128>
 8003c76:	f240 315f 	movw	r1, #863	; 0x35f
 8003c7a:	483e      	ldr	r0, [pc, #248]	; (8003d74 <HAL_RCC_ClockConfig+0x21c>)
 8003c7c:	f7fc fc99 	bl	80005b2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	493b      	ldr	r1, [pc, #236]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d051      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x168>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d008      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x168>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x168>
 8003cb6:	f240 3166 	movw	r1, #870	; 0x366
 8003cba:	482e      	ldr	r0, [pc, #184]	; (8003d74 <HAL_RCC_ClockConfig+0x21c>)
 8003cbc:	f7fc fc79 	bl	80005b2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc8:	4b2c      	ldr	r3, [pc, #176]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d115      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0c0      	b.n	8003e5a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce0:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0b4      	b.n	8003e5a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0ac      	b.n	8003e5a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d00:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f023 0203 	bic.w	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	491b      	ldr	r1, [pc, #108]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d12:	f7fc fe37 	bl	8000984 <HAL_GetTick>
 8003d16:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d18:	e00a      	b.n	8003d30 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1a:	f7fc fe33 	bl	8000984 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e094      	b.n	8003e5a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_RCC_ClockConfig+0x224>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 020c 	and.w	r2, r3, #12
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d1eb      	bne.n	8003d1a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_RCC_ClockConfig+0x220>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d217      	bcs.n	8003d80 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x220>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 0207 	bic.w	r2, r3, #7
 8003d58:	4907      	ldr	r1, [pc, #28]	; (8003d78 <HAL_RCC_ClockConfig+0x220>)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_ClockConfig+0x220>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d008      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e073      	b.n	8003e5a <HAL_RCC_ClockConfig+0x302>
 8003d72:	bf00      	nop
 8003d74:	08004e68 	.word	0x08004e68
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d025      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d018      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x26e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9c:	d013      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x26e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003da6:	d00e      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x26e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x26e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dba:	d004      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x26e>
 8003dbc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003dc0:	4828      	ldr	r0, [pc, #160]	; (8003e64 <HAL_RCC_ClockConfig+0x30c>)
 8003dc2:	f7fc fbf6 	bl	80005b2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc6:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <HAL_RCC_ClockConfig+0x310>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4925      	ldr	r1, [pc, #148]	; (8003e68 <HAL_RCC_ClockConfig+0x310>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d026      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d018      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x2c6>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	d013      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x2c6>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003dfe:	d00e      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x2c6>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x2c6>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e12:	d004      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x2c6>
 8003e14:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003e18:	4812      	ldr	r0, [pc, #72]	; (8003e64 <HAL_RCC_ClockConfig+0x30c>)
 8003e1a:	f7fc fbca 	bl	80005b2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCC_ClockConfig+0x310>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	490e      	ldr	r1, [pc, #56]	; (8003e68 <HAL_RCC_ClockConfig+0x310>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e32:	f000 f821 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003e36:	4601      	mov	r1, r0
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_ClockConfig+0x310>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <HAL_RCC_ClockConfig+0x314>)
 8003e44:	5cd3      	ldrb	r3, [r2, r3]
 8003e46:	fa21 f303 	lsr.w	r3, r1, r3
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x318>)
 8003e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x31c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fd54 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	08004e68 	.word	0x08004e68
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08004f3c 	.word	0x08004f3c
 8003e70:	20000000 	.word	0x20000000
 8003e74:	20000004 	.word	0x20000004

08003e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	b490      	push	{r4, r7}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e7e:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e80:	1d3c      	adds	r4, r7, #4
 8003e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e88:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ea2:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x46>
 8003eb6:	e02d      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003eba:	623b      	str	r3, [r7, #32]
      break;
 8003ebc:	e02d      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	0c9b      	lsrs	r3, r3, #18
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003eca:	4413      	add	r3, r2
 8003ecc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ed0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	0c5b      	lsrs	r3, r3, #17
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003eea:	4413      	add	r3, r2
 8003eec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ef0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	4a0f      	ldr	r2, [pc, #60]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ef6:	fb02 f203 	mul.w	r2, r2, r3
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
 8003f02:	e004      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	4a0c      	ldr	r2, [pc, #48]	; (8003f38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f08:	fb02 f303 	mul.w	r3, r2, r3
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	623b      	str	r3, [r7, #32]
      break;
 8003f12:	e002      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f16:	623b      	str	r3, [r7, #32]
      break;
 8003f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3728      	adds	r7, #40	; 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc90      	pop	{r4, r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	08004ea0 	.word	0x08004ea0
 8003f2c:	08004eb0 	.word	0x08004eb0
 8003f30:	40021000 	.word	0x40021000
 8003f34:	007a1200 	.word	0x007a1200
 8003f38:	003d0900 	.word	0x003d0900

08003f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f40:	4b02      	ldr	r3, [pc, #8]	; (8003f4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	20000000 	.word	0x20000000

08003f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f54:	f7ff fff2 	bl	8003f3c <HAL_RCC_GetHCLKFreq>
 8003f58:	4601      	mov	r1, r0
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	4a03      	ldr	r2, [pc, #12]	; (8003f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f66:	5cd3      	ldrb	r3, [r2, r3]
 8003f68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000
 8003f74:	08004f4c 	.word	0x08004f4c

08003f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f7c:	f7ff ffde 	bl	8003f3c <HAL_RCC_GetHCLKFreq>
 8003f80:	4601      	mov	r1, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	0adb      	lsrs	r3, r3, #11
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4a03      	ldr	r2, [pc, #12]	; (8003f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	08004f4c 	.word	0x08004f4c

08003fa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <RCC_Delay+0x34>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <RCC_Delay+0x38>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	0a5b      	lsrs	r3, r3, #9
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fbc:	bf00      	nop
  }
  while (Delay --);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	60fa      	str	r2, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f9      	bne.n	8003fbc <RCC_Delay+0x1c>
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000000 	.word	0x20000000
 8003fd8:	10624dd3 	.word	0x10624dd3

08003fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10f      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d109      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004010:	216c      	movs	r1, #108	; 0x6c
 8004012:	4873      	ldr	r0, [pc, #460]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004014:	f7fc facd 	bl	80005b2 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8095 	beq.w	8004150 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d012      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004036:	d00d      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004040:	d008      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800404a:	d003      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800404c:	2172      	movs	r1, #114	; 0x72
 800404e:	4864      	ldr	r0, [pc, #400]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004050:	f7fc faaf 	bl	80005b2 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8004054:	2300      	movs	r3, #0
 8004056:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004058:	4b62      	ldr	r3, [pc, #392]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004064:	4b5f      	ldr	r3, [pc, #380]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	4a5e      	ldr	r2, [pc, #376]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800406a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406e:	61d3      	str	r3, [r2, #28]
 8004070:	4b5c      	ldr	r3, [pc, #368]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d118      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408c:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a55      	ldr	r2, [pc, #340]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004098:	f7fc fc74 	bl	8000984 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	e008      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a0:	f7fc fc70 	bl	8000984 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	; 0x64
 80040ac:	d901      	bls.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e092      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	4b4d      	ldr	r3, [pc, #308]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040be:	4b49      	ldr	r3, [pc, #292]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d02e      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x150>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d027      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040dc:	4b41      	ldr	r3, [pc, #260]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e6:	4b41      	ldr	r3, [pc, #260]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ec:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040f2:	4a3c      	ldr	r2, [pc, #240]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d014      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fc fc3f 	bl	8000984 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fc fc3b 	bl	8000984 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e05b      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b30      	ldr	r3, [pc, #192]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412c:	4b2d      	ldr	r3, [pc, #180]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	492a      	ldr	r1, [pc, #168]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800413a:	4313      	orrs	r3, r2
 800413c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d105      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004144:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800414a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01f      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d012      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800416c:	d00d      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004176:	d008      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004180:	d003      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004182:	21b9      	movs	r1, #185	; 0xb9
 8004184:	4816      	ldr	r0, [pc, #88]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004186:	f7fc fa14 	bl	80005b2 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800418a:	4b16      	ldr	r3, [pc, #88]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4913      	ldr	r1, [pc, #76]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d016      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b0:	d008      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041ba:	f240 1115 	movw	r1, #277	; 0x115
 80041be:	4808      	ldr	r0, [pc, #32]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80041c0:	f7fc f9f7 	bl	80005b2 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4904      	ldr	r1, [pc, #16]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	08004eb4 	.word	0x08004eb4
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40007000 	.word	0x40007000
 80041ec:	42420440 	.word	0x42420440

080041f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b08d      	sub	sp, #52	; 0x34
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041f8:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 80041fa:	f107 040c 	add.w	r4, r7, #12
 80041fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004204:	4b5d      	ldr	r3, [pc, #372]	; (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
 800420e:	2300      	movs	r3, #0
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	2300      	movs	r3, #0
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10e      	bne.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 800423c:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004240:	484f      	ldr	r0, [pc, #316]	; (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 8004242:	f7fc f9b6 	bl	80005b2 <assert_failed>

  switch (PeriphClk)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d07f      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 800424c:	2b10      	cmp	r3, #16
 800424e:	d002      	beq.n	8004256 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8004250:	2b01      	cmp	r3, #1
 8004252:	d048      	beq.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004254:	e08b      	b.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      temp_reg = RCC->CFGR;
 8004256:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800425c:	4b49      	ldr	r3, [pc, #292]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d07f      	beq.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	0c9b      	lsrs	r3, r3, #18
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004274:	4413      	add	r3, r2
 8004276:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800427a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d018      	beq.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004286:	4b3f      	ldr	r3, [pc, #252]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0c5b      	lsrs	r3, r3, #17
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004294:	4413      	add	r3, r2
 8004296:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042a6:	4a38      	ldr	r2, [pc, #224]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	fb02 f303 	mul.w	r3, r2, r3
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b6:	e004      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	4a34      	ldr	r2, [pc, #208]	; (800438c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80042c2:	4b30      	ldr	r3, [pc, #192]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ce:	d102      	bne.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = pllclk;
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042d4:	e048      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          frequency = (pllclk * 2) / 3;
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	4a2d      	ldr	r2, [pc, #180]	; (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042e4:	e040      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
      temp_reg = RCC->BDCR;
 80042e6:	4b27      	ldr	r3, [pc, #156]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f6:	d108      	bne.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSE_VALUE;
 8004302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
 8004308:	e01f      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004314:	d109      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8004316:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        frequency = LSI_VALUE;
 8004322:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
 8004328:	e00f      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004334:	d11a      	bne.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8004336:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d014      	beq.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
        frequency = HSE_VALUE / 128U;
 8004342:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004348:	e010      	b.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 800434a:	e00f      	b.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800434c:	f7ff fe14 	bl	8003f78 <HAL_RCC_GetPCLK2Freq>
 8004350:	4602      	mov	r2, r0
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	0b9b      	lsrs	r3, r3, #14
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	3301      	adds	r3, #1
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004366:	e002      	b.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 8004368:	bf00      	nop
 800436a:	e000      	b.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 800436c:	bf00      	nop
    }
  }
  return (frequency);
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004370:	4618      	mov	r0, r3
 8004372:	3734      	adds	r7, #52	; 0x34
 8004374:	46bd      	mov	sp, r7
 8004376:	bd90      	pop	{r4, r7, pc}
 8004378:	08004ef0 	.word	0x08004ef0
 800437c:	08004f00 	.word	0x08004f00
 8004380:	08004eb4 	.word	0x08004eb4
 8004384:	40021000 	.word	0x40021000
 8004388:	007a1200 	.word	0x007a1200
 800438c:	003d0900 	.word	0x003d0900
 8004390:	aaaaaaab 	.word	0xaaaaaaab

08004394 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e0b4      	b.n	8004514 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a5b      	ldr	r2, [pc, #364]	; (800451c <HAL_RTC_Init+0x188>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_RTC_Init+0x2a>
 80043b4:	f240 111d 	movw	r1, #285	; 0x11d
 80043b8:	4859      	ldr	r0, [pc, #356]	; (8004520 <HAL_RTC_Init+0x18c>)
 80043ba:	f7fc f8fa 	bl	80005b2 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d012      	beq.n	80043ec <HAL_RTC_Init+0x58>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d00e      	beq.n	80043ec <HAL_RTC_Init+0x58>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	d009      	beq.n	80043ec <HAL_RTC_Init+0x58>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e0:	d004      	beq.n	80043ec <HAL_RTC_Init+0x58>
 80043e2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80043e6:	484e      	ldr	r0, [pc, #312]	; (8004520 <HAL_RTC_Init+0x18c>)
 80043e8:	f7fc f8e3 	bl	80005b2 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f4:	d309      	bcc.n	800440a <HAL_RTC_Init+0x76>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d004      	beq.n	800440a <HAL_RTC_Init+0x76>
 8004400:	f240 111f 	movw	r1, #287	; 0x11f
 8004404:	4846      	ldr	r0, [pc, #280]	; (8004520 <HAL_RTC_Init+0x18c>)
 8004406:	f7fc f8d4 	bl	80005b2 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	7c5b      	ldrb	r3, [r3, #17]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc f91e 	bl	800065c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa82 	bl	8004930 <HAL_RTC_WaitForSynchro>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e06b      	b.n	8004514 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fb3b 	bl	8004ab8 <RTC_EnterInitMode>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2204      	movs	r2, #4
 800444c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e060      	b.n	8004514 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0207 	bic.w	r2, r2, #7
 8004460:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800446a:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <HAL_RTC_Init+0x190>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4a2d      	ldr	r2, [pc, #180]	; (8004524 <HAL_RTC_Init+0x190>)
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004476:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <HAL_RTC_Init+0x190>)
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	4928      	ldr	r1, [pc, #160]	; (8004524 <HAL_RTC_Init+0x190>)
 8004484:	4313      	orrs	r3, r2
 8004486:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d003      	beq.n	800449a <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e00e      	b.n	80044b8 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800449a:	2001      	movs	r0, #1
 800449c:	f7ff fea8 	bl	80041f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80044a0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2204      	movs	r2, #4
 80044ac:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e030      	b.n	8004514 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f023 010f 	bic.w	r1, r3, #15
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	0c1a      	lsrs	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	b291      	uxth	r1, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fb0f 	bl	8004b08 <RTC_ExitInitMode>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2204      	movs	r2, #4
 80044f4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e00c      	b.n	8004514 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004512:	2300      	movs	r3, #0
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40002800 	.word	0x40002800
 8004520:	08004f04 	.word	0x08004f04
 8004524:	40006c00 	.word	0x40006c00

08004528 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004528:	b590      	push	{r4, r7, lr}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	2300      	movs	r3, #0
 800453a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_RTC_SetTime+0x20>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0cd      	b.n	80046e8 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_RTC_SetTime+0x3a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d004      	beq.n	8004562 <HAL_RTC_SetTime+0x3a>
 8004558:	f240 21ca 	movw	r1, #714	; 0x2ca
 800455c:	4864      	ldr	r0, [pc, #400]	; (80046f0 <HAL_RTC_SetTime+0x1c8>)
 800455e:	f7fc f828 	bl	80005b2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	7c1b      	ldrb	r3, [r3, #16]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_RTC_SetTime+0x46>
 800456a:	2302      	movs	r3, #2
 800456c:	e0bc      	b.n	80046e8 <HAL_RTC_SetTime+0x1c0>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2202      	movs	r2, #2
 8004578:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d12e      	bne.n	80045de <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b17      	cmp	r3, #23
 8004586:	d904      	bls.n	8004592 <HAL_RTC_SetTime+0x6a>
 8004588:	f240 21d3 	movw	r1, #723	; 0x2d3
 800458c:	4858      	ldr	r0, [pc, #352]	; (80046f0 <HAL_RTC_SetTime+0x1c8>)
 800458e:	f7fc f810 	bl	80005b2 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	785b      	ldrb	r3, [r3, #1]
 8004596:	2b3b      	cmp	r3, #59	; 0x3b
 8004598:	d904      	bls.n	80045a4 <HAL_RTC_SetTime+0x7c>
 800459a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800459e:	4854      	ldr	r0, [pc, #336]	; (80046f0 <HAL_RTC_SetTime+0x1c8>)
 80045a0:	f7fc f807 	bl	80005b2 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	789b      	ldrb	r3, [r3, #2]
 80045a8:	2b3b      	cmp	r3, #59	; 0x3b
 80045aa:	d904      	bls.n	80045b6 <HAL_RTC_SetTime+0x8e>
 80045ac:	f240 21d5 	movw	r1, #725	; 0x2d5
 80045b0:	484f      	ldr	r0, [pc, #316]	; (80046f0 <HAL_RTC_SetTime+0x1c8>)
 80045b2:	f7fb fffe 	bl	80005b2 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80045c0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	4619      	mov	r1, r3
 80045ca:	460b      	mov	r3, r1
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a5b      	subs	r3, r3, r1
 80045d0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80045d2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80045d8:	4413      	add	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	e045      	b.n	800466a <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fab8 	bl	8004b58 <RTC_Bcd2ToByte>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b17      	cmp	r3, #23
 80045ec:	d904      	bls.n	80045f8 <HAL_RTC_SetTime+0xd0>
 80045ee:	f240 21dd 	movw	r1, #733	; 0x2dd
 80045f2:	483f      	ldr	r0, [pc, #252]	; (80046f0 <HAL_RTC_SetTime+0x1c8>)
 80045f4:	f7fb ffdd 	bl	80005b2 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	785b      	ldrb	r3, [r3, #1]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 faab 	bl	8004b58 <RTC_Bcd2ToByte>
 8004602:	4603      	mov	r3, r0
 8004604:	2b3b      	cmp	r3, #59	; 0x3b
 8004606:	d904      	bls.n	8004612 <HAL_RTC_SetTime+0xea>
 8004608:	f240 21de 	movw	r1, #734	; 0x2de
 800460c:	4838      	ldr	r0, [pc, #224]	; (80046f0 <HAL_RTC_SetTime+0x1c8>)
 800460e:	f7fb ffd0 	bl	80005b2 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	789b      	ldrb	r3, [r3, #2]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fa9e 	bl	8004b58 <RTC_Bcd2ToByte>
 800461c:	4603      	mov	r3, r0
 800461e:	2b3b      	cmp	r3, #59	; 0x3b
 8004620:	d904      	bls.n	800462c <HAL_RTC_SetTime+0x104>
 8004622:	f240 21df 	movw	r1, #735	; 0x2df
 8004626:	4832      	ldr	r0, [pc, #200]	; (80046f0 <HAL_RTC_SetTime+0x1c8>)
 8004628:	f7fb ffc3 	bl	80005b2 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fa91 	bl	8004b58 <RTC_Bcd2ToByte>
 8004636:	4603      	mov	r3, r0
 8004638:	461a      	mov	r2, r3
 800463a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800463e:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fa86 	bl	8004b58 <RTC_Bcd2ToByte>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004658:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	789b      	ldrb	r3, [r3, #2]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fa7a 	bl	8004b58 <RTC_Bcd2ToByte>
 8004664:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004666:	4423      	add	r3, r4
 8004668:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800466a:	6979      	ldr	r1, [r7, #20]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f9bc 	bl	80049ea <RTC_WriteTimeCounter>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2204      	movs	r2, #4
 800467c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e02f      	b.n	80046e8 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0205 	bic.w	r2, r2, #5
 8004696:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f9cd 	bl	8004a38 <RTC_ReadAlarmCounter>
 800469e:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d018      	beq.n	80046da <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d214      	bcs.n	80046da <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80046b6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046ba:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80046bc:	6939      	ldr	r1, [r7, #16]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f9d3 	bl	8004a6a <RTC_WriteAlarmCounter>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2204      	movs	r2, #4
 80046ce:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e006      	b.n	80046e8 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd90      	pop	{r4, r7, pc}
 80046f0:	08004f04 	.word	0x08004f04

080046f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_RTC_SetDate+0x24>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0fc      	b.n	8004916 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <HAL_RTC_SetDate+0x3e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d004      	beq.n	8004732 <HAL_RTC_SetDate+0x3e>
 8004728:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800472c:	487c      	ldr	r0, [pc, #496]	; (8004920 <HAL_RTC_SetDate+0x22c>)
 800472e:	f7fb ff40 	bl	80005b2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	7c1b      	ldrb	r3, [r3, #16]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_RTC_SetDate+0x4a>
 800473a:	2302      	movs	r3, #2
 800473c:	e0eb      	b.n	8004916 <HAL_RTC_SetDate+0x222>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2202      	movs	r2, #2
 8004748:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d12f      	bne.n	80047b0 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	78db      	ldrb	r3, [r3, #3]
 8004754:	2b63      	cmp	r3, #99	; 0x63
 8004756:	d904      	bls.n	8004762 <HAL_RTC_SetDate+0x6e>
 8004758:	f240 31a5 	movw	r1, #933	; 0x3a5
 800475c:	4870      	ldr	r0, [pc, #448]	; (8004920 <HAL_RTC_SetDate+0x22c>)
 800475e:	f7fb ff28 	bl	80005b2 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	785b      	ldrb	r3, [r3, #1]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_RTC_SetDate+0x7e>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	785b      	ldrb	r3, [r3, #1]
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d904      	bls.n	800477c <HAL_RTC_SetDate+0x88>
 8004772:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004776:	486a      	ldr	r0, [pc, #424]	; (8004920 <HAL_RTC_SetDate+0x22c>)
 8004778:	f7fb ff1b 	bl	80005b2 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	789b      	ldrb	r3, [r3, #2]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_RTC_SetDate+0x98>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	789b      	ldrb	r3, [r3, #2]
 8004788:	2b1f      	cmp	r3, #31
 800478a:	d904      	bls.n	8004796 <HAL_RTC_SetDate+0xa2>
 800478c:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004790:	4863      	ldr	r0, [pc, #396]	; (8004920 <HAL_RTC_SetDate+0x22c>)
 8004792:	f7fb ff0e 	bl	80005b2 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	78da      	ldrb	r2, [r3, #3]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	785a      	ldrb	r2, [r3, #1]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	789a      	ldrb	r2, [r3, #2]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	739a      	strb	r2, [r3, #14]
 80047ae:	e051      	b.n	8004854 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	78db      	ldrb	r3, [r3, #3]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 f9cf 	bl	8004b58 <RTC_Bcd2ToByte>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b63      	cmp	r3, #99	; 0x63
 80047be:	d904      	bls.n	80047ca <HAL_RTC_SetDate+0xd6>
 80047c0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80047c4:	4856      	ldr	r0, [pc, #344]	; (8004920 <HAL_RTC_SetDate+0x22c>)
 80047c6:	f7fb fef4 	bl	80005b2 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f9c2 	bl	8004b58 <RTC_Bcd2ToByte>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_RTC_SetDate+0xf6>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	785b      	ldrb	r3, [r3, #1]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f9ba 	bl	8004b58 <RTC_Bcd2ToByte>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d904      	bls.n	80047f4 <HAL_RTC_SetDate+0x100>
 80047ea:	f240 31b1 	movw	r1, #945	; 0x3b1
 80047ee:	484c      	ldr	r0, [pc, #304]	; (8004920 <HAL_RTC_SetDate+0x22c>)
 80047f0:	f7fb fedf 	bl	80005b2 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	789b      	ldrb	r3, [r3, #2]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 f9ad 	bl	8004b58 <RTC_Bcd2ToByte>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <HAL_RTC_SetDate+0x120>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	789b      	ldrb	r3, [r3, #2]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f9a5 	bl	8004b58 <RTC_Bcd2ToByte>
 800480e:	4603      	mov	r3, r0
 8004810:	2b1f      	cmp	r3, #31
 8004812:	d904      	bls.n	800481e <HAL_RTC_SetDate+0x12a>
 8004814:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004818:	4841      	ldr	r0, [pc, #260]	; (8004920 <HAL_RTC_SetDate+0x22c>)
 800481a:	f7fb feca 	bl	80005b2 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	78db      	ldrb	r3, [r3, #3]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f998 	bl	8004b58 <RTC_Bcd2ToByte>
 8004828:	4603      	mov	r3, r0
 800482a:	461a      	mov	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f98f 	bl	8004b58 <RTC_Bcd2ToByte>
 800483a:	4603      	mov	r3, r0
 800483c:	461a      	mov	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	789b      	ldrb	r3, [r3, #2]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f986 	bl	8004b58 <RTC_Bcd2ToByte>
 800484c:	4603      	mov	r3, r0
 800484e:	461a      	mov	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	7bdb      	ldrb	r3, [r3, #15]
 8004858:	4618      	mov	r0, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	7b59      	ldrb	r1, [r3, #13]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	7b9b      	ldrb	r3, [r3, #14]
 8004862:	461a      	mov	r2, r3
 8004864:	f000 f996 	bl	8004b94 <RTC_WeekDayNum>
 8004868:	4603      	mov	r3, r0
 800486a:	461a      	mov	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	7b1a      	ldrb	r2, [r3, #12]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f886 	bl	800498a <RTC_ReadTimeCounter>
 800487e:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4a28      	ldr	r2, [pc, #160]	; (8004924 <HAL_RTC_SetDate+0x230>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	0adb      	lsrs	r3, r3, #11
 800488a:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b18      	cmp	r3, #24
 8004890:	d93a      	bls.n	8004908 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	4a24      	ldr	r2, [pc, #144]	; (8004928 <HAL_RTC_SetDate+0x234>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	4a23      	ldr	r2, [pc, #140]	; (800492c <HAL_RTC_SetDate+0x238>)
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80048a8:	69f9      	ldr	r1, [r7, #28]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f89d 	bl	80049ea <RTC_WriteTimeCounter>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d007      	beq.n	80048c6 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2204      	movs	r2, #4
 80048ba:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e027      	b.n	8004916 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f8b6 	bl	8004a38 <RTC_ReadAlarmCounter>
 80048cc:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d018      	beq.n	8004908 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d214      	bcs.n	8004908 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80048e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80048e8:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80048ea:	69b9      	ldr	r1, [r7, #24]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f8bc 	bl	8004a6a <RTC_WriteAlarmCounter>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2204      	movs	r2, #4
 80048fc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e006      	b.n	8004916 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	08004f04 	.word	0x08004f04
 8004924:	91a2b3c5 	.word	0x91a2b3c5
 8004928:	aaaaaaab 	.word	0xaaaaaaab
 800492c:	00015180 	.word	0x00015180

08004930 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e01d      	b.n	8004982 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0208 	bic.w	r2, r2, #8
 8004954:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004956:	f7fc f815 	bl	8000984 <HAL_GetTick>
 800495a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800495c:	e009      	b.n	8004972 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800495e:	f7fc f811 	bl	8000984 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800496c:	d901      	bls.n	8004972 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e007      	b.n	8004982 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0ee      	beq.n	800495e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800498a:	b480      	push	{r7}
 800498c:	b087      	sub	sp, #28
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	827b      	strh	r3, [r7, #18]
 8004996:	2300      	movs	r3, #0
 8004998:	823b      	strh	r3, [r7, #16]
 800499a:	2300      	movs	r3, #0
 800499c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80049ba:	8a7a      	ldrh	r2, [r7, #18]
 80049bc:	8a3b      	ldrh	r3, [r7, #16]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d008      	beq.n	80049d4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80049c2:	8a3b      	ldrh	r3, [r7, #16]
 80049c4:	041a      	lsls	r2, r3, #16
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	e004      	b.n	80049de <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80049d4:	8a7b      	ldrh	r3, [r7, #18]
 80049d6:	041a      	lsls	r2, r3, #16
 80049d8:	89fb      	ldrh	r3, [r7, #14]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80049de:	697b      	ldr	r3, [r7, #20]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr

080049ea <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f85d 	bl	8004ab8 <RTC_EnterInitMode>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	e011      	b.n	8004a2e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	0c12      	lsrs	r2, r2, #16
 8004a12:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	b292      	uxth	r2, r2
 8004a1c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f872 	bl	8004b08 <RTC_ExitInitMode>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	81fb      	strh	r3, [r7, #14]
 8004a44:	2300      	movs	r3, #0
 8004a46:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004a58:	89fb      	ldrh	r3, [r7, #14]
 8004a5a:	041a      	lsls	r2, r3, #16
 8004a5c:	89bb      	ldrh	r3, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f81d 	bl	8004ab8 <RTC_EnterInitMode>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
 8004a88:	e011      	b.n	8004aae <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	0c12      	lsrs	r2, r2, #16
 8004a92:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f832 	bl	8004b08 <RTC_ExitInitMode>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004ac4:	f7fb ff5e 	bl	8000984 <HAL_GetTick>
 8004ac8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004aca:	e009      	b.n	8004ae0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004acc:	f7fb ff5a 	bl	8000984 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ada:	d901      	bls.n	8004ae0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e00f      	b.n	8004b00 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0ee      	beq.n	8004acc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0210 	orr.w	r2, r2, #16
 8004afc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0210 	bic.w	r2, r2, #16
 8004b22:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004b24:	f7fb ff2e 	bl	8000984 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004b2a:	e009      	b.n	8004b40 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004b2c:	f7fb ff2a 	bl	8000984 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b3a:	d901      	bls.n	8004b40 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e007      	b.n	8004b50 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0ee      	beq.n	8004b2c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	b2db      	uxtb	r3, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr
	...

08004b94 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004bb2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d82d      	bhi.n	8004c16 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	4413      	add	r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	4a2c      	ldr	r2, [pc, #176]	; (8004c78 <RTC_WeekDayNum+0xe4>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	085a      	lsrs	r2, r3, #1
 8004bce:	78bb      	ldrb	r3, [r7, #2]
 8004bd0:	441a      	add	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	441a      	add	r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	089b      	lsrs	r3, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	4926      	ldr	r1, [pc, #152]	; (8004c7c <RTC_WeekDayNum+0xe8>)
 8004be4:	fba1 1303 	umull	r1, r3, r1, r3
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	4922      	ldr	r1, [pc, #136]	; (8004c7c <RTC_WeekDayNum+0xe8>)
 8004bf2:	fba1 1303 	umull	r1, r3, r1, r3
 8004bf6:	09db      	lsrs	r3, r3, #7
 8004bf8:	4413      	add	r3, r2
 8004bfa:	1d1a      	adds	r2, r3, #4
 8004bfc:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <RTC_WeekDayNum+0xec>)
 8004bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8004c02:	1ad1      	subs	r1, r2, r3
 8004c04:	0849      	lsrs	r1, r1, #1
 8004c06:	440b      	add	r3, r1
 8004c08:	0899      	lsrs	r1, r3, #2
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	1a5b      	subs	r3, r3, r1
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e029      	b.n	8004c6a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	4a15      	ldr	r2, [pc, #84]	; (8004c78 <RTC_WeekDayNum+0xe4>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	085a      	lsrs	r2, r3, #1
 8004c2a:	78bb      	ldrb	r3, [r7, #2]
 8004c2c:	441a      	add	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	441a      	add	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	441a      	add	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4910      	ldr	r1, [pc, #64]	; (8004c7c <RTC_WeekDayNum+0xe8>)
 8004c3c:	fba1 1303 	umull	r1, r3, r1, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	490d      	ldr	r1, [pc, #52]	; (8004c7c <RTC_WeekDayNum+0xe8>)
 8004c48:	fba1 1303 	umull	r1, r3, r1, r3
 8004c4c:	09db      	lsrs	r3, r3, #7
 8004c4e:	4413      	add	r3, r2
 8004c50:	1c9a      	adds	r2, r3, #2
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <RTC_WeekDayNum+0xec>)
 8004c54:	fba3 1302 	umull	r1, r3, r3, r2
 8004c58:	1ad1      	subs	r1, r2, r3
 8004c5a:	0849      	lsrs	r1, r1, #1
 8004c5c:	440b      	add	r3, r1
 8004c5e:	0899      	lsrs	r1, r3, #2
 8004c60:	460b      	mov	r3, r1
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	1a5b      	subs	r3, r3, r1
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	b2db      	uxtb	r3, r3
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr
 8004c78:	38e38e39 	.word	0x38e38e39
 8004c7c:	51eb851f 	.word	0x51eb851f
 8004c80:	24924925 	.word	0x24924925

08004c84 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d024      	beq.n	8004ce4 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01d      	beq.n	8004ce4 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f821 	bl	8004cfe <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0204 	mvn.w	r2, #4
 8004cc4:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	745a      	strb	r2, [r3, #17]
 8004ccc:	e005      	b.n	8004cda <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f80c 	bl	8004cec <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0201 	mvn.w	r2, #1
 8004ce2:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <__libc_init_array>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	2500      	movs	r5, #0
 8004d14:	4e0c      	ldr	r6, [pc, #48]	; (8004d48 <__libc_init_array+0x38>)
 8004d16:	4c0d      	ldr	r4, [pc, #52]	; (8004d4c <__libc_init_array+0x3c>)
 8004d18:	1ba4      	subs	r4, r4, r6
 8004d1a:	10a4      	asrs	r4, r4, #2
 8004d1c:	42a5      	cmp	r5, r4
 8004d1e:	d109      	bne.n	8004d34 <__libc_init_array+0x24>
 8004d20:	f000 f822 	bl	8004d68 <_init>
 8004d24:	2500      	movs	r5, #0
 8004d26:	4e0a      	ldr	r6, [pc, #40]	; (8004d50 <__libc_init_array+0x40>)
 8004d28:	4c0a      	ldr	r4, [pc, #40]	; (8004d54 <__libc_init_array+0x44>)
 8004d2a:	1ba4      	subs	r4, r4, r6
 8004d2c:	10a4      	asrs	r4, r4, #2
 8004d2e:	42a5      	cmp	r5, r4
 8004d30:	d105      	bne.n	8004d3e <__libc_init_array+0x2e>
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d38:	4798      	blx	r3
 8004d3a:	3501      	adds	r5, #1
 8004d3c:	e7ee      	b.n	8004d1c <__libc_init_array+0xc>
 8004d3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d42:	4798      	blx	r3
 8004d44:	3501      	adds	r5, #1
 8004d46:	e7f2      	b.n	8004d2e <__libc_init_array+0x1e>
 8004d48:	08004f54 	.word	0x08004f54
 8004d4c:	08004f54 	.word	0x08004f54
 8004d50:	08004f54 	.word	0x08004f54
 8004d54:	08004f58 	.word	0x08004f58

08004d58 <memset>:
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4402      	add	r2, r0
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <memset+0xa>
 8004d60:	4770      	bx	lr
 8004d62:	f803 1b01 	strb.w	r1, [r3], #1
 8004d66:	e7f9      	b.n	8004d5c <memset+0x4>

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr
