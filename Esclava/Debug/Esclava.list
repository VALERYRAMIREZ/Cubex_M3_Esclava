
Esclava.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c0  080051c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080051c0  080051c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051c0  080051c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  080051d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080051d4  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c102  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000216a  00000000  00000000  0002c137  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000058f6  00000000  00000000  0002e2a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b00  00000000  00000000  00033b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e8  00000000  00000000  00034698  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00014221  00000000  00000000  00035080  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000b85b  00000000  00000000  000492a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006c078  00000000  00000000  00054afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c0b74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a88  00000000  00000000  000c0bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800500c 	.word	0x0800500c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800500c 	.word	0x0800500c

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fbd9 	bl	8000940 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 f99c 	bl	80004d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f000 fd33 	bl	8000c14 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 f98c 	bl	80004d0 <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = FASE1_SENSOR_Pin|FASE2_SENSOR_Pin|FASE3_SENSOR_Pin|FASE4_SENSOR_Pin 
 8000218:	233f      	movs	r3, #63	; 0x3f
 800021a:	613b      	str	r3, [r7, #16]
                          |FASE5_SENSOR_Pin|FASE6_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f001 f8b0 	bl	800138c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b08a      	sub	sp, #40	; 0x28
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000254:	4b4b      	ldr	r3, [pc, #300]	; (8000384 <MX_GPIO_Init+0x144>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a4a      	ldr	r2, [pc, #296]	; (8000384 <MX_GPIO_Init+0x144>)
 800025a:	f043 0310 	orr.w	r3, r3, #16
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b48      	ldr	r3, [pc, #288]	; (8000384 <MX_GPIO_Init+0x144>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0310 	and.w	r3, r3, #16
 8000268:	613b      	str	r3, [r7, #16]
 800026a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026c:	4b45      	ldr	r3, [pc, #276]	; (8000384 <MX_GPIO_Init+0x144>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a44      	ldr	r2, [pc, #272]	; (8000384 <MX_GPIO_Init+0x144>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b42      	ldr	r3, [pc, #264]	; (8000384 <MX_GPIO_Init+0x144>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0320 	and.w	r3, r3, #32
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b3f      	ldr	r3, [pc, #252]	; (8000384 <MX_GPIO_Init+0x144>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a3e      	ldr	r2, [pc, #248]	; (8000384 <MX_GPIO_Init+0x144>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b3c      	ldr	r3, [pc, #240]	; (8000384 <MX_GPIO_Init+0x144>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	60bb      	str	r3, [r7, #8]
 800029a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029c:	4b39      	ldr	r3, [pc, #228]	; (8000384 <MX_GPIO_Init+0x144>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a38      	ldr	r2, [pc, #224]	; (8000384 <MX_GPIO_Init+0x144>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b36      	ldr	r3, [pc, #216]	; (8000384 <MX_GPIO_Init+0x144>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0308 	and.w	r3, r3, #8
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80002ba:	4833      	ldr	r0, [pc, #204]	; (8000388 <MX_GPIO_Init+0x148>)
 80002bc:	f001 fa8e 	bl	80017dc <HAL_GPIO_WritePin>
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 80002c0:	2200      	movs	r2, #0
 80002c2:	f24f 713f 	movw	r1, #63295	; 0xf73f
 80002c6:	4831      	ldr	r0, [pc, #196]	; (800038c <MX_GPIO_Init+0x14c>)
 80002c8:	f001 fa88 	bl	80017dc <HAL_GPIO_WritePin>
                          |FASE3_AMA_Pin|FASE6_VERDE_Pin|FASE6_AMA_Pin|FASE1_VERDE_Pin 
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002d2:	2303      	movs	r3, #3
 80002d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	4619      	mov	r1, r3
 80002dc:	482c      	ldr	r0, [pc, #176]	; (8000390 <MX_GPIO_Init+0x150>)
 80002de:	f001 f855 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80002e2:	2303      	movs	r3, #3
 80002e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e6:	2303      	movs	r3, #3
 80002e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	4619      	mov	r1, r3
 80002f0:	4828      	ldr	r0, [pc, #160]	; (8000394 <MX_GPIO_Init+0x154>)
 80002f2:	f001 f84b 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 80002f6:	f248 0340 	movw	r3, #32832	; 0x8040
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fc:	2303      	movs	r3, #3
 80002fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4619      	mov	r1, r3
 8000306:	4820      	ldr	r0, [pc, #128]	; (8000388 <MX_GPIO_Init+0x148>)
 8000308:	f001 f840 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 800030c:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 8000310:	617b      	str	r3, [r7, #20]
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000312:	2301      	movs	r3, #1
 8000314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031a:	2302      	movs	r3, #2
 800031c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	4619      	mov	r1, r3
 8000324:	4818      	ldr	r0, [pc, #96]	; (8000388 <MX_GPIO_Init+0x148>)
 8000326:	f001 f831 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|LED_FALLA_Pin|FASE3_VERDE_Pin|FASE5_ROJO_Pin 
 800032a:	f24f 733f 	movw	r3, #63295	; 0xf73f
 800032e:	617b      	str	r3, [r7, #20]
                          |FASE3_AMA_Pin|FASE6_VERDE_Pin|FASE6_AMA_Pin|FASE1_VERDE_Pin 
                          |FASE4_VERDE_Pin|FASE4_AMA_Pin|FASE4_ROJO_Pin|FASE5_VERDE_Pin 
                          |FASE5_AMA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	2301      	movs	r3, #1
 8000332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2302      	movs	r3, #2
 800033a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033c:	f107 0314 	add.w	r3, r7, #20
 8000340:	4619      	mov	r1, r3
 8000342:	4812      	ldr	r0, [pc, #72]	; (800038c <MX_GPIO_Init+0x14c>)
 8000344:	f001 f822 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800034c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800034e:	2303      	movs	r3, #3
 8000350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	4619      	mov	r1, r3
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <MX_GPIO_Init+0x14c>)
 800035a:	f001 f817 	bl	800138c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_GPIO_Init+0x158>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	627b      	str	r3, [r7, #36]	; 0x24
 8000364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000366:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800036a:	627b      	str	r3, [r7, #36]	; 0x24
 800036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800036e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000372:	627b      	str	r3, [r7, #36]	; 0x24
 8000374:	4a08      	ldr	r2, [pc, #32]	; (8000398 <MX_GPIO_Init+0x158>)
 8000376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000378:	6053      	str	r3, [r2, #4]

}
 800037a:	bf00      	nop
 800037c:	3728      	adds	r7, #40	; 0x28
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000
 8000388:	40010800 	.word	0x40010800
 800038c:	40010c00 	.word	0x40010c00
 8000390:	40011000 	.word	0x40011000
 8000394:	40011400 	.word	0x40011400
 8000398:	40010000 	.word	0x40010000

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a0:	f000 fa4a 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a4:	f000 f83e 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a8:	f7ff ff4a 	bl	8000240 <MX_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB,LED_FALLA_Pin,GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2102      	movs	r1, #2
 80003b0:	4817      	ldr	r0, [pc, #92]	; (8000410 <main+0x74>)
 80003b2:	f001 fa13 	bl	80017dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LED_STATUS_Pin,GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2101      	movs	r1, #1
 80003ba:	4815      	ldr	r0, [pc, #84]	; (8000410 <main+0x74>)
 80003bc:	f001 fa0e 	bl	80017dc <HAL_GPIO_WritePin>
  MX_ADC1_Init();
 80003c0:	f7ff fec4 	bl	800014c <MX_ADC1_Init>
  //MX_I2C1_Init();
  MX_RTC_Init();
 80003c4:	f000 f89a 	bl	80004fc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_I2C_MspInit(&hi2c1);
  //HAL_RTC_MspInit(&hrtc);

  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_SEC);
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <main+0x78>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <main+0x78>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f042 0201 	orr.w	r2, r2, #1
 80003d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <main+0x7c>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <main+0x7c>)
 80003de:	f023 0310 	bic.w	r3, r3, #16
 80003e2:	6053      	str	r3, [r2, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <main+0x7c>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <main+0x7c>)
 80003ea:	f023 0310 	bic.w	r3, r3, #16
 80003ee:	6053      	str	r3, [r2, #4]
	  HAL_RTC_GetTime(&hrtc,&horaLeida, RTC_FORMAT_BIN);
 80003f0:	2200      	movs	r2, #0
 80003f2:	490a      	ldr	r1, [pc, #40]	; (800041c <main+0x80>)
 80003f4:	4807      	ldr	r0, [pc, #28]	; (8000414 <main+0x78>)
 80003f6:	f003 ff53 	bl	80042a0 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&fechaLeida, RTC_FORMAT_BCD);
 80003fa:	2201      	movs	r2, #1
 80003fc:	4908      	ldr	r1, [pc, #32]	; (8000420 <main+0x84>)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <main+0x78>)
 8000400:	f004 f952 	bl	80046a8 <HAL_RTC_GetDate>
	  HAL_Delay(1000);
 8000404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000408:	f000 fa78 	bl	80008fc <HAL_Delay>
	  CLEAR_BIT(RTC->CRL,RTC_CRL_CNF);
 800040c:	e7ea      	b.n	80003e4 <main+0x48>
 800040e:	bf00      	nop
 8000410:	40010c00 	.word	0x40010c00
 8000414:	200000c8 	.word	0x200000c8
 8000418:	40002800 	.word	0x40002800
 800041c:	200000b0 	.word	0x200000b0
 8000420:	200000c4 	.word	0x200000c4

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b094      	sub	sp, #80	; 0x50
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042e:	2228      	movs	r2, #40	; 0x28
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f004 fde2 	bl	8004ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000454:	2306      	movs	r3, #6
 8000456:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000458:	2301      	movs	r3, #1
 800045a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	2301      	movs	r3, #1
 800045e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000460:	2310      	movs	r3, #16
 8000462:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000464:	2300      	movs	r3, #0
 8000466:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046c:	4618      	mov	r0, r3
 800046e:	f002 fded 	bl	800304c <HAL_RCC_OscConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000478:	f000 f82a 	bl	80004d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047c:	230f      	movs	r3, #15
 800047e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000480:	2300      	movs	r3, #0
 8000482:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f003 f948 	bl	800372c <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004a2:	f000 f815 	bl	80004d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80004a6:	2303      	movs	r3, #3
 80004a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80004aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 fb66 	bl	8003b88 <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80004c2:	f000 f805 	bl	80004d0 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3750      	adds	r7, #80	; 0x50
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB,LED_FALLA_Pin,GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2102      	movs	r1, #2
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <Error_Handler+0x14>)
 80004da:	f001 f97f 	bl	80017dc <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2100      	movs	r1, #0
 8000506:	460a      	mov	r2, r1
 8000508:	801a      	strh	r2, [r3, #0]
 800050a:	460a      	mov	r2, r1
 800050c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_RTC_Init+0x8c>)
 8000514:	4a1d      	ldr	r2, [pc, #116]	; (800058c <MX_RTC_Init+0x90>)
 8000516:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_RTC_Init+0x8c>)
 800051a:	f04f 32ff 	mov.w	r2, #4294967295
 800051e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_RTC_Init+0x8c>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000526:	4818      	ldr	r0, [pc, #96]	; (8000588 <MX_RTC_Init+0x8c>)
 8000528:	f003 fd0a 	bl	8003f40 <HAL_RTC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000532:	f7ff ffcd 	bl	80004d0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x2;
 8000536:	2302      	movs	r3, #2
 8000538:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 800053a:	2320      	movs	r3, #32
 800053c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800053e:	2300      	movs	r3, #0
 8000540:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	480f      	ldr	r0, [pc, #60]	; (8000588 <MX_RTC_Init+0x8c>)
 800054a:	f003 fdc3 	bl	80040d4 <HAL_RTC_SetTime>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000554:	f7ff ffbc 	bl	80004d0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000558:	2306      	movs	r3, #6
 800055a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_AUGUST;
 800055c:	2308      	movs	r3, #8
 800055e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000560:	2301      	movs	r3, #1
 8000562:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x20;
 8000564:	2320      	movs	r3, #32
 8000566:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <MX_RTC_Init+0x8c>)
 8000570:	f003 ff7c 	bl	800446c <HAL_RTC_SetDate>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800057a:	f7ff ffa9 	bl	80004d0 <Error_Handler>
  }

}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200000c8 	.word	0x200000c8
 800058c:	40002800 	.word	0x40002800

08000590 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <HAL_RTC_MspInit+0x5c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d120      	bne.n	80005e4 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80005a2:	f002 fd47 	bl	8003034 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_RTC_MspInit+0x60>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <HAL_RTC_MspInit+0x60>)
 80005ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_RTC_MspInit+0x60>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <HAL_RTC_MspInit+0x64>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 fe0d 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80005ce:	2003      	movs	r0, #3
 80005d0:	f000 fe36 	bl	8001240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	2029      	movs	r0, #41	; 0x29
 80005da:	f000 fe05 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80005de:	2029      	movs	r0, #41	; 0x29
 80005e0:	f000 fe2e 	bl	8001240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40002800 	.word	0x40002800
 80005f0:	40021000 	.word	0x40021000
 80005f4:	4242043c 	.word	0x4242043c

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <HAL_MspInit+0x70>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <HAL_MspInit+0x70>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <HAL_MspInit+0x70>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_MspInit+0x70>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <HAL_MspInit+0x70>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <HAL_MspInit+0x70>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800062e:	2007      	movs	r0, #7
 8000630:	f000 fdba 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	2005      	movs	r0, #5
 800063a:	f000 fdd5 	bl	80011e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800063e:	2005      	movs	r0, #5
 8000640:	f000 fdfe 	bl	8001240 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_MspInit+0x74>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <HAL_MspInit+0x74>)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	40010000 	.word	0x40010000

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
//		volatile unsigned long _ISPR0 = __get_IPSR();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, LED_STATUS_Pin);/* El led de estado se queda */
 8000680:	2101      	movs	r1, #1
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <HardFault_Handler+0x14>)
 8000684:	f001 f8dc 	bl	8001840 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);				/* titilando si hay una hard fault.      */
 8000688:	20c8      	movs	r0, #200	; 0xc8
 800068a:	f000 f937 	bl	80008fc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LED_STATUS_Pin);/* El led de estado se queda */
 800068e:	e7f7      	b.n	8000680 <HardFault_Handler+0x4>
 8000690:	40010c00 	.word	0x40010c00

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ce:	f000 f8f9 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <RTC_IRQHandler+0x10>)
 80006de:	f004 fc23 	bl	8004f28 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000c8 	.word	0x200000c8

080006ec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <I2C1_EV_IRQHandler+0x10>)
 80006fe:	f001 f8c5 	bl	800188c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000058 	.word	0x20000058

0800070c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <I2C1_ER_IRQHandler+0x10>)
 8000712:	f001 fa21 	bl	8001b58 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000058 	.word	0x20000058

08000720 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000724:	4813      	ldr	r0, [pc, #76]	; (8000774 <RTC_Alarm_IRQHandler+0x54>)
 8000726:	f004 f92d 	bl	8004984 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
    HAL_RTC_AlarmIRQHandler(&hrtc);
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <RTC_Alarm_IRQHandler+0x54>)
 800072c:	f004 f92a 	bl	8004984 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_WaitForSynchro(&hrtc);
 8000730:	4810      	ldr	r0, [pc, #64]	; (8000774 <RTC_Alarm_IRQHandler+0x54>)
 8000732:	f004 f958 	bl	80049e6 <HAL_RTC_WaitForSynchro>
	  HAL_RTC_GetTime(&hrtc,&horaLeida, RTC_FORMAT_BCD);
 8000736:	2201      	movs	r2, #1
 8000738:	490f      	ldr	r1, [pc, #60]	; (8000778 <RTC_Alarm_IRQHandler+0x58>)
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <RTC_Alarm_IRQHandler+0x54>)
 800073c:	f003 fdb0 	bl	80042a0 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&fechaLeida, RTC_FORMAT_BCD);
 8000740:	2201      	movs	r2, #1
 8000742:	490e      	ldr	r1, [pc, #56]	; (800077c <RTC_Alarm_IRQHandler+0x5c>)
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <RTC_Alarm_IRQHandler+0x54>)
 8000746:	f003 ffaf 	bl	80046a8 <HAL_RTC_GetDate>
    intAlarma.AlarmTime.Hours = horaLeida.Hours;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <RTC_Alarm_IRQHandler+0x58>)
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <RTC_Alarm_IRQHandler+0x60>)
 8000750:	701a      	strb	r2, [r3, #0]
    intAlarma.AlarmTime.Minutes = horaLeida.Minutes;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <RTC_Alarm_IRQHandler+0x58>)
 8000754:	785a      	ldrb	r2, [r3, #1]
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <RTC_Alarm_IRQHandler+0x60>)
 8000758:	705a      	strb	r2, [r3, #1]
    intAlarma.AlarmTime.Seconds = horaLeida.Seconds + 2;
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <RTC_Alarm_IRQHandler+0x58>)
 800075c:	789b      	ldrb	r3, [r3, #2]
 800075e:	3302      	adds	r3, #2
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <RTC_Alarm_IRQHandler+0x60>)
 8000764:	709a      	strb	r2, [r3, #2]
    HAL_RTC_SetAlarm_IT(&hrtc, &intAlarma, RTC_FORMAT_BCD);
 8000766:	2201      	movs	r2, #1
 8000768:	4905      	ldr	r1, [pc, #20]	; (8000780 <RTC_Alarm_IRQHandler+0x60>)
 800076a:	4802      	ldr	r0, [pc, #8]	; (8000774 <RTC_Alarm_IRQHandler+0x54>)
 800076c:	f003 fffe 	bl	800476c <HAL_RTC_SetAlarm_IT>
    //HAL_RTC_GetAlarm(&hrtc,&alarmaLeida,RTC_ALARM_A, RTC_FORMAT_BCD);
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000c8 	.word	0x200000c8
 8000778:	200000b0 	.word	0x200000b0
 800077c:	200000c4 	.word	0x200000c4
 8000780:	200000b4 	.word	0x200000b4

08000784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <SystemInit+0x5c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <SystemInit+0x5c>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <SystemInit+0x5c>)
 8000796:	685a      	ldr	r2, [r3, #4]
 8000798:	4911      	ldr	r1, [pc, #68]	; (80007e0 <SystemInit+0x5c>)
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <SystemInit+0x60>)
 800079c:	4013      	ands	r3, r2
 800079e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <SystemInit+0x5c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <SystemInit+0x5c>)
 80007a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <SystemInit+0x5c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <SystemInit+0x5c>)
 80007b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <SystemInit+0x5c>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <SystemInit+0x5c>)
 80007c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <SystemInit+0x5c>)
 80007ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SystemInit+0x64>)
 80007d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40021000 	.word	0x40021000
 80007e4:	f8ff0000 	.word	0xf8ff0000
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ee:	e003      	b.n	80007f8 <LoopCopyDataInit>

080007f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007f6:	3104      	adds	r1, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007f8:	480a      	ldr	r0, [pc, #40]	; (8000824 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000800:	d3f6      	bcc.n	80007f0 <CopyDataInit>
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000804:	e002      	b.n	800080c <LoopFillZerobss>

08000806 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000808:	f842 3b04 	str.w	r3, [r2], #4

0800080c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800080e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000810:	d3f9      	bcc.n	8000806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff ffb7 	bl	8000784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f004 fbcd 	bl	8004fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fdbf 	bl	800039c <main>
  bx lr
 800081e:	4770      	bx	lr
  ldr r3, =_sidata
 8000820:	080051c8 	.word	0x080051c8
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000828:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800082c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000830:	200000e0 	.word	0x200000e0

08000834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_2_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_Init+0x28>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_Init+0x28>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 fcad 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f808 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff fed0 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_InitTick+0x54>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x58>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fcf4 	bl	8001270 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e00e      	b.n	80008b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d80a      	bhi.n	80008ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f000 fca2 	bl	80011e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <HAL_InitTick+0x5c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x20>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <HAL_IncTick+0x20>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	20000008 	.word	0x20000008
 80008e4:	200000dc 	.word	0x200000dc

080008e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_GetTick+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	200000dc 	.word	0x200000dc

080008fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000904:	f7ff fff0 	bl	80008e8 <HAL_GetTick>
 8000908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000914:	d005      	beq.n	8000922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_Delay+0x40>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000922:	bf00      	nop
 8000924:	f7ff ffe0 	bl	80008e8 <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d8f7      	bhi.n	8000924 <HAL_Delay+0x28>
  {
  }
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000008 	.word	0x20000008

08000940 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000948:	2300      	movs	r3, #0
 800094a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e153      	b.n	8000c0a <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a9f      	ldr	r2, [pc, #636]	; (8000be4 <HAL_ADC_Init+0x2a4>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d009      	beq.n	8000980 <HAL_ADC_Init+0x40>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a9d      	ldr	r2, [pc, #628]	; (8000be8 <HAL_ADC_Init+0x2a8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d004      	beq.n	8000980 <HAL_ADC_Init+0x40>
 8000976:	f240 11b3 	movw	r1, #435	; 0x1b3
 800097a:	489c      	ldr	r0, [pc, #624]	; (8000bec <HAL_ADC_Init+0x2ac>)
 800097c:	f7ff fdb4 	bl	80004e8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d009      	beq.n	800099c <HAL_ADC_Init+0x5c>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000990:	d004      	beq.n	800099c <HAL_ADC_Init+0x5c>
 8000992:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8000996:	4895      	ldr	r0, [pc, #596]	; (8000bec <HAL_ADC_Init+0x2ac>)
 8000998:	f7ff fda6 	bl	80004e8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d009      	beq.n	80009b8 <HAL_ADC_Init+0x78>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009ac:	d004      	beq.n	80009b8 <HAL_ADC_Init+0x78>
 80009ae:	f240 11b5 	movw	r1, #437	; 0x1b5
 80009b2:	488e      	ldr	r0, [pc, #568]	; (8000bec <HAL_ADC_Init+0x2ac>)
 80009b4:	f7ff fd98 	bl	80004e8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7b1b      	ldrb	r3, [r3, #12]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d008      	beq.n	80009d2 <HAL_ADC_Init+0x92>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7b1b      	ldrb	r3, [r3, #12]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d004      	beq.n	80009d2 <HAL_ADC_Init+0x92>
 80009c8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80009cc:	4887      	ldr	r0, [pc, #540]	; (8000bec <HAL_ADC_Init+0x2ac>)
 80009ce:	f7ff fd8b 	bl	80004e8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d022      	beq.n	8000a20 <HAL_ADC_Init+0xe0>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80009e2:	d01d      	beq.n	8000a20 <HAL_ADC_Init+0xe0>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80009ec:	d018      	beq.n	8000a20 <HAL_ADC_Init+0xe0>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80009f6:	d013      	beq.n	8000a20 <HAL_ADC_Init+0xe0>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8000a00:	d00e      	beq.n	8000a20 <HAL_ADC_Init+0xe0>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000a0a:	d009      	beq.n	8000a20 <HAL_ADC_Init+0xe0>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a14:	d004      	beq.n	8000a20 <HAL_ADC_Init+0xe0>
 8000a16:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000a1a:	4874      	ldr	r0, [pc, #464]	; (8000bec <HAL_ADC_Init+0x2ac>)
 8000a1c:	f7ff fd64 	bl	80004e8 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d02a      	beq.n	8000a7e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <HAL_ADC_Init+0xf8>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	2b10      	cmp	r3, #16
 8000a36:	d904      	bls.n	8000a42 <HAL_ADC_Init+0x102>
 8000a38:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000a3c:	486b      	ldr	r0, [pc, #428]	; (8000bec <HAL_ADC_Init+0x2ac>)
 8000a3e:	f7ff fd53 	bl	80004e8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7d1b      	ldrb	r3, [r3, #20]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d008      	beq.n	8000a5c <HAL_ADC_Init+0x11c>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7d1b      	ldrb	r3, [r3, #20]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d004      	beq.n	8000a5c <HAL_ADC_Init+0x11c>
 8000a52:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8000a56:	4865      	ldr	r0, [pc, #404]	; (8000bec <HAL_ADC_Init+0x2ac>)
 8000a58:	f7ff fd46 	bl	80004e8 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	7d1b      	ldrb	r3, [r3, #20]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00c      	beq.n	8000a7e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_ADC_Init+0x134>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	d904      	bls.n	8000a7e <HAL_ADC_Init+0x13e>
 8000a74:	f240 11bf 	movw	r1, #447	; 0x1bf
 8000a78:	485c      	ldr	r0, [pc, #368]	; (8000bec <HAL_ADC_Init+0x2ac>)
 8000a7a:	f7ff fd35 	bl	80004e8 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d109      	bne.n	8000a9a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fb97 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fa7e 	bl	8000f9c <ADC_ConversionStop_Disable>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f040 80a3 	bne.w	8000bf8 <HAL_ADC_Init+0x2b8>
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f040 809f 	bne.w	8000bf8 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ac2:	f023 0302 	bic.w	r3, r3, #2
 8000ac6:	f043 0202 	orr.w	r2, r3, #2
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ad6:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7b1b      	ldrb	r3, [r3, #12]
 8000adc:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ade:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae0:	68ba      	ldr	r2, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aee:	d003      	beq.n	8000af8 <HAL_ADC_Init+0x1b8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d102      	bne.n	8000afe <HAL_ADC_Init+0x1be>
 8000af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afc:	e000      	b.n	8000b00 <HAL_ADC_Init+0x1c0>
 8000afe:	2300      	movs	r3, #0
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7d1b      	ldrb	r3, [r3, #20]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d119      	bne.n	8000b42 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7b1b      	ldrb	r3, [r3, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d109      	bne.n	8000b2a <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	035a      	lsls	r2, r3, #13
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	e00b      	b.n	8000b42 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2e:	f043 0220 	orr.w	r2, r3, #32
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	f043 0201 	orr.w	r2, r3, #1
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <HAL_ADC_Init+0x2b0>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	430b      	orrs	r3, r1
 8000b68:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b72:	d003      	beq.n	8000b7c <HAL_ADC_Init+0x23c>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d104      	bne.n	8000b86 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	051b      	lsls	r3, r3, #20
 8000b84:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	430a      	orrs	r2, r1
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_ADC_Init+0x2b4>)
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb4:	f023 0303 	bic.w	r3, r3, #3
 8000bb8:	f043 0201 	orr.w	r2, r3, #1
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bc0:	e022      	b.n	8000c08 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f023 0312 	bic.w	r3, r3, #18
 8000bca:	f043 0210 	orr.w	r2, r3, #16
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	f043 0201 	orr.w	r2, r3, #1
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be2:	e011      	b.n	8000c08 <HAL_ADC_Init+0x2c8>
 8000be4:	40012400 	.word	0x40012400
 8000be8:	40012800 	.word	0x40012800
 8000bec:	08005024 	.word	0x08005024
 8000bf0:	ffe1f7fd 	.word	0xffe1f7fd
 8000bf4:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfc:	f043 0210 	orr.w	r2, r3, #16
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop

08000c14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a88      	ldr	r2, [pc, #544]	; (8000e4c <HAL_ADC_ConfigChannel+0x238>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d009      	beq.n	8000c44 <HAL_ADC_ConfigChannel+0x30>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a86      	ldr	r2, [pc, #536]	; (8000e50 <HAL_ADC_ConfigChannel+0x23c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d004      	beq.n	8000c44 <HAL_ADC_ConfigChannel+0x30>
 8000c3a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8000c3e:	4885      	ldr	r0, [pc, #532]	; (8000e54 <HAL_ADC_ConfigChannel+0x240>)
 8000c40:	f7ff fc52 	bl	80004e8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d048      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d044      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d040      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d03c      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d038      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d034      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b06      	cmp	r3, #6
 8000c7a:	d030      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b07      	cmp	r3, #7
 8000c82:	d02c      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d028      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b09      	cmp	r3, #9
 8000c92:	d024      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b0a      	cmp	r3, #10
 8000c9a:	d020      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b0b      	cmp	r3, #11
 8000ca2:	d01c      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b0c      	cmp	r3, #12
 8000caa:	d018      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b0d      	cmp	r3, #13
 8000cb2:	d014      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b0e      	cmp	r3, #14
 8000cba:	d010      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d00c      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b10      	cmp	r3, #16
 8000cca:	d008      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b11      	cmp	r3, #17
 8000cd2:	d004      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xca>
 8000cd4:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8000cd8:	485e      	ldr	r0, [pc, #376]	; (8000e54 <HAL_ADC_ConfigChannel+0x240>)
 8000cda:	f7ff fc05 	bl	80004e8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d040      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d03c      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d038      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d034      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b05      	cmp	r3, #5
 8000d04:	d030      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d02c      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	d028      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b08      	cmp	r3, #8
 8000d1c:	d024      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b09      	cmp	r3, #9
 8000d24:	d020      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b0a      	cmp	r3, #10
 8000d2c:	d01c      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b0b      	cmp	r3, #11
 8000d34:	d018      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b0c      	cmp	r3, #12
 8000d3c:	d014      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b0d      	cmp	r3, #13
 8000d44:	d010      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b0e      	cmp	r3, #14
 8000d4c:	d00c      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	d008      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b10      	cmp	r3, #16
 8000d5c:	d004      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x154>
 8000d5e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000d62:	483c      	ldr	r0, [pc, #240]	; (8000e54 <HAL_ADC_ConfigChannel+0x240>)
 8000d64:	f7ff fbc0 	bl	80004e8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d020      	beq.n	8000db2 <HAL_ADC_ConfigChannel+0x19e>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d01c      	beq.n	8000db2 <HAL_ADC_ConfigChannel+0x19e>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d018      	beq.n	8000db2 <HAL_ADC_ConfigChannel+0x19e>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d014      	beq.n	8000db2 <HAL_ADC_ConfigChannel+0x19e>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d010      	beq.n	8000db2 <HAL_ADC_ConfigChannel+0x19e>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d00c      	beq.n	8000db2 <HAL_ADC_ConfigChannel+0x19e>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d008      	beq.n	8000db2 <HAL_ADC_ConfigChannel+0x19e>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b07      	cmp	r3, #7
 8000da6:	d004      	beq.n	8000db2 <HAL_ADC_ConfigChannel+0x19e>
 8000da8:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8000dac:	4829      	ldr	r0, [pc, #164]	; (8000e54 <HAL_ADC_ConfigChannel+0x240>)
 8000dae:	f7ff fb9b 	bl	80004e8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d101      	bne.n	8000dc0 <HAL_ADC_ConfigChannel+0x1ac>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e0e2      	b.n	8000f86 <HAL_ADC_ConfigChannel+0x372>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b06      	cmp	r3, #6
 8000dce:	d81c      	bhi.n	8000e0a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	3b05      	subs	r3, #5
 8000de2:	221f      	movs	r2, #31
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4019      	ands	r1, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b05      	subs	r3, #5
 8000dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
 8000e08:	e042      	b.n	8000e90 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b0c      	cmp	r3, #12
 8000e10:	d822      	bhi.n	8000e58 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	3b23      	subs	r3, #35	; 0x23
 8000e24:	221f      	movs	r2, #31
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4019      	ands	r1, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3b23      	subs	r3, #35	; 0x23
 8000e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
 8000e4a:	e021      	b.n	8000e90 <HAL_ADC_ConfigChannel+0x27c>
 8000e4c:	40012400 	.word	0x40012400
 8000e50:	40012800 	.word	0x40012800
 8000e54:	08005024 	.word	0x08005024
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	3b41      	subs	r3, #65	; 0x41
 8000e6a:	221f      	movs	r2, #31
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4019      	ands	r1, r3
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	3b41      	subs	r3, #65	; 0x41
 8000e84:	fa00 f203 	lsl.w	r2, r0, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b09      	cmp	r3, #9
 8000e96:	d91c      	bls.n	8000ed2 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68d9      	ldr	r1, [r3, #12]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3b1e      	subs	r3, #30
 8000eaa:	2207      	movs	r2, #7
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	4019      	ands	r1, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	6898      	ldr	r0, [r3, #8]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3b1e      	subs	r3, #30
 8000ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	e019      	b.n	8000f06 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6919      	ldr	r1, [r3, #16]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4019      	ands	r1, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6898      	ldr	r0, [r3, #8]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	fa00 f203 	lsl.w	r2, r0, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b10      	cmp	r3, #16
 8000f0c:	d003      	beq.n	8000f16 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f12:	2b11      	cmp	r3, #17
 8000f14:	d132      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <HAL_ADC_ConfigChannel+0x37c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d125      	bne.n	8000f6c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d126      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f3c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b10      	cmp	r3, #16
 8000f44:	d11a      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <HAL_ADC_ConfigChannel+0x380>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <HAL_ADC_ConfigChannel+0x384>)
 8000f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f50:	0c9a      	lsrs	r2, r3, #18
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f5c:	e002      	b.n	8000f64 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f9      	bne.n	8000f5e <HAL_ADC_ConfigChannel+0x34a>
 8000f6a:	e007      	b.n	8000f7c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	f043 0220 	orr.w	r2, r3, #32
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40012400 	.word	0x40012400
 8000f94:	20000000 	.word	0x20000000
 8000f98:	431bde83 	.word	0x431bde83

08000f9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d127      	bne.n	8001006 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0201 	bic.w	r2, r2, #1
 8000fc4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fc6:	f7ff fc8f 	bl	80008e8 <HAL_GetTick>
 8000fca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fcc:	e014      	b.n	8000ff8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fce:	f7ff fc8b 	bl	80008e8 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d90d      	bls.n	8000ff8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe0:	f043 0210 	orr.w	r2, r3, #16
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	f043 0201 	orr.w	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e007      	b.n	8001008 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b01      	cmp	r3, #1
 8001004:	d0e3      	beq.n	8000fce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4906      	ldr	r1, [pc, #24]	; (80010a8 <__NVIC_EnableIRQ+0x34>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff90 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	d00f      	beq.n	80011d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b06      	cmp	r3, #6
 80011ba:	d00c      	beq.n	80011d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b05      	cmp	r3, #5
 80011c0:	d009      	beq.n	80011d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d006      	beq.n	80011d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d003      	beq.n	80011d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011ce:	2192      	movs	r1, #146	; 0x92
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80011d2:	f7ff f989 	bl	80004e8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff1a 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800505c 	.word	0x0800505c

080011e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d903      	bls.n	8001208 <HAL_NVIC_SetPriority+0x20>
 8001200:	21aa      	movs	r1, #170	; 0xaa
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <HAL_NVIC_SetPriority+0x54>)
 8001204:	f7ff f970 	bl	80004e8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	d903      	bls.n	8001216 <HAL_NVIC_SetPriority+0x2e>
 800120e:	21ab      	movs	r1, #171	; 0xab
 8001210:	480a      	ldr	r0, [pc, #40]	; (800123c <HAL_NVIC_SetPriority+0x54>)
 8001212:	f7ff f969 	bl	80004e8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001216:	f7ff ff1f 	bl	8001058 <__NVIC_GetPriorityGrouping>
 800121a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	6978      	ldr	r0, [r7, #20]
 8001222:	f7ff ff6d 	bl	8001100 <NVIC_EncodePriority>
 8001226:	4602      	mov	r2, r0
 8001228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff3c 	bl	80010ac <__NVIC_SetPriority>
}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	0800505c 	.word	0x0800505c

08001240 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	da03      	bge.n	800125a <HAL_NVIC_EnableIRQ+0x1a>
 8001252:	21be      	movs	r1, #190	; 0xbe
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_NVIC_EnableIRQ+0x2c>)
 8001256:	f7ff f947 	bl	80004e8 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff08 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	0800505c 	.word	0x0800505c

08001270 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff73 	bl	8001164 <SysTick_Config>
 800127e:	4603      	mov	r3, r0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800129a:	2b02      	cmp	r3, #2
 800129c:	d005      	beq.n	80012aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2204      	movs	r2, #4
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e051      	b.n	800134e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 020e 	bic.w	r2, r2, #14
 80012b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a22      	ldr	r2, [pc, #136]	; (8001358 <HAL_DMA_Abort_IT+0xd0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d029      	beq.n	8001328 <HAL_DMA_Abort_IT+0xa0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a20      	ldr	r2, [pc, #128]	; (800135c <HAL_DMA_Abort_IT+0xd4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d022      	beq.n	8001324 <HAL_DMA_Abort_IT+0x9c>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <HAL_DMA_Abort_IT+0xd8>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d01a      	beq.n	800131e <HAL_DMA_Abort_IT+0x96>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_DMA_Abort_IT+0xdc>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d012      	beq.n	8001318 <HAL_DMA_Abort_IT+0x90>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <HAL_DMA_Abort_IT+0xe0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d00a      	beq.n	8001312 <HAL_DMA_Abort_IT+0x8a>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1a      	ldr	r2, [pc, #104]	; (800136c <HAL_DMA_Abort_IT+0xe4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d102      	bne.n	800130c <HAL_DMA_Abort_IT+0x84>
 8001306:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800130a:	e00e      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 800130c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001310:	e00b      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 8001312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001316:	e008      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	e005      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 800131e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001322:	e002      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 8001324:	2310      	movs	r3, #16
 8001326:	e000      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 8001328:	2301      	movs	r3, #1
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_DMA_Abort_IT+0xe8>)
 800132c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	4798      	blx	r3
    } 
  }
  return status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40020008 	.word	0x40020008
 800135c:	4002001c 	.word	0x4002001c
 8001360:	40020030 	.word	0x40020030
 8001364:	40020044 	.word	0x40020044
 8001368:	40020058 	.word	0x40020058
 800136c:	4002006c 	.word	0x4002006c
 8001370:	40020000 	.word	0x40020000

08001374 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a9c      	ldr	r2, [pc, #624]	; (8001614 <HAL_GPIO_Init+0x288>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00f      	beq.n	80013c6 <HAL_GPIO_Init+0x3a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a9b      	ldr	r2, [pc, #620]	; (8001618 <HAL_GPIO_Init+0x28c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d00b      	beq.n	80013c6 <HAL_GPIO_Init+0x3a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a9a      	ldr	r2, [pc, #616]	; (800161c <HAL_GPIO_Init+0x290>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d007      	beq.n	80013c6 <HAL_GPIO_Init+0x3a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a99      	ldr	r2, [pc, #612]	; (8001620 <HAL_GPIO_Init+0x294>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x3a>
 80013be:	21bd      	movs	r1, #189	; 0xbd
 80013c0:	4898      	ldr	r0, [pc, #608]	; (8001624 <HAL_GPIO_Init+0x298>)
 80013c2:	f7ff f891 	bl	80004e8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x50>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0c1b      	lsrs	r3, r3, #16
 80013d6:	041b      	lsls	r3, r3, #16
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x58>
 80013dc:	21be      	movs	r1, #190	; 0xbe
 80013de:	4891      	ldr	r0, [pc, #580]	; (8001624 <HAL_GPIO_Init+0x298>)
 80013e0:	f7ff f882 	bl	80004e8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 81df 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	f000 81da 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	f000 81d5 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b02      	cmp	r3, #2
 8001408:	f000 81d0 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b12      	cmp	r3, #18
 8001412:	f000 81cb 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a83      	ldr	r2, [pc, #524]	; (8001628 <HAL_GPIO_Init+0x29c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	f000 81c5 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	4a81      	ldr	r2, [pc, #516]	; (800162c <HAL_GPIO_Init+0x2a0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	f000 81bf 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a7f      	ldr	r2, [pc, #508]	; (8001630 <HAL_GPIO_Init+0x2a4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	f000 81b9 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a7d      	ldr	r2, [pc, #500]	; (8001634 <HAL_GPIO_Init+0x2a8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	f000 81b3 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a7b      	ldr	r2, [pc, #492]	; (8001638 <HAL_GPIO_Init+0x2ac>)
 800144c:	4293      	cmp	r3, r2
 800144e:	f000 81ad 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a79      	ldr	r2, [pc, #484]	; (800163c <HAL_GPIO_Init+0x2b0>)
 8001458:	4293      	cmp	r3, r2
 800145a:	f000 81a7 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b03      	cmp	r3, #3
 8001464:	f000 81a2 	beq.w	80017ac <HAL_GPIO_Init+0x420>
 8001468:	21bf      	movs	r1, #191	; 0xbf
 800146a:	486e      	ldr	r0, [pc, #440]	; (8001624 <HAL_GPIO_Init+0x298>)
 800146c:	f7ff f83c 	bl	80004e8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001470:	e19c      	b.n	80017ac <HAL_GPIO_Init+0x420>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001472:	2201      	movs	r2, #1
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	429a      	cmp	r2, r3
 800148c:	f040 818b 	bne.w	80017a6 <HAL_GPIO_Init+0x41a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a60      	ldr	r2, [pc, #384]	; (8001614 <HAL_GPIO_Init+0x288>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00f      	beq.n	80014b8 <HAL_GPIO_Init+0x12c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a5f      	ldr	r2, [pc, #380]	; (8001618 <HAL_GPIO_Init+0x28c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d00b      	beq.n	80014b8 <HAL_GPIO_Init+0x12c>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a5e      	ldr	r2, [pc, #376]	; (800161c <HAL_GPIO_Init+0x290>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x12c>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a5d      	ldr	r2, [pc, #372]	; (8001620 <HAL_GPIO_Init+0x294>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x12c>
 80014b0:	21cd      	movs	r1, #205	; 0xcd
 80014b2:	485c      	ldr	r0, [pc, #368]	; (8001624 <HAL_GPIO_Init+0x298>)
 80014b4:	f7ff f818 	bl	80004e8 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b12      	cmp	r3, #18
 80014be:	d065      	beq.n	800158c <HAL_GPIO_Init+0x200>
 80014c0:	2b12      	cmp	r3, #18
 80014c2:	d80e      	bhi.n	80014e2 <HAL_GPIO_Init+0x156>
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d04c      	beq.n	8001562 <HAL_GPIO_Init+0x1d6>
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d804      	bhi.n	80014d6 <HAL_GPIO_Init+0x14a>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d072      	beq.n	80015b6 <HAL_GPIO_Init+0x22a>
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d01d      	beq.n	8001510 <HAL_GPIO_Init+0x184>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014d4:	e099      	b.n	800160a <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	f000 8094 	beq.w	8001604 <HAL_GPIO_Init+0x278>
 80014dc:	2b11      	cmp	r3, #17
 80014de:	d02b      	beq.n	8001538 <HAL_GPIO_Init+0x1ac>
          break;
 80014e0:	e093      	b.n	800160a <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 80014e2:	4a52      	ldr	r2, [pc, #328]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d066      	beq.n	80015b6 <HAL_GPIO_Init+0x22a>
 80014e8:	4a50      	ldr	r2, [pc, #320]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d806      	bhi.n	80014fc <HAL_GPIO_Init+0x170>
 80014ee:	4a4e      	ldr	r2, [pc, #312]	; (8001628 <HAL_GPIO_Init+0x29c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d060      	beq.n	80015b6 <HAL_GPIO_Init+0x22a>
 80014f4:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <HAL_GPIO_Init+0x2a8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d05d      	beq.n	80015b6 <HAL_GPIO_Init+0x22a>
          break;
 80014fa:	e086      	b.n	800160a <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 80014fc:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <HAL_GPIO_Init+0x2a4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d059      	beq.n	80015b6 <HAL_GPIO_Init+0x22a>
 8001502:	4a4e      	ldr	r2, [pc, #312]	; (800163c <HAL_GPIO_Init+0x2b0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d056      	beq.n	80015b6 <HAL_GPIO_Init+0x22a>
 8001508:	4a4b      	ldr	r2, [pc, #300]	; (8001638 <HAL_GPIO_Init+0x2ac>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d053      	beq.n	80015b6 <HAL_GPIO_Init+0x22a>
          break;
 800150e:	e07c      	b.n	800160a <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d00b      	beq.n	8001530 <HAL_GPIO_Init+0x1a4>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_Init+0x1a4>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x1a4>
 8001528:	21d5      	movs	r1, #213	; 0xd5
 800152a:	483e      	ldr	r0, [pc, #248]	; (8001624 <HAL_GPIO_Init+0x298>)
 800152c:	f7fe ffdc 	bl	80004e8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	623b      	str	r3, [r7, #32]
          break;
 8001536:	e068      	b.n	800160a <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d00b      	beq.n	8001558 <HAL_GPIO_Init+0x1cc>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d007      	beq.n	8001558 <HAL_GPIO_Init+0x1cc>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x1cc>
 8001550:	21dc      	movs	r1, #220	; 0xdc
 8001552:	4834      	ldr	r0, [pc, #208]	; (8001624 <HAL_GPIO_Init+0x298>)
 8001554:	f7fe ffc8 	bl	80004e8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	3304      	adds	r3, #4
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e053      	b.n	800160a <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d00b      	beq.n	8001582 <HAL_GPIO_Init+0x1f6>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x1f6>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x1f6>
 800157a:	21e3      	movs	r1, #227	; 0xe3
 800157c:	4829      	ldr	r0, [pc, #164]	; (8001624 <HAL_GPIO_Init+0x298>)
 800157e:	f7fe ffb3 	bl	80004e8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	3308      	adds	r3, #8
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e03e      	b.n	800160a <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d00b      	beq.n	80015ac <HAL_GPIO_Init+0x220>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d007      	beq.n	80015ac <HAL_GPIO_Init+0x220>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x220>
 80015a4:	21ea      	movs	r1, #234	; 0xea
 80015a6:	481f      	ldr	r0, [pc, #124]	; (8001624 <HAL_GPIO_Init+0x298>)
 80015a8:	f7fe ff9e 	bl	80004e8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	330c      	adds	r3, #12
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e029      	b.n	800160a <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <HAL_GPIO_Init+0x24a>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d007      	beq.n	80015d6 <HAL_GPIO_Init+0x24a>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x24a>
 80015ce:	21f7      	movs	r1, #247	; 0xf7
 80015d0:	4814      	ldr	r0, [pc, #80]	; (8001624 <HAL_GPIO_Init+0x298>)
 80015d2:	f7fe ff89 	bl	80004e8 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <HAL_GPIO_Init+0x258>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015de:	2304      	movs	r3, #4
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e012      	b.n	800160a <HAL_GPIO_Init+0x27e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_GPIO_Init+0x26c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ec:	2308      	movs	r3, #8
 80015ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	611a      	str	r2, [r3, #16]
          break;
 80015f6:	e008      	b.n	800160a <HAL_GPIO_Init+0x27e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f8:	2308      	movs	r3, #8
 80015fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	615a      	str	r2, [r3, #20]
          break;
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x27e>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
          break;
 8001608:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2bff      	cmp	r3, #255	; 0xff
 800160e:	d817      	bhi.n	8001640 <HAL_GPIO_Init+0x2b4>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	e017      	b.n	8001644 <HAL_GPIO_Init+0x2b8>
 8001614:	40010800 	.word	0x40010800
 8001618:	40010c00 	.word	0x40010c00
 800161c:	40011000 	.word	0x40011000
 8001620:	40011400 	.word	0x40011400
 8001624:	08005098 	.word	0x08005098
 8001628:	10110000 	.word	0x10110000
 800162c:	10210000 	.word	0x10210000
 8001630:	10310000 	.word	0x10310000
 8001634:	10120000 	.word	0x10120000
 8001638:	10220000 	.word	0x10220000
 800163c:	10320000 	.word	0x10320000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3304      	adds	r3, #4
 8001644:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2bff      	cmp	r3, #255	; 0xff
 800164a:	d802      	bhi.n	8001652 <HAL_GPIO_Init+0x2c6>
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x2cc>
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	3b08      	subs	r3, #8
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	210f      	movs	r1, #15
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	401a      	ands	r2, r3
 800166a:	6a39      	ldr	r1, [r7, #32]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	431a      	orrs	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8090 	beq.w	80017a6 <HAL_GPIO_Init+0x41a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001686:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <HAL_GPIO_Init+0x438>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4a4e      	ldr	r2, [pc, #312]	; (80017c4 <HAL_GPIO_Init+0x438>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6193      	str	r3, [r2, #24]
 8001692:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <HAL_GPIO_Init+0x438>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800169e:	4a4a      	ldr	r2, [pc, #296]	; (80017c8 <HAL_GPIO_Init+0x43c>)
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a41      	ldr	r2, [pc, #260]	; (80017cc <HAL_GPIO_Init+0x440>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x35a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <HAL_GPIO_Init+0x444>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x356>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a3f      	ldr	r2, [pc, #252]	; (80017d4 <HAL_GPIO_Init+0x448>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x352>
 80016da:	2302      	movs	r3, #2
 80016dc:	e004      	b.n	80016e8 <HAL_GPIO_Init+0x35c>
 80016de:	2303      	movs	r3, #3
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x35c>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x35c>
 80016e6:	2300      	movs	r3, #0
 80016e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ea:	f002 0203 	and.w	r2, r2, #3
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	4093      	lsls	r3, r2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016f8:	4933      	ldr	r1, [pc, #204]	; (80017c8 <HAL_GPIO_Init+0x43c>)
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <HAL_GPIO_Init+0x394>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4930      	ldr	r1, [pc, #192]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
 800171e:	e006      	b.n	800172e <HAL_GPIO_Init+0x3a2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	43db      	mvns	r3, r3
 8001728:	492b      	ldr	r1, [pc, #172]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 800172a:	4013      	ands	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_Init+0x3bc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4926      	ldr	r1, [pc, #152]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
 8001746:	e006      	b.n	8001756 <HAL_GPIO_Init+0x3ca>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	43db      	mvns	r3, r3
 8001750:	4921      	ldr	r1, [pc, #132]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 8001752:	4013      	ands	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <HAL_GPIO_Init+0x3e4>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	491c      	ldr	r1, [pc, #112]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
 800176e:	e006      	b.n	800177e <HAL_GPIO_Init+0x3f2>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	43db      	mvns	r3, r3
 8001778:	4917      	ldr	r1, [pc, #92]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 800177a:	4013      	ands	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d006      	beq.n	8001798 <HAL_GPIO_Init+0x40c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	4912      	ldr	r1, [pc, #72]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	60cb      	str	r3, [r1, #12]
 8001796:	e006      	b.n	80017a6 <HAL_GPIO_Init+0x41a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	43db      	mvns	r3, r3
 80017a0:	490d      	ldr	r1, [pc, #52]	; (80017d8 <HAL_GPIO_Init+0x44c>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	3301      	adds	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f47f ae5b 	bne.w	8001472 <HAL_GPIO_Init+0xe6>
  }
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010000 	.word	0x40010000
 80017cc:	40010800 	.word	0x40010800
 80017d0:	40010c00 	.word	0x40010c00
 80017d4:	40011000 	.word	0x40011000
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <HAL_GPIO_WritePin+0x20>
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	041b      	lsls	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d004      	beq.n	8001806 <HAL_GPIO_WritePin+0x2a>
 80017fc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001800:	480e      	ldr	r0, [pc, #56]	; (800183c <HAL_GPIO_WritePin+0x60>)
 8001802:	f7fe fe71 	bl	80004e8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001806:	787b      	ldrb	r3, [r7, #1]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_GPIO_WritePin+0x40>
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d004      	beq.n	800181c <HAL_GPIO_WritePin+0x40>
 8001812:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001816:	4809      	ldr	r0, [pc, #36]	; (800183c <HAL_GPIO_WritePin+0x60>)
 8001818:	f7fe fe66 	bl	80004e8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001828:	e003      	b.n	8001832 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	041a      	lsls	r2, r3, #16
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	611a      	str	r2, [r3, #16]
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	08005098 	.word	0x08005098

08001840 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <HAL_GPIO_TogglePin+0x1c>
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	041b      	lsls	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_GPIO_TogglePin+0x26>
 800185c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <HAL_GPIO_TogglePin+0x48>)
 8001862:	f7fe fe41 	bl	80004e8 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001878:	e002      	b.n	8001880 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	08005098 	.word	0x08005098

0800188c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b10      	cmp	r3, #16
 80018ba:	d003      	beq.n	80018c4 <HAL_I2C_EV_IRQHandler+0x38>
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b40      	cmp	r3, #64	; 0x40
 80018c0:	f040 80b6 	bne.w	8001a30 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10d      	bne.n	80018fa <HAL_I2C_EV_IRQHandler+0x6e>
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80018e4:	d003      	beq.n	80018ee <HAL_I2C_EV_IRQHandler+0x62>
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80018ec:	d101      	bne.n	80018f2 <HAL_I2C_EV_IRQHandler+0x66>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_I2C_EV_IRQHandler+0x68>
 80018f2:	2300      	movs	r3, #0
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f000 8127 	beq.w	8001b48 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00c      	beq.n	800191e <HAL_I2C_EV_IRQHandler+0x92>
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	0a5b      	lsrs	r3, r3, #9
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f001 fb74 	bl	8002ffe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fd03 	bl	8002322 <I2C_Master_SB>
 800191c:	e087      	b.n	8001a2e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_I2C_EV_IRQHandler+0xb2>
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	0a5b      	lsrs	r3, r3, #9
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fd78 	bl	800242c <I2C_Master_ADD10>
 800193c:	e077      	b.n	8001a2e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_I2C_EV_IRQHandler+0xd2>
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	0a5b      	lsrs	r3, r3, #9
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fd91 	bl	800247e <I2C_Master_ADDR>
 800195c:	e067      	b.n	8001a2e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d030      	beq.n	80019cc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001978:	f000 80e8 	beq.w	8001b4c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	09db      	lsrs	r3, r3, #7
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00f      	beq.n	80019a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	0a9b      	lsrs	r3, r3, #10
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d009      	beq.n	80019a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f9e4 	bl	8001d6e <I2C_MasterTransmit_TXE>
 80019a6:	e042      	b.n	8001a2e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80cb 	beq.w	8001b4c <HAL_I2C_EV_IRQHandler+0x2c0>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	0a5b      	lsrs	r3, r3, #9
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80c4 	beq.w	8001b4c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 faca 	bl	8001f5e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ca:	e0bf      	b.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019da:	f000 80b7 	beq.w	8001b4c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	099b      	lsrs	r3, r3, #6
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00f      	beq.n	8001a0a <HAL_I2C_EV_IRQHandler+0x17e>
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	0a9b      	lsrs	r3, r3, #10
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <HAL_I2C_EV_IRQHandler+0x17e>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d103      	bne.n	8001a0a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fb21 	bl	800204a <I2C_MasterReceive_RXNE>
 8001a08:	e011      	b.n	8001a2e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 809a 	beq.w	8001b4c <HAL_I2C_EV_IRQHandler+0x2c0>
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	0a5b      	lsrs	r3, r3, #9
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8093 	beq.w	8001b4c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 fb91 	bl	800214e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a2c:	e08e      	b.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2c0>
 8001a2e:	e08d      	b.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	e007      	b.n	8001a52 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	085b      	lsrs	r3, r3, #1
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d012      	beq.n	8001a84 <HAL_I2C_EV_IRQHandler+0x1f8>
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	0a5b      	lsrs	r3, r3, #9
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00c      	beq.n	8001a84 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a7a:	69b9      	ldr	r1, [r7, #24]
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 ff55 	bl	800292c <I2C_Slave_ADDR>
 8001a82:	e066      	b.n	8001b52 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <HAL_I2C_EV_IRQHandler+0x218>
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	0a5b      	lsrs	r3, r3, #9
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 ff89 	bl	80029b4 <I2C_Slave_STOPF>
 8001aa2:	e056      	b.n	8001b52 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	2b21      	cmp	r3, #33	; 0x21
 8001aa8:	d002      	beq.n	8001ab0 <HAL_I2C_EV_IRQHandler+0x224>
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	2b29      	cmp	r3, #41	; 0x29
 8001aae:	d125      	bne.n	8001afc <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	09db      	lsrs	r3, r3, #7
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00f      	beq.n	8001adc <HAL_I2C_EV_IRQHandler+0x250>
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	0a9b      	lsrs	r3, r3, #10
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d009      	beq.n	8001adc <HAL_I2C_EV_IRQHandler+0x250>
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d103      	bne.n	8001adc <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fe6d 	bl	80027b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ada:	e039      	b.n	8001b50 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d033      	beq.n	8001b50 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d02d      	beq.n	8001b50 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fe9a 	bl	800282e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001afa:	e029      	b.n	8001b50 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00f      	beq.n	8001b28 <HAL_I2C_EV_IRQHandler+0x29c>
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	0a9b      	lsrs	r3, r3, #10
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <HAL_I2C_EV_IRQHandler+0x29c>
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d103      	bne.n	8001b28 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fea4 	bl	800286e <I2C_SlaveReceive_RXNE>
 8001b26:	e014      	b.n	8001b52 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00e      	beq.n	8001b52 <HAL_I2C_EV_IRQHandler+0x2c6>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	0a5b      	lsrs	r3, r3, #9
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fed2 	bl	80028ea <I2C_SlaveReceive_BTF>
 8001b46:	e004      	b.n	8001b52 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8001b48:	bf00      	nop
 8001b4a:	e002      	b.n	8001b52 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b4c:	bf00      	nop
 8001b4e:	e000      	b.n	8001b52 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b50:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d016      	beq.n	8001bae <HAL_I2C_ER_IRQHandler+0x56>
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d010      	beq.n	8001bae <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b9c:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	0a5b      	lsrs	r3, r3, #9
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_I2C_ER_IRQHandler+0x80>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d008      	beq.n	8001bd8 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001bd6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	0a9b      	lsrs	r3, r3, #10
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d041      	beq.n	8001c68 <HAL_I2C_ER_IRQHandler+0x110>
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d03b      	beq.n	8001c68 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bf6:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c06:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001c0e:	7efb      	ldrb	r3, [r7, #27]
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d112      	bne.n	8001c3a <HAL_I2C_ER_IRQHandler+0xe2>
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10f      	bne.n	8001c3a <HAL_I2C_ER_IRQHandler+0xe2>
 8001c1a:	7cfb      	ldrb	r3, [r7, #19]
 8001c1c:	2b21      	cmp	r3, #33	; 0x21
 8001c1e:	d008      	beq.n	8001c32 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001c20:	7cfb      	ldrb	r3, [r7, #19]
 8001c22:	2b29      	cmp	r3, #41	; 0x29
 8001c24:	d005      	beq.n	8001c32 <HAL_I2C_ER_IRQHandler+0xda>
 8001c26:	7cfb      	ldrb	r3, [r7, #19]
 8001c28:	2b28      	cmp	r3, #40	; 0x28
 8001c2a:	d106      	bne.n	8001c3a <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b21      	cmp	r3, #33	; 0x21
 8001c30:	d103      	bne.n	8001c3a <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 ffee 	bl	8002c14 <I2C_Slave_AF>
 8001c38:	e016      	b.n	8001c68 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c42:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d107      	bne.n	8001c68 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c66:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	0adb      	lsrs	r3, r3, #11
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00e      	beq.n	8001c92 <HAL_I2C_ER_IRQHandler+0x13a>
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001c90:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f001 f825 	bl	8002cf4 <I2C_ITError>
  }
}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	; 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	70fb      	strb	r3, [r7, #3]
 8001d06:	4613      	mov	r3, r2
 8001d08:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d84:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d150      	bne.n	8001e36 <I2C_MasterTransmit_TXE+0xc8>
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b21      	cmp	r3, #33	; 0x21
 8001d98:	d14d      	bne.n	8001e36 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d01d      	beq.n	8001ddc <I2C_MasterTransmit_TXE+0x6e>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d01a      	beq.n	8001ddc <I2C_MasterTransmit_TXE+0x6e>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dac:	d016      	beq.n	8001ddc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dbc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2211      	movs	r2, #17
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff6c 	bl	8001cb2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dda:	e0bc      	b.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dea:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d107      	bne.n	8001e26 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff81 	bl	8001d26 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e24:	e097      	b.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff3f 	bl	8001cb2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e34:	e08f      	b.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b21      	cmp	r3, #33	; 0x21
 8001e3a:	d007      	beq.n	8001e4c <I2C_MasterTransmit_TXE+0xde>
 8001e3c:	7bbb      	ldrb	r3, [r7, #14]
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	f040 8089 	bne.w	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	2b22      	cmp	r3, #34	; 0x22
 8001e48:	f040 8085 	bne.w	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d108      	bne.n	8001e68 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e64:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e66:	e076      	b.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	d15d      	bne.n	8001f30 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d11d      	bne.n	8001eb8 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10b      	bne.n	8001e9c <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e94:	1c9a      	adds	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e9a:	e05c      	b.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	121b      	asrs	r3, r3, #8
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001eb6:	e04e      	b.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d10b      	bne.n	8001ed8 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ed6:	e03e      	b.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d13a      	bne.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b22      	cmp	r3, #34	; 0x22
 8001eea:	d108      	bne.n	8001efe <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001efa:	601a      	str	r2, [r3, #0]
}
 8001efc:	e02b      	b.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b21      	cmp	r3, #33	; 0x21
 8001f08:	d125      	bne.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	781a      	ldrb	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f2e:	e012      	b.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f54:	e7ff      	b.n	8001f56 <I2C_MasterTransmit_TXE+0x1e8>
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b21      	cmp	r3, #33	; 0x21
 8001f76:	d164      	bne.n	8002042 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8001fa6:	e04c      	b.n	8002042 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d01d      	beq.n	8001fea <I2C_MasterTransmit_BTF+0x8c>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d01a      	beq.n	8001fea <I2C_MasterTransmit_BTF+0x8c>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fba:	d016      	beq.n	8001fea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2211      	movs	r2, #17
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fe65 	bl	8001cb2 <HAL_I2C_MasterTxCpltCallback>
}
 8001fe8:	e02b      	b.n	8002042 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ff8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002008:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d107      	bne.n	8002034 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fe7a 	bl	8001d26 <HAL_I2C_MemTxCpltCallback>
}
 8002032:	e006      	b.n	8002042 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fe38 	bl	8001cb2 <HAL_I2C_MasterTxCpltCallback>
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b22      	cmp	r3, #34	; 0x22
 800205c:	d173      	bne.n	8002146 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d920      	bls.n	80020ae <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b03      	cmp	r3, #3
 800209a:	d154      	bne.n	8002146 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020aa:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80020ac:	e04b      	b.n	8002146 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d047      	beq.n	8002146 <I2C_MasterReceive_RXNE+0xfc>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d002      	beq.n	80020c2 <I2C_MasterReceive_RXNE+0x78>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d141      	bne.n	8002146 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020e0:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b40      	cmp	r3, #64	; 0x40
 800211a:	d10a      	bne.n	8002132 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fe04 	bl	8001d38 <HAL_I2C_MemRxCpltCallback>
}
 8002130:	e009      	b.n	8002146 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2212      	movs	r2, #18
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fdbf 	bl	8001cc4 <HAL_I2C_MasterRxCpltCallback>
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b04      	cmp	r3, #4
 8002164:	d11b      	bne.n	800219e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002174:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800219c:	e0bd      	b.n	800231a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d129      	bne.n	80021fc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d00a      	beq.n	80021d4 <I2C_MasterReceive_BTF+0x86>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d007      	beq.n	80021d4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021fa:	e08e      	b.n	800231a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d176      	bne.n	80022f4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d002      	beq.n	8002212 <I2C_MasterReceive_BTF+0xc4>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b10      	cmp	r3, #16
 8002210:	d108      	bne.n	8002224 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e019      	b.n	8002258 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b04      	cmp	r3, #4
 8002228:	d002      	beq.n	8002230 <I2C_MasterReceive_BTF+0xe2>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d108      	bne.n	8002242 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e00a      	b.n	8002258 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b10      	cmp	r3, #16
 8002246:	d007      	beq.n	8002258 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002256:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d10a      	bne.n	80022de <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fd2e 	bl	8001d38 <HAL_I2C_MemRxCpltCallback>
}
 80022dc:	e01d      	b.n	800231a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2212      	movs	r2, #18
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fce9 	bl	8001cc4 <HAL_I2C_MasterRxCpltCallback>
}
 80022f2:	e012      	b.n	800231a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b40      	cmp	r3, #64	; 0x40
 8002334:	d117      	bne.n	8002366 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800234e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002350:	e067      	b.n	8002422 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	611a      	str	r2, [r3, #16]
}
 8002364:	e05d      	b.n	8002422 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800236e:	d133      	bne.n	80023d8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b21      	cmp	r3, #33	; 0x21
 800237a:	d109      	bne.n	8002390 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	e008      	b.n	80023a2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <I2C_Master_SB+0x90>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d037      	beq.n	8002422 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d104      	bne.n	80023c6 <I2C_Master_SB+0xa4>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d02d      	beq.n	8002422 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d4:	605a      	str	r2, [r3, #4]
}
 80023d6:	e024      	b.n	8002422 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10e      	bne.n	80023fe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	11db      	asrs	r3, r3, #7
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 0306 	and.w	r3, r3, #6
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f063 030f 	orn	r3, r3, #15
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	611a      	str	r2, [r3, #16]
}
 80023fc:	e011      	b.n	8002422 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	2b01      	cmp	r3, #1
 8002404:	d10d      	bne.n	8002422 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	b29b      	uxth	r3, r3
 800240c:	11db      	asrs	r3, r3, #7
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f003 0306 	and.w	r3, r3, #6
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f063 030e 	orn	r3, r3, #14
 800241a:	b2da      	uxtb	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	611a      	str	r2, [r3, #16]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	b2da      	uxtb	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <I2C_Master_ADD10+0x24>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244c:	2b00      	cmp	r3, #0
 800244e:	d011      	beq.n	8002474 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d104      	bne.n	8002464 <I2C_Master_ADD10+0x38>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002472:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800247e:	b480      	push	{r7}
 8002480:	b091      	sub	sp, #68	; 0x44
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800248c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b22      	cmp	r3, #34	; 0x22
 80024a6:	f040 8174 	bne.w	8002792 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <I2C_Master_ADDR+0x54>
 80024b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d10b      	bne.n	80024d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	e16b      	b.n	80027aa <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11d      	bne.n	8002516 <I2C_Master_ADDR+0x98>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024e2:	d118      	bne.n	8002516 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002508:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	651a      	str	r2, [r3, #80]	; 0x50
 8002514:	e149      	b.n	80027aa <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d113      	bne.n	8002548 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002520:	2300      	movs	r3, #0
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e120      	b.n	800278a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	f040 808a 	bne.w	8002668 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002556:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800255a:	d137      	bne.n	80025cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800257a:	d113      	bne.n	80025a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	e0f2      	b.n	800278a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e0de      	b.n	800278a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d02e      	beq.n	8002630 <I2C_Master_ADDR+0x1b2>
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d02b      	beq.n	8002630 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80025d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025da:	2b12      	cmp	r3, #18
 80025dc:	d102      	bne.n	80025e4 <I2C_Master_ADDR+0x166>
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d125      	bne.n	8002630 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00e      	beq.n	8002608 <I2C_Master_ADDR+0x18a>
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d00b      	beq.n	8002608 <I2C_Master_ADDR+0x18a>
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d008      	beq.n	8002608 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e007      	b.n	8002618 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002616:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	e0ac      	b.n	800278a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e090      	b.n	800278a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d158      	bne.n	8002724 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	2b04      	cmp	r3, #4
 8002676:	d021      	beq.n	80026bc <I2C_Master_ADDR+0x23e>
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	2b02      	cmp	r3, #2
 800267c:	d01e      	beq.n	80026bc <I2C_Master_ADDR+0x23e>
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	2b10      	cmp	r3, #16
 8002682:	d01b      	beq.n	80026bc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002692:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e012      	b.n	80026e2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f0:	d14b      	bne.n	800278a <I2C_Master_ADDR+0x30c>
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026f8:	d00b      	beq.n	8002712 <I2C_Master_ADDR+0x294>
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d008      	beq.n	8002712 <I2C_Master_ADDR+0x294>
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	2b08      	cmp	r3, #8
 8002704:	d005      	beq.n	8002712 <I2C_Master_ADDR+0x294>
 8002706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002708:	2b10      	cmp	r3, #16
 800270a:	d002      	beq.n	8002712 <I2C_Master_ADDR+0x294>
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	2b20      	cmp	r3, #32
 8002710:	d13b      	bne.n	800278a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	e032      	b.n	800278a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002732:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002742:	d117      	bne.n	8002774 <I2C_Master_ADDR+0x2f6>
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800274a:	d00b      	beq.n	8002764 <I2C_Master_ADDR+0x2e6>
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274e:	2b01      	cmp	r3, #1
 8002750:	d008      	beq.n	8002764 <I2C_Master_ADDR+0x2e6>
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	2b08      	cmp	r3, #8
 8002756:	d005      	beq.n	8002764 <I2C_Master_ADDR+0x2e6>
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	2b10      	cmp	r3, #16
 800275c:	d002      	beq.n	8002764 <I2C_Master_ADDR+0x2e6>
 800275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002760:	2b20      	cmp	r3, #32
 8002762:	d107      	bne.n	8002774 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002772:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002790:	e00b      	b.n	80027aa <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
}
 80027a8:	e7ff      	b.n	80027aa <I2C_Master_ADDR+0x32c>
 80027aa:	bf00      	nop
 80027ac:	3744      	adds	r7, #68	; 0x44
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d02b      	beq.n	8002826 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d114      	bne.n	8002826 <I2C_SlaveTransmit_TXE+0x72>
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b29      	cmp	r3, #41	; 0x29
 8002800:	d111      	bne.n	8002826 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002810:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2221      	movs	r2, #33	; 0x21
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2228      	movs	r2, #40	; 0x28
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fa58 	bl	8001cd6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d011      	beq.n	8002864 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02c      	beq.n	80028e2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d114      	bne.n	80028e2 <I2C_SlaveReceive_RXNE+0x74>
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b2a      	cmp	r3, #42	; 0x2a
 80028bc:	d111      	bne.n	80028e2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2222      	movs	r2, #34	; 0x22
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2228      	movs	r2, #40	; 0x28
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff fa03 	bl	8001ce8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002946:	2b28      	cmp	r3, #40	; 0x28
 8002948:	d127      	bne.n	800299a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002958:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	09db      	lsrs	r3, r3, #7
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	81bb      	strh	r3, [r7, #12]
 800297c:	e002      	b.n	8002984 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800298c:	89ba      	ldrh	r2, [r7, #12]
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff f9b1 	bl	8001cfa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002998:	e008      	b.n	80029ac <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f06f 0202 	mvn.w	r2, #2
 80029a2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a10:	d172      	bne.n	8002af8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b22      	cmp	r3, #34	; 0x22
 8002a16:	d002      	beq.n	8002a1e <I2C_Slave_STOPF+0x6a>
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a1c:	d135      	bne.n	8002a8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f043 0204 	orr.w	r2, r3, #4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fc8c 	bl	8001374 <HAL_DMA_GetState>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d049      	beq.n	8002af6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	4a69      	ldr	r2, [pc, #420]	; (8002c0c <I2C_Slave_STOPF+0x258>)
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fc0a 	bl	8001288 <HAL_DMA_Abort_IT>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d03d      	beq.n	8002af6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a84:	4610      	mov	r0, r2
 8002a86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a88:	e035      	b.n	8002af6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0204 	orr.w	r2, r3, #4
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002abc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fc56 	bl	8001374 <HAL_DMA_GetState>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d014      	beq.n	8002af8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	4a4e      	ldr	r2, [pc, #312]	; (8002c0c <I2C_Slave_STOPF+0x258>)
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fbd4 	bl	8001288 <HAL_DMA_Abort_IT>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002af0:	4610      	mov	r0, r2
 8002af2:	4798      	blx	r3
 8002af4:	e000      	b.n	8002af8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002af6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d03e      	beq.n	8002b80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d112      	bne.n	8002b36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d112      	bne.n	8002b6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0204 	orr.w	r2, r3, #4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f8b3 	bl	8002cf4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b8e:	e039      	b.n	8002c04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b2a      	cmp	r3, #42	; 0x2a
 8002b94:	d109      	bne.n	8002baa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2228      	movs	r2, #40	; 0x28
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff f89f 	bl	8001ce8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b28      	cmp	r3, #40	; 0x28
 8002bb4:	d111      	bne.n	8002bda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <I2C_Slave_STOPF+0x25c>)
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff f89e 	bl	8001d14 <HAL_I2C_ListenCpltCallback>
}
 8002bd8:	e014      	b.n	8002c04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	2b22      	cmp	r3, #34	; 0x22
 8002be0:	d002      	beq.n	8002be8 <I2C_Slave_STOPF+0x234>
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b22      	cmp	r3, #34	; 0x22
 8002be6:	d10d      	bne.n	8002c04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff f872 	bl	8001ce8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	08002f21 	.word	0x08002f21
 8002c10:	ffff0000 	.word	0xffff0000

08002c14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d002      	beq.n	8002c36 <I2C_Slave_AF+0x22>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d129      	bne.n	8002c8a <I2C_Slave_AF+0x76>
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	2b28      	cmp	r3, #40	; 0x28
 8002c3a:	d126      	bne.n	8002c8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a2c      	ldr	r2, [pc, #176]	; (8002cf0 <I2C_Slave_AF+0xdc>)
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff f846 	bl	8001d14 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002c88:	e02e      	b.n	8002ce8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	2b21      	cmp	r3, #33	; 0x21
 8002c8e:	d126      	bne.n	8002cde <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <I2C_Slave_AF+0xdc>)
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2221      	movs	r2, #33	; 0x21
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cc4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fffd 	bl	8001cd6 <HAL_I2C_SlaveTxCpltCallback>
}
 8002cdc:	e004      	b.n	8002ce8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ce6:	615a      	str	r2, [r3, #20]
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	ffff0000 	.word	0xffff0000

08002cf4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d02:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d10a      	bne.n	8002d26 <I2C_ITError+0x32>
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b22      	cmp	r3, #34	; 0x22
 8002d14:	d107      	bne.n	8002d26 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d2c:	2b28      	cmp	r3, #40	; 0x28
 8002d2e:	d107      	bne.n	8002d40 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2228      	movs	r2, #40	; 0x28
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d3e:	e015      	b.n	8002d6c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d4e:	d006      	beq.n	8002d5e <I2C_ITError+0x6a>
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b60      	cmp	r3, #96	; 0x60
 8002d54:	d003      	beq.n	8002d5e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7a:	d161      	bne.n	8002e40 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d020      	beq.n	8002dda <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	4a5e      	ldr	r2, [pc, #376]	; (8002f18 <I2C_ITError+0x224>)
 8002d9e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe fa6f 	bl	8001288 <HAL_DMA_Abort_IT>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8089 	beq.w	8002ec4 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4798      	blx	r3
 8002dd8:	e074      	b.n	8002ec4 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	4a4e      	ldr	r2, [pc, #312]	; (8002f18 <I2C_ITError+0x224>)
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fa4e 	bl	8001288 <HAL_DMA_Abort_IT>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d068      	beq.n	8002ec4 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d10b      	bne.n	8002e18 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4798      	blx	r3
 8002e3e:	e041      	b.n	8002ec4 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b60      	cmp	r3, #96	; 0x60
 8002e4a:	d125      	bne.n	8002e98 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d10b      	bne.n	8002e80 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fe ff63 	bl	8001d5c <HAL_I2C_AbortCpltCallback>
 8002e96:	e015      	b.n	8002ec4 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d10b      	bne.n	8002ebe <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe ff43 	bl	8001d4a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d11b      	bne.n	8002f10 <I2C_ITError+0x21c>
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b28      	cmp	r3, #40	; 0x28
 8002edc:	d118      	bne.n	8002f10 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eec:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <I2C_ITError+0x228>)
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe ff02 	bl	8001d14 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	08002f21 	.word	0x08002f21
 8002f1c:	ffff0000 	.word	0xffff0000

08002f20 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	2200      	movs	r2, #0
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	2200      	movs	r2, #0
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	2200      	movs	r2, #0
 8002f6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b60      	cmp	r3, #96	; 0x60
 8002f86:	d10e      	bne.n	8002fa6 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7fe fedc 	bl	8001d5c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fa4:	e027      	b.n	8002ff6 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fa6:	7afb      	ldrb	r3, [r7, #11]
 8002fa8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fac:	2b28      	cmp	r3, #40	; 0x28
 8002fae:	d117      	bne.n	8002fe0 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2228      	movs	r2, #40	; 0x28
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fde:	e007      	b.n	8002ff0 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f7fe feaa 	bl	8001d4a <HAL_I2C_ErrorCallback>
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800300e:	d103      	bne.n	8003018 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003016:	e007      	b.n	8003028 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003020:	d102      	bne.n	8003028 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2208      	movs	r2, #8
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
	...

08003034 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_PWR_EnableBkUpAccess+0x14>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	420e0020 	.word	0x420e0020

0800304c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e35c      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01c      	beq.n	80030a0 <HAL_RCC_OscConfig+0x54>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_RCC_OscConfig+0x54>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d110      	bne.n	80030a0 <HAL_RCC_OscConfig+0x54>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <HAL_RCC_OscConfig+0x54>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <HAL_RCC_OscConfig+0x54>
 8003096:	f240 1167 	movw	r1, #359	; 0x167
 800309a:	48a5      	ldr	r0, [pc, #660]	; (8003330 <HAL_RCC_OscConfig+0x2e4>)
 800309c:	f7fd fa24 	bl	80004e8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 809a 	beq.w	80031e2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00e      	beq.n	80030d4 <HAL_RCC_OscConfig+0x88>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030be:	d009      	beq.n	80030d4 <HAL_RCC_OscConfig+0x88>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c8:	d004      	beq.n	80030d4 <HAL_RCC_OscConfig+0x88>
 80030ca:	f240 116d 	movw	r1, #365	; 0x16d
 80030ce:	4898      	ldr	r0, [pc, #608]	; (8003330 <HAL_RCC_OscConfig+0x2e4>)
 80030d0:	f7fd fa0a 	bl	80004e8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030d4:	4b97      	ldr	r3, [pc, #604]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d00c      	beq.n	80030fa <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030e0:	4b94      	ldr	r3, [pc, #592]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d112      	bne.n	8003112 <HAL_RCC_OscConfig+0xc6>
 80030ec:	4b91      	ldr	r3, [pc, #580]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d10b      	bne.n	8003112 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fa:	4b8e      	ldr	r3, [pc, #568]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d06c      	beq.n	80031e0 <HAL_RCC_OscConfig+0x194>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d168      	bne.n	80031e0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e302      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311a:	d106      	bne.n	800312a <HAL_RCC_OscConfig+0xde>
 800311c:	4b85      	ldr	r3, [pc, #532]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a84      	ldr	r2, [pc, #528]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e02e      	b.n	8003188 <HAL_RCC_OscConfig+0x13c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x100>
 8003132:	4b80      	ldr	r3, [pc, #512]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7f      	ldr	r2, [pc, #508]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b7d      	ldr	r3, [pc, #500]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7c      	ldr	r2, [pc, #496]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e01d      	b.n	8003188 <HAL_RCC_OscConfig+0x13c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x124>
 8003156:	4b77      	ldr	r3, [pc, #476]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a76      	ldr	r2, [pc, #472]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 800315c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b74      	ldr	r3, [pc, #464]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a73      	ldr	r2, [pc, #460]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0x13c>
 8003170:	4b70      	ldr	r3, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6f      	ldr	r2, [pc, #444]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b6d      	ldr	r3, [pc, #436]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6c      	ldr	r2, [pc, #432]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003186:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fd fbaa 	bl	80008e8 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7fd fba6 	bl	80008e8 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e2b6      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b62      	ldr	r3, [pc, #392]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x14c>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fd fb96 	bl	80008e8 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fd fb92 	bl	80008e8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e2a2      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	4b58      	ldr	r3, [pc, #352]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x174>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d079      	beq.n	80032e2 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_RCC_OscConfig+0x1bc>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d004      	beq.n	8003208 <HAL_RCC_OscConfig+0x1bc>
 80031fe:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003202:	484b      	ldr	r0, [pc, #300]	; (8003330 <HAL_RCC_OscConfig+0x2e4>)
 8003204:	f7fd f970 	bl	80004e8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	2b1f      	cmp	r3, #31
 800320e:	d904      	bls.n	800321a <HAL_RCC_OscConfig+0x1ce>
 8003210:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003214:	4846      	ldr	r0, [pc, #280]	; (8003330 <HAL_RCC_OscConfig+0x2e4>)
 8003216:	f7fd f967 	bl	80004e8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800321a:	4b46      	ldr	r3, [pc, #280]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003226:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b08      	cmp	r3, #8
 8003230:	d11c      	bne.n	800326c <HAL_RCC_OscConfig+0x220>
 8003232:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d116      	bne.n	800326c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_RCC_OscConfig+0x20a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e260      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4933      	ldr	r1, [pc, #204]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	e03a      	b.n	80032e2 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003274:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_RCC_OscConfig+0x2ec>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fd fb35 	bl	80008e8 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003282:	f7fd fb31 	bl	80008e8 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e241      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003294:	4b27      	ldr	r3, [pc, #156]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4921      	ldr	r1, [pc, #132]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
 80032b4:	e015      	b.n	80032e2 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_RCC_OscConfig+0x2ec>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fd fb14 	bl	80008e8 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fd fb10 	bl	80008e8 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e220      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_RCC_OscConfig+0x2e8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d048      	beq.n	8003380 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_RCC_OscConfig+0x2bc>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d004      	beq.n	8003308 <HAL_RCC_OscConfig+0x2bc>
 80032fe:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003302:	480b      	ldr	r0, [pc, #44]	; (8003330 <HAL_RCC_OscConfig+0x2e4>)
 8003304:	f7fd f8f0 	bl	80004e8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d021      	beq.n	8003354 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_RCC_OscConfig+0x2f0>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003316:	f7fd fae7 	bl	80008e8 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331c:	e010      	b.n	8003340 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331e:	f7fd fae3 	bl	80008e8 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d909      	bls.n	8003340 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1f3      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
 8003330:	080050d4 	.word	0x080050d4
 8003334:	40021000 	.word	0x40021000
 8003338:	42420000 	.word	0x42420000
 800333c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003340:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0e8      	beq.n	800331e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800334c:	2001      	movs	r0, #1
 800334e:	f000 fbfd 	bl	8003b4c <RCC_Delay>
 8003352:	e015      	b.n	8003380 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003354:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HAL_RCC_OscConfig+0x498>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7fd fac5 	bl	80008e8 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003362:	f7fd fac1 	bl	80008e8 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1d1      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	4b5a      	ldr	r3, [pc, #360]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80c0 	beq.w	800350e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x368>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d008      	beq.n	80033b4 <HAL_RCC_OscConfig+0x368>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d004      	beq.n	80033b4 <HAL_RCC_OscConfig+0x368>
 80033aa:	f240 2111 	movw	r1, #529	; 0x211
 80033ae:	484e      	ldr	r0, [pc, #312]	; (80034e8 <HAL_RCC_OscConfig+0x49c>)
 80033b0:	f7fd f89a 	bl	80004e8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b4:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10d      	bne.n	80033dc <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c0:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	4a46      	ldr	r2, [pc, #280]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 80033c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ca:	61d3      	str	r3, [r2, #28]
 80033cc:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d8:	2301      	movs	r3, #1
 80033da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	4b43      	ldr	r3, [pc, #268]	; (80034ec <HAL_RCC_OscConfig+0x4a0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d118      	bne.n	800341a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e8:	4b40      	ldr	r3, [pc, #256]	; (80034ec <HAL_RCC_OscConfig+0x4a0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <HAL_RCC_OscConfig+0x4a0>)
 80033ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f4:	f7fd fa78 	bl	80008e8 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fc:	f7fd fa74 	bl	80008e8 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e184      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <HAL_RCC_OscConfig+0x4a0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d106      	bne.n	8003430 <HAL_RCC_OscConfig+0x3e4>
 8003422:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a2e      	ldr	r2, [pc, #184]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	e02d      	b.n	800348c <HAL_RCC_OscConfig+0x440>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10c      	bne.n	8003452 <HAL_RCC_OscConfig+0x406>
 8003438:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a28      	ldr	r2, [pc, #160]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 800344a:	f023 0304 	bic.w	r3, r3, #4
 800344e:	6213      	str	r3, [r2, #32]
 8003450:	e01c      	b.n	800348c <HAL_RCC_OscConfig+0x440>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b05      	cmp	r3, #5
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0x428>
 800345a:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	6213      	str	r3, [r2, #32]
 8003466:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6213      	str	r3, [r2, #32]
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0x440>
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	6213      	str	r3, [r2, #32]
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 8003486:	f023 0304 	bic.w	r3, r3, #4
 800348a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7fd fa28 	bl	80008e8 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7fd fa24 	bl	80008e8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e132      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x494>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ee      	beq.n	800349c <HAL_RCC_OscConfig+0x450>
 80034be:	e01d      	b.n	80034fc <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c0:	f7fd fa12 	bl	80008e8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c6:	e013      	b.n	80034f0 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7fd fa0e 	bl	80008e8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d90a      	bls.n	80034f0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e11c      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	42420480 	.word	0x42420480
 80034e8:	080050d4 	.word	0x080050d4
 80034ec:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f0:	4b8b      	ldr	r3, [pc, #556]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e5      	bne.n	80034c8 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d105      	bne.n	800350e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003502:	4b87      	ldr	r3, [pc, #540]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4a86      	ldr	r2, [pc, #536]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 8003508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_OscConfig+0x4e4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d008      	beq.n	8003530 <HAL_RCC_OscConfig+0x4e4>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d004      	beq.n	8003530 <HAL_RCC_OscConfig+0x4e4>
 8003526:	f240 21af 	movw	r1, #687	; 0x2af
 800352a:	487e      	ldr	r0, [pc, #504]	; (8003724 <HAL_RCC_OscConfig+0x6d8>)
 800352c:	f7fc ffdc 	bl	80004e8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80ee 	beq.w	8003716 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800353a:	4b79      	ldr	r3, [pc, #484]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b08      	cmp	r3, #8
 8003544:	f000 80ce 	beq.w	80036e4 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b02      	cmp	r3, #2
 800354e:	f040 80b2 	bne.w	80036b6 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <HAL_RCC_OscConfig+0x522>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003562:	d004      	beq.n	800356e <HAL_RCC_OscConfig+0x522>
 8003564:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003568:	486e      	ldr	r0, [pc, #440]	; (8003724 <HAL_RCC_OscConfig+0x6d8>)
 800356a:	f7fc ffbd 	bl	80004e8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	2b00      	cmp	r3, #0
 8003574:	d04a      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800357e:	d045      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003588:	d040      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003592:	d03b      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359c:	d036      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80035a6:	d031      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80035b0:	d02c      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80035ba:	d027      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c4:	d022      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035ce:	d01d      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035d8:	d018      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035ec:	d00e      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80035f6:	d009      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003600:	d004      	beq.n	800360c <HAL_RCC_OscConfig+0x5c0>
 8003602:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003606:	4847      	ldr	r0, [pc, #284]	; (8003724 <HAL_RCC_OscConfig+0x6d8>)
 8003608:	f7fc ff6e 	bl	80004e8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b46      	ldr	r3, [pc, #280]	; (8003728 <HAL_RCC_OscConfig+0x6dc>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fd f969 	bl	80008e8 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7fd f965 	bl	80008e8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e075      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	4b3c      	ldr	r3, [pc, #240]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d116      	bne.n	8003670 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_OscConfig+0x612>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003652:	d004      	beq.n	800365e <HAL_RCC_OscConfig+0x612>
 8003654:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003658:	4832      	ldr	r0, [pc, #200]	; (8003724 <HAL_RCC_OscConfig+0x6d8>)
 800365a:	f7fc ff45 	bl	80004e8 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	492d      	ldr	r1, [pc, #180]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a19      	ldr	r1, [r3, #32]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	430b      	orrs	r3, r1
 8003682:	4927      	ldr	r1, [pc, #156]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003688:	4b27      	ldr	r3, [pc, #156]	; (8003728 <HAL_RCC_OscConfig+0x6dc>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fd f92b 	bl	80008e8 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003696:	f7fd f927 	bl	80008e8 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e037      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x64a>
 80036b4:	e02f      	b.n	8003716 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <HAL_RCC_OscConfig+0x6dc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fd f914 	bl	80008e8 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fd f910 	bl	80008e8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e020      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x678>
 80036e2:	e018      	b.n	8003716 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e013      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_OscConfig+0x6d4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	429a      	cmp	r2, r3
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	429a      	cmp	r2, r3
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	080050d4 	.word	0x080050d4
 8003728:	42420060 	.word	0x42420060

0800372c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e176      	b.n	8003a2e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d116      	bne.n	800377a <HAL_RCC_ClockConfig+0x4e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d110      	bne.n	800377a <HAL_RCC_ClockConfig+0x4e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <HAL_RCC_ClockConfig+0x4e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <HAL_RCC_ClockConfig+0x4e>
 8003770:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003774:	4874      	ldr	r0, [pc, #464]	; (8003948 <HAL_RCC_ClockConfig+0x21c>)
 8003776:	f7fc feb7 	bl	80004e8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCC_ClockConfig+0x6a>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d007      	beq.n	8003796 <HAL_RCC_ClockConfig+0x6a>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d004      	beq.n	8003796 <HAL_RCC_ClockConfig+0x6a>
 800378c:	f240 3139 	movw	r1, #825	; 0x339
 8003790:	486d      	ldr	r0, [pc, #436]	; (8003948 <HAL_RCC_ClockConfig+0x21c>)
 8003792:	f7fc fea9 	bl	80004e8 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCC_ClockConfig+0x220>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d910      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a4:	4b69      	ldr	r3, [pc, #420]	; (800394c <HAL_RCC_ClockConfig+0x220>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 0207 	bic.w	r2, r3, #7
 80037ac:	4967      	ldr	r1, [pc, #412]	; (800394c <HAL_RCC_ClockConfig+0x220>)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b4:	4b65      	ldr	r3, [pc, #404]	; (800394c <HAL_RCC_ClockConfig+0x220>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e133      	b.n	8003a2e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d049      	beq.n	8003866 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037de:	4b5c      	ldr	r3, [pc, #368]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4a5b      	ldr	r2, [pc, #364]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 80037e4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037e8:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f6:	4b56      	ldr	r3, [pc, #344]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a55      	ldr	r2, [pc, #340]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 80037fc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003800:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d024      	beq.n	8003854 <HAL_RCC_ClockConfig+0x128>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b80      	cmp	r3, #128	; 0x80
 8003810:	d020      	beq.n	8003854 <HAL_RCC_ClockConfig+0x128>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b90      	cmp	r3, #144	; 0x90
 8003818:	d01c      	beq.n	8003854 <HAL_RCC_ClockConfig+0x128>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2ba0      	cmp	r3, #160	; 0xa0
 8003820:	d018      	beq.n	8003854 <HAL_RCC_ClockConfig+0x128>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2bb0      	cmp	r3, #176	; 0xb0
 8003828:	d014      	beq.n	8003854 <HAL_RCC_ClockConfig+0x128>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2bc0      	cmp	r3, #192	; 0xc0
 8003830:	d010      	beq.n	8003854 <HAL_RCC_ClockConfig+0x128>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2bd0      	cmp	r3, #208	; 0xd0
 8003838:	d00c      	beq.n	8003854 <HAL_RCC_ClockConfig+0x128>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2be0      	cmp	r3, #224	; 0xe0
 8003840:	d008      	beq.n	8003854 <HAL_RCC_ClockConfig+0x128>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2bf0      	cmp	r3, #240	; 0xf0
 8003848:	d004      	beq.n	8003854 <HAL_RCC_ClockConfig+0x128>
 800384a:	f240 315f 	movw	r1, #863	; 0x35f
 800384e:	483e      	ldr	r0, [pc, #248]	; (8003948 <HAL_RCC_ClockConfig+0x21c>)
 8003850:	f7fc fe4a 	bl	80004e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b3e      	ldr	r3, [pc, #248]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	493b      	ldr	r1, [pc, #236]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d051      	beq.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00c      	beq.n	8003894 <HAL_RCC_ClockConfig+0x168>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d008      	beq.n	8003894 <HAL_RCC_ClockConfig+0x168>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d004      	beq.n	8003894 <HAL_RCC_ClockConfig+0x168>
 800388a:	f240 3166 	movw	r1, #870	; 0x366
 800388e:	482e      	ldr	r0, [pc, #184]	; (8003948 <HAL_RCC_ClockConfig+0x21c>)
 8003890:	f7fc fe2a 	bl	80004e8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d115      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0c0      	b.n	8003a2e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b4:	4b26      	ldr	r3, [pc, #152]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0b4      	b.n	8003a2e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0ac      	b.n	8003a2e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d4:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 0203 	bic.w	r2, r3, #3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	491b      	ldr	r1, [pc, #108]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e6:	f7fc ffff 	bl	80008e8 <HAL_GetTick>
 80038ea:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ee:	f7fc fffb 	bl	80008e8 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e094      	b.n	8003a2e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_RCC_ClockConfig+0x224>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 020c 	and.w	r2, r3, #12
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	429a      	cmp	r2, r3
 8003914:	d1eb      	bne.n	80038ee <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <HAL_RCC_ClockConfig+0x220>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d217      	bcs.n	8003954 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_ClockConfig+0x220>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 0207 	bic.w	r2, r3, #7
 800392c:	4907      	ldr	r1, [pc, #28]	; (800394c <HAL_RCC_ClockConfig+0x220>)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_ClockConfig+0x220>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d008      	beq.n	8003954 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e073      	b.n	8003a2e <HAL_RCC_ClockConfig+0x302>
 8003946:	bf00      	nop
 8003948:	080050d4 	.word	0x080050d4
 800394c:	40022000 	.word	0x40022000
 8003950:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d025      	beq.n	80039ac <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d018      	beq.n	800399a <HAL_RCC_ClockConfig+0x26e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003970:	d013      	beq.n	800399a <HAL_RCC_ClockConfig+0x26e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800397a:	d00e      	beq.n	800399a <HAL_RCC_ClockConfig+0x26e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x26e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800398e:	d004      	beq.n	800399a <HAL_RCC_ClockConfig+0x26e>
 8003990:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003994:	4828      	ldr	r0, [pc, #160]	; (8003a38 <HAL_RCC_ClockConfig+0x30c>)
 8003996:	f7fc fda7 	bl	80004e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399a:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_RCC_ClockConfig+0x310>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4925      	ldr	r1, [pc, #148]	; (8003a3c <HAL_RCC_ClockConfig+0x310>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d026      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d018      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x2c6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c8:	d013      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x2c6>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80039d2:	d00e      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x2c6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80039dc:	d009      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x2c6>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039e6:	d004      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x2c6>
 80039e8:	f240 31ab 	movw	r1, #939	; 0x3ab
 80039ec:	4812      	ldr	r0, [pc, #72]	; (8003a38 <HAL_RCC_ClockConfig+0x30c>)
 80039ee:	f7fc fd7b 	bl	80004e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_ClockConfig+0x310>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	490e      	ldr	r1, [pc, #56]	; (8003a3c <HAL_RCC_ClockConfig+0x310>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a06:	f000 f821 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_ClockConfig+0x310>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <HAL_RCC_ClockConfig+0x314>)
 8003a18:	5cd3      	ldrb	r3, [r2, r3]
 8003a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x318>)
 8003a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x31c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc ff1c 	bl	8000864 <HAL_InitTick>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	080050d4 	.word	0x080050d4
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	080051a8 	.word	0x080051a8
 8003a44:	20000000 	.word	0x20000000
 8003a48:	20000004 	.word	0x20000004

08003a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	b490      	push	{r4, r7}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a52:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a54:	1d3c      	adds	r4, r7, #4
 8003a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a5c:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a76:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d002      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x40>
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x46>
 8003a8a:	e02d      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a8e:	623b      	str	r3, [r7, #32]
      break;
 8003a90:	e02d      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	0c9b      	lsrs	r3, r3, #18
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003aa4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ab0:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0c5b      	lsrs	r3, r3, #17
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003abe:	4413      	add	r3, r2
 8003ac0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ac4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	4a0f      	ldr	r2, [pc, #60]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aca:	fb02 f203 	mul.w	r2, r2, r3
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	e004      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	623b      	str	r3, [r7, #32]
      break;
 8003ae6:	e002      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aea:	623b      	str	r3, [r7, #32]
      break;
 8003aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aee:	6a3b      	ldr	r3, [r7, #32]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3728      	adds	r7, #40	; 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc90      	pop	{r4, r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	0800510c 	.word	0x0800510c
 8003b00:	0800511c 	.word	0x0800511c
 8003b04:	40021000 	.word	0x40021000
 8003b08:	007a1200 	.word	0x007a1200
 8003b0c:	003d0900 	.word	0x003d0900

08003b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b14:	4b02      	ldr	r3, [pc, #8]	; (8003b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	20000000 	.word	0x20000000

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b28:	f7ff fff2 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4601      	mov	r1, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	0adb      	lsrs	r3, r3, #11
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4a03      	ldr	r2, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	080051b8 	.word	0x080051b8

08003b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <RCC_Delay+0x34>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <RCC_Delay+0x38>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0a5b      	lsrs	r3, r3, #9
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b68:	bf00      	nop
  }
  while (Delay --);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e5a      	subs	r2, r3, #1
 8003b6e:	60fa      	str	r2, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f9      	bne.n	8003b68 <RCC_Delay+0x1c>
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000000 	.word	0x20000000
 8003b84:	10624dd3 	.word	0x10624dd3

08003b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10f      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003bbc:	216c      	movs	r1, #108	; 0x6c
 8003bbe:	4873      	ldr	r0, [pc, #460]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003bc0:	f7fc fc92 	bl	80004e8 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8095 	beq.w	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d012      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be2:	d00d      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bec:	d008      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf6:	d003      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003bf8:	2172      	movs	r1, #114	; 0x72
 8003bfa:	4864      	ldr	r0, [pc, #400]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003bfc:	f7fc fc74 	bl	80004e8 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8003c00:	2300      	movs	r3, #0
 8003c02:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c04:	4b62      	ldr	r3, [pc, #392]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c10:	4b5f      	ldr	r3, [pc, #380]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4a5e      	ldr	r2, [pc, #376]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	61d3      	str	r3, [r2, #28]
 8003c1c:	4b5c      	ldr	r3, [pc, #368]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2c:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d118      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c38:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a55      	ldr	r2, [pc, #340]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c44:	f7fc fe50 	bl	80008e8 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	e008      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4c:	f7fc fe4c 	bl	80008e8 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e092      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5e:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c6a:	4b49      	ldr	r3, [pc, #292]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d02e      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d027      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c88:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c92:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c98:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c9e:	4a3c      	ldr	r2, [pc, #240]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d014      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cae:	f7fc fe1b 	bl	80008e8 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb6:	f7fc fe17 	bl	80008e8 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e05b      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ee      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	492a      	ldr	r1, [pc, #168]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d105      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf0:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01f      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d012      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d18:	d00d      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d22:	d008      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003d2e:	21b9      	movs	r1, #185	; 0xb9
 8003d30:	4816      	ldr	r0, [pc, #88]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003d32:	f7fc fbd9 	bl	80004e8 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d36:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	4913      	ldr	r1, [pc, #76]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d016      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5c:	d008      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d66:	f240 1115 	movw	r1, #277	; 0x115
 8003d6a:	4808      	ldr	r0, [pc, #32]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003d6c:	f7fc fbbc 	bl	80004e8 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4904      	ldr	r1, [pc, #16]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	08005120 	.word	0x08005120
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
 8003d98:	42420440 	.word	0x42420440

08003d9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b08d      	sub	sp, #52	; 0x34
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003da4:	4b5f      	ldr	r3, [pc, #380]	; (8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 8003da6:	f107 040c 	add.w	r4, r7, #12
 8003daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003db0:	4b5d      	ldr	r3, [pc, #372]	; (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dba:	2300      	movs	r3, #0
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10e      	bne.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d104      	bne.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8003de8:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8003dec:	484f      	ldr	r0, [pc, #316]	; (8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 8003dee:	f7fc fb7b 	bl	80004e8 <assert_failed>

  switch (PeriphClk)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d07f      	beq.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d002      	beq.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d048      	beq.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e00:	e08b      	b.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      temp_reg = RCC->CFGR;
 8003e02:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e08:	4b49      	ldr	r3, [pc, #292]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d07f      	beq.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	0c9b      	lsrs	r3, r3, #18
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e20:	4413      	add	r3, r2
 8003e22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e26:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d018      	beq.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e32:	4b3f      	ldr	r3, [pc, #252]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	0c5b      	lsrs	r3, r3, #17
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e40:	4413      	add	r3, r2
 8003e42:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e52:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	e004      	b.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	4a34      	ldr	r2, [pc, #208]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e6e:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7a:	d102      	bne.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = pllclk;
 8003e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e80:	e048      	b.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          frequency = (pllclk * 2) / 3;
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4a2d      	ldr	r2, [pc, #180]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e90:	e040      	b.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
      temp_reg = RCC->BDCR;
 8003e92:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	d108      	bne.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSE_VALUE;
 8003eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb4:	e01f      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        frequency = LSI_VALUE;
 8003ece:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed4:	e00f      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee0:	d11a      	bne.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8003ee2:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d014      	beq.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
        frequency = HSE_VALUE / 128U;
 8003eee:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ef4:	e010      	b.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8003ef6:	e00f      	b.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ef8:	f7ff fe14 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	0b9b      	lsrs	r3, r3, #14
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f12:	e002      	b.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 8003f14:	bf00      	nop
 8003f16:	e000      	b.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 8003f18:	bf00      	nop
    }
  }
  return (uint32_t) frequency;
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3734      	adds	r7, #52	; 0x34
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd90      	pop	{r4, r7, pc}
 8003f24:	0800515c 	.word	0x0800515c
 8003f28:	0800516c 	.word	0x0800516c
 8003f2c:	08005120 	.word	0x08005120
 8003f30:	40021000 	.word	0x40021000
 8003f34:	007a1200 	.word	0x007a1200
 8003f38:	003d0900 	.word	0x003d0900
 8003f3c:	aaaaaaab 	.word	0xaaaaaaab

08003f40 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0b4      	b.n	80040c0 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a5b      	ldr	r2, [pc, #364]	; (80040c8 <HAL_RTC_Init+0x188>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_RTC_Init+0x2a>
 8003f60:	f240 111d 	movw	r1, #285	; 0x11d
 8003f64:	4859      	ldr	r0, [pc, #356]	; (80040cc <HAL_RTC_Init+0x18c>)
 8003f66:	f7fc fabf 	bl	80004e8 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d012      	beq.n	8003f98 <HAL_RTC_Init+0x58>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b80      	cmp	r3, #128	; 0x80
 8003f78:	d00e      	beq.n	8003f98 <HAL_RTC_Init+0x58>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f82:	d009      	beq.n	8003f98 <HAL_RTC_Init+0x58>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8c:	d004      	beq.n	8003f98 <HAL_RTC_Init+0x58>
 8003f8e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003f92:	484e      	ldr	r0, [pc, #312]	; (80040cc <HAL_RTC_Init+0x18c>)
 8003f94:	f7fc faa8 	bl	80004e8 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fa0:	d309      	bcc.n	8003fb6 <HAL_RTC_Init+0x76>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003faa:	d004      	beq.n	8003fb6 <HAL_RTC_Init+0x76>
 8003fac:	f240 111f 	movw	r1, #287	; 0x11f
 8003fb0:	4846      	ldr	r0, [pc, #280]	; (80040cc <HAL_RTC_Init+0x18c>)
 8003fb2:	f7fc fa99 	bl	80004e8 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	7c5b      	ldrb	r3, [r3, #17]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fc fae2 	bl	8000590 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fd07 	bl	80049e6 <HAL_RTC_WaitForSynchro>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e06b      	b.n	80040c0 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fdc0 	bl	8004b6e <RTC_EnterInitMode>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d004      	beq.n	8003ffe <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e060      	b.n	80040c0 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0207 	bic.w	r2, r2, #7
 800400c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004016:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_RTC_Init+0x190>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <HAL_RTC_Init+0x190>)
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004022:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <HAL_RTC_Init+0x190>)
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4928      	ldr	r1, [pc, #160]	; (80040d0 <HAL_RTC_Init+0x190>)
 8004030:	4313      	orrs	r3, r2
 8004032:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d003      	beq.n	8004046 <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	e00e      	b.n	8004064 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004046:	2001      	movs	r0, #1
 8004048:	f7ff fea8 	bl	8003d9c <HAL_RCCEx_GetPeriphCLKFreq>
 800404c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2204      	movs	r2, #4
 8004058:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e030      	b.n	80040c0 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b01      	subs	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 010f 	bic.w	r1, r3, #15
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	0c1a      	lsrs	r2, r3, #16
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	041b      	lsls	r3, r3, #16
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	b291      	uxth	r1, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	430b      	orrs	r3, r1
 800408e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fd94 	bl	8004bbe <RTC_ExitInitMode>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2204      	movs	r2, #4
 80040a0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00c      	b.n	80040c0 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80040be:	2300      	movs	r3, #0
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40002800 	.word	0x40002800
 80040cc:	08005170 	.word	0x08005170
 80040d0:	40006c00 	.word	0x40006c00

080040d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_RTC_SetTime+0x20>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0cd      	b.n	8004294 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_RTC_SetTime+0x3a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d004      	beq.n	800410e <HAL_RTC_SetTime+0x3a>
 8004104:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004108:	4864      	ldr	r0, [pc, #400]	; (800429c <HAL_RTC_SetTime+0x1c8>)
 800410a:	f7fc f9ed 	bl	80004e8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	7c1b      	ldrb	r3, [r3, #16]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_RTC_SetTime+0x46>
 8004116:	2302      	movs	r3, #2
 8004118:	e0bc      	b.n	8004294 <HAL_RTC_SetTime+0x1c0>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2202      	movs	r2, #2
 8004124:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d12e      	bne.n	800418a <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b17      	cmp	r3, #23
 8004132:	d904      	bls.n	800413e <HAL_RTC_SetTime+0x6a>
 8004134:	f240 21d3 	movw	r1, #723	; 0x2d3
 8004138:	4858      	ldr	r0, [pc, #352]	; (800429c <HAL_RTC_SetTime+0x1c8>)
 800413a:	f7fc f9d5 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b3b      	cmp	r3, #59	; 0x3b
 8004144:	d904      	bls.n	8004150 <HAL_RTC_SetTime+0x7c>
 8004146:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800414a:	4854      	ldr	r0, [pc, #336]	; (800429c <HAL_RTC_SetTime+0x1c8>)
 800414c:	f7fc f9cc 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	789b      	ldrb	r3, [r3, #2]
 8004154:	2b3b      	cmp	r3, #59	; 0x3b
 8004156:	d904      	bls.n	8004162 <HAL_RTC_SetTime+0x8e>
 8004158:	f240 21d5 	movw	r1, #725	; 0x2d5
 800415c:	484f      	ldr	r0, [pc, #316]	; (800429c <HAL_RTC_SetTime+0x1c8>)
 800415e:	f7fc f9c3 	bl	80004e8 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800416c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	4619      	mov	r1, r3
 8004176:	460b      	mov	r3, r1
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a5b      	subs	r3, r3, r1
 800417c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800417e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004184:	4413      	add	r3, r2
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	e045      	b.n	8004216 <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fd5a 	bl	8004c48 <RTC_Bcd2ToByte>
 8004194:	4603      	mov	r3, r0
 8004196:	2b17      	cmp	r3, #23
 8004198:	d904      	bls.n	80041a4 <HAL_RTC_SetTime+0xd0>
 800419a:	f240 21dd 	movw	r1, #733	; 0x2dd
 800419e:	483f      	ldr	r0, [pc, #252]	; (800429c <HAL_RTC_SetTime+0x1c8>)
 80041a0:	f7fc f9a2 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fd4d 	bl	8004c48 <RTC_Bcd2ToByte>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b3b      	cmp	r3, #59	; 0x3b
 80041b2:	d904      	bls.n	80041be <HAL_RTC_SetTime+0xea>
 80041b4:	f240 21de 	movw	r1, #734	; 0x2de
 80041b8:	4838      	ldr	r0, [pc, #224]	; (800429c <HAL_RTC_SetTime+0x1c8>)
 80041ba:	f7fc f995 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	789b      	ldrb	r3, [r3, #2]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fd40 	bl	8004c48 <RTC_Bcd2ToByte>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b3b      	cmp	r3, #59	; 0x3b
 80041cc:	d904      	bls.n	80041d8 <HAL_RTC_SetTime+0x104>
 80041ce:	f240 21df 	movw	r1, #735	; 0x2df
 80041d2:	4832      	ldr	r0, [pc, #200]	; (800429c <HAL_RTC_SetTime+0x1c8>)
 80041d4:	f7fc f988 	bl	80004e8 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fd33 	bl	8004c48 <RTC_Bcd2ToByte>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80041ea:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fd28 	bl	8004c48 <RTC_Bcd2ToByte>
 80041f8:	4603      	mov	r3, r0
 80041fa:	461a      	mov	r2, r3
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004204:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	789b      	ldrb	r3, [r3, #2]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fd1c 	bl	8004c48 <RTC_Bcd2ToByte>
 8004210:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004212:	4423      	add	r3, r4
 8004214:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004216:	6979      	ldr	r1, [r7, #20]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fc41 	bl	8004aa0 <RTC_WriteTimeCounter>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2204      	movs	r2, #4
 8004228:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e02f      	b.n	8004294 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0205 	bic.w	r2, r2, #5
 8004242:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fc52 	bl	8004aee <RTC_ReadAlarmCounter>
 800424a:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d018      	beq.n	8004286 <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	429a      	cmp	r2, r3
 800425a:	d214      	bcs.n	8004286 <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004262:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004266:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004268:	6939      	ldr	r1, [r7, #16]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fc58 	bl	8004b20 <RTC_WriteAlarmCounter>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2204      	movs	r2, #4
 800427a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e006      	b.n	8004294 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004292:	2300      	movs	r3, #0
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	08005170 	.word	0x08005170

080042a0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_RTC_GetTime+0x28>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0c0      	b.n	800444e <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <HAL_RTC_GetTime+0x42>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d004      	beq.n	80042e2 <HAL_RTC_GetTime+0x42>
 80042d8:	f240 312d 	movw	r1, #813	; 0x32d
 80042dc:	485e      	ldr	r0, [pc, #376]	; (8004458 <HAL_RTC_GetTime+0x1b8>)
 80042de:	f7fc f903 	bl	80004e8 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0ac      	b.n	800444e <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fba3 	bl	8004a40 <RTC_ReadTimeCounter>
 80042fa:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	4a57      	ldr	r2, [pc, #348]	; (800445c <HAL_RTC_GetTime+0x1bc>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	0adb      	lsrs	r3, r3, #11
 8004306:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4b54      	ldr	r3, [pc, #336]	; (800445c <HAL_RTC_GetTime+0x1bc>)
 800430c:	fba3 1302 	umull	r1, r3, r3, r2
 8004310:	0adb      	lsrs	r3, r3, #11
 8004312:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	4a50      	ldr	r2, [pc, #320]	; (8004460 <HAL_RTC_GetTime+0x1c0>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4a4b      	ldr	r2, [pc, #300]	; (800445c <HAL_RTC_GetTime+0x1bc>)
 800432e:	fba2 1203 	umull	r1, r2, r2, r3
 8004332:	0ad2      	lsrs	r2, r2, #11
 8004334:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004338:	fb01 f202 	mul.w	r2, r1, r2
 800433c:	1a9a      	subs	r2, r3, r2
 800433e:	4b48      	ldr	r3, [pc, #288]	; (8004460 <HAL_RTC_GetTime+0x1c0>)
 8004340:	fba3 1302 	umull	r1, r3, r3, r2
 8004344:	0959      	lsrs	r1, r3, #5
 8004346:	460b      	mov	r3, r1
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a5b      	subs	r3, r3, r1
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	1ad1      	subs	r1, r2, r3
 8004350:	b2ca      	uxtb	r2, r1
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b17      	cmp	r3, #23
 800435a:	d955      	bls.n	8004408 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4a41      	ldr	r2, [pc, #260]	; (8004464 <HAL_RTC_GetTime+0x1c4>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004368:	6939      	ldr	r1, [r7, #16]
 800436a:	4b3e      	ldr	r3, [pc, #248]	; (8004464 <HAL_RTC_GetTime+0x1c4>)
 800436c:	fba3 2301 	umull	r2, r3, r3, r1
 8004370:	091a      	lsrs	r2, r3, #4
 8004372:	4613      	mov	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	1aca      	subs	r2, r1, r3
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fbb3 	bl	8004aee <RTC_ReadAlarmCounter>
 8004388:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d008      	beq.n	80043a4 <HAL_RTC_GetTime+0x104>
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	429a      	cmp	r2, r3
 8004398:	d904      	bls.n	80043a4 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e002      	b.n	80043aa <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80043a4:	f04f 33ff 	mov.w	r3, #4294967295
 80043a8:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	4a2e      	ldr	r2, [pc, #184]	; (8004468 <HAL_RTC_GetTime+0x1c8>)
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80043b8:	69b9      	ldr	r1, [r7, #24]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fb70 	bl	8004aa0 <RTC_WriteTimeCounter>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e041      	b.n	800444e <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d00c      	beq.n	80043ec <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4413      	add	r3, r2
 80043d8:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043da:	69f9      	ldr	r1, [r7, #28]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fb9f 	bl	8004b20 <RTC_WriteAlarmCounter>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e030      	b.n	800444e <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043ec:	69f9      	ldr	r1, [r7, #28]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fb96 	bl	8004b20 <RTC_WriteAlarmCounter>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e027      	b.n	800444e <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80043fe:	6979      	ldr	r1, [r7, #20]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fc3e 	bl	8004c82 <RTC_DateUpdate>
 8004406:	e003      	b.n	8004410 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01a      	beq.n	800444c <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fbf7 	bl	8004c0e <RTC_ByteToBcd2>
 8004420:	4603      	mov	r3, r0
 8004422:	461a      	mov	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fbee 	bl	8004c0e <RTC_ByteToBcd2>
 8004432:	4603      	mov	r3, r0
 8004434:	461a      	mov	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	789b      	ldrb	r3, [r3, #2]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fbe5 	bl	8004c0e <RTC_ByteToBcd2>
 8004444:	4603      	mov	r3, r0
 8004446:	461a      	mov	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	08005170 	.word	0x08005170
 800445c:	91a2b3c5 	.word	0x91a2b3c5
 8004460:	88888889 	.word	0x88888889
 8004464:	aaaaaaab 	.word	0xaaaaaaab
 8004468:	00015180 	.word	0x00015180

0800446c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_RTC_SetDate+0x24>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0fc      	b.n	800468e <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_RTC_SetDate+0x3e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d004      	beq.n	80044aa <HAL_RTC_SetDate+0x3e>
 80044a0:	f44f 7167 	mov.w	r1, #924	; 0x39c
 80044a4:	487c      	ldr	r0, [pc, #496]	; (8004698 <HAL_RTC_SetDate+0x22c>)
 80044a6:	f7fc f81f 	bl	80004e8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	7c1b      	ldrb	r3, [r3, #16]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_RTC_SetDate+0x4a>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e0eb      	b.n	800468e <HAL_RTC_SetDate+0x222>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2202      	movs	r2, #2
 80044c0:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d12f      	bne.n	8004528 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	78db      	ldrb	r3, [r3, #3]
 80044cc:	2b63      	cmp	r3, #99	; 0x63
 80044ce:	d904      	bls.n	80044da <HAL_RTC_SetDate+0x6e>
 80044d0:	f240 31a5 	movw	r1, #933	; 0x3a5
 80044d4:	4870      	ldr	r0, [pc, #448]	; (8004698 <HAL_RTC_SetDate+0x22c>)
 80044d6:	f7fc f807 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_RTC_SetDate+0x7e>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	2b0c      	cmp	r3, #12
 80044e8:	d904      	bls.n	80044f4 <HAL_RTC_SetDate+0x88>
 80044ea:	f240 31a6 	movw	r1, #934	; 0x3a6
 80044ee:	486a      	ldr	r0, [pc, #424]	; (8004698 <HAL_RTC_SetDate+0x22c>)
 80044f0:	f7fb fffa 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	789b      	ldrb	r3, [r3, #2]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_RTC_SetDate+0x98>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	789b      	ldrb	r3, [r3, #2]
 8004500:	2b1f      	cmp	r3, #31
 8004502:	d904      	bls.n	800450e <HAL_RTC_SetDate+0xa2>
 8004504:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004508:	4863      	ldr	r0, [pc, #396]	; (8004698 <HAL_RTC_SetDate+0x22c>)
 800450a:	f7fb ffed 	bl	80004e8 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	78da      	ldrb	r2, [r3, #3]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	785a      	ldrb	r2, [r3, #1]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	789a      	ldrb	r2, [r3, #2]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	739a      	strb	r2, [r3, #14]
 8004526:	e051      	b.n	80045cc <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	78db      	ldrb	r3, [r3, #3]
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fb8b 	bl	8004c48 <RTC_Bcd2ToByte>
 8004532:	4603      	mov	r3, r0
 8004534:	2b63      	cmp	r3, #99	; 0x63
 8004536:	d904      	bls.n	8004542 <HAL_RTC_SetDate+0xd6>
 8004538:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 800453c:	4856      	ldr	r0, [pc, #344]	; (8004698 <HAL_RTC_SetDate+0x22c>)
 800453e:	f7fb ffd3 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	785b      	ldrb	r3, [r3, #1]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fb7e 	bl	8004c48 <RTC_Bcd2ToByte>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_RTC_SetDate+0xf6>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	785b      	ldrb	r3, [r3, #1]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fb76 	bl	8004c48 <RTC_Bcd2ToByte>
 800455c:	4603      	mov	r3, r0
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d904      	bls.n	800456c <HAL_RTC_SetDate+0x100>
 8004562:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004566:	484c      	ldr	r0, [pc, #304]	; (8004698 <HAL_RTC_SetDate+0x22c>)
 8004568:	f7fb ffbe 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	789b      	ldrb	r3, [r3, #2]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fb69 	bl	8004c48 <RTC_Bcd2ToByte>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <HAL_RTC_SetDate+0x120>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	789b      	ldrb	r3, [r3, #2]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fb61 	bl	8004c48 <RTC_Bcd2ToByte>
 8004586:	4603      	mov	r3, r0
 8004588:	2b1f      	cmp	r3, #31
 800458a:	d904      	bls.n	8004596 <HAL_RTC_SetDate+0x12a>
 800458c:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004590:	4841      	ldr	r0, [pc, #260]	; (8004698 <HAL_RTC_SetDate+0x22c>)
 8004592:	f7fb ffa9 	bl	80004e8 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	78db      	ldrb	r3, [r3, #3]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fb54 	bl	8004c48 <RTC_Bcd2ToByte>
 80045a0:	4603      	mov	r3, r0
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fb4b 	bl	8004c48 <RTC_Bcd2ToByte>
 80045b2:	4603      	mov	r3, r0
 80045b4:	461a      	mov	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	789b      	ldrb	r3, [r3, #2]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fb42 	bl	8004c48 <RTC_Bcd2ToByte>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	7bdb      	ldrb	r3, [r3, #15]
 80045d0:	4618      	mov	r0, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	7b59      	ldrb	r1, [r3, #13]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	7b9b      	ldrb	r3, [r3, #14]
 80045da:	461a      	mov	r2, r3
 80045dc:	f000 fc2c 	bl	8004e38 <RTC_WeekDayNum>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	7b1a      	ldrb	r2, [r3, #12]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fa25 	bl	8004a40 <RTC_ReadTimeCounter>
 80045f6:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4a28      	ldr	r2, [pc, #160]	; (800469c <HAL_RTC_SetDate+0x230>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	0adb      	lsrs	r3, r3, #11
 8004602:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b18      	cmp	r3, #24
 8004608:	d93a      	bls.n	8004680 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	4a24      	ldr	r2, [pc, #144]	; (80046a0 <HAL_RTC_SetDate+0x234>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	091b      	lsrs	r3, r3, #4
 8004614:	4a23      	ldr	r2, [pc, #140]	; (80046a4 <HAL_RTC_SetDate+0x238>)
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004620:	69f9      	ldr	r1, [r7, #28]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa3c 	bl	8004aa0 <RTC_WriteTimeCounter>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2204      	movs	r2, #4
 8004632:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e027      	b.n	800468e <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fa55 	bl	8004aee <RTC_ReadAlarmCounter>
 8004644:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d018      	beq.n	8004680 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	429a      	cmp	r2, r3
 8004654:	d214      	bcs.n	8004680 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800465c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004660:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004662:	69b9      	ldr	r1, [r7, #24]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa5b 	bl	8004b20 <RTC_WriteAlarmCounter>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2204      	movs	r2, #4
 8004674:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e006      	b.n	800468e <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	08005170 	.word	0x08005170
 800469c:	91a2b3c5 	.word	0x91a2b3c5
 80046a0:	aaaaaaab 	.word	0xaaaaaaab
 80046a4:	00015180 	.word	0x00015180

080046a8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80046b4:	f107 0314 	add.w	r3, r7, #20
 80046b8:	2100      	movs	r1, #0
 80046ba:	460a      	mov	r2, r1
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	460a      	mov	r2, r1
 80046c0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_RTC_GetDate+0x26>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e045      	b.n	800475e <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_RTC_GetDate+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d004      	beq.n	80046e8 <HAL_RTC_GetDate+0x40>
 80046de:	f240 410e 	movw	r1, #1038	; 0x40e
 80046e2:	4821      	ldr	r0, [pc, #132]	; (8004768 <HAL_RTC_GetDate+0xc0>)
 80046e4:	f7fb ff00 	bl	80004e8 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	2200      	movs	r2, #0
 80046ee:	4619      	mov	r1, r3
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff fdd5 	bl	80042a0 <HAL_RTC_GetTime>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e02e      	b.n	800475e <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	7b1a      	ldrb	r2, [r3, #12]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	7bda      	ldrb	r2, [r3, #15]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	7b5a      	ldrb	r2, [r3, #13]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	7b9a      	ldrb	r2, [r3, #14]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01a      	beq.n	800475c <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	78db      	ldrb	r3, [r3, #3]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fa6f 	bl	8004c0e <RTC_ByteToBcd2>
 8004730:	4603      	mov	r3, r0
 8004732:	461a      	mov	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fa66 	bl	8004c0e <RTC_ByteToBcd2>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	789b      	ldrb	r3, [r3, #2]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fa5d 	bl	8004c0e <RTC_ByteToBcd2>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	08005170 	.word	0x08005170

0800476c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800477c:	f107 0314 	add.w	r3, r7, #20
 8004780:	2100      	movs	r1, #0
 8004782:	460a      	mov	r2, r1
 8004784:	801a      	strh	r2, [r3, #0]
 8004786:	460a      	mov	r2, r1
 8004788:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_RTC_SetAlarm_IT+0x2a>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e0ec      	b.n	8004974 <HAL_RTC_SetAlarm_IT+0x208>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_RTC_SetAlarm_IT+0x44>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d004      	beq.n	80047b0 <HAL_RTC_SetAlarm_IT+0x44>
 80047a6:	f240 41ac 	movw	r1, #1196	; 0x4ac
 80047aa:	4874      	ldr	r0, [pc, #464]	; (800497c <HAL_RTC_SetAlarm_IT+0x210>)
 80047ac:	f7fb fe9c 	bl	80004e8 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <HAL_RTC_SetAlarm_IT+0x56>
 80047b8:	f240 41ad 	movw	r1, #1197	; 0x4ad
 80047bc:	486f      	ldr	r0, [pc, #444]	; (800497c <HAL_RTC_SetAlarm_IT+0x210>)
 80047be:	f7fb fe93 	bl	80004e8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	7c1b      	ldrb	r3, [r3, #16]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_RTC_SetAlarm_IT+0x62>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e0d2      	b.n	8004974 <HAL_RTC_SetAlarm_IT+0x208>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2202      	movs	r2, #2
 80047d8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80047da:	f107 0314 	add.w	r3, r7, #20
 80047de:	2200      	movs	r2, #0
 80047e0:	4619      	mov	r1, r3
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff fd5c 	bl	80042a0 <HAL_RTC_GetTime>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_RTC_SetAlarm_IT+0x86>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0c0      	b.n	8004974 <HAL_RTC_SetAlarm_IT+0x208>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80047f2:	7d3b      	ldrb	r3, [r7, #20]
 80047f4:	461a      	mov	r2, r3
 80047f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80047fa:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80047fe:	7d7b      	ldrb	r3, [r7, #21]
 8004800:	4619      	mov	r1, r3
 8004802:	460b      	mov	r3, r1
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a5b      	subs	r3, r3, r1
 8004808:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800480a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800480c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800480e:	4413      	add	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d12e      	bne.n	8004876 <HAL_RTC_SetAlarm_IT+0x10a>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b17      	cmp	r3, #23
 800481e:	d904      	bls.n	800482a <HAL_RTC_SetAlarm_IT+0xbe>
 8004820:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8004824:	4855      	ldr	r0, [pc, #340]	; (800497c <HAL_RTC_SetAlarm_IT+0x210>)
 8004826:	f7fb fe5f 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	2b3b      	cmp	r3, #59	; 0x3b
 8004830:	d904      	bls.n	800483c <HAL_RTC_SetAlarm_IT+0xd0>
 8004832:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8004836:	4851      	ldr	r0, [pc, #324]	; (800497c <HAL_RTC_SetAlarm_IT+0x210>)
 8004838:	f7fb fe56 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	789b      	ldrb	r3, [r3, #2]
 8004840:	2b3b      	cmp	r3, #59	; 0x3b
 8004842:	d904      	bls.n	800484e <HAL_RTC_SetAlarm_IT+0xe2>
 8004844:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8004848:	484c      	ldr	r0, [pc, #304]	; (800497c <HAL_RTC_SetAlarm_IT+0x210>)
 800484a:	f7fb fe4d 	bl	80004e8 <assert_failed>

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004858:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	4619      	mov	r1, r3
 8004862:	460b      	mov	r3, r1
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a5b      	subs	r3, r3, r1
 8004868:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800486a:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004870:	4413      	add	r3, r2
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e045      	b.n	8004902 <HAL_RTC_SetAlarm_IT+0x196>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f9e4 	bl	8004c48 <RTC_Bcd2ToByte>
 8004880:	4603      	mov	r3, r0
 8004882:	2b17      	cmp	r3, #23
 8004884:	d904      	bls.n	8004890 <HAL_RTC_SetAlarm_IT+0x124>
 8004886:	f240 41cb 	movw	r1, #1227	; 0x4cb
 800488a:	483c      	ldr	r0, [pc, #240]	; (800497c <HAL_RTC_SetAlarm_IT+0x210>)
 800488c:	f7fb fe2c 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 f9d7 	bl	8004c48 <RTC_Bcd2ToByte>
 800489a:	4603      	mov	r3, r0
 800489c:	2b3b      	cmp	r3, #59	; 0x3b
 800489e:	d904      	bls.n	80048aa <HAL_RTC_SetAlarm_IT+0x13e>
 80048a0:	f240 41cc 	movw	r1, #1228	; 0x4cc
 80048a4:	4835      	ldr	r0, [pc, #212]	; (800497c <HAL_RTC_SetAlarm_IT+0x210>)
 80048a6:	f7fb fe1f 	bl	80004e8 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	789b      	ldrb	r3, [r3, #2]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f9ca 	bl	8004c48 <RTC_Bcd2ToByte>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b3b      	cmp	r3, #59	; 0x3b
 80048b8:	d904      	bls.n	80048c4 <HAL_RTC_SetAlarm_IT+0x158>
 80048ba:	f240 41cd 	movw	r1, #1229	; 0x4cd
 80048be:	482f      	ldr	r0, [pc, #188]	; (800497c <HAL_RTC_SetAlarm_IT+0x210>)
 80048c0:	f7fb fe12 	bl	80004e8 <assert_failed>

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 f9bd 	bl	8004c48 <RTC_Bcd2ToByte>
 80048ce:	4603      	mov	r3, r0
 80048d0:	461a      	mov	r2, r3
 80048d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80048d6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	785b      	ldrb	r3, [r3, #1]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f9b2 	bl	8004c48 <RTC_Bcd2ToByte>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80048f0:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	789b      	ldrb	r3, [r3, #2]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f9a6 	bl	8004c48 <RTC_Bcd2ToByte>
 80048fc:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80048fe:	4423      	add	r3, r4
 8004900:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	429a      	cmp	r2, r3
 8004908:	d205      	bcs.n	8004916 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004910:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004914:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004916:	69f9      	ldr	r1, [r7, #28]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f901 	bl	8004b20 <RTC_WriteAlarmCounter>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <HAL_RTC_SetAlarm_IT+0x1c8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2204      	movs	r2, #4
 8004928:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e01f      	b.n	8004974 <HAL_RTC_SetAlarm_IT+0x208>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0202 	mvn.w	r2, #2
 800493c:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0202 	orr.w	r2, r2, #2
 800494c:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_RTC_SetAlarm_IT+0x214>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a0b      	ldr	r2, [pc, #44]	; (8004980 <HAL_RTC_SetAlarm_IT+0x214>)
 8004954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004958:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800495a:	4b09      	ldr	r3, [pc, #36]	; (8004980 <HAL_RTC_SetAlarm_IT+0x214>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	4a08      	ldr	r2, [pc, #32]	; (8004980 <HAL_RTC_SetAlarm_IT+0x214>)
 8004960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004964:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004972:	2300      	movs	r3, #0
  }
}
 8004974:	4618      	mov	r0, r3
 8004976:	3724      	adds	r7, #36	; 0x24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd90      	pop	{r4, r7, pc}
 800497c:	08005170 	.word	0x08005170
 8004980:	40010400 	.word	0x40010400

08004984 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00e      	beq.n	80049b8 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f813 	bl	80049d4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f06f 0202 	mvn.w	r2, #2
 80049b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80049ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049be:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	745a      	strb	r2, [r3, #17]
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40010400 	.word	0x40010400

080049d4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e01d      	b.n	8004a38 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0208 	bic.w	r2, r2, #8
 8004a0a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004a0c:	f7fb ff6c 	bl	80008e8 <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004a12:	e009      	b.n	8004a28 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a14:	f7fb ff68 	bl	80008e8 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a22:	d901      	bls.n	8004a28 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e007      	b.n	8004a38 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ee      	beq.n	8004a14 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	827b      	strh	r3, [r7, #18]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	823b      	strh	r3, [r7, #16]
 8004a50:	2300      	movs	r3, #0
 8004a52:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004a70:	8a7a      	ldrh	r2, [r7, #18]
 8004a72:	8a3b      	ldrh	r3, [r7, #16]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d008      	beq.n	8004a8a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004a78:	8a3b      	ldrh	r3, [r7, #16]
 8004a7a:	041a      	lsls	r2, r3, #16
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e004      	b.n	8004a94 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004a8a:	8a7b      	ldrh	r3, [r7, #18]
 8004a8c:	041a      	lsls	r2, r3, #16
 8004a8e:	89fb      	ldrh	r3, [r7, #14]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004a94:	697b      	ldr	r3, [r7, #20]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f85d 	bl	8004b6e <RTC_EnterInitMode>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
 8004abe:	e011      	b.n	8004ae4 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	0c12      	lsrs	r2, r2, #16
 8004ac8:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f872 	bl	8004bbe <RTC_ExitInitMode>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	81fb      	strh	r3, [r7, #14]
 8004afa:	2300      	movs	r3, #0
 8004afc:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004b0e:	89fb      	ldrh	r3, [r7, #14]
 8004b10:	041a      	lsls	r2, r3, #16
 8004b12:	89bb      	ldrh	r3, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f81d 	bl	8004b6e <RTC_EnterInitMode>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	73fb      	strb	r3, [r7, #15]
 8004b3e:	e011      	b.n	8004b64 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	0c12      	lsrs	r2, r2, #16
 8004b48:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	b292      	uxth	r2, r2
 8004b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f832 	bl	8004bbe <RTC_ExitInitMode>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004b7a:	f7fb feb5 	bl	80008e8 <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004b80:	e009      	b.n	8004b96 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004b82:	f7fb feb1 	bl	80008e8 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b90:	d901      	bls.n	8004b96 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e00f      	b.n	8004bb6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0ee      	beq.n	8004b82 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0210 	orr.w	r2, r2, #16
 8004bb2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0210 	bic.w	r2, r2, #16
 8004bd8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004bda:	f7fb fe85 	bl	80008e8 <HAL_GetTick>
 8004bde:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004be0:	e009      	b.n	8004bf6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004be2:	f7fb fe81 	bl	80008e8 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bf0:	d901      	bls.n	8004bf6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e007      	b.n	8004c06 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ee      	beq.n	8004be2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	4603      	mov	r3, r0
 8004c16:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004c1c:	e005      	b.n	8004c2a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	3b0a      	subs	r3, #10
 8004c28:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	2b09      	cmp	r3, #9
 8004c2e:	d8f6      	bhi.n	8004c1e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	b2db      	uxtb	r3, r3
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr

08004c48 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	b2db      	uxtb	r3, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr

08004c82 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b086      	sub	sp, #24
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	7bdb      	ldrb	r3, [r3, #15]
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	7b5b      	ldrb	r3, [r3, #13]
 8004ca6:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	7b9b      	ldrb	r3, [r3, #14]
 8004cac:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	e06f      	b.n	8004d94 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d011      	beq.n	8004cde <RTC_DateUpdate+0x5c>
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d00e      	beq.n	8004cde <RTC_DateUpdate+0x5c>
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d00b      	beq.n	8004cde <RTC_DateUpdate+0x5c>
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b07      	cmp	r3, #7
 8004cca:	d008      	beq.n	8004cde <RTC_DateUpdate+0x5c>
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d005      	beq.n	8004cde <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b0a      	cmp	r3, #10
 8004cd6:	d002      	beq.n	8004cde <RTC_DateUpdate+0x5c>
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d117      	bne.n	8004d0e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b1e      	cmp	r3, #30
 8004ce2:	d803      	bhi.n	8004cec <RTC_DateUpdate+0x6a>
      {
        day++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004cea:	e050      	b.n	8004d8e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d005      	beq.n	8004cfe <RTC_DateUpdate+0x7c>
        {
          month++;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004cfc:	e047      	b.n	8004d8e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004d02:	2301      	movs	r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
          year++;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004d0c:	e03f      	b.n	8004d8e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d008      	beq.n	8004d26 <RTC_DateUpdate+0xa4>
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d005      	beq.n	8004d26 <RTC_DateUpdate+0xa4>
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b09      	cmp	r3, #9
 8004d1e:	d002      	beq.n	8004d26 <RTC_DateUpdate+0xa4>
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b0b      	cmp	r3, #11
 8004d24:	d10c      	bne.n	8004d40 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b1d      	cmp	r3, #29
 8004d2a:	d803      	bhi.n	8004d34 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004d32:	e02c      	b.n	8004d8e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	3301      	adds	r3, #1
 8004d38:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004d3e:	e026      	b.n	8004d8e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d123      	bne.n	8004d8e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b1b      	cmp	r3, #27
 8004d4a:	d803      	bhi.n	8004d54 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e01c      	b.n	8004d8e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b1c      	cmp	r3, #28
 8004d58:	d111      	bne.n	8004d7e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 f838 	bl	8004dd4 <RTC_IsLeapYear>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e00d      	b.n	8004d8e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3301      	adds	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e007      	b.n	8004d8e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b1d      	cmp	r3, #29
 8004d82:	d104      	bne.n	8004d8e <RTC_DateUpdate+0x10c>
      {
        month++;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	3301      	adds	r3, #1
 8004d88:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	3301      	adds	r3, #1
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d38b      	bcc.n	8004cb4 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6978      	ldr	r0, [r7, #20]
 8004dc0:	f000 f83a 	bl	8004e38 <RTC_WeekDayNum>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	731a      	strb	r2, [r3, #12]
}
 8004dcc:	bf00      	nop
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e01d      	b.n	8004e2a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <RTC_IsLeapYear+0x60>)
 8004df2:	fba2 1203 	umull	r1, r2, r2, r3
 8004df6:	0952      	lsrs	r2, r2, #5
 8004df8:	2164      	movs	r1, #100	; 0x64
 8004dfa:	fb01 f202 	mul.w	r2, r1, r2
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e00f      	b.n	8004e2a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <RTC_IsLeapYear+0x60>)
 8004e0e:	fba2 1203 	umull	r1, r2, r2, r3
 8004e12:	09d2      	lsrs	r2, r2, #7
 8004e14:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004e18:	fb01 f202 	mul.w	r2, r1, r2
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004e28:	2300      	movs	r3, #0
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	51eb851f 	.word	0x51eb851f

08004e38 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	70fb      	strb	r3, [r7, #3]
 8004e44:	4613      	mov	r3, r2
 8004e46:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004e56:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d82d      	bhi.n	8004eba <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	4613      	mov	r3, r2
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	4413      	add	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	4a2c      	ldr	r2, [pc, #176]	; (8004f1c <RTC_WeekDayNum+0xe4>)
 8004e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e70:	085a      	lsrs	r2, r3, #1
 8004e72:	78bb      	ldrb	r3, [r7, #2]
 8004e74:	441a      	add	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	441a      	add	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	4926      	ldr	r1, [pc, #152]	; (8004f20 <RTC_WeekDayNum+0xe8>)
 8004e88:	fba1 1303 	umull	r1, r3, r1, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4922      	ldr	r1, [pc, #136]	; (8004f20 <RTC_WeekDayNum+0xe8>)
 8004e96:	fba1 1303 	umull	r1, r3, r1, r3
 8004e9a:	09db      	lsrs	r3, r3, #7
 8004e9c:	4413      	add	r3, r2
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <RTC_WeekDayNum+0xec>)
 8004ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea6:	1ad1      	subs	r1, r2, r3
 8004ea8:	0849      	lsrs	r1, r1, #1
 8004eaa:	440b      	add	r3, r1
 8004eac:	0899      	lsrs	r1, r3, #2
 8004eae:	460b      	mov	r3, r1
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	1a5b      	subs	r3, r3, r1
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e029      	b.n	8004f0e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4413      	add	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <RTC_WeekDayNum+0xe4>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	085a      	lsrs	r2, r3, #1
 8004ece:	78bb      	ldrb	r3, [r7, #2]
 8004ed0:	441a      	add	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4910      	ldr	r1, [pc, #64]	; (8004f20 <RTC_WeekDayNum+0xe8>)
 8004ee0:	fba1 1303 	umull	r1, r3, r1, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	1ad2      	subs	r2, r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	490d      	ldr	r1, [pc, #52]	; (8004f20 <RTC_WeekDayNum+0xe8>)
 8004eec:	fba1 1303 	umull	r1, r3, r1, r3
 8004ef0:	09db      	lsrs	r3, r3, #7
 8004ef2:	4413      	add	r3, r2
 8004ef4:	1c9a      	adds	r2, r3, #2
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <RTC_WeekDayNum+0xec>)
 8004ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8004efc:	1ad1      	subs	r1, r2, r3
 8004efe:	0849      	lsrs	r1, r1, #1
 8004f00:	440b      	add	r3, r1
 8004f02:	0899      	lsrs	r1, r3, #2
 8004f04:	460b      	mov	r3, r1
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	1a5b      	subs	r3, r3, r1
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	b2db      	uxtb	r3, r3
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	38e38e39 	.word	0x38e38e39
 8004f20:	51eb851f 	.word	0x51eb851f
 8004f24:	24924925 	.word	0x24924925

08004f28 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d024      	beq.n	8004f88 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01d      	beq.n	8004f88 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f821 	bl	8004fa2 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0204 	mvn.w	r2, #4
 8004f68:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	745a      	strb	r2, [r3, #17]
 8004f70:	e005      	b.n	8004f7e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f80c 	bl	8004f90 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f06f 0201 	mvn.w	r2, #1
 8004f86:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <__libc_init_array>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	2500      	movs	r5, #0
 8004fb8:	4e0c      	ldr	r6, [pc, #48]	; (8004fec <__libc_init_array+0x38>)
 8004fba:	4c0d      	ldr	r4, [pc, #52]	; (8004ff0 <__libc_init_array+0x3c>)
 8004fbc:	1ba4      	subs	r4, r4, r6
 8004fbe:	10a4      	asrs	r4, r4, #2
 8004fc0:	42a5      	cmp	r5, r4
 8004fc2:	d109      	bne.n	8004fd8 <__libc_init_array+0x24>
 8004fc4:	f000 f822 	bl	800500c <_init>
 8004fc8:	2500      	movs	r5, #0
 8004fca:	4e0a      	ldr	r6, [pc, #40]	; (8004ff4 <__libc_init_array+0x40>)
 8004fcc:	4c0a      	ldr	r4, [pc, #40]	; (8004ff8 <__libc_init_array+0x44>)
 8004fce:	1ba4      	subs	r4, r4, r6
 8004fd0:	10a4      	asrs	r4, r4, #2
 8004fd2:	42a5      	cmp	r5, r4
 8004fd4:	d105      	bne.n	8004fe2 <__libc_init_array+0x2e>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fdc:	4798      	blx	r3
 8004fde:	3501      	adds	r5, #1
 8004fe0:	e7ee      	b.n	8004fc0 <__libc_init_array+0xc>
 8004fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fe6:	4798      	blx	r3
 8004fe8:	3501      	adds	r5, #1
 8004fea:	e7f2      	b.n	8004fd2 <__libc_init_array+0x1e>
 8004fec:	080051c0 	.word	0x080051c0
 8004ff0:	080051c0 	.word	0x080051c0
 8004ff4:	080051c0 	.word	0x080051c0
 8004ff8:	080051c4 	.word	0x080051c4

08004ffc <memset>:
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4402      	add	r2, r0
 8005000:	4293      	cmp	r3, r2
 8005002:	d100      	bne.n	8005006 <memset+0xa>
 8005004:	4770      	bx	lr
 8005006:	f803 1b01 	strb.w	r1, [r3], #1
 800500a:	e7f9      	b.n	8005000 <memset+0x4>

0800500c <_init>:
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500e:	bf00      	nop
 8005010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005012:	bc08      	pop	{r3}
 8005014:	469e      	mov	lr, r3
 8005016:	4770      	bx	lr

08005018 <_fini>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	bf00      	nop
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr
