
Cubex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e34  08005e34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e34  08005e34  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e34  08005e34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08005e48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08005e48  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110a3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a26  00000000  00000000  000310d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008f1c  00000000  00000000  00033afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000010a8  00000000  00000000  0003ca20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000f40  00000000  00000000  0003dac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3ba  00000000  00000000  0003ea08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000047a7  00000000  00000000  00049dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004e569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004338  00000000  00000000  0004e5e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b9c 	.word	0x08005b9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08005b9c 	.word	0x08005b9c

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fdb1 	bl	8000cf0 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fb57 	bl	8000846 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000198:	2301      	movs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 f80f 	bl	80011cc <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fb47 	bl	8000846 <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = FASE1_SENSOR_Pin|FASE2_SENSOR_Pin|FASE3_SENSOR_Pin|FASE4_SENSOR_Pin 
 8000218:	233f      	movs	r3, #63	; 0x3f
 800021a:	613b      	str	r3, [r7, #16]
                          |FASE5_SENSOR_Pin|FASE6_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f001 fbc0 	bl	80019ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <MX_CRC_Init+0x20>)
 8000246:	4a07      	ldr	r2, [pc, #28]	; (8000264 <MX_CRC_Init+0x24>)
 8000248:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <MX_CRC_Init+0x20>)
 800024c:	f001 fb02 	bl	8001854 <HAL_CRC_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000256:	f000 faf6 	bl	8000846 <Error_Handler>
  }

}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000058 	.word	0x20000058
 8000264:	40023000 	.word	0x40023000

08000268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a09      	ldr	r2, [pc, #36]	; (800029c <HAL_CRC_MspInit+0x34>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d10b      	bne.n	8000292 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a08      	ldr	r2, [pc, #32]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000284:	6153      	str	r3, [r2, #20]
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	40023000 	.word	0x40023000
 80002a0:	40021000 	.word	0x40021000

080002a4 <MX_GPIO_Init>:
     PA3   ------> SharedAnalog_PA3
     PA4   ------> SharedAnalog_PA4
     PA5   ------> SharedAnalog_PA5
*/
void MX_GPIO_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	f107 0310 	add.w	r3, r7, #16
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b8:	4b2d      	ldr	r3, [pc, #180]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a2c      	ldr	r2, [pc, #176]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d0:	4b27      	ldr	r3, [pc, #156]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a26      	ldr	r2, [pc, #152]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002d6:	f043 0304 	orr.w	r3, r3, #4
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0304 	and.w	r3, r3, #4
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a20      	ldr	r2, [pc, #128]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002ee:	f043 0308 	orr.w	r3, r3, #8
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 8000300:	2200      	movs	r2, #0
 8000302:	f649 7180 	movw	r1, #40832	; 0x9f80
 8000306:	481b      	ldr	r0, [pc, #108]	; (8000374 <MX_GPIO_Init+0xd0>)
 8000308:	f001 fd78 	bl	8001dfc <HAL_GPIO_WritePin>
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin|FASE3_ROJO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FASE3_VERDE_Pin|FASE5_ROJO_Pin|FASE3_AMA_Pin|FASE6_VERDE_Pin 
 800030c:	2200      	movs	r2, #0
 800030e:	f24f 713c 	movw	r1, #63292	; 0xf73c
 8000312:	4819      	ldr	r0, [pc, #100]	; (8000378 <MX_GPIO_Init+0xd4>)
 8000314:	f001 fd72 	bl	8001dfc <HAL_GPIO_WritePin>
                          |FASE6_AMA_Pin|FASE1_VERDE_Pin|FASE4_VERDE_Pin|FASE4_AMA_Pin 
                          |FASE4_ROJO_Pin|FASE5_VERDE_Pin|FASE5_AMA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = FASE2_SENSOR_Pin|FASE3_SENSOR_Pin|FASE4_SENSOR_Pin|FASE5_SENSOR_Pin 
 8000318:	233e      	movs	r3, #62	; 0x3e
 800031a:	613b      	str	r3, [r7, #16]
                          |FASE6_SENSOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800031c:	2303      	movs	r3, #3
 800031e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	4813      	ldr	r0, [pc, #76]	; (8000374 <MX_GPIO_Init+0xd0>)
 8000328:	f001 fb40 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FASE6_ROJO_Pin|FASE1_AMA_Pin|FASE1_ROJO_Pin|FASE2_VERDE_Pin 
 800032c:	f649 7380 	movw	r3, #40832	; 0x9f80
 8000330:	613b      	str	r3, [r7, #16]
                          |FASE2_AMA_Pin|FASE2_ROJO_Pin|FASE3_ROJO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2302      	movs	r3, #2
 800033c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	4619      	mov	r1, r3
 8000344:	480b      	ldr	r0, [pc, #44]	; (8000374 <MX_GPIO_Init+0xd0>)
 8000346:	f001 fb31 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FASE3_VERDE_Pin|FASE5_ROJO_Pin|FASE3_AMA_Pin|FASE6_VERDE_Pin 
 800034a:	f24f 733c 	movw	r3, #63292	; 0xf73c
 800034e:	613b      	str	r3, [r7, #16]
                          |FASE6_AMA_Pin|FASE1_VERDE_Pin|FASE4_VERDE_Pin|FASE4_AMA_Pin 
                          |FASE4_ROJO_Pin|FASE5_VERDE_Pin|FASE5_AMA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000350:	2301      	movs	r3, #1
 8000352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	2300      	movs	r3, #0
 8000356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000358:	2302      	movs	r3, #2
 800035a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	4619      	mov	r1, r3
 8000362:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_GPIO_Init+0xd4>)
 8000364:	f001 fb22 	bl	80019ac <HAL_GPIO_Init>

}
 8000368:	bf00      	nop
 800036a:	3720      	adds	r7, #32
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40021000 	.word	0x40021000
 8000374:	40010800 	.word	0x40010800
 8000378:	40010c00 	.word	0x40010c00

0800037c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_I2C1_Init+0x50>)
 8000382:	4a13      	ldr	r2, [pc, #76]	; (80003d0 <MX_I2C1_Init+0x54>)
 8000384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_I2C1_Init+0x50>)
 8000388:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <MX_I2C1_Init+0x58>)
 800038a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_I2C1_Init+0x50>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 34;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_I2C1_Init+0x50>)
 8000394:	2222      	movs	r2, #34	; 0x22
 8000396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_I2C1_Init+0x50>)
 800039a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800039e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <MX_I2C1_Init+0x50>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_I2C1_Init+0x50>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <MX_I2C1_Init+0x50>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_I2C1_Init+0x50>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <MX_I2C1_Init+0x50>)
 80003ba:	f001 fd51 	bl	8001e60 <HAL_I2C_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003c4:	f000 fa3f 	bl	8000846 <Error_Handler>
  }

}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000060 	.word	0x20000060
 80003d0:	40005400 	.word	0x40005400
 80003d4:	000186a0 	.word	0x000186a0

080003d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a1e      	ldr	r2, [pc, #120]	; (800046c <HAL_I2C_MspInit+0x94>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d135      	bne.n	8000464 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f8:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <HAL_I2C_MspInit+0x98>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <HAL_I2C_MspInit+0x98>)
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <HAL_I2C_MspInit+0x98>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0308 	and.w	r3, r3, #8
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000410:	23c0      	movs	r3, #192	; 0xc0
 8000412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000414:	2312      	movs	r3, #18
 8000416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000418:	2301      	movs	r3, #1
 800041a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800041c:	2303      	movs	r3, #3
 800041e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	4619      	mov	r1, r3
 8000426:	4813      	ldr	r0, [pc, #76]	; (8000474 <HAL_I2C_MspInit+0x9c>)
 8000428:	f001 fac0 	bl	80019ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800042c:	4b10      	ldr	r3, [pc, #64]	; (8000470 <HAL_I2C_MspInit+0x98>)
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <HAL_I2C_MspInit+0x98>)
 8000432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000436:	61d3      	str	r3, [r2, #28]
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <HAL_I2C_MspInit+0x98>)
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	201f      	movs	r0, #31
 800044a:	f001 f9b3 	bl	80017b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800044e:	201f      	movs	r0, #31
 8000450:	f001 f9dc 	bl	800180c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2100      	movs	r1, #0
 8000458:	2020      	movs	r0, #32
 800045a:	f001 f9ab 	bl	80017b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800045e:	2020      	movs	r0, #32
 8000460:	f001 f9d4 	bl	800180c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40005400 	.word	0x40005400
 8000470:	40021000 	.word	0x40021000
 8000474:	40010c00 	.word	0x40010c00

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047c:	f000 fbb4 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000480:	f000 f978 	bl	8000774 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000484:	f7ff ff0e 	bl	80002a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000488:	f7ff fe60 	bl	800014c <MX_ADC1_Init>
  MX_I2C1_Init();
 800048c:	f7ff ff76 	bl	800037c <MX_I2C1_Init>
  MX_RTC_Init();
 8000490:	f000 f9ea 	bl	8000868 <MX_RTC_Init>
  MX_TIM2_Init();
 8000494:	f000 fb1a 	bl	8000acc <MX_TIM2_Init>
  MX_CRC_Init();
 8000498:	f7ff fed2 	bl	8000240 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800049c:	f000 f9bf 	bl	800081e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_MspInit(&hi2c1);
 80004a0:	4813      	ldr	r0, [pc, #76]	; (80004f0 <main+0x78>)
 80004a2:	f7ff ff99 	bl	80003d8 <HAL_I2C_MspInit>

    HAL_GPIO_WritePin(GPIOA, FASE1_AMA_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ac:	4811      	ldr	r0, [pc, #68]	; (80004f4 <main+0x7c>)
 80004ae:	f001 fca5 	bl	8001dfc <HAL_GPIO_WritePin>
      HAL_Delay(33000);
 80004b2:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80004b6:	f000 fbf9 	bl	8000cac <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, FASE1_AMA_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c0:	480c      	ldr	r0, [pc, #48]	; (80004f4 <main+0x7c>)
 80004c2:	f001 fc9b 	bl	8001dfc <HAL_GPIO_WritePin>

    	if(HAL_I2C_Slave_Receive_IT(&hi2c1, mensaje, 1) != HAL_OK)
 80004c6:	2201      	movs	r2, #1
 80004c8:	490b      	ldr	r1, [pc, #44]	; (80004f8 <main+0x80>)
 80004ca:	4809      	ldr	r0, [pc, #36]	; (80004f0 <main+0x78>)
 80004cc:	f001 fe6a 	bl	80021a4 <HAL_I2C_Slave_Receive_IT>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d006      	beq.n	80004e4 <main+0x6c>
    	{
    		Di_Estado();
 80004d6:	f000 f811 	bl	80004fc <Di_Estado>
    		HAL_GPIO_WritePin(GPIOA, FASE6_ROJO_Pin, GPIO_PIN_SET);
 80004da:	2201      	movs	r2, #1
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <main+0x7c>)
 80004e0:	f001 fc8c 	bl	8001dfc <HAL_GPIO_WritePin>
    	}

    	//HAL_GPIO_WritePin(GPIOA, FASE1_ROJO_Pin, GPIO_PIN_SET);
    	HAL_Delay(5000);
 80004e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80004e8:	f000 fbe0 	bl	8000cac <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <main+0x74>
 80004ee:	bf00      	nop
 80004f0:	20000060 	.word	0x20000060
 80004f4:	40010800 	.word	0x40010800
 80004f8:	200000b4 	.word	0x200000b4

080004fc <Di_Estado>:
  }
  /* USER CODE END 3 */
}

void Di_Estado(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
   	switch(HAL_I2C_GetError(&hi2c1))
 8000500:	489a      	ldr	r0, [pc, #616]	; (800076c <Di_Estado+0x270>)
 8000502:	f002 f93b 	bl	800277c <HAL_I2C_GetError>
 8000506:	4603      	mov	r3, r0
 8000508:	2b08      	cmp	r3, #8
 800050a:	d042      	beq.n	8000592 <Di_Estado+0x96>
 800050c:	2b08      	cmp	r3, #8
 800050e:	d808      	bhi.n	8000522 <Di_Estado+0x26>
 8000510:	2b01      	cmp	r3, #1
 8000512:	d01d      	beq.n	8000550 <Di_Estado+0x54>
 8000514:	2b01      	cmp	r3, #1
 8000516:	d310      	bcc.n	800053a <Di_Estado+0x3e>
 8000518:	2b02      	cmp	r3, #2
 800051a:	d024      	beq.n	8000566 <Di_Estado+0x6a>
 800051c:	2b04      	cmp	r3, #4
 800051e:	d02d      	beq.n	800057c <Di_Estado+0x80>
 8000520:	e06e      	b.n	8000600 <Di_Estado+0x104>
 8000522:	2b20      	cmp	r3, #32
 8000524:	d04b      	beq.n	80005be <Di_Estado+0xc2>
 8000526:	2b20      	cmp	r3, #32
 8000528:	d802      	bhi.n	8000530 <Di_Estado+0x34>
 800052a:	2b10      	cmp	r3, #16
 800052c:	d03c      	beq.n	80005a8 <Di_Estado+0xac>
 800052e:	e067      	b.n	8000600 <Di_Estado+0x104>
 8000530:	2b40      	cmp	r3, #64	; 0x40
 8000532:	d04f      	beq.n	80005d4 <Di_Estado+0xd8>
 8000534:	2b80      	cmp	r3, #128	; 0x80
 8000536:	d058      	beq.n	80005ea <Di_Estado+0xee>
 8000538:	e062      	b.n	8000600 <Di_Estado+0x104>
    	{
    		case HAL_I2C_ERROR_NONE:
    		{
    			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2104      	movs	r1, #4
 800053e:	488c      	ldr	r0, [pc, #560]	; (8000770 <Di_Estado+0x274>)
 8000540:	f001 fc5c 	bl	8001dfc <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin | FASE4_AMA_Pin | FASE4_ROJO_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2138      	movs	r1, #56	; 0x38
 8000548:	4889      	ldr	r0, [pc, #548]	; (8000770 <Di_Estado+0x274>)
 800054a:	f001 fc57 	bl	8001dfc <HAL_GPIO_WritePin>
    		} break;
 800054e:	e057      	b.n	8000600 <Di_Estado+0x104>
    		case HAL_I2C_ERROR_BERR:
    		{
    			HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2108      	movs	r1, #8
 8000554:	4886      	ldr	r0, [pc, #536]	; (8000770 <Di_Estado+0x274>)
 8000556:	f001 fc51 	bl	8001dfc <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE4_AMA_Pin | FASE4_ROJO_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2134      	movs	r1, #52	; 0x34
 800055e:	4884      	ldr	r0, [pc, #528]	; (8000770 <Di_Estado+0x274>)
 8000560:	f001 fc4c 	bl	8001dfc <HAL_GPIO_WritePin>
    		} break;
 8000564:	e04c      	b.n	8000600 <Di_Estado+0x104>
    		case HAL_I2C_ERROR_ARLO:
    		{
    			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE4_VERDE_Pin, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	210c      	movs	r1, #12
 800056a:	4881      	ldr	r0, [pc, #516]	; (8000770 <Di_Estado+0x274>)
 800056c:	f001 fc46 	bl	8001dfc <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin | FASE4_ROJO_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2130      	movs	r1, #48	; 0x30
 8000574:	487e      	ldr	r0, [pc, #504]	; (8000770 <Di_Estado+0x274>)
 8000576:	f001 fc41 	bl	8001dfc <HAL_GPIO_WritePin>
    		} break;
 800057a:	e041      	b.n	8000600 <Di_Estado+0x104>
    		case HAL_I2C_ERROR_AF:
    		{
    			HAL_GPIO_WritePin(GPIOB,FASE4_AMA_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2110      	movs	r1, #16
 8000580:	487b      	ldr	r0, [pc, #492]	; (8000770 <Di_Estado+0x274>)
 8000582:	f001 fc3b 	bl	8001dfc <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE4_VERDE_Pin | FASE4_ROJO_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	212c      	movs	r1, #44	; 0x2c
 800058a:	4879      	ldr	r0, [pc, #484]	; (8000770 <Di_Estado+0x274>)
 800058c:	f001 fc36 	bl	8001dfc <HAL_GPIO_WritePin>
    		} break;
 8000590:	e036      	b.n	8000600 <Di_Estado+0x104>
    		case HAL_I2C_ERROR_OVR:
    		{
    			HAL_GPIO_WritePin(GPIOB, FASE3_VERDE_Pin | FASE4_AMA_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2114      	movs	r1, #20
 8000596:	4876      	ldr	r0, [pc, #472]	; (8000770 <Di_Estado+0x274>)
 8000598:	f001 fc30 	bl	8001dfc <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOB,FASE4_VERDE_Pin | FASE4_ROJO_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2128      	movs	r1, #40	; 0x28
 80005a0:	4873      	ldr	r0, [pc, #460]	; (8000770 <Di_Estado+0x274>)
 80005a2:	f001 fc2b 	bl	8001dfc <HAL_GPIO_WritePin>
    		} break;
 80005a6:	e02b      	b.n	8000600 <Di_Estado+0x104>
    		case HAL_I2C_ERROR_DMA:
    		{
    			HAL_GPIO_WritePin(GPIOB, FASE4_VERDE_Pin | FASE4_AMA_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2118      	movs	r1, #24
 80005ac:	4870      	ldr	r0, [pc, #448]	; (8000770 <Di_Estado+0x274>)
 80005ae:	f001 fc25 	bl	8001dfc <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE4_ROJO_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2124      	movs	r1, #36	; 0x24
 80005b6:	486e      	ldr	r0, [pc, #440]	; (8000770 <Di_Estado+0x274>)
 80005b8:	f001 fc20 	bl	8001dfc <HAL_GPIO_WritePin>
    		} break;
 80005bc:	e020      	b.n	8000600 <Di_Estado+0x104>
    		case HAL_I2C_ERROR_TIMEOUT:
    		{
    			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE4_VERDE_Pin | FASE4_AMA_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	211c      	movs	r1, #28
 80005c2:	486b      	ldr	r0, [pc, #428]	; (8000770 <Di_Estado+0x274>)
 80005c4:	f001 fc1a 	bl	8001dfc <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2120      	movs	r1, #32
 80005cc:	4868      	ldr	r0, [pc, #416]	; (8000770 <Di_Estado+0x274>)
 80005ce:	f001 fc15 	bl	8001dfc <HAL_GPIO_WritePin>
    		} break;
 80005d2:	e015      	b.n	8000600 <Di_Estado+0x104>
    		case HAL_I2C_ERROR_SIZE:
    		{
    			HAL_GPIO_WritePin(GPIOB,FASE4_ROJO_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2120      	movs	r1, #32
 80005d8:	4865      	ldr	r0, [pc, #404]	; (8000770 <Di_Estado+0x274>)
 80005da:	f001 fc0f 	bl	8001dfc <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE4_VERDE_Pin | FASE4_AMA_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	211c      	movs	r1, #28
 80005e2:	4863      	ldr	r0, [pc, #396]	; (8000770 <Di_Estado+0x274>)
 80005e4:	f001 fc0a 	bl	8001dfc <HAL_GPIO_WritePin>
    		} break;
 80005e8:	e00a      	b.n	8000600 <Di_Estado+0x104>
    		case HAL_I2C_ERROR_DMA_PARAM:
    		{
    			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE4_ROJO_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2124      	movs	r1, #36	; 0x24
 80005ee:	4860      	ldr	r0, [pc, #384]	; (8000770 <Di_Estado+0x274>)
 80005f0:	f001 fc04 	bl	8001dfc <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOB,FASE3_VERDE_Pin | FASE4_AMA_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2114      	movs	r1, #20
 80005f8:	485d      	ldr	r0, [pc, #372]	; (8000770 <Di_Estado+0x274>)
 80005fa:	f001 fbff 	bl	8001dfc <HAL_GPIO_WritePin>
    		} break;
 80005fe:	bf00      	nop
    	}

    	switch(HAL_I2C_GetState(&hi2c1))	/* Para ver el estado del periférico I2C */
 8000600:	485a      	ldr	r0, [pc, #360]	; (800076c <Di_Estado+0x270>)
 8000602:	f002 f8ae 	bl	8002762 <HAL_I2C_GetState>
 8000606:	4603      	mov	r3, r0
 8000608:	2b28      	cmp	r3, #40	; 0x28
 800060a:	d05f      	beq.n	80006cc <Di_Estado+0x1d0>
 800060c:	2b28      	cmp	r3, #40	; 0x28
 800060e:	dc0d      	bgt.n	800062c <Di_Estado+0x130>
 8000610:	2b21      	cmp	r3, #33	; 0x21
 8000612:	d041      	beq.n	8000698 <Di_Estado+0x19c>
 8000614:	2b21      	cmp	r3, #33	; 0x21
 8000616:	dc04      	bgt.n	8000622 <Di_Estado+0x126>
 8000618:	2b00      	cmp	r3, #0
 800061a:	d016      	beq.n	800064a <Di_Estado+0x14e>
 800061c:	2b20      	cmp	r3, #32
 800061e:	d021      	beq.n	8000664 <Di_Estado+0x168>
      	  {
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE6_VERDE_Pin | FASE6_AMA_Pin,GPIO_PIN_SET);
      		  HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin, GPIO_PIN_RESET);
      	  } break;
      }
}
 8000620:	e0a2      	b.n	8000768 <Di_Estado+0x26c>
    	switch(HAL_I2C_GetState(&hi2c1))	/* Para ver el estado del periférico I2C */
 8000622:	2b22      	cmp	r3, #34	; 0x22
 8000624:	d045      	beq.n	80006b2 <Di_Estado+0x1b6>
 8000626:	2b24      	cmp	r3, #36	; 0x24
 8000628:	d029      	beq.n	800067e <Di_Estado+0x182>
}
 800062a:	e09d      	b.n	8000768 <Di_Estado+0x26c>
    	switch(HAL_I2C_GetState(&hi2c1))	/* Para ver el estado del periférico I2C */
 800062c:	2b60      	cmp	r3, #96	; 0x60
 800062e:	d074      	beq.n	800071a <Di_Estado+0x21e>
 8000630:	2b60      	cmp	r3, #96	; 0x60
 8000632:	dc04      	bgt.n	800063e <Di_Estado+0x142>
 8000634:	2b29      	cmp	r3, #41	; 0x29
 8000636:	d056      	beq.n	80006e6 <Di_Estado+0x1ea>
 8000638:	2b2a      	cmp	r3, #42	; 0x2a
 800063a:	d061      	beq.n	8000700 <Di_Estado+0x204>
}
 800063c:	e094      	b.n	8000768 <Di_Estado+0x26c>
    	switch(HAL_I2C_GetState(&hi2c1))	/* Para ver el estado del periférico I2C */
 800063e:	2ba0      	cmp	r3, #160	; 0xa0
 8000640:	d078      	beq.n	8000734 <Di_Estado+0x238>
 8000642:	2be0      	cmp	r3, #224	; 0xe0
 8000644:	f000 8083 	beq.w	800074e <Di_Estado+0x252>
}
 8000648:	e08e      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin,GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000650:	4847      	ldr	r0, [pc, #284]	; (8000770 <Di_Estado+0x274>)
 8000652:	f001 fbd3 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin | FASE6_AMA_Pin | FASE1_VERDE_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800065c:	4844      	ldr	r0, [pc, #272]	; (8000770 <Di_Estado+0x274>)
 800065e:	f001 fbcd 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 8000662:	e081      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin,GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066a:	4841      	ldr	r0, [pc, #260]	; (8000770 <Di_Estado+0x274>)
 800066c:	f001 fbc6 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE6_AMA_Pin | FASE1_VERDE_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000676:	483e      	ldr	r0, [pc, #248]	; (8000770 <Di_Estado+0x274>)
 8000678:	f001 fbc0 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 800067c:	e074      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE6_VERDE_Pin,GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000684:	483a      	ldr	r0, [pc, #232]	; (8000770 <Di_Estado+0x274>)
 8000686:	f001 fbb9 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin | FASE1_VERDE_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000690:	4837      	ldr	r0, [pc, #220]	; (8000770 <Di_Estado+0x274>)
 8000692:	f001 fbb3 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 8000696:	e067      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin,GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069e:	4834      	ldr	r0, [pc, #208]	; (8000770 <Di_Estado+0x274>)
 80006a0:	f001 fbac 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE6_VERDE_Pin | FASE1_VERDE_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 80006aa:	4831      	ldr	r0, [pc, #196]	; (8000770 <Di_Estado+0x274>)
 80006ac:	f001 fba6 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 80006b0:	e05a      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE6_AMA_Pin,GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80006b8:	482d      	ldr	r0, [pc, #180]	; (8000770 <Di_Estado+0x274>)
 80006ba:	f001 fb9f 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin | FASE1_VERDE_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80006c4:	482a      	ldr	r0, [pc, #168]	; (8000770 <Di_Estado+0x274>)
 80006c6:	f001 fb99 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 80006ca:	e04d      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin | FASE6_AMA_Pin,GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80006d2:	4827      	ldr	r0, [pc, #156]	; (8000770 <Di_Estado+0x274>)
 80006d4:	f001 fb92 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE1_VERDE_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80006de:	4824      	ldr	r0, [pc, #144]	; (8000770 <Di_Estado+0x274>)
 80006e0:	f001 fb8c 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 80006e4:	e040      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE6_VERDE_Pin | FASE6_AMA_Pin,GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80006ec:	4820      	ldr	r0, [pc, #128]	; (8000770 <Di_Estado+0x274>)
 80006ee:	f001 fb85 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f8:	481d      	ldr	r0, [pc, #116]	; (8000770 <Di_Estado+0x274>)
 80006fa:	f001 fb7f 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 80006fe:	e033      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin,GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000706:	481a      	ldr	r0, [pc, #104]	; (8000770 <Di_Estado+0x274>)
 8000708:	f001 fb78 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE6_VERDE_Pin | FASE6_AMA_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000712:	4817      	ldr	r0, [pc, #92]	; (8000770 <Di_Estado+0x274>)
 8000714:	f001 fb72 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 8000718:	e026      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE1_VERDE_Pin,GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000720:	4813      	ldr	r0, [pc, #76]	; (8000770 <Di_Estado+0x274>)
 8000722:	f001 fb6b 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE6_VERDE_Pin | FASE6_AMA_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800072c:	4810      	ldr	r0, [pc, #64]	; (8000770 <Di_Estado+0x274>)
 800072e:	f001 fb65 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 8000732:	e019      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE6_VERDE_Pin,GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <Di_Estado+0x274>)
 800073c:	f001 fb5e 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE6_AMA_Pin | FASE1_AMA_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8000746:	480a      	ldr	r0, [pc, #40]	; (8000770 <Di_Estado+0x274>)
 8000748:	f001 fb58 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 800074c:	e00c      	b.n	8000768 <Di_Estado+0x26c>
      		  HAL_GPIO_WritePin(GPIOB,FASE3_AMA_Pin | FASE6_VERDE_Pin | FASE6_AMA_Pin,GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000754:	4806      	ldr	r0, [pc, #24]	; (8000770 <Di_Estado+0x274>)
 8000756:	f001 fb51 	bl	8001dfc <HAL_GPIO_WritePin>
      		  HAL_GPIO_WritePin(GPIOB,FASE1_VERDE_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <Di_Estado+0x274>)
 8000762:	f001 fb4b 	bl	8001dfc <HAL_GPIO_WritePin>
      	  } break;
 8000766:	bf00      	nop
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000060 	.word	0x20000060
 8000770:	40010c00 	.word	0x40010c00

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	; 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077e:	2228      	movs	r2, #40	; 0x28
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f005 fa02 	bl	8005b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80007a4:	2306      	movs	r3, #6
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 f957 	bl	8003a70 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007c8:	f000 f83d 	bl	8000846 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fcb2 	bl	8004150 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007f2:	f000 f828 	bl	8000846 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80007f6:	2303      	movs	r3, #3
 80007f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fee4 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000812:	f000 f818 	bl	8000846 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	; 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2005      	movs	r0, #5
 8000828:	f000 ffc4 	bl	80017b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800082c:	2005      	movs	r0, #5
 800082e:	f000 ffed 	bl	800180c <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	2012      	movs	r0, #18
 8000838:	f000 ffbc 	bl	80017b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800083c:	2012      	movs	r0, #18
 800083e:	f000 ffe5 	bl	800180c <HAL_NVIC_EnableIRQ>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}

08000846 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
	...

08000868 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2100      	movs	r1, #0
 8000872:	460a      	mov	r2, r1
 8000874:	801a      	strh	r2, [r3, #0]
 8000876:	460a      	mov	r2, r1
 8000878:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_RTC_Init+0x8c>)
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <MX_RTC_Init+0x90>)
 8000882:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_RTC_Init+0x8c>)
 8000886:	f04f 32ff 	mov.w	r2, #4294967295
 800088a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_RTC_Init+0x8c>)
 800088e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000892:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000894:	4817      	ldr	r0, [pc, #92]	; (80008f4 <MX_RTC_Init+0x8c>)
 8000896:	f004 f879 	bl	800498c <HAL_RTC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80008a0:	f7ff ffd1 	bl	8000846 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2201      	movs	r2, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	480f      	ldr	r0, [pc, #60]	; (80008f4 <MX_RTC_Init+0x8c>)
 80008b8:	f004 f932 	bl	8004b20 <HAL_RTC_SetTime>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80008c2:	f7ff ffc0 	bl	8000846 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008c6:	2301      	movs	r3, #1
 80008c8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80008ca:	2301      	movs	r3, #1
 80008cc:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	2201      	movs	r2, #1
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_RTC_Init+0x8c>)
 80008de:	f004 fa05 	bl	8004cec <HAL_RTC_SetDate>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80008e8:	f7ff ffad 	bl	8000846 <Error_Handler>
  }

}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000bc 	.word	0x200000bc
 80008f8:	40002800 	.word	0x40002800

080008fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <HAL_RTC_MspInit+0x3c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d110      	bne.n	8000930 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800090e:	f003 f8a3 	bl	8003a58 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_RTC_MspInit+0x40>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <HAL_RTC_MspInit+0x40>)
 8000918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <HAL_RTC_MspInit+0x40>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_RTC_MspInit+0x44>)
 800092c:	2201      	movs	r2, #1
 800092e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40002800 	.word	0x40002800
 800093c:	40021000 	.word	0x40021000
 8000940:	4242043c 	.word	0x4242043c

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_MspInit+0x5c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <HAL_MspInit+0x5c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_MspInit+0x5c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x5c>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x5c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x5c>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /* Peripheral interrupt init */

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_MspInit+0x60>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_MspInit+0x60>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010000 	.word	0x40010000

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <HardFault_Handler+0x4>

080009ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <MemManage_Handler+0x4>

080009c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <BusFault_Handler+0x4>

080009c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <UsageFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f93e 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <ADC1_2_IRQHandler+0x10>)
 8000a0e:	f000 fad9 	bl	8000fc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000028 	.word	0x20000028

08000a1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a26:	4804      	ldr	r0, [pc, #16]	; (8000a38 <I2C1_EV_IRQHandler+0x1c>)
 8000a28:	f001 f9e8 	bl	8001dfc <HAL_GPIO_WritePin>
  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <I2C1_EV_IRQHandler+0x20>)
 8000a2e:	f001 fc27 	bl	8002280 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010800 	.word	0x40010800
 8000a3c:	20000060 	.word	0x20000060

08000a40 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA,FASE3_ROJO_Pin,GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <I2C1_ER_IRQHandler+0x1c>)
 8000a4c:	f001 f9d6 	bl	8001dfc <HAL_GPIO_WritePin>
  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <I2C1_ER_IRQHandler+0x20>)
 8000a52:	f001 fd7b 	bl	800254c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	20000060 	.word	0x20000060

08000a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <SystemInit+0x5c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <SystemInit+0x5c>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <SystemInit+0x5c>)
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	4911      	ldr	r1, [pc, #68]	; (8000ac0 <SystemInit+0x5c>)
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <SystemInit+0x60>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <SystemInit+0x5c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <SystemInit+0x5c>)
 8000a86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <SystemInit+0x5c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SystemInit+0x5c>)
 8000a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <SystemInit+0x5c>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <SystemInit+0x5c>)
 8000aa2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000aa6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SystemInit+0x5c>)
 8000aaa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000aae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SystemInit+0x64>)
 8000ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ab6:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	f8ff0000 	.word	0xf8ff0000
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b10:	f004 fbb4 	bl	800527c <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f7ff fe94 	bl	8000846 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b2c:	f004 fc24 	bl	8005378 <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000b36:	f7ff fe86 	bl	8000846 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_TIM2_Init+0x94>)
 8000b48:	f004 ff6c 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000b52:	f7ff fe78 	bl	8000846 <Error_Handler>
  }

}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000d0 	.word	0x200000d0

08000b64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b74:	d10b      	bne.n	8000b8e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_TIM_Base_MspInit+0x34>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_TIM_Base_MspInit+0x34>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_TIM_Base_MspInit+0x34>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	40021000 	.word	0x40021000

08000b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b9c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b9e:	e003      	b.n	8000ba8 <LoopCopyDataInit>

08000ba0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ba2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ba4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ba6:	3104      	adds	r1, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bb0:	d3f6      	bcc.n	8000ba0 <CopyDataInit>
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bb4:	e002      	b.n	8000bbc <LoopFillZerobss>

08000bb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bb8:	f842 3b04 	str.w	r3, [r2], #4

08000bbc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bbe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bc0:	d3f9      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bc2:	f7ff ff4f 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f004 ffbd 	bl	8005b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bca:	f7ff fc55 	bl	8000478 <main>
  bx lr
 8000bce:	4770      	bx	lr
  ldr r3, =_sidata
 8000bd0:	08005e3c 	.word	0x08005e3c
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000bdc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000be0:	20000114 	.word	0x20000114

08000be4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <CAN1_RX1_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x28>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 fdbb 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fe9e 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fe02 	bl	800183c <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 fdb0 	bl	80017b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x20>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <HAL_IncTick+0x20>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000110 	.word	0x20000110

08000c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <HAL_GetTick+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000110 	.word	0x20000110

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff fff0 	bl	8000c98 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_Delay+0x40>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffe0 	bl	8000c98 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e153      	b.n	8000fba <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a9f      	ldr	r2, [pc, #636]	; (8000f94 <HAL_ADC_Init+0x2a4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d009      	beq.n	8000d30 <HAL_ADC_Init+0x40>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a9d      	ldr	r2, [pc, #628]	; (8000f98 <HAL_ADC_Init+0x2a8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d004      	beq.n	8000d30 <HAL_ADC_Init+0x40>
 8000d26:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000d2a:	489c      	ldr	r0, [pc, #624]	; (8000f9c <HAL_ADC_Init+0x2ac>)
 8000d2c:	f7ff fd91 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <HAL_ADC_Init+0x5c>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d40:	d004      	beq.n	8000d4c <HAL_ADC_Init+0x5c>
 8000d42:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8000d46:	4895      	ldr	r0, [pc, #596]	; (8000f9c <HAL_ADC_Init+0x2ac>)
 8000d48:	f7ff fd83 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d009      	beq.n	8000d68 <HAL_ADC_Init+0x78>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d5c:	d004      	beq.n	8000d68 <HAL_ADC_Init+0x78>
 8000d5e:	f240 11b5 	movw	r1, #437	; 0x1b5
 8000d62:	488e      	ldr	r0, [pc, #568]	; (8000f9c <HAL_ADC_Init+0x2ac>)
 8000d64:	f7ff fd75 	bl	8000852 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7b1b      	ldrb	r3, [r3, #12]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d008      	beq.n	8000d82 <HAL_ADC_Init+0x92>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7b1b      	ldrb	r3, [r3, #12]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d004      	beq.n	8000d82 <HAL_ADC_Init+0x92>
 8000d78:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000d7c:	4887      	ldr	r0, [pc, #540]	; (8000f9c <HAL_ADC_Init+0x2ac>)
 8000d7e:	f7ff fd68 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d022      	beq.n	8000dd0 <HAL_ADC_Init+0xe0>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d92:	d01d      	beq.n	8000dd0 <HAL_ADC_Init+0xe0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000d9c:	d018      	beq.n	8000dd0 <HAL_ADC_Init+0xe0>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000da6:	d013      	beq.n	8000dd0 <HAL_ADC_Init+0xe0>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8000db0:	d00e      	beq.n	8000dd0 <HAL_ADC_Init+0xe0>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000dba:	d009      	beq.n	8000dd0 <HAL_ADC_Init+0xe0>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dc4:	d004      	beq.n	8000dd0 <HAL_ADC_Init+0xe0>
 8000dc6:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000dca:	4874      	ldr	r0, [pc, #464]	; (8000f9c <HAL_ADC_Init+0x2ac>)
 8000dcc:	f7ff fd41 	bl	8000852 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d02a      	beq.n	8000e2e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_ADC_Init+0xf8>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	2b10      	cmp	r3, #16
 8000de6:	d904      	bls.n	8000df2 <HAL_ADC_Init+0x102>
 8000de8:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000dec:	486b      	ldr	r0, [pc, #428]	; (8000f9c <HAL_ADC_Init+0x2ac>)
 8000dee:	f7ff fd30 	bl	8000852 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7d1b      	ldrb	r3, [r3, #20]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d008      	beq.n	8000e0c <HAL_ADC_Init+0x11c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7d1b      	ldrb	r3, [r3, #20]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d004      	beq.n	8000e0c <HAL_ADC_Init+0x11c>
 8000e02:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8000e06:	4865      	ldr	r0, [pc, #404]	; (8000f9c <HAL_ADC_Init+0x2ac>)
 8000e08:	f7ff fd23 	bl	8000852 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7d1b      	ldrb	r3, [r3, #20]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00c      	beq.n	8000e2e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_ADC_Init+0x134>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	2b08      	cmp	r3, #8
 8000e22:	d904      	bls.n	8000e2e <HAL_ADC_Init+0x13e>
 8000e24:	f240 11bf 	movw	r1, #447	; 0x1bf
 8000e28:	485c      	ldr	r0, [pc, #368]	; (8000f9c <HAL_ADC_Init+0x2ac>)
 8000e2a:	f7ff fd12 	bl	8000852 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d109      	bne.n	8000e4a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff f9bf 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 fb82 	bl	8001554 <ADC_ConversionStop_Disable>
 8000e50:	4603      	mov	r3, r0
 8000e52:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f040 80a3 	bne.w	8000fa8 <HAL_ADC_Init+0x2b8>
 8000e62:	7dfb      	ldrb	r3, [r7, #23]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f040 809f 	bne.w	8000fa8 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e72:	f023 0302 	bic.w	r3, r3, #2
 8000e76:	f043 0202 	orr.w	r2, r3, #2
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e86:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7b1b      	ldrb	r3, [r3, #12]
 8000e8c:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e8e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e9e:	d003      	beq.n	8000ea8 <HAL_ADC_Init+0x1b8>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d102      	bne.n	8000eae <HAL_ADC_Init+0x1be>
 8000ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eac:	e000      	b.n	8000eb0 <HAL_ADC_Init+0x1c0>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7d1b      	ldrb	r3, [r3, #20]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d119      	bne.n	8000ef2 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7b1b      	ldrb	r3, [r3, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d109      	bne.n	8000eda <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	035a      	lsls	r2, r3, #13
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	e00b      	b.n	8000ef2 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f043 0220 	orr.w	r2, r3, #32
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	f043 0201 	orr.w	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_ADC_Init+0x2b0>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	430b      	orrs	r3, r1
 8000f18:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f22:	d003      	beq.n	8000f2c <HAL_ADC_Init+0x23c>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d104      	bne.n	8000f36 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	051b      	lsls	r3, r3, #20
 8000f34:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_ADC_Init+0x2b4>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d10b      	bne.n	8000f72 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f023 0303 	bic.w	r3, r3, #3
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f70:	e022      	b.n	8000fb8 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f76:	f023 0312 	bic.w	r3, r3, #18
 8000f7a:	f043 0210 	orr.w	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f86:	f043 0201 	orr.w	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f92:	e011      	b.n	8000fb8 <HAL_ADC_Init+0x2c8>
 8000f94:	40012400 	.word	0x40012400
 8000f98:	40012800 	.word	0x40012800
 8000f9c:	08005bb4 	.word	0x08005bb4
 8000fa0:	ffe1f7fd 	.word	0xffe1f7fd
 8000fa4:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	f043 0210 	orr.w	r2, r3, #16
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop

08000fc4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a72      	ldr	r2, [pc, #456]	; (800119c <HAL_ADC_IRQHandler+0x1d8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d009      	beq.n	8000fea <HAL_ADC_IRQHandler+0x26>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a71      	ldr	r2, [pc, #452]	; (80011a0 <HAL_ADC_IRQHandler+0x1dc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d004      	beq.n	8000fea <HAL_ADC_IRQHandler+0x26>
 8000fe0:	f240 61f1 	movw	r1, #1777	; 0x6f1
 8000fe4:	486f      	ldr	r0, [pc, #444]	; (80011a4 <HAL_ADC_IRQHandler+0x1e0>)
 8000fe6:	f7ff fc34 	bl	8000852 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7b1b      	ldrb	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <HAL_ADC_IRQHandler+0x40>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7b1b      	ldrb	r3, [r3, #12]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d004      	beq.n	8001004 <HAL_ADC_IRQHandler+0x40>
 8000ffa:	f240 61f2 	movw	r1, #1778	; 0x6f2
 8000ffe:	4869      	ldr	r0, [pc, #420]	; (80011a4 <HAL_ADC_IRQHandler+0x1e0>)
 8001000:	f7ff fc27 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_ADC_IRQHandler+0x50>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b10      	cmp	r3, #16
 8001012:	d904      	bls.n	800101e <HAL_ADC_IRQHandler+0x5a>
 8001014:	f240 61f3 	movw	r1, #1779	; 0x6f3
 8001018:	4862      	ldr	r0, [pc, #392]	; (80011a4 <HAL_ADC_IRQHandler+0x1e0>)
 800101a:	f7ff fc1a 	bl	8000852 <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0320 	and.w	r3, r3, #32
 8001028:	2b20      	cmp	r3, #32
 800102a:	d140      	bne.n	80010ae <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b02      	cmp	r3, #2
 8001038:	d139      	bne.n	80010ae <HAL_ADC_IRQHandler+0xea>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	2b00      	cmp	r3, #0
 8001044:	d105      	bne.n	8001052 <HAL_ADC_IRQHandler+0x8e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800105c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001060:	d11d      	bne.n	800109e <HAL_ADC_IRQHandler+0xda>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001066:	2b00      	cmp	r3, #0
 8001068:	d119      	bne.n	800109e <HAL_ADC_IRQHandler+0xda>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0220 	bic.w	r2, r2, #32
 8001078:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <HAL_ADC_IRQHandler+0xda>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f882 	bl	80011a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f06f 0212 	mvn.w	r2, #18
 80010ac:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b8:	2b80      	cmp	r3, #128	; 0x80
 80010ba:	d14f      	bne.n	800115c <HAL_ADC_IRQHandler+0x198>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d148      	bne.n	800115c <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d105      	bne.n	80010e2 <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80010ec:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80010f0:	d012      	beq.n	8001118 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d125      	bne.n	800114c <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800110a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800110e:	d11d      	bne.n	800114c <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001114:	2b00      	cmp	r3, #0
 8001116:	d119      	bne.n	800114c <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001126:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	2b00      	cmp	r3, #0
 800113e:	d105      	bne.n	800114c <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 fa3b 	bl	80015c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f06f 020c 	mvn.w	r2, #12
 800115a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001166:	2b40      	cmp	r3, #64	; 0x40
 8001168:	d114      	bne.n	8001194 <HAL_ADC_IRQHandler+0x1d0>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b01      	cmp	r3, #1
 8001176:	d10d      	bne.n	8001194 <HAL_ADC_IRQHandler+0x1d0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f818 	bl	80011ba <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f06f 0201 	mvn.w	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40012400 	.word	0x40012400
 80011a0:	40012800 	.word	0x40012800
 80011a4:	08005bb4 	.word	0x08005bb4

080011a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a88      	ldr	r2, [pc, #544]	; (8001404 <HAL_ADC_ConfigChannel+0x238>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d009      	beq.n	80011fc <HAL_ADC_ConfigChannel+0x30>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a86      	ldr	r2, [pc, #536]	; (8001408 <HAL_ADC_ConfigChannel+0x23c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d004      	beq.n	80011fc <HAL_ADC_ConfigChannel+0x30>
 80011f2:	f240 71ce 	movw	r1, #1998	; 0x7ce
 80011f6:	4885      	ldr	r0, [pc, #532]	; (800140c <HAL_ADC_ConfigChannel+0x240>)
 80011f8:	f7ff fb2b 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d048      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d044      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d040      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d03c      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d038      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d034      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b06      	cmp	r3, #6
 8001232:	d030      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b07      	cmp	r3, #7
 800123a:	d02c      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b08      	cmp	r3, #8
 8001242:	d028      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d024      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b0a      	cmp	r3, #10
 8001252:	d020      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b0b      	cmp	r3, #11
 800125a:	d01c      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b0c      	cmp	r3, #12
 8001262:	d018      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b0d      	cmp	r3, #13
 800126a:	d014      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b0e      	cmp	r3, #14
 8001272:	d010      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d00c      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b10      	cmp	r3, #16
 8001282:	d008      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b11      	cmp	r3, #17
 800128a:	d004      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xca>
 800128c:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8001290:	485e      	ldr	r0, [pc, #376]	; (800140c <HAL_ADC_ConfigChannel+0x240>)
 8001292:	f7ff fade 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d040      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d03c      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d038      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d034      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d030      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d02c      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	d028      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d024      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b09      	cmp	r3, #9
 80012dc:	d020      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b0a      	cmp	r3, #10
 80012e4:	d01c      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b0b      	cmp	r3, #11
 80012ec:	d018      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	d014      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b0d      	cmp	r3, #13
 80012fc:	d010      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b0e      	cmp	r3, #14
 8001304:	d00c      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	d008      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b10      	cmp	r3, #16
 8001314:	d004      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x154>
 8001316:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800131a:	483c      	ldr	r0, [pc, #240]	; (800140c <HAL_ADC_ConfigChannel+0x240>)
 800131c:	f7ff fa99 	bl	8000852 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_ADC_ConfigChannel+0x19e>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d01c      	beq.n	800136a <HAL_ADC_ConfigChannel+0x19e>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d018      	beq.n	800136a <HAL_ADC_ConfigChannel+0x19e>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d014      	beq.n	800136a <HAL_ADC_ConfigChannel+0x19e>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b04      	cmp	r3, #4
 8001346:	d010      	beq.n	800136a <HAL_ADC_ConfigChannel+0x19e>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b05      	cmp	r3, #5
 800134e:	d00c      	beq.n	800136a <HAL_ADC_ConfigChannel+0x19e>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b06      	cmp	r3, #6
 8001356:	d008      	beq.n	800136a <HAL_ADC_ConfigChannel+0x19e>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b07      	cmp	r3, #7
 800135e:	d004      	beq.n	800136a <HAL_ADC_ConfigChannel+0x19e>
 8001360:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8001364:	4829      	ldr	r0, [pc, #164]	; (800140c <HAL_ADC_ConfigChannel+0x240>)
 8001366:	f7ff fa74 	bl	8000852 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x1ac>
 8001374:	2302      	movs	r3, #2
 8001376:	e0e2      	b.n	800153e <HAL_ADC_ConfigChannel+0x372>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b06      	cmp	r3, #6
 8001386:	d81c      	bhi.n	80013c2 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3b05      	subs	r3, #5
 800139a:	221f      	movs	r2, #31
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4019      	ands	r1, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	3b05      	subs	r3, #5
 80013b4:	fa00 f203 	lsl.w	r2, r0, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
 80013c0:	e042      	b.n	8001448 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	d822      	bhi.n	8001410 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b23      	subs	r3, #35	; 0x23
 80013dc:	221f      	movs	r2, #31
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	4019      	ands	r1, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	3b23      	subs	r3, #35	; 0x23
 80013f6:	fa00 f203 	lsl.w	r2, r0, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
 8001402:	e021      	b.n	8001448 <HAL_ADC_ConfigChannel+0x27c>
 8001404:	40012400 	.word	0x40012400
 8001408:	40012800 	.word	0x40012800
 800140c:	08005bb4 	.word	0x08005bb4
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b41      	subs	r3, #65	; 0x41
 8001422:	221f      	movs	r2, #31
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	4019      	ands	r1, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	3b41      	subs	r3, #65	; 0x41
 800143c:	fa00 f203 	lsl.w	r2, r0, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d91c      	bls.n	800148a <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68d9      	ldr	r1, [r3, #12]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	3b1e      	subs	r3, #30
 8001462:	2207      	movs	r2, #7
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	4019      	ands	r1, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	6898      	ldr	r0, [r3, #8]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	3b1e      	subs	r3, #30
 800147c:	fa00 f203 	lsl.w	r2, r0, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	e019      	b.n	80014be <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6919      	ldr	r1, [r3, #16]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	2207      	movs	r2, #7
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4019      	ands	r1, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	6898      	ldr	r0, [r3, #8]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d003      	beq.n	80014ce <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ca:	2b11      	cmp	r3, #17
 80014cc:	d132      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <HAL_ADC_ConfigChannel+0x37c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d125      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d126      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014f4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d11a      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_ADC_ConfigChannel+0x380>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_ADC_ConfigChannel+0x384>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	0c9a      	lsrs	r2, r3, #18
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001514:	e002      	b.n	800151c <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3b01      	subs	r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f9      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x34a>
 8001522:	e007      	b.n	8001534 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	f043 0220 	orr.w	r2, r3, #32
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40012400 	.word	0x40012400
 800154c:	20000000 	.word	0x20000000
 8001550:	431bde83 	.word	0x431bde83

08001554 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d127      	bne.n	80015be <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800157e:	f7ff fb8b 	bl	8000c98 <HAL_GetTick>
 8001582:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001584:	e014      	b.n	80015b0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001586:	f7ff fb87 	bl	8000c98 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d90d      	bls.n	80015b0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	f043 0210 	orr.w	r2, r3, #16
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e007      	b.n	80015c0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d0e3      	beq.n	8001586 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
	...

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4906      	ldr	r1, [pc, #24]	; (8001674 <__NVIC_EnableIRQ+0x34>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff90 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b07      	cmp	r3, #7
 8001780:	d00f      	beq.n	80017a2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b06      	cmp	r3, #6
 8001786:	d00c      	beq.n	80017a2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d009      	beq.n	80017a2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b04      	cmp	r3, #4
 8001792:	d006      	beq.n	80017a2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b03      	cmp	r3, #3
 8001798:	d003      	beq.n	80017a2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800179a:	2192      	movs	r1, #146	; 0x92
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800179e:	f7ff f858 	bl	8000852 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff1a 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	08005bec 	.word	0x08005bec

080017b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d903      	bls.n	80017d4 <HAL_NVIC_SetPriority+0x20>
 80017cc:	21aa      	movs	r1, #170	; 0xaa
 80017ce:	480e      	ldr	r0, [pc, #56]	; (8001808 <HAL_NVIC_SetPriority+0x54>)
 80017d0:	f7ff f83f 	bl	8000852 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	d903      	bls.n	80017e2 <HAL_NVIC_SetPriority+0x2e>
 80017da:	21ab      	movs	r1, #171	; 0xab
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <HAL_NVIC_SetPriority+0x54>)
 80017de:	f7ff f838 	bl	8000852 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e2:	f7ff ff1f 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	6978      	ldr	r0, [r7, #20]
 80017ee:	f7ff ff6d 	bl	80016cc <NVIC_EncodePriority>
 80017f2:	4602      	mov	r2, r0
 80017f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff3c 	bl	8001678 <__NVIC_SetPriority>
}
 8001800:	bf00      	nop
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	08005bec 	.word	0x08005bec

0800180c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	da03      	bge.n	8001826 <HAL_NVIC_EnableIRQ+0x1a>
 800181e:	21be      	movs	r1, #190	; 0xbe
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <HAL_NVIC_EnableIRQ+0x2c>)
 8001822:	f7ff f816 	bl	8000852 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff08 	bl	8001640 <__NVIC_EnableIRQ>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	08005bec 	.word	0x08005bec

0800183c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff73 	bl	8001730 <SysTick_Config>
 800184a:	4603      	mov	r3, r0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e017      	b.n	8001896 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_CRC_Init+0x4c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d003      	beq.n	8001878 <HAL_CRC_Init+0x24>
 8001870:	2168      	movs	r1, #104	; 0x68
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <HAL_CRC_Init+0x50>)
 8001874:	f7fe ffed 	bl	8000852 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	795b      	ldrb	r3, [r3, #5]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d105      	bne.n	800188e <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7fe fced 	bl	8000268 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023000 	.word	0x40023000
 80018a4:	08005c28 	.word	0x08005c28

080018a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d005      	beq.n	80018ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2204      	movs	r2, #4
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e051      	b.n	800196e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 020e 	bic.w	r2, r2, #14
 80018d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0201 	bic.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a22      	ldr	r2, [pc, #136]	; (8001978 <HAL_DMA_Abort_IT+0xd0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d029      	beq.n	8001948 <HAL_DMA_Abort_IT+0xa0>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a20      	ldr	r2, [pc, #128]	; (800197c <HAL_DMA_Abort_IT+0xd4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d022      	beq.n	8001944 <HAL_DMA_Abort_IT+0x9c>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <HAL_DMA_Abort_IT+0xd8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d01a      	beq.n	800193e <HAL_DMA_Abort_IT+0x96>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <HAL_DMA_Abort_IT+0xdc>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d012      	beq.n	8001938 <HAL_DMA_Abort_IT+0x90>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_DMA_Abort_IT+0xe0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00a      	beq.n	8001932 <HAL_DMA_Abort_IT+0x8a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1a      	ldr	r2, [pc, #104]	; (800198c <HAL_DMA_Abort_IT+0xe4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d102      	bne.n	800192c <HAL_DMA_Abort_IT+0x84>
 8001926:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800192a:	e00e      	b.n	800194a <HAL_DMA_Abort_IT+0xa2>
 800192c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001930:	e00b      	b.n	800194a <HAL_DMA_Abort_IT+0xa2>
 8001932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001936:	e008      	b.n	800194a <HAL_DMA_Abort_IT+0xa2>
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	e005      	b.n	800194a <HAL_DMA_Abort_IT+0xa2>
 800193e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001942:	e002      	b.n	800194a <HAL_DMA_Abort_IT+0xa2>
 8001944:	2310      	movs	r3, #16
 8001946:	e000      	b.n	800194a <HAL_DMA_Abort_IT+0xa2>
 8001948:	2301      	movs	r3, #1
 800194a:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_DMA_Abort_IT+0xe8>)
 800194c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4798      	blx	r3
    } 
  }
  return status;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40020008 	.word	0x40020008
 800197c:	4002001c 	.word	0x4002001c
 8001980:	40020030 	.word	0x40020030
 8001984:	40020044 	.word	0x40020044
 8001988:	40020058 	.word	0x40020058
 800198c:	4002006c 	.word	0x4002006c
 8001990:	40020000 	.word	0x40020000

08001994 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a9c      	ldr	r2, [pc, #624]	; (8001c34 <HAL_GPIO_Init+0x288>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00f      	beq.n	80019e6 <HAL_GPIO_Init+0x3a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a9b      	ldr	r2, [pc, #620]	; (8001c38 <HAL_GPIO_Init+0x28c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00b      	beq.n	80019e6 <HAL_GPIO_Init+0x3a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a9a      	ldr	r2, [pc, #616]	; (8001c3c <HAL_GPIO_Init+0x290>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x3a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a99      	ldr	r2, [pc, #612]	; (8001c40 <HAL_GPIO_Init+0x294>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x3a>
 80019de:	21bd      	movs	r1, #189	; 0xbd
 80019e0:	4898      	ldr	r0, [pc, #608]	; (8001c44 <HAL_GPIO_Init+0x298>)
 80019e2:	f7fe ff36 	bl	8000852 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_GPIO_Init+0x50>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0c1b      	lsrs	r3, r3, #16
 80019f6:	041b      	lsls	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x58>
 80019fc:	21be      	movs	r1, #190	; 0xbe
 80019fe:	4891      	ldr	r0, [pc, #580]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001a00:	f7fe ff27 	bl	8000852 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 81df 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	f000 81da 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	f000 81d5 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	f000 81d0 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b12      	cmp	r3, #18
 8001a32:	f000 81cb 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a83      	ldr	r2, [pc, #524]	; (8001c48 <HAL_GPIO_Init+0x29c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	f000 81c5 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a81      	ldr	r2, [pc, #516]	; (8001c4c <HAL_GPIO_Init+0x2a0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	f000 81bf 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a7f      	ldr	r2, [pc, #508]	; (8001c50 <HAL_GPIO_Init+0x2a4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	f000 81b9 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a7d      	ldr	r2, [pc, #500]	; (8001c54 <HAL_GPIO_Init+0x2a8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	f000 81b3 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a7b      	ldr	r2, [pc, #492]	; (8001c58 <HAL_GPIO_Init+0x2ac>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	f000 81ad 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a79      	ldr	r2, [pc, #484]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	f000 81a7 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	f000 81a2 	beq.w	8001dcc <HAL_GPIO_Init+0x420>
 8001a88:	21bf      	movs	r1, #191	; 0xbf
 8001a8a:	486e      	ldr	r0, [pc, #440]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001a8c:	f7fe fee1 	bl	8000852 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a90:	e19c      	b.n	8001dcc <HAL_GPIO_Init+0x420>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a92:	2201      	movs	r2, #1
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	f040 818b 	bne.w	8001dc6 <HAL_GPIO_Init+0x41a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a60      	ldr	r2, [pc, #384]	; (8001c34 <HAL_GPIO_Init+0x288>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d00f      	beq.n	8001ad8 <HAL_GPIO_Init+0x12c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a5f      	ldr	r2, [pc, #380]	; (8001c38 <HAL_GPIO_Init+0x28c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00b      	beq.n	8001ad8 <HAL_GPIO_Init+0x12c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a5e      	ldr	r2, [pc, #376]	; (8001c3c <HAL_GPIO_Init+0x290>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d007      	beq.n	8001ad8 <HAL_GPIO_Init+0x12c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a5d      	ldr	r2, [pc, #372]	; (8001c40 <HAL_GPIO_Init+0x294>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x12c>
 8001ad0:	21cd      	movs	r1, #205	; 0xcd
 8001ad2:	485c      	ldr	r0, [pc, #368]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001ad4:	f7fe febd 	bl	8000852 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b12      	cmp	r3, #18
 8001ade:	d065      	beq.n	8001bac <HAL_GPIO_Init+0x200>
 8001ae0:	2b12      	cmp	r3, #18
 8001ae2:	d80e      	bhi.n	8001b02 <HAL_GPIO_Init+0x156>
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d04c      	beq.n	8001b82 <HAL_GPIO_Init+0x1d6>
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d804      	bhi.n	8001af6 <HAL_GPIO_Init+0x14a>
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d072      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d01d      	beq.n	8001b30 <HAL_GPIO_Init+0x184>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001af4:	e099      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	f000 8094 	beq.w	8001c24 <HAL_GPIO_Init+0x278>
 8001afc:	2b11      	cmp	r3, #17
 8001afe:	d02b      	beq.n	8001b58 <HAL_GPIO_Init+0x1ac>
          break;
 8001b00:	e093      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 8001b02:	4a52      	ldr	r2, [pc, #328]	; (8001c4c <HAL_GPIO_Init+0x2a0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d066      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <HAL_GPIO_Init+0x2a0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d806      	bhi.n	8001b1c <HAL_GPIO_Init+0x170>
 8001b0e:	4a4e      	ldr	r2, [pc, #312]	; (8001c48 <HAL_GPIO_Init+0x29c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d060      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001b14:	4a4f      	ldr	r2, [pc, #316]	; (8001c54 <HAL_GPIO_Init+0x2a8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d05d      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
          break;
 8001b1a:	e086      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
      switch (GPIO_Init->Mode)
 8001b1c:	4a4c      	ldr	r2, [pc, #304]	; (8001c50 <HAL_GPIO_Init+0x2a4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d059      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001b22:	4a4e      	ldr	r2, [pc, #312]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d056      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001b28:	4a4b      	ldr	r2, [pc, #300]	; (8001c58 <HAL_GPIO_Init+0x2ac>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d053      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
          break;
 8001b2e:	e07c      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d00b      	beq.n	8001b50 <HAL_GPIO_Init+0x1a4>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d007      	beq.n	8001b50 <HAL_GPIO_Init+0x1a4>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x1a4>
 8001b48:	21d5      	movs	r1, #213	; 0xd5
 8001b4a:	483e      	ldr	r0, [pc, #248]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001b4c:	f7fe fe81 	bl	8000852 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e068      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d00b      	beq.n	8001b78 <HAL_GPIO_Init+0x1cc>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d007      	beq.n	8001b78 <HAL_GPIO_Init+0x1cc>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x1cc>
 8001b70:	21dc      	movs	r1, #220	; 0xdc
 8001b72:	4834      	ldr	r0, [pc, #208]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001b74:	f7fe fe6d 	bl	8000852 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	e053      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d00b      	beq.n	8001ba2 <HAL_GPIO_Init+0x1f6>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x1f6>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x1f6>
 8001b9a:	21e3      	movs	r1, #227	; 0xe3
 8001b9c:	4829      	ldr	r0, [pc, #164]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001b9e:	f7fe fe58 	bl	8000852 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	3308      	adds	r3, #8
 8001ba8:	623b      	str	r3, [r7, #32]
          break;
 8001baa:	e03e      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d00b      	beq.n	8001bcc <HAL_GPIO_Init+0x220>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x220>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x220>
 8001bc4:	21ea      	movs	r1, #234	; 0xea
 8001bc6:	481f      	ldr	r0, [pc, #124]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001bc8:	f7fe fe43 	bl	8000852 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	330c      	adds	r3, #12
 8001bd2:	623b      	str	r3, [r7, #32]
          break;
 8001bd4:	e029      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_GPIO_Init+0x24a>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x24a>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x24a>
 8001bee:	21f7      	movs	r1, #247	; 0xf7
 8001bf0:	4814      	ldr	r0, [pc, #80]	; (8001c44 <HAL_GPIO_Init+0x298>)
 8001bf2:	f7fe fe2e 	bl	8000852 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_GPIO_Init+0x258>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	623b      	str	r3, [r7, #32]
          break;
 8001c02:	e012      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_GPIO_Init+0x26c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	611a      	str	r2, [r3, #16]
          break;
 8001c16:	e008      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	615a      	str	r2, [r3, #20]
          break;
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x27e>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2bff      	cmp	r3, #255	; 0xff
 8001c2e:	d817      	bhi.n	8001c60 <HAL_GPIO_Init+0x2b4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	e017      	b.n	8001c64 <HAL_GPIO_Init+0x2b8>
 8001c34:	40010800 	.word	0x40010800
 8001c38:	40010c00 	.word	0x40010c00
 8001c3c:	40011000 	.word	0x40011000
 8001c40:	40011400 	.word	0x40011400
 8001c44:	08005c60 	.word	0x08005c60
 8001c48:	10110000 	.word	0x10110000
 8001c4c:	10210000 	.word	0x10210000
 8001c50:	10310000 	.word	0x10310000
 8001c54:	10120000 	.word	0x10120000
 8001c58:	10220000 	.word	0x10220000
 8001c5c:	10320000 	.word	0x10320000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2bff      	cmp	r3, #255	; 0xff
 8001c6a:	d802      	bhi.n	8001c72 <HAL_GPIO_Init+0x2c6>
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_Init+0x2cc>
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3b08      	subs	r3, #8
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	210f      	movs	r1, #15
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	401a      	ands	r2, r3
 8001c8a:	6a39      	ldr	r1, [r7, #32]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	431a      	orrs	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8090 	beq.w	8001dc6 <HAL_GPIO_Init+0x41a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca6:	4b4f      	ldr	r3, [pc, #316]	; (8001de4 <HAL_GPIO_Init+0x438>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <HAL_GPIO_Init+0x438>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6193      	str	r3, [r2, #24]
 8001cb2:	4b4c      	ldr	r3, [pc, #304]	; (8001de4 <HAL_GPIO_Init+0x438>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cbe:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x43c>)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a41      	ldr	r2, [pc, #260]	; (8001dec <HAL_GPIO_Init+0x440>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x35a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a40      	ldr	r2, [pc, #256]	; (8001df0 <HAL_GPIO_Init+0x444>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x356>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a3f      	ldr	r2, [pc, #252]	; (8001df4 <HAL_GPIO_Init+0x448>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x352>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x35c>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x35c>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x35c>
 8001d06:	2300      	movs	r3, #0
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d18:	4933      	ldr	r1, [pc, #204]	; (8001de8 <HAL_GPIO_Init+0x43c>)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <HAL_GPIO_Init+0x394>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4930      	ldr	r1, [pc, #192]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
 8001d3e:	e006      	b.n	8001d4e <HAL_GPIO_Init+0x3a2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	492b      	ldr	r1, [pc, #172]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_Init+0x3bc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4926      	ldr	r1, [pc, #152]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
 8001d66:	e006      	b.n	8001d76 <HAL_GPIO_Init+0x3ca>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d68:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4921      	ldr	r1, [pc, #132]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_GPIO_Init+0x3e4>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	491c      	ldr	r1, [pc, #112]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
 8001d8e:	e006      	b.n	8001d9e <HAL_GPIO_Init+0x3f2>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	4917      	ldr	r1, [pc, #92]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_GPIO_Init+0x40c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	4912      	ldr	r1, [pc, #72]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60cb      	str	r3, [r1, #12]
 8001db6:	e006      	b.n	8001dc6 <HAL_GPIO_Init+0x41a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	490d      	ldr	r1, [pc, #52]	; (8001df8 <HAL_GPIO_Init+0x44c>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f47f ae5b 	bne.w	8001a92 <HAL_GPIO_Init+0xe6>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40010800 	.word	0x40010800
 8001df0:	40010c00 	.word	0x40010c00
 8001df4:	40011000 	.word	0x40011000
 8001df8:	40010400 	.word	0x40010400

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <HAL_GPIO_WritePin+0x20>
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	041b      	lsls	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <HAL_GPIO_WritePin+0x2a>
 8001e1c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001e20:	480e      	ldr	r0, [pc, #56]	; (8001e5c <HAL_GPIO_WritePin+0x60>)
 8001e22:	f7fe fd16 	bl	8000852 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001e26:	787b      	ldrb	r3, [r7, #1]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_GPIO_WritePin+0x40>
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d004      	beq.n	8001e3c <HAL_GPIO_WritePin+0x40>
 8001e32:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001e36:	4809      	ldr	r0, [pc, #36]	; (8001e5c <HAL_GPIO_WritePin+0x60>)
 8001e38:	f7fe fd0b 	bl	8000852 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	08005c60 	.word	0x08005c60

08001e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e193      	b.n	800219a <HAL_I2C_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a95      	ldr	r2, [pc, #596]	; (80020cc <HAL_I2C_Init+0x26c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_I2C_Init+0x26>
 8001e7c:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001e80:	4893      	ldr	r0, [pc, #588]	; (80020d0 <HAL_I2C_Init+0x270>)
 8001e82:	f7fe fce6 	bl	8000852 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <HAL_I2C_Init+0x38>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4a90      	ldr	r2, [pc, #576]	; (80020d4 <HAL_I2C_Init+0x274>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d904      	bls.n	8001ea2 <HAL_I2C_Init+0x42>
 8001e98:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8001e9c:	488c      	ldr	r0, [pc, #560]	; (80020d0 <HAL_I2C_Init+0x270>)
 8001e9e:	f7fe fcd8 	bl	8000852 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_I2C_Init+0x5e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eb2:	d004      	beq.n	8001ebe <HAL_I2C_Init+0x5e>
 8001eb4:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001eb8:	4885      	ldr	r0, [pc, #532]	; (80020d0 <HAL_I2C_Init+0x270>)
 8001eba:	f7fe fcca 	bl	8000852 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d004      	beq.n	8001ed8 <HAL_I2C_Init+0x78>
 8001ece:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8001ed2:	487f      	ldr	r0, [pc, #508]	; (80020d0 <HAL_I2C_Init+0x270>)
 8001ed4:	f7fe fcbd 	bl	8000852 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ee0:	d009      	beq.n	8001ef6 <HAL_I2C_Init+0x96>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001eea:	d004      	beq.n	8001ef6 <HAL_I2C_Init+0x96>
 8001eec:	f240 11d1 	movw	r1, #465	; 0x1d1
 8001ef0:	4877      	ldr	r0, [pc, #476]	; (80020d0 <HAL_I2C_Init+0x270>)
 8001ef2:	f7fe fcae 	bl	8000852 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d008      	beq.n	8001f10 <HAL_I2C_Init+0xb0>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d004      	beq.n	8001f10 <HAL_I2C_Init+0xb0>
 8001f06:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8001f0a:	4871      	ldr	r0, [pc, #452]	; (80020d0 <HAL_I2C_Init+0x270>)
 8001f0c:	f7fe fca1 	bl	8000852 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_I2C_Init+0xc6>
 8001f1c:	f240 11d3 	movw	r1, #467	; 0x1d3
 8001f20:	486b      	ldr	r0, [pc, #428]	; (80020d0 <HAL_I2C_Init+0x270>)
 8001f22:	f7fe fc96 	bl	8000852 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_I2C_Init+0xe0>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d004      	beq.n	8001f40 <HAL_I2C_Init+0xe0>
 8001f36:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001f3a:	4865      	ldr	r0, [pc, #404]	; (80020d0 <HAL_I2C_Init+0x270>)
 8001f3c:	f7fe fc89 	bl	8000852 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_I2C_Init+0xfa>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	2b80      	cmp	r3, #128	; 0x80
 8001f4e:	d004      	beq.n	8001f5a <HAL_I2C_Init+0xfa>
 8001f50:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001f54:	485e      	ldr	r0, [pc, #376]	; (80020d0 <HAL_I2C_Init+0x270>)
 8001f56:	f7fe fc7c 	bl	8000852 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_I2C_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fa32 	bl	80003d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f8c:	f002 fadc 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 8001f90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4a50      	ldr	r2, [pc, #320]	; (80020d8 <HAL_I2C_Init+0x278>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d807      	bhi.n	8001fac <HAL_I2C_Init+0x14c>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4a4f      	ldr	r2, [pc, #316]	; (80020dc <HAL_I2C_Init+0x27c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	bf94      	ite	ls
 8001fa4:	2301      	movls	r3, #1
 8001fa6:	2300      	movhi	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	e006      	b.n	8001fba <HAL_I2C_Init+0x15a>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4a4c      	ldr	r2, [pc, #304]	; (80020e0 <HAL_I2C_Init+0x280>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	bf94      	ite	ls
 8001fb4:	2301      	movls	r3, #1
 8001fb6:	2300      	movhi	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Init+0x162>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0eb      	b.n	800219a <HAL_I2C_Init+0x33a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4a47      	ldr	r2, [pc, #284]	; (80020e4 <HAL_I2C_Init+0x284>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9b      	lsrs	r3, r3, #18
 8001fcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a39      	ldr	r2, [pc, #228]	; (80020d8 <HAL_I2C_Init+0x278>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d802      	bhi.n	8001ffc <HAL_I2C_Init+0x19c>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	e009      	b.n	8002010 <HAL_I2C_Init+0x1b0>
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	4a38      	ldr	r2, [pc, #224]	; (80020e8 <HAL_I2C_Init+0x288>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	3301      	adds	r3, #1
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	430b      	orrs	r3, r1
 8002016:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002022:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	492b      	ldr	r1, [pc, #172]	; (80020d8 <HAL_I2C_Init+0x278>)
 800202c:	428b      	cmp	r3, r1
 800202e:	d80d      	bhi.n	800204c <HAL_I2C_Init+0x1ec>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1e59      	subs	r1, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fbb1 f3f3 	udiv	r3, r1, r3
 800203e:	3301      	adds	r3, #1
 8002040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002044:	2b04      	cmp	r3, #4
 8002046:	bf38      	it	cc
 8002048:	2304      	movcc	r3, #4
 800204a:	e05f      	b.n	800210c <HAL_I2C_Init+0x2ac>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d111      	bne.n	8002078 <HAL_I2C_Init+0x218>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	fbb0 f3f3 	udiv	r3, r0, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e012      	b.n	800209e <HAL_I2C_Init+0x23e>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Init+0x246>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e032      	b.n	800210c <HAL_I2C_Init+0x2ac>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d11e      	bne.n	80020ec <HAL_I2C_Init+0x28c>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e58      	subs	r0, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	440b      	add	r3, r1
 80020bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	e01f      	b.n	800210c <HAL_I2C_Init+0x2ac>
 80020cc:	40005400 	.word	0x40005400
 80020d0:	08005c9c 	.word	0x08005c9c
 80020d4:	00061a80 	.word	0x00061a80
 80020d8:	000186a0 	.word	0x000186a0
 80020dc:	001e847f 	.word	0x001e847f
 80020e0:	003d08ff 	.word	0x003d08ff
 80020e4:	431bde83 	.word	0x431bde83
 80020e8:	10624dd3 	.word	0x10624dd3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1e58      	subs	r0, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	0099      	lsls	r1, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002102:	3301      	adds	r3, #1
 8002104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	6809      	ldr	r1, [r1, #0]
 8002110:	4313      	orrs	r3, r2
 8002112:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800213a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6911      	ldr	r1, [r2, #16]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68d2      	ldr	r2, [r2, #12]
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	430b      	orrs	r3, r1
 800214e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop

080021a4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d158      	bne.n	8002270 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_I2C_Slave_Receive_IT+0x26>
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e051      	b.n	8002272 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_I2C_Slave_Receive_IT+0x38>
 80021d8:	2302      	movs	r3, #2
 80021da:	e04a      	b.n	8002272 <HAL_I2C_Slave_Receive_IT+0xce>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d007      	beq.n	8002202 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002210:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2222      	movs	r2, #34	; 0x22
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <HAL_I2C_Slave_Receive_IT+0xd8>)
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002252:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800226a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e000      	b.n	8002272 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
  }
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	ffff0000 	.word	0xffff0000

08002280 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d003      	beq.n	80022b8 <HAL_I2C_EV_IRQHandler+0x38>
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	f040 80b6 	bne.w	8002424 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <HAL_I2C_EV_IRQHandler+0x6e>
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80022d8:	d003      	beq.n	80022e2 <HAL_I2C_EV_IRQHandler+0x62>
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80022e0:	d101      	bne.n	80022e6 <HAL_I2C_EV_IRQHandler+0x66>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_I2C_EV_IRQHandler+0x68>
 80022e6:	2300      	movs	r3, #0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	f000 8127 	beq.w	800253c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00c      	beq.n	8002312 <HAL_I2C_EV_IRQHandler+0x92>
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	0a5b      	lsrs	r3, r3, #9
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f001 fb8c 	bl	8003a22 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fd1b 	bl	8002d46 <I2C_Master_SB>
 8002310:	e087      	b.n	8002422 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08db      	lsrs	r3, r3, #3
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0xb2>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	0a5b      	lsrs	r3, r3, #9
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fd90 	bl	8002e50 <I2C_Master_ADD10>
 8002330:	e077      	b.n	8002422 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_I2C_EV_IRQHandler+0xd2>
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	0a5b      	lsrs	r3, r3, #9
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fda9 	bl	8002ea2 <I2C_Master_ADDR>
 8002350:	e067      	b.n	8002422 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d030      	beq.n	80023c0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800236c:	f000 80e8 	beq.w	8002540 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	09db      	lsrs	r3, r3, #7
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00f      	beq.n	800239c <HAL_I2C_EV_IRQHandler+0x11c>
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	0a9b      	lsrs	r3, r3, #10
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <HAL_I2C_EV_IRQHandler+0x11c>
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d103      	bne.n	800239c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f9fc 	bl	8002792 <I2C_MasterTransmit_TXE>
 800239a:	e042      	b.n	8002422 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80cb 	beq.w	8002540 <HAL_I2C_EV_IRQHandler+0x2c0>
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	0a5b      	lsrs	r3, r3, #9
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80c4 	beq.w	8002540 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fae2 	bl	8002982 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023be:	e0bf      	b.n	8002540 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ce:	f000 80b7 	beq.w	8002540 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00f      	beq.n	80023fe <HAL_I2C_EV_IRQHandler+0x17e>
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	0a9b      	lsrs	r3, r3, #10
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <HAL_I2C_EV_IRQHandler+0x17e>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fb39 	bl	8002a6e <I2C_MasterReceive_RXNE>
 80023fc:	e011      	b.n	8002422 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 809a 	beq.w	8002540 <HAL_I2C_EV_IRQHandler+0x2c0>
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	0a5b      	lsrs	r3, r3, #9
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8093 	beq.w	8002540 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fba9 	bl	8002b72 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002420:	e08e      	b.n	8002540 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002422:	e08d      	b.n	8002540 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	e007      	b.n	8002446 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d012      	beq.n	8002478 <HAL_I2C_EV_IRQHandler+0x1f8>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	0a5b      	lsrs	r3, r3, #9
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00c      	beq.n	8002478 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800246e:	69b9      	ldr	r1, [r7, #24]
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 ff6d 	bl	8003350 <I2C_Slave_ADDR>
 8002476:	e066      	b.n	8002546 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <HAL_I2C_EV_IRQHandler+0x218>
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	0a5b      	lsrs	r3, r3, #9
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 ffa1 	bl	80033d8 <I2C_Slave_STOPF>
 8002496:	e056      	b.n	8002546 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	2b21      	cmp	r3, #33	; 0x21
 800249c:	d002      	beq.n	80024a4 <HAL_I2C_EV_IRQHandler+0x224>
 800249e:	7bbb      	ldrb	r3, [r7, #14]
 80024a0:	2b29      	cmp	r3, #41	; 0x29
 80024a2:	d125      	bne.n	80024f0 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	09db      	lsrs	r3, r3, #7
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00f      	beq.n	80024d0 <HAL_I2C_EV_IRQHandler+0x250>
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	0a9b      	lsrs	r3, r3, #10
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <HAL_I2C_EV_IRQHandler+0x250>
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d103      	bne.n	80024d0 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fe85 	bl	80031d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024ce:	e039      	b.n	8002544 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d033      	beq.n	8002544 <HAL_I2C_EV_IRQHandler+0x2c4>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	0a5b      	lsrs	r3, r3, #9
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02d      	beq.n	8002544 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 feb2 	bl	8003252 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024ee:	e029      	b.n	8002544 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	099b      	lsrs	r3, r3, #6
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00f      	beq.n	800251c <HAL_I2C_EV_IRQHandler+0x29c>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	0a9b      	lsrs	r3, r3, #10
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <HAL_I2C_EV_IRQHandler+0x29c>
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 febc 	bl	8003292 <I2C_SlaveReceive_RXNE>
 800251a:	e014      	b.n	8002546 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <HAL_I2C_EV_IRQHandler+0x2c6>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	0a5b      	lsrs	r3, r3, #9
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 feea 	bl	800330e <I2C_SlaveReceive_BTF>
 800253a:	e004      	b.n	8002546 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800253c:	bf00      	nop
 800253e:	e002      	b.n	8002546 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002540:	bf00      	nop
 8002542:	e000      	b.n	8002546 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002544:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d016      	beq.n	80025a2 <HAL_I2C_ER_IRQHandler+0x56>
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002590:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	0a5b      	lsrs	r3, r3, #9
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00e      	beq.n	80025cc <HAL_I2C_ER_IRQHandler+0x80>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80025ca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	0a9b      	lsrs	r3, r3, #10
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d041      	beq.n	800265c <HAL_I2C_ER_IRQHandler+0x110>
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d03b      	beq.n	800265c <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025ea:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fa:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002602:	7efb      	ldrb	r3, [r7, #27]
 8002604:	2b20      	cmp	r3, #32
 8002606:	d112      	bne.n	800262e <HAL_I2C_ER_IRQHandler+0xe2>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <HAL_I2C_ER_IRQHandler+0xe2>
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	2b21      	cmp	r3, #33	; 0x21
 8002612:	d008      	beq.n	8002626 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	2b29      	cmp	r3, #41	; 0x29
 8002618:	d005      	beq.n	8002626 <HAL_I2C_ER_IRQHandler+0xda>
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	2b28      	cmp	r3, #40	; 0x28
 800261e:	d106      	bne.n	800262e <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b21      	cmp	r3, #33	; 0x21
 8002624:	d103      	bne.n	800262e <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f001 f806 	bl	8003638 <I2C_Slave_AF>
 800262c:	e016      	b.n	800265c <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002636:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b10      	cmp	r3, #16
 800264a:	d107      	bne.n	800265c <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	0adb      	lsrs	r3, r3, #11
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00e      	beq.n	8002686 <HAL_I2C_ER_IRQHandler+0x13a>
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002684:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f001 f83d 	bl	8003718 <I2C_ITError>
  }
}
 800269e:	bf00      	nop
 80026a0:	3728      	adds	r7, #40	; 0x28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	70fb      	strb	r3, [r7, #3]
 80026fa:	4613      	mov	r3, r2
 80026fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002770:	b2db      	uxtb	r3, r3
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d150      	bne.n	800285a <I2C_MasterTransmit_TXE+0xc8>
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b21      	cmp	r3, #33	; 0x21
 80027bc:	d14d      	bne.n	800285a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d01d      	beq.n	8002800 <I2C_MasterTransmit_TXE+0x6e>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d01a      	beq.n	8002800 <I2C_MasterTransmit_TXE+0x6e>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d0:	d016      	beq.n	8002800 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027e0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2211      	movs	r2, #17
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff54 	bl	80026a6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027fe:	e0bc      	b.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800280e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d107      	bne.n	800284a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff69 	bl	800271a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002848:	e097      	b.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ff27 	bl	80026a6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002858:	e08f      	b.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b21      	cmp	r3, #33	; 0x21
 800285e:	d007      	beq.n	8002870 <I2C_MasterTransmit_TXE+0xde>
 8002860:	7bbb      	ldrb	r3, [r7, #14]
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	f040 8089 	bne.w	800297a <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b22      	cmp	r3, #34	; 0x22
 800286c:	f040 8085 	bne.w	800297a <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d108      	bne.n	800288c <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002888:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800288a:	e076      	b.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d15d      	bne.n	8002954 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11d      	bne.n	80028dc <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d10b      	bne.n	80028c0 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b8:	1c9a      	adds	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028be:	e05c      	b.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	121b      	asrs	r3, r3, #8
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028da:	e04e      	b.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d10b      	bne.n	80028fc <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028fa:	e03e      	b.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002900:	2b02      	cmp	r3, #2
 8002902:	d13a      	bne.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b22      	cmp	r3, #34	; 0x22
 800290e:	d108      	bne.n	8002922 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	e02b      	b.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b21      	cmp	r3, #33	; 0x21
 800292c:	d125      	bne.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002952:	e012      	b.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002978:	e7ff      	b.n	800297a <I2C_MasterTransmit_TXE+0x1e8>
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b21      	cmp	r3, #33	; 0x21
 800299a:	d164      	bne.n	8002a66 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d012      	beq.n	80029cc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80029ca:	e04c      	b.n	8002a66 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d01d      	beq.n	8002a0e <I2C_MasterTransmit_BTF+0x8c>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d01a      	beq.n	8002a0e <I2C_MasterTransmit_BTF+0x8c>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029de:	d016      	beq.n	8002a0e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ee:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2211      	movs	r2, #17
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fe4d 	bl	80026a6 <HAL_I2C_MasterTxCpltCallback>
}
 8002a0c:	e02b      	b.n	8002a66 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a1c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d107      	bne.n	8002a58 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fe62 	bl	800271a <HAL_I2C_MemTxCpltCallback>
}
 8002a56:	e006      	b.n	8002a66 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff fe20 	bl	80026a6 <HAL_I2C_MasterTxCpltCallback>
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b22      	cmp	r3, #34	; 0x22
 8002a80:	d173      	bne.n	8002b6a <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d920      	bls.n	8002ad2 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d154      	bne.n	8002b6a <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ace:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002ad0:	e04b      	b.n	8002b6a <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d047      	beq.n	8002b6a <I2C_MasterReceive_RXNE+0xfc>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d002      	beq.n	8002ae6 <I2C_MasterReceive_RXNE+0x78>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d141      	bne.n	8002b6a <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b04:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d10a      	bne.n	8002b56 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fdec 	bl	800272c <HAL_I2C_MemRxCpltCallback>
}
 8002b54:	e009      	b.n	8002b6a <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2212      	movs	r2, #18
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff fda7 	bl	80026b8 <HAL_I2C_MasterRxCpltCallback>
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d11b      	bne.n	8002bc2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b98:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002bc0:	e0bd      	b.n	8002d3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d129      	bne.n	8002c20 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bda:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d00a      	beq.n	8002bf8 <I2C_MasterReceive_BTF+0x86>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d007      	beq.n	8002bf8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c1e:	e08e      	b.n	8002d3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d176      	bne.n	8002d18 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d002      	beq.n	8002c36 <I2C_MasterReceive_BTF+0xc4>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b10      	cmp	r3, #16
 8002c34:	d108      	bne.n	8002c48 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	e019      	b.n	8002c7c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d002      	beq.n	8002c54 <I2C_MasterReceive_BTF+0xe2>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d108      	bne.n	8002c66 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e00a      	b.n	8002c7c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d007      	beq.n	8002c7c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002cd6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b40      	cmp	r3, #64	; 0x40
 8002cea:	d10a      	bne.n	8002d02 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fd16 	bl	800272c <HAL_I2C_MemRxCpltCallback>
}
 8002d00:	e01d      	b.n	8002d3e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2212      	movs	r2, #18
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff fcd1 	bl	80026b8 <HAL_I2C_MasterRxCpltCallback>
}
 8002d16:	e012      	b.n	8002d3e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	d117      	bne.n	8002d8a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d72:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002d74:	e067      	b.n	8002e46 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]
}
 8002d88:	e05d      	b.n	8002e46 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d92:	d133      	bne.n	8002dfc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b21      	cmp	r3, #33	; 0x21
 8002d9e:	d109      	bne.n	8002db4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db0:	611a      	str	r2, [r3, #16]
 8002db2:	e008      	b.n	8002dc6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <I2C_Master_SB+0x90>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d037      	beq.n	8002e46 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <I2C_Master_SB+0xa4>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d02d      	beq.n	8002e46 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002df8:	605a      	str	r2, [r3, #4]
}
 8002dfa:	e024      	b.n	8002e46 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10e      	bne.n	8002e22 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	11db      	asrs	r3, r3, #7
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f003 0306 	and.w	r3, r3, #6
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f063 030f 	orn	r3, r3, #15
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]
}
 8002e20:	e011      	b.n	8002e46 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10d      	bne.n	8002e46 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	11db      	asrs	r3, r3, #7
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f003 0306 	and.w	r3, r3, #6
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f063 030e 	orn	r3, r3, #14
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	611a      	str	r2, [r3, #16]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <I2C_Master_ADD10+0x24>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d011      	beq.n	8002e98 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <I2C_Master_ADD10+0x38>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e96:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b091      	sub	sp, #68	; 0x44
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b22      	cmp	r3, #34	; 0x22
 8002eca:	f040 8174 	bne.w	80031b6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <I2C_Master_ADDR+0x54>
 8002ed6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002eda:	2b40      	cmp	r3, #64	; 0x40
 8002edc:	d10b      	bne.n	8002ef6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	e16b      	b.n	80031ce <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d11d      	bne.n	8002f3a <I2C_Master_ADDR+0x98>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f06:	d118      	bne.n	8002f3a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	651a      	str	r2, [r3, #80]	; 0x50
 8002f38:	e149      	b.n	80031ce <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d113      	bne.n	8002f6c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	e120      	b.n	80031ae <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	f040 808a 	bne.w	800308c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f7e:	d137      	bne.n	8002ff0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f9e:	d113      	bne.n	8002fc8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fae:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	e0f2      	b.n	80031ae <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	623b      	str	r3, [r7, #32]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	623b      	str	r3, [r7, #32]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	623b      	str	r3, [r7, #32]
 8002fdc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e0de      	b.n	80031ae <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d02e      	beq.n	8003054 <I2C_Master_ADDR+0x1b2>
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d02b      	beq.n	8003054 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffe:	2b12      	cmp	r3, #18
 8003000:	d102      	bne.n	8003008 <I2C_Master_ADDR+0x166>
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003004:	2b01      	cmp	r3, #1
 8003006:	d125      	bne.n	8003054 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	2b04      	cmp	r3, #4
 800300c:	d00e      	beq.n	800302c <I2C_Master_ADDR+0x18a>
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	2b02      	cmp	r3, #2
 8003012:	d00b      	beq.n	800302c <I2C_Master_ADDR+0x18a>
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	2b10      	cmp	r3, #16
 8003018:	d008      	beq.n	800302c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e007      	b.n	800303c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800303a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	e0ac      	b.n	80031ae <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003062:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e090      	b.n	80031ae <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d158      	bne.n	8003148 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	2b04      	cmp	r3, #4
 800309a:	d021      	beq.n	80030e0 <I2C_Master_ADDR+0x23e>
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d01e      	beq.n	80030e0 <I2C_Master_ADDR+0x23e>
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d01b      	beq.n	80030e0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e012      	b.n	8003106 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f0:	2300      	movs	r3, #0
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003114:	d14b      	bne.n	80031ae <I2C_Master_ADDR+0x30c>
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800311c:	d00b      	beq.n	8003136 <I2C_Master_ADDR+0x294>
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	2b01      	cmp	r3, #1
 8003122:	d008      	beq.n	8003136 <I2C_Master_ADDR+0x294>
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	2b08      	cmp	r3, #8
 8003128:	d005      	beq.n	8003136 <I2C_Master_ADDR+0x294>
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	2b10      	cmp	r3, #16
 800312e:	d002      	beq.n	8003136 <I2C_Master_ADDR+0x294>
 8003130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003132:	2b20      	cmp	r3, #32
 8003134:	d13b      	bne.n	80031ae <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	e032      	b.n	80031ae <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003156:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003166:	d117      	bne.n	8003198 <I2C_Master_ADDR+0x2f6>
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800316e:	d00b      	beq.n	8003188 <I2C_Master_ADDR+0x2e6>
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	2b01      	cmp	r3, #1
 8003174:	d008      	beq.n	8003188 <I2C_Master_ADDR+0x2e6>
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	2b08      	cmp	r3, #8
 800317a:	d005      	beq.n	8003188 <I2C_Master_ADDR+0x2e6>
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	2b10      	cmp	r3, #16
 8003180:	d002      	beq.n	8003188 <I2C_Master_ADDR+0x2e6>
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	2b20      	cmp	r3, #32
 8003186:	d107      	bne.n	8003198 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003196:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80031b4:	e00b      	b.n	80031ce <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
}
 80031cc:	e7ff      	b.n	80031ce <I2C_Master_ADDR+0x32c>
 80031ce:	bf00      	nop
 80031d0:	3744      	adds	r7, #68	; 0x44
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02b      	beq.n	800324a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d114      	bne.n	800324a <I2C_SlaveTransmit_TXE+0x72>
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b29      	cmp	r3, #41	; 0x29
 8003224:	d111      	bne.n	800324a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003234:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2221      	movs	r2, #33	; 0x21
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2228      	movs	r2, #40	; 0x28
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff fa40 	bl	80026ca <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d011      	beq.n	8003288 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d02c      	beq.n	8003306 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d114      	bne.n	8003306 <I2C_SlaveReceive_RXNE+0x74>
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	2b2a      	cmp	r3, #42	; 0x2a
 80032e0:	d111      	bne.n	8003306 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2222      	movs	r2, #34	; 0x22
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2228      	movs	r2, #40	; 0x28
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff f9eb 	bl	80026dc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800336a:	2b28      	cmp	r3, #40	; 0x28
 800336c:	d127      	bne.n	80033be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	09db      	lsrs	r3, r3, #7
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d103      	bne.n	80033a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	81bb      	strh	r3, [r7, #12]
 80033a0:	e002      	b.n	80033a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80033b0:	89ba      	ldrh	r2, [r7, #12]
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff f999 	bl	80026ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80033bc:	e008      	b.n	80033d0 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0202 	mvn.w	r2, #2
 80033c6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003424:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003434:	d172      	bne.n	800351c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2b22      	cmp	r3, #34	; 0x22
 800343a:	d002      	beq.n	8003442 <I2C_Slave_STOPF+0x6a>
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b2a      	cmp	r3, #42	; 0x2a
 8003440:	d135      	bne.n	80034ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	b29a      	uxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f043 0204 	orr.w	r2, r3, #4
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003474:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fa8a 	bl	8001994 <HAL_DMA_GetState>
 8003480:	4603      	mov	r3, r0
 8003482:	2b01      	cmp	r3, #1
 8003484:	d049      	beq.n	800351a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	4a69      	ldr	r2, [pc, #420]	; (8003630 <I2C_Slave_STOPF+0x258>)
 800348c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe fa08 	bl	80018a8 <HAL_DMA_Abort_IT>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d03d      	beq.n	800351a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034a8:	4610      	mov	r0, r2
 80034aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034ac:	e035      	b.n	800351a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f043 0204 	orr.w	r2, r3, #4
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fa54 	bl	8001994 <HAL_DMA_GetState>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d014      	beq.n	800351c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	4a4e      	ldr	r2, [pc, #312]	; (8003630 <I2C_Slave_STOPF+0x258>)
 80034f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe f9d2 	bl	80018a8 <HAL_DMA_Abort_IT>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003514:	4610      	mov	r0, r2
 8003516:	4798      	blx	r3
 8003518:	e000      	b.n	800351c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800351a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d03e      	beq.n	80035a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d112      	bne.n	800355a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d112      	bne.n	800358e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f043 0204 	orr.w	r2, r3, #4
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f8b3 	bl	8003718 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80035b2:	e039      	b.n	8003628 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b2a      	cmp	r3, #42	; 0x2a
 80035b8:	d109      	bne.n	80035ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2228      	movs	r2, #40	; 0x28
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff f887 	bl	80026dc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b28      	cmp	r3, #40	; 0x28
 80035d8:	d111      	bne.n	80035fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a15      	ldr	r2, [pc, #84]	; (8003634 <I2C_Slave_STOPF+0x25c>)
 80035de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff f886 	bl	8002708 <HAL_I2C_ListenCpltCallback>
}
 80035fc:	e014      	b.n	8003628 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	2b22      	cmp	r3, #34	; 0x22
 8003604:	d002      	beq.n	800360c <I2C_Slave_STOPF+0x234>
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b22      	cmp	r3, #34	; 0x22
 800360a:	d10d      	bne.n	8003628 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff f85a 	bl	80026dc <HAL_I2C_SlaveRxCpltCallback>
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	08003945 	.word	0x08003945
 8003634:	ffff0000 	.word	0xffff0000

08003638 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d002      	beq.n	800365a <I2C_Slave_AF+0x22>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b20      	cmp	r3, #32
 8003658:	d129      	bne.n	80036ae <I2C_Slave_AF+0x76>
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	2b28      	cmp	r3, #40	; 0x28
 800365e:	d126      	bne.n	80036ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <I2C_Slave_AF+0xdc>)
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003674:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800367e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff f82e 	bl	8002708 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80036ac:	e02e      	b.n	800370c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b21      	cmp	r3, #33	; 0x21
 80036b2:	d126      	bne.n	8003702 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a17      	ldr	r2, [pc, #92]	; (8003714 <I2C_Slave_AF+0xdc>)
 80036b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2221      	movs	r2, #33	; 0x21
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fe ffe5 	bl	80026ca <HAL_I2C_SlaveTxCpltCallback>
}
 8003700:	e004      	b.n	800370c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800370a:	615a      	str	r2, [r3, #20]
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	ffff0000 	.word	0xffff0000

08003718 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003726:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b10      	cmp	r3, #16
 8003732:	d10a      	bne.n	800374a <I2C_ITError+0x32>
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b22      	cmp	r3, #34	; 0x22
 8003738:	d107      	bne.n	800374a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003748:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003750:	2b28      	cmp	r3, #40	; 0x28
 8003752:	d107      	bne.n	8003764 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2228      	movs	r2, #40	; 0x28
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003762:	e015      	b.n	8003790 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003772:	d006      	beq.n	8003782 <I2C_ITError+0x6a>
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b60      	cmp	r3, #96	; 0x60
 8003778:	d003      	beq.n	8003782 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800379e:	d161      	bne.n	8003864 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d020      	beq.n	80037fe <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	4a5e      	ldr	r2, [pc, #376]	; (800393c <I2C_ITError+0x224>)
 80037c2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe f86d 	bl	80018a8 <HAL_DMA_Abort_IT>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8089 	beq.w	80038e8 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
 80037fc:	e074      	b.n	80038e8 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	4a4e      	ldr	r2, [pc, #312]	; (800393c <I2C_ITError+0x224>)
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe f84c 	bl	80018a8 <HAL_DMA_Abort_IT>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d068      	beq.n	80038e8 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d10b      	bne.n	800383c <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800385e:	4610      	mov	r0, r2
 8003860:	4798      	blx	r3
 8003862:	e041      	b.n	80038e8 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b60      	cmp	r3, #96	; 0x60
 800386e:	d125      	bne.n	80038bc <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d10b      	bne.n	80038a4 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fe ff4b 	bl	8002750 <HAL_I2C_AbortCpltCallback>
 80038ba:	e015      	b.n	80038e8 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d10b      	bne.n	80038e2 <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fe ff2b 	bl	800273e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d11b      	bne.n	8003934 <I2C_ITError+0x21c>
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b28      	cmp	r3, #40	; 0x28
 8003900:	d118      	bne.n	8003934 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003910:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <I2C_ITError+0x228>)
 8003916:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe feea 	bl	8002708 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	08003945 	.word	0x08003945
 8003940:	ffff0000 	.word	0xffff0000

08003944 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	2200      	movs	r2, #0
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	2200      	movs	r2, #0
 8003968:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003978:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	2200      	movs	r2, #0
 8003986:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	2200      	movs	r2, #0
 800398e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b60      	cmp	r3, #96	; 0x60
 80039aa:	d10e      	bne.n	80039ca <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7fe fec4 	bl	8002750 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039c8:	e027      	b.n	8003a1a <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039ca:	7afb      	ldrb	r3, [r7, #11]
 80039cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039d0:	2b28      	cmp	r3, #40	; 0x28
 80039d2:	d117      	bne.n	8003a04 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2228      	movs	r2, #40	; 0x28
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a02:	e007      	b.n	8003a14 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7fe fe92 	bl	800273e <HAL_I2C_ErrorCallback>
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a32:	d103      	bne.n	8003a3c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a3a:	e007      	b.n	8003a4c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a44:	d102      	bne.n	8003a4c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2208      	movs	r2, #8
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <HAL_PWR_EnableBkUpAccess+0x14>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	420e0020 	.word	0x420e0020

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e35c      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x54>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d116      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x54>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d110      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x54>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x54>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x54>
 8003aba:	f240 1167 	movw	r1, #359	; 0x167
 8003abe:	48a5      	ldr	r0, [pc, #660]	; (8003d54 <HAL_RCC_OscConfig+0x2e4>)
 8003ac0:	f7fc fec7 	bl	8000852 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 809a 	beq.w	8003c06 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00e      	beq.n	8003af8 <HAL_RCC_OscConfig+0x88>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae2:	d009      	beq.n	8003af8 <HAL_RCC_OscConfig+0x88>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aec:	d004      	beq.n	8003af8 <HAL_RCC_OscConfig+0x88>
 8003aee:	f240 116d 	movw	r1, #365	; 0x16d
 8003af2:	4898      	ldr	r0, [pc, #608]	; (8003d54 <HAL_RCC_OscConfig+0x2e4>)
 8003af4:	f7fc fead 	bl	8000852 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af8:	4b97      	ldr	r3, [pc, #604]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d00c      	beq.n	8003b1e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b04:	4b94      	ldr	r3, [pc, #592]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d112      	bne.n	8003b36 <HAL_RCC_OscConfig+0xc6>
 8003b10:	4b91      	ldr	r3, [pc, #580]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d10b      	bne.n	8003b36 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1e:	4b8e      	ldr	r3, [pc, #568]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d06c      	beq.n	8003c04 <HAL_RCC_OscConfig+0x194>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d168      	bne.n	8003c04 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e302      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0xde>
 8003b40:	4b85      	ldr	r3, [pc, #532]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a84      	ldr	r2, [pc, #528]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e02e      	b.n	8003bac <HAL_RCC_OscConfig+0x13c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x100>
 8003b56:	4b80      	ldr	r3, [pc, #512]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7f      	ldr	r2, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b7d      	ldr	r3, [pc, #500]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a7c      	ldr	r2, [pc, #496]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e01d      	b.n	8003bac <HAL_RCC_OscConfig+0x13c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x124>
 8003b7a:	4b77      	ldr	r3, [pc, #476]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a76      	ldr	r2, [pc, #472]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b74      	ldr	r3, [pc, #464]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a73      	ldr	r2, [pc, #460]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0x13c>
 8003b94:	4b70      	ldr	r3, [pc, #448]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a6f      	ldr	r2, [pc, #444]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a6c      	ldr	r2, [pc, #432]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003baa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd f870 	bl	8000c98 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fd f86c 	bl	8000c98 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e2b6      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b62      	ldr	r3, [pc, #392]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x14c>
 8003bda:	e014      	b.n	8003c06 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fd f85c 	bl	8000c98 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd f858 	bl	8000c98 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e2a2      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	4b58      	ldr	r3, [pc, #352]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x174>
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d079      	beq.n	8003d06 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_RCC_OscConfig+0x1bc>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d004      	beq.n	8003c2c <HAL_RCC_OscConfig+0x1bc>
 8003c22:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003c26:	484b      	ldr	r0, [pc, #300]	; (8003d54 <HAL_RCC_OscConfig+0x2e4>)
 8003c28:	f7fc fe13 	bl	8000852 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	2b1f      	cmp	r3, #31
 8003c32:	d904      	bls.n	8003c3e <HAL_RCC_OscConfig+0x1ce>
 8003c34:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003c38:	4846      	ldr	r0, [pc, #280]	; (8003d54 <HAL_RCC_OscConfig+0x2e4>)
 8003c3a:	f7fc fe0a 	bl	8000852 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c3e:	4b46      	ldr	r3, [pc, #280]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c4a:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d11c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x220>
 8003c56:	4b40      	ldr	r3, [pc, #256]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d116      	bne.n	8003c90 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCC_OscConfig+0x20a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e260      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7a:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4933      	ldr	r1, [pc, #204]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	e03a      	b.n	8003d06 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c98:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <HAL_RCC_OscConfig+0x2ec>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7fc fffb 	bl	8000c98 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca6:	f7fc fff7 	bl	8000c98 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e241      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4921      	ldr	r1, [pc, #132]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]
 8003cd8:	e015      	b.n	8003d06 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cda:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <HAL_RCC_OscConfig+0x2ec>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fc ffda 	bl	8000c98 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce8:	f7fc ffd6 	bl	8000c98 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e220      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <HAL_RCC_OscConfig+0x2e8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d048      	beq.n	8003da4 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_RCC_OscConfig+0x2bc>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d004      	beq.n	8003d2c <HAL_RCC_OscConfig+0x2bc>
 8003d22:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003d26:	480b      	ldr	r0, [pc, #44]	; (8003d54 <HAL_RCC_OscConfig+0x2e4>)
 8003d28:	f7fc fd93 	bl	8000852 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d021      	beq.n	8003d78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_OscConfig+0x2f0>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fc ffad 	bl	8000c98 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d40:	e010      	b.n	8003d64 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fc ffa9 	bl	8000c98 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d909      	bls.n	8003d64 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1f3      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
 8003d54:	08005cd4 	.word	0x08005cd4
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	42420000 	.word	0x42420000
 8003d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d64:	4b67      	ldr	r3, [pc, #412]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0e8      	beq.n	8003d42 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f000 fc11 	bl	8004598 <RCC_Delay>
 8003d76:	e015      	b.n	8003da4 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d78:	4b63      	ldr	r3, [pc, #396]	; (8003f08 <HAL_RCC_OscConfig+0x498>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7e:	f7fc ff8b 	bl	8000c98 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d86:	f7fc ff87 	bl	8000c98 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e1d1      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d98:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80c0 	beq.w	8003f32 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db2:	2300      	movs	r3, #0
 8003db4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x368>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x368>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d004      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x368>
 8003dce:	f240 2111 	movw	r1, #529	; 0x211
 8003dd2:	484e      	ldr	r0, [pc, #312]	; (8003f0c <HAL_RCC_OscConfig+0x49c>)
 8003dd4:	f7fc fd3d 	bl	8000852 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd8:	4b4a      	ldr	r3, [pc, #296]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10d      	bne.n	8003e00 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de4:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4a46      	ldr	r2, [pc, #280]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dee:	61d3      	str	r3, [r2, #28]
 8003df0:	4b44      	ldr	r3, [pc, #272]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e00:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_RCC_OscConfig+0x4a0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d118      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0c:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <HAL_RCC_OscConfig+0x4a0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a3f      	ldr	r2, [pc, #252]	; (8003f10 <HAL_RCC_OscConfig+0x4a0>)
 8003e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e18:	f7fc ff3e 	bl	8000c98 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e20:	f7fc ff3a 	bl	8000c98 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e184      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_RCC_OscConfig+0x4a0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d106      	bne.n	8003e54 <HAL_RCC_OscConfig+0x3e4>
 8003e46:	4b2f      	ldr	r3, [pc, #188]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	4a2e      	ldr	r2, [pc, #184]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6213      	str	r3, [r2, #32]
 8003e52:	e02d      	b.n	8003eb0 <HAL_RCC_OscConfig+0x440>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10c      	bne.n	8003e76 <HAL_RCC_OscConfig+0x406>
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	6213      	str	r3, [r2, #32]
 8003e68:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e6e:	f023 0304 	bic.w	r3, r3, #4
 8003e72:	6213      	str	r3, [r2, #32]
 8003e74:	e01c      	b.n	8003eb0 <HAL_RCC_OscConfig+0x440>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x428>
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	6213      	str	r3, [r2, #32]
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6213      	str	r3, [r2, #32]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0x440>
 8003e98:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	6213      	str	r3, [r2, #32]
 8003ea4:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003eaa:	f023 0304 	bic.w	r3, r3, #4
 8003eae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d015      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb8:	f7fc feee 	bl	8000c98 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec0:	f7fc feea 	bl	8000c98 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e132      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_OscConfig+0x494>)
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ee      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x450>
 8003ee2:	e01d      	b.n	8003f20 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee4:	f7fc fed8 	bl	8000c98 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	e013      	b.n	8003f14 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fc fed4 	bl	8000c98 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d90a      	bls.n	8003f14 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e11c      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	42420480 	.word	0x42420480
 8003f0c:	08005cd4 	.word	0x08005cd4
 8003f10:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	4b8b      	ldr	r3, [pc, #556]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e5      	bne.n	8003eec <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d105      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b87      	ldr	r3, [pc, #540]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	4a86      	ldr	r2, [pc, #536]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f30:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4e4>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d008      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4e4>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d004      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4e4>
 8003f4a:	f240 21af 	movw	r1, #687	; 0x2af
 8003f4e:	487e      	ldr	r0, [pc, #504]	; (8004148 <HAL_RCC_OscConfig+0x6d8>)
 8003f50:	f7fc fc7f 	bl	8000852 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80ee 	beq.w	800413a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f5e:	4b79      	ldr	r3, [pc, #484]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	f000 80ce 	beq.w	8004108 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f040 80b2 	bne.w	80040da <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_OscConfig+0x522>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f86:	d004      	beq.n	8003f92 <HAL_RCC_OscConfig+0x522>
 8003f88:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003f8c:	486e      	ldr	r0, [pc, #440]	; (8004148 <HAL_RCC_OscConfig+0x6d8>)
 8003f8e:	f7fc fc60 	bl	8000852 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d04a      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fa2:	d045      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fac:	d040      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fb6:	d03b      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc0:	d036      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003fca:	d031      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003fd4:	d02c      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003fde:	d027      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe8:	d022      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ff2:	d01d      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ffc:	d018      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004006:	d013      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004010:	d00e      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800401a:	d009      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004024:	d004      	beq.n	8004030 <HAL_RCC_OscConfig+0x5c0>
 8004026:	f240 21b9 	movw	r1, #697	; 0x2b9
 800402a:	4847      	ldr	r0, [pc, #284]	; (8004148 <HAL_RCC_OscConfig+0x6d8>)
 800402c:	f7fc fc11 	bl	8000852 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b46      	ldr	r3, [pc, #280]	; (800414c <HAL_RCC_OscConfig+0x6dc>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fc fe2f 	bl	8000c98 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403e:	f7fc fe2b 	bl	8000c98 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e075      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004050:	4b3c      	ldr	r3, [pc, #240]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d116      	bne.n	8004094 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_RCC_OscConfig+0x612>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004076:	d004      	beq.n	8004082 <HAL_RCC_OscConfig+0x612>
 8004078:	f240 21cf 	movw	r1, #719	; 0x2cf
 800407c:	4832      	ldr	r0, [pc, #200]	; (8004148 <HAL_RCC_OscConfig+0x6d8>)
 800407e:	f7fc fbe8 	bl	8000852 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004082:	4b30      	ldr	r3, [pc, #192]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	492d      	ldr	r1, [pc, #180]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a19      	ldr	r1, [r3, #32]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	430b      	orrs	r3, r1
 80040a6:	4927      	ldr	r1, [pc, #156]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ac:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x6dc>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b2:	f7fc fdf1 	bl	8000c98 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fc fded 	bl	8000c98 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e037      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040cc:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x64a>
 80040d8:	e02f      	b.n	800413a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <HAL_RCC_OscConfig+0x6dc>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fc fdda 	bl	8000c98 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fc fdd6 	bl	8000c98 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e020      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x678>
 8004106:	e018      	b.n	800413a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e013      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_OscConfig+0x6d4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	429a      	cmp	r2, r3
 8004126:	d106      	bne.n	8004136 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d001      	beq.n	800413a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	08005cd4 	.word	0x08005cd4
 800414c:	42420060 	.word	0x42420060

08004150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e176      	b.n	8004452 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d116      	bne.n	800419e <HAL_RCC_ClockConfig+0x4e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d110      	bne.n	800419e <HAL_RCC_ClockConfig+0x4e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <HAL_RCC_ClockConfig+0x4e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <HAL_RCC_ClockConfig+0x4e>
 8004194:	f44f 714e 	mov.w	r1, #824	; 0x338
 8004198:	4874      	ldr	r0, [pc, #464]	; (800436c <HAL_RCC_ClockConfig+0x21c>)
 800419a:	f7fc fb5a 	bl	8000852 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCC_ClockConfig+0x6a>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d007      	beq.n	80041ba <HAL_RCC_ClockConfig+0x6a>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d004      	beq.n	80041ba <HAL_RCC_ClockConfig+0x6a>
 80041b0:	f240 3139 	movw	r1, #825	; 0x339
 80041b4:	486d      	ldr	r0, [pc, #436]	; (800436c <HAL_RCC_ClockConfig+0x21c>)
 80041b6:	f7fc fb4c 	bl	8000852 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041ba:	4b6d      	ldr	r3, [pc, #436]	; (8004370 <HAL_RCC_ClockConfig+0x220>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d910      	bls.n	80041ea <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c8:	4b69      	ldr	r3, [pc, #420]	; (8004370 <HAL_RCC_ClockConfig+0x220>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f023 0207 	bic.w	r2, r3, #7
 80041d0:	4967      	ldr	r1, [pc, #412]	; (8004370 <HAL_RCC_ClockConfig+0x220>)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d8:	4b65      	ldr	r3, [pc, #404]	; (8004370 <HAL_RCC_ClockConfig+0x220>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e133      	b.n	8004452 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d049      	beq.n	800428a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004202:	4b5c      	ldr	r3, [pc, #368]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4a5b      	ldr	r2, [pc, #364]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 8004208:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800420c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800421a:	4b56      	ldr	r3, [pc, #344]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4a55      	ldr	r2, [pc, #340]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 8004220:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004224:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d024      	beq.n	8004278 <HAL_RCC_ClockConfig+0x128>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d020      	beq.n	8004278 <HAL_RCC_ClockConfig+0x128>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b90      	cmp	r3, #144	; 0x90
 800423c:	d01c      	beq.n	8004278 <HAL_RCC_ClockConfig+0x128>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2ba0      	cmp	r3, #160	; 0xa0
 8004244:	d018      	beq.n	8004278 <HAL_RCC_ClockConfig+0x128>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2bb0      	cmp	r3, #176	; 0xb0
 800424c:	d014      	beq.n	8004278 <HAL_RCC_ClockConfig+0x128>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2bc0      	cmp	r3, #192	; 0xc0
 8004254:	d010      	beq.n	8004278 <HAL_RCC_ClockConfig+0x128>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2bd0      	cmp	r3, #208	; 0xd0
 800425c:	d00c      	beq.n	8004278 <HAL_RCC_ClockConfig+0x128>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2be0      	cmp	r3, #224	; 0xe0
 8004264:	d008      	beq.n	8004278 <HAL_RCC_ClockConfig+0x128>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2bf0      	cmp	r3, #240	; 0xf0
 800426c:	d004      	beq.n	8004278 <HAL_RCC_ClockConfig+0x128>
 800426e:	f240 315f 	movw	r1, #863	; 0x35f
 8004272:	483e      	ldr	r0, [pc, #248]	; (800436c <HAL_RCC_ClockConfig+0x21c>)
 8004274:	f7fc faed 	bl	8000852 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004278:	4b3e      	ldr	r3, [pc, #248]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	493b      	ldr	r1, [pc, #236]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d051      	beq.n	800433a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x168>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d008      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x168>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d004      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x168>
 80042ae:	f240 3166 	movw	r1, #870	; 0x366
 80042b2:	482e      	ldr	r0, [pc, #184]	; (800436c <HAL_RCC_ClockConfig+0x21c>)
 80042b4:	f7fc facd 	bl	8000852 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c0:	4b2c      	ldr	r3, [pc, #176]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d115      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0c0      	b.n	8004452 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0b4      	b.n	8004452 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	4b22      	ldr	r3, [pc, #136]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0ac      	b.n	8004452 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f8:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 0203 	bic.w	r2, r3, #3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	491b      	ldr	r1, [pc, #108]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 8004306:	4313      	orrs	r3, r2
 8004308:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800430a:	f7fc fcc5 	bl	8000c98 <HAL_GetTick>
 800430e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004310:	e00a      	b.n	8004328 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004312:	f7fc fcc1 	bl	8000c98 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e094      	b.n	8004452 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004328:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_RCC_ClockConfig+0x224>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 020c 	and.w	r2, r3, #12
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	429a      	cmp	r2, r3
 8004338:	d1eb      	bne.n	8004312 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_RCC_ClockConfig+0x220>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d217      	bcs.n	8004378 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCC_ClockConfig+0x220>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 0207 	bic.w	r2, r3, #7
 8004350:	4907      	ldr	r1, [pc, #28]	; (8004370 <HAL_RCC_ClockConfig+0x220>)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCC_ClockConfig+0x220>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d008      	beq.n	8004378 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e073      	b.n	8004452 <HAL_RCC_ClockConfig+0x302>
 800436a:	bf00      	nop
 800436c:	08005cd4 	.word	0x08005cd4
 8004370:	40022000 	.word	0x40022000
 8004374:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d025      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d018      	beq.n	80043be <HAL_RCC_ClockConfig+0x26e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004394:	d013      	beq.n	80043be <HAL_RCC_ClockConfig+0x26e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800439e:	d00e      	beq.n	80043be <HAL_RCC_ClockConfig+0x26e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043a8:	d009      	beq.n	80043be <HAL_RCC_ClockConfig+0x26e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b2:	d004      	beq.n	80043be <HAL_RCC_ClockConfig+0x26e>
 80043b4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80043b8:	4828      	ldr	r0, [pc, #160]	; (800445c <HAL_RCC_ClockConfig+0x30c>)
 80043ba:	f7fc fa4a 	bl	8000852 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043be:	4b28      	ldr	r3, [pc, #160]	; (8004460 <HAL_RCC_ClockConfig+0x310>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	4925      	ldr	r1, [pc, #148]	; (8004460 <HAL_RCC_ClockConfig+0x310>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d026      	beq.n	800442a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d018      	beq.n	8004416 <HAL_RCC_ClockConfig+0x2c6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ec:	d013      	beq.n	8004416 <HAL_RCC_ClockConfig+0x2c6>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80043f6:	d00e      	beq.n	8004416 <HAL_RCC_ClockConfig+0x2c6>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x2c6>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800440a:	d004      	beq.n	8004416 <HAL_RCC_ClockConfig+0x2c6>
 800440c:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004410:	4812      	ldr	r0, [pc, #72]	; (800445c <HAL_RCC_ClockConfig+0x30c>)
 8004412:	f7fc fa1e 	bl	8000852 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_RCC_ClockConfig+0x310>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	490e      	ldr	r1, [pc, #56]	; (8004460 <HAL_RCC_ClockConfig+0x310>)
 8004426:	4313      	orrs	r3, r2
 8004428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800442a:	f000 f821 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 800442e:	4601      	mov	r1, r0
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_ClockConfig+0x310>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <HAL_RCC_ClockConfig+0x314>)
 800443c:	5cd3      	ldrb	r3, [r2, r3]
 800443e:	fa21 f303 	lsr.w	r3, r1, r3
 8004442:	4a09      	ldr	r2, [pc, #36]	; (8004468 <HAL_RCC_ClockConfig+0x318>)
 8004444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_RCC_ClockConfig+0x31c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fc fbe2 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	08005cd4 	.word	0x08005cd4
 8004460:	40021000 	.word	0x40021000
 8004464:	08005e1c 	.word	0x08005e1c
 8004468:	20000000 	.word	0x20000000
 800446c:	20000004 	.word	0x20000004

08004470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004470:	b490      	push	{r4, r7}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004476:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004478:	1d3c      	adds	r4, r7, #4
 800447a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800447c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004480:	4b28      	ldr	r3, [pc, #160]	; (8004524 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	2300      	movs	r3, #0
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800449a:	4b23      	ldr	r3, [pc, #140]	; (8004528 <HAL_RCC_GetSysClockFreq+0xb8>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x40>
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x46>
 80044ae:	e02d      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044b0:	4b1e      	ldr	r3, [pc, #120]	; (800452c <HAL_RCC_GetSysClockFreq+0xbc>)
 80044b2:	623b      	str	r3, [r7, #32]
      break;
 80044b4:	e02d      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	0c9b      	lsrs	r3, r3, #18
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044c2:	4413      	add	r3, r2
 80044c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	0c5b      	lsrs	r3, r3, #17
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044e2:	4413      	add	r3, r2
 80044e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	4a0f      	ldr	r2, [pc, #60]	; (800452c <HAL_RCC_GetSysClockFreq+0xbc>)
 80044ee:	fb02 f203 	mul.w	r2, r2, r3
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
 80044fa:	e004      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4a0c      	ldr	r2, [pc, #48]	; (8004530 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004500:	fb02 f303 	mul.w	r3, r2, r3
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	623b      	str	r3, [r7, #32]
      break;
 800450a:	e002      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <HAL_RCC_GetSysClockFreq+0xbc>)
 800450e:	623b      	str	r3, [r7, #32]
      break;
 8004510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004512:	6a3b      	ldr	r3, [r7, #32]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3728      	adds	r7, #40	; 0x28
 8004518:	46bd      	mov	sp, r7
 800451a:	bc90      	pop	{r4, r7}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	08005d0c 	.word	0x08005d0c
 8004524:	08005d1c 	.word	0x08005d1c
 8004528:	40021000 	.word	0x40021000
 800452c:	007a1200 	.word	0x007a1200
 8004530:	003d0900 	.word	0x003d0900

08004534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004538:	4b02      	ldr	r3, [pc, #8]	; (8004544 <HAL_RCC_GetHCLKFreq+0x10>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	20000000 	.word	0x20000000

08004548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800454c:	f7ff fff2 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8004550:	4601      	mov	r1, r0
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4a03      	ldr	r2, [pc, #12]	; (800456c <HAL_RCC_GetPCLK1Freq+0x24>)
 800455e:	5cd3      	ldrb	r3, [r2, r3]
 8004560:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40021000 	.word	0x40021000
 800456c:	08005e2c 	.word	0x08005e2c

08004570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004574:	f7ff ffde 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8004578:	4601      	mov	r1, r0
 800457a:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	0adb      	lsrs	r3, r3, #11
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4a03      	ldr	r2, [pc, #12]	; (8004594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004586:	5cd3      	ldrb	r3, [r2, r3]
 8004588:	fa21 f303 	lsr.w	r3, r1, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	08005e2c 	.word	0x08005e2c

08004598 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045a0:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <RCC_Delay+0x34>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0a      	ldr	r2, [pc, #40]	; (80045d0 <RCC_Delay+0x38>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	0a5b      	lsrs	r3, r3, #9
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045b4:	bf00      	nop
  }
  while (Delay --);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1e5a      	subs	r2, r3, #1
 80045ba:	60fa      	str	r2, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f9      	bne.n	80045b4 <RCC_Delay+0x1c>
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000000 	.word	0x20000000
 80045d0:	10624dd3 	.word	0x10624dd3

080045d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10f      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d109      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	d103      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004608:	216c      	movs	r1, #108	; 0x6c
 800460a:	4873      	ldr	r0, [pc, #460]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800460c:	f7fc f921 	bl	8000852 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8095 	beq.w	8004748 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d012      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462e:	d00d      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004638:	d008      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004642:	d003      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004644:	2172      	movs	r1, #114	; 0x72
 8004646:	4864      	ldr	r0, [pc, #400]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004648:	f7fc f903 	bl	8000852 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800464c:	2300      	movs	r3, #0
 800464e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004650:	4b62      	ldr	r3, [pc, #392]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10d      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465c:	4b5f      	ldr	r3, [pc, #380]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	4a5e      	ldr	r2, [pc, #376]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004666:	61d3      	str	r3, [r2, #28]
 8004668:	4b5c      	ldr	r3, [pc, #368]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004674:	2301      	movs	r3, #1
 8004676:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004678:	4b59      	ldr	r3, [pc, #356]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d118      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004684:	4b56      	ldr	r3, [pc, #344]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a55      	ldr	r2, [pc, #340]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004690:	f7fc fb02 	bl	8000c98 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004696:	e008      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004698:	f7fc fafe 	bl	8000c98 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e092      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046aa:	4b4d      	ldr	r3, [pc, #308]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b6:	4b49      	ldr	r3, [pc, #292]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d02e      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d027      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d4:	4b41      	ldr	r3, [pc, #260]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046de:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046e4:	4b3f      	ldr	r3, [pc, #252]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046ea:	4a3c      	ldr	r2, [pc, #240]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d014      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fc facd 	bl	8000c98 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	e00a      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fc fac9 	bl	8000c98 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e05b      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004718:	4b30      	ldr	r3, [pc, #192]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ee      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004724:	4b2d      	ldr	r3, [pc, #180]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	492a      	ldr	r1, [pc, #168]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004732:	4313      	orrs	r3, r2
 8004734:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004736:	7dfb      	ldrb	r3, [r7, #23]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d105      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	4a26      	ldr	r2, [pc, #152]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004746:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01f      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d012      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004764:	d00d      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476e:	d008      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004778:	d003      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800477a:	21b9      	movs	r1, #185	; 0xb9
 800477c:	4816      	ldr	r0, [pc, #88]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800477e:	f7fc f868 	bl	8000852 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	4913      	ldr	r1, [pc, #76]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	2b00      	cmp	r3, #0
 800479e:	d016      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a8:	d008      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047b2:	f240 1115 	movw	r1, #277	; 0x115
 80047b6:	4808      	ldr	r0, [pc, #32]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80047b8:	f7fc f84b 	bl	8000852 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047bc:	4b07      	ldr	r3, [pc, #28]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4904      	ldr	r1, [pc, #16]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	08005d20 	.word	0x08005d20
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40007000 	.word	0x40007000
 80047e4:	42420440 	.word	0x42420440

080047e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b08d      	sub	sp, #52	; 0x34
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047f0:	4b5f      	ldr	r3, [pc, #380]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 80047f2:	f107 040c 	add.w	r4, r7, #12
 80047f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047fc:	4b5d      	ldr	r3, [pc, #372]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
 8004806:	2300      	movs	r3, #0
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480a:	2300      	movs	r3, #0
 800480c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	2300      	movs	r3, #0
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10e      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8004834:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004838:	484f      	ldr	r0, [pc, #316]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 800483a:	f7fc f80a 	bl	8000852 <assert_failed>

  switch (PeriphClk)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d07f      	beq.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8004844:	2b10      	cmp	r3, #16
 8004846:	d002      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8004848:	2b01      	cmp	r3, #1
 800484a:	d048      	beq.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800484c:	e08b      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      temp_reg = RCC->CFGR;
 800484e:	4b4b      	ldr	r3, [pc, #300]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004854:	4b49      	ldr	r3, [pc, #292]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d07f      	beq.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	0c9b      	lsrs	r3, r3, #18
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800486c:	4413      	add	r3, r2
 800486e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004872:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d018      	beq.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800487e:	4b3f      	ldr	r3, [pc, #252]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	0c5b      	lsrs	r3, r3, #17
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800488c:	4413      	add	r3, r2
 800488e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800489e:	4a38      	ldr	r2, [pc, #224]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	fb02 f303 	mul.w	r3, r2, r3
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ae:	e004      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	4a34      	ldr	r2, [pc, #208]	; (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80048b4:	fb02 f303 	mul.w	r3, r2, r3
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80048ba:	4b30      	ldr	r3, [pc, #192]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c6:	d102      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = pllclk;
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048cc:	e048      	b.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          frequency = (pllclk * 2) / 3;
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4a2d      	ldr	r2, [pc, #180]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048dc:	e040      	b.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
      temp_reg = RCC->BDCR;
 80048de:	4b27      	ldr	r3, [pc, #156]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ee:	d108      	bne.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSE_VALUE;
 80048fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004900:	e01f      	b.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490c:	d109      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800490e:	4b1b      	ldr	r3, [pc, #108]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        frequency = LSI_VALUE;
 800491a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004920:	e00f      	b.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800492c:	d11a      	bne.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d014      	beq.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
        frequency = HSE_VALUE / 128U;
 800493a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004940:	e010      	b.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8004942:	e00f      	b.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004944:	f7ff fe14 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	0b9b      	lsrs	r3, r3, #14
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	3301      	adds	r3, #1
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800495e:	e002      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 8004960:	bf00      	nop
 8004962:	e000      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 8004964:	bf00      	nop
    }
  }
  return (frequency);
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004968:	4618      	mov	r0, r3
 800496a:	3734      	adds	r7, #52	; 0x34
 800496c:	46bd      	mov	sp, r7
 800496e:	bd90      	pop	{r4, r7, pc}
 8004970:	08005d5c 	.word	0x08005d5c
 8004974:	08005d6c 	.word	0x08005d6c
 8004978:	08005d20 	.word	0x08005d20
 800497c:	40021000 	.word	0x40021000
 8004980:	007a1200 	.word	0x007a1200
 8004984:	003d0900 	.word	0x003d0900
 8004988:	aaaaaaab 	.word	0xaaaaaaab

0800498c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e0b4      	b.n	8004b0c <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a5b      	ldr	r2, [pc, #364]	; (8004b14 <HAL_RTC_Init+0x188>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_RTC_Init+0x2a>
 80049ac:	f240 111d 	movw	r1, #285	; 0x11d
 80049b0:	4859      	ldr	r0, [pc, #356]	; (8004b18 <HAL_RTC_Init+0x18c>)
 80049b2:	f7fb ff4e 	bl	8000852 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d012      	beq.n	80049e4 <HAL_RTC_Init+0x58>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b80      	cmp	r3, #128	; 0x80
 80049c4:	d00e      	beq.n	80049e4 <HAL_RTC_Init+0x58>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	d009      	beq.n	80049e4 <HAL_RTC_Init+0x58>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d8:	d004      	beq.n	80049e4 <HAL_RTC_Init+0x58>
 80049da:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80049de:	484e      	ldr	r0, [pc, #312]	; (8004b18 <HAL_RTC_Init+0x18c>)
 80049e0:	f7fb ff37 	bl	8000852 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ec:	d309      	bcc.n	8004a02 <HAL_RTC_Init+0x76>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d004      	beq.n	8004a02 <HAL_RTC_Init+0x76>
 80049f8:	f240 111f 	movw	r1, #287	; 0x11f
 80049fc:	4846      	ldr	r0, [pc, #280]	; (8004b18 <HAL_RTC_Init+0x18c>)
 80049fe:	f7fb ff28 	bl	8000852 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	7c5b      	ldrb	r3, [r3, #17]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fb ff72 	bl	80008fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fa82 	bl	8004f28 <HAL_RTC_WaitForSynchro>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e06b      	b.n	8004b0c <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fb3b 	bl	80050b0 <RTC_EnterInitMode>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d004      	beq.n	8004a4a <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2204      	movs	r2, #4
 8004a44:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e060      	b.n	8004b0c <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0207 	bic.w	r2, r2, #7
 8004a58:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004a62:	4b2e      	ldr	r3, [pc, #184]	; (8004b1c <HAL_RTC_Init+0x190>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <HAL_RTC_Init+0x190>)
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004a6e:	4b2b      	ldr	r3, [pc, #172]	; (8004b1c <HAL_RTC_Init+0x190>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	4928      	ldr	r1, [pc, #160]	; (8004b1c <HAL_RTC_Init+0x190>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d003      	beq.n	8004a92 <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e00e      	b.n	8004ab0 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004a92:	2001      	movs	r0, #1
 8004a94:	f7ff fea8 	bl	80047e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a98:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e030      	b.n	8004b0c <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f023 010f 	bic.w	r1, r3, #15
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	0c1a      	lsrs	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	b291      	uxth	r1, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fb0f 	bl	8005100 <RTC_ExitInitMode>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d004      	beq.n	8004af2 <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2204      	movs	r2, #4
 8004aec:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00c      	b.n	8004b0c <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40002800 	.word	0x40002800
 8004b18:	08005d70 	.word	0x08005d70
 8004b1c:	40006c00 	.word	0x40006c00

08004b20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_RTC_SetTime+0x20>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0cd      	b.n	8004ce0 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <HAL_RTC_SetTime+0x3a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d004      	beq.n	8004b5a <HAL_RTC_SetTime+0x3a>
 8004b50:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004b54:	4864      	ldr	r0, [pc, #400]	; (8004ce8 <HAL_RTC_SetTime+0x1c8>)
 8004b56:	f7fb fe7c 	bl	8000852 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	7c1b      	ldrb	r3, [r3, #16]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_RTC_SetTime+0x46>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e0bc      	b.n	8004ce0 <HAL_RTC_SetTime+0x1c0>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d12e      	bne.n	8004bd6 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b17      	cmp	r3, #23
 8004b7e:	d904      	bls.n	8004b8a <HAL_RTC_SetTime+0x6a>
 8004b80:	f240 21d3 	movw	r1, #723	; 0x2d3
 8004b84:	4858      	ldr	r0, [pc, #352]	; (8004ce8 <HAL_RTC_SetTime+0x1c8>)
 8004b86:	f7fb fe64 	bl	8000852 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	2b3b      	cmp	r3, #59	; 0x3b
 8004b90:	d904      	bls.n	8004b9c <HAL_RTC_SetTime+0x7c>
 8004b92:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8004b96:	4854      	ldr	r0, [pc, #336]	; (8004ce8 <HAL_RTC_SetTime+0x1c8>)
 8004b98:	f7fb fe5b 	bl	8000852 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	789b      	ldrb	r3, [r3, #2]
 8004ba0:	2b3b      	cmp	r3, #59	; 0x3b
 8004ba2:	d904      	bls.n	8004bae <HAL_RTC_SetTime+0x8e>
 8004ba4:	f240 21d5 	movw	r1, #725	; 0x2d5
 8004ba8:	484f      	ldr	r0, [pc, #316]	; (8004ce8 <HAL_RTC_SetTime+0x1c8>)
 8004baa:	f7fb fe52 	bl	8000852 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004bb8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	1a5b      	subs	r3, r3, r1
 8004bc8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004bca:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004bd0:	4413      	add	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	e045      	b.n	8004c62 <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fab8 	bl	8005150 <RTC_Bcd2ToByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b17      	cmp	r3, #23
 8004be4:	d904      	bls.n	8004bf0 <HAL_RTC_SetTime+0xd0>
 8004be6:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004bea:	483f      	ldr	r0, [pc, #252]	; (8004ce8 <HAL_RTC_SetTime+0x1c8>)
 8004bec:	f7fb fe31 	bl	8000852 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 faab 	bl	8005150 <RTC_Bcd2ToByte>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b3b      	cmp	r3, #59	; 0x3b
 8004bfe:	d904      	bls.n	8004c0a <HAL_RTC_SetTime+0xea>
 8004c00:	f240 21de 	movw	r1, #734	; 0x2de
 8004c04:	4838      	ldr	r0, [pc, #224]	; (8004ce8 <HAL_RTC_SetTime+0x1c8>)
 8004c06:	f7fb fe24 	bl	8000852 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	789b      	ldrb	r3, [r3, #2]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fa9e 	bl	8005150 <RTC_Bcd2ToByte>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b3b      	cmp	r3, #59	; 0x3b
 8004c18:	d904      	bls.n	8004c24 <HAL_RTC_SetTime+0x104>
 8004c1a:	f240 21df 	movw	r1, #735	; 0x2df
 8004c1e:	4832      	ldr	r0, [pc, #200]	; (8004ce8 <HAL_RTC_SetTime+0x1c8>)
 8004c20:	f7fb fe17 	bl	8000852 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fa91 	bl	8005150 <RTC_Bcd2ToByte>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461a      	mov	r2, r3
 8004c32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004c36:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	785b      	ldrb	r3, [r3, #1]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fa86 	bl	8005150 <RTC_Bcd2ToByte>
 8004c44:	4603      	mov	r3, r0
 8004c46:	461a      	mov	r2, r3
 8004c48:	4613      	mov	r3, r2
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004c50:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	789b      	ldrb	r3, [r3, #2]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fa7a 	bl	8005150 <RTC_Bcd2ToByte>
 8004c5c:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004c5e:	4423      	add	r3, r4
 8004c60:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004c62:	6979      	ldr	r1, [r7, #20]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f9bc 	bl	8004fe2 <RTC_WriteTimeCounter>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2204      	movs	r2, #4
 8004c74:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e02f      	b.n	8004ce0 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0205 	bic.w	r2, r2, #5
 8004c8e:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f9cd 	bl	8005030 <RTC_ReadAlarmCounter>
 8004c96:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d018      	beq.n	8004cd2 <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d214      	bcs.n	8004cd2 <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004cae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004cb2:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004cb4:	6939      	ldr	r1, [r7, #16]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f9d3 	bl	8005062 <RTC_WriteAlarmCounter>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e006      	b.n	8004ce0 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004cde:	2300      	movs	r3, #0
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd90      	pop	{r4, r7, pc}
 8004ce8:	08005d70 	.word	0x08005d70

08004cec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_RTC_SetDate+0x24>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0fc      	b.n	8004f0e <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_RTC_SetDate+0x3e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d004      	beq.n	8004d2a <HAL_RTC_SetDate+0x3e>
 8004d20:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004d24:	487c      	ldr	r0, [pc, #496]	; (8004f18 <HAL_RTC_SetDate+0x22c>)
 8004d26:	f7fb fd94 	bl	8000852 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	7c1b      	ldrb	r3, [r3, #16]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_RTC_SetDate+0x4a>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e0eb      	b.n	8004f0e <HAL_RTC_SetDate+0x222>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d12f      	bne.n	8004da8 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	78db      	ldrb	r3, [r3, #3]
 8004d4c:	2b63      	cmp	r3, #99	; 0x63
 8004d4e:	d904      	bls.n	8004d5a <HAL_RTC_SetDate+0x6e>
 8004d50:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004d54:	4870      	ldr	r0, [pc, #448]	; (8004f18 <HAL_RTC_SetDate+0x22c>)
 8004d56:	f7fb fd7c 	bl	8000852 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	785b      	ldrb	r3, [r3, #1]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_RTC_SetDate+0x7e>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	2b0c      	cmp	r3, #12
 8004d68:	d904      	bls.n	8004d74 <HAL_RTC_SetDate+0x88>
 8004d6a:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004d6e:	486a      	ldr	r0, [pc, #424]	; (8004f18 <HAL_RTC_SetDate+0x22c>)
 8004d70:	f7fb fd6f 	bl	8000852 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	789b      	ldrb	r3, [r3, #2]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_RTC_SetDate+0x98>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	789b      	ldrb	r3, [r3, #2]
 8004d80:	2b1f      	cmp	r3, #31
 8004d82:	d904      	bls.n	8004d8e <HAL_RTC_SetDate+0xa2>
 8004d84:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004d88:	4863      	ldr	r0, [pc, #396]	; (8004f18 <HAL_RTC_SetDate+0x22c>)
 8004d8a:	f7fb fd62 	bl	8000852 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	78da      	ldrb	r2, [r3, #3]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	785a      	ldrb	r2, [r3, #1]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	789a      	ldrb	r2, [r3, #2]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	739a      	strb	r2, [r3, #14]
 8004da6:	e051      	b.n	8004e4c <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	78db      	ldrb	r3, [r3, #3]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 f9cf 	bl	8005150 <RTC_Bcd2ToByte>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b63      	cmp	r3, #99	; 0x63
 8004db6:	d904      	bls.n	8004dc2 <HAL_RTC_SetDate+0xd6>
 8004db8:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004dbc:	4856      	ldr	r0, [pc, #344]	; (8004f18 <HAL_RTC_SetDate+0x22c>)
 8004dbe:	f7fb fd48 	bl	8000852 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 f9c2 	bl	8005150 <RTC_Bcd2ToByte>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_RTC_SetDate+0xf6>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f9ba 	bl	8005150 <RTC_Bcd2ToByte>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d904      	bls.n	8004dec <HAL_RTC_SetDate+0x100>
 8004de2:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004de6:	484c      	ldr	r0, [pc, #304]	; (8004f18 <HAL_RTC_SetDate+0x22c>)
 8004de8:	f7fb fd33 	bl	8000852 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	789b      	ldrb	r3, [r3, #2]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 f9ad 	bl	8005150 <RTC_Bcd2ToByte>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <HAL_RTC_SetDate+0x120>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	789b      	ldrb	r3, [r3, #2]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f9a5 	bl	8005150 <RTC_Bcd2ToByte>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b1f      	cmp	r3, #31
 8004e0a:	d904      	bls.n	8004e16 <HAL_RTC_SetDate+0x12a>
 8004e0c:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004e10:	4841      	ldr	r0, [pc, #260]	; (8004f18 <HAL_RTC_SetDate+0x22c>)
 8004e12:	f7fb fd1e 	bl	8000852 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	78db      	ldrb	r3, [r3, #3]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f998 	bl	8005150 <RTC_Bcd2ToByte>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 f98f 	bl	8005150 <RTC_Bcd2ToByte>
 8004e32:	4603      	mov	r3, r0
 8004e34:	461a      	mov	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	789b      	ldrb	r3, [r3, #2]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f986 	bl	8005150 <RTC_Bcd2ToByte>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	7bdb      	ldrb	r3, [r3, #15]
 8004e50:	4618      	mov	r0, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	7b59      	ldrb	r1, [r3, #13]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	7b9b      	ldrb	r3, [r3, #14]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f000 f996 	bl	800518c <RTC_WeekDayNum>
 8004e60:	4603      	mov	r3, r0
 8004e62:	461a      	mov	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	7b1a      	ldrb	r2, [r3, #12]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f886 	bl	8004f82 <RTC_ReadTimeCounter>
 8004e76:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4a28      	ldr	r2, [pc, #160]	; (8004f1c <HAL_RTC_SetDate+0x230>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	0adb      	lsrs	r3, r3, #11
 8004e82:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b18      	cmp	r3, #24
 8004e88:	d93a      	bls.n	8004f00 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	4a24      	ldr	r2, [pc, #144]	; (8004f20 <HAL_RTC_SetDate+0x234>)
 8004e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	4a23      	ldr	r2, [pc, #140]	; (8004f24 <HAL_RTC_SetDate+0x238>)
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004ea0:	69f9      	ldr	r1, [r7, #28]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f89d 	bl	8004fe2 <RTC_WriteTimeCounter>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e027      	b.n	8004f0e <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f8b6 	bl	8005030 <RTC_ReadAlarmCounter>
 8004ec4:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d018      	beq.n	8004f00 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d214      	bcs.n	8004f00 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004edc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004ee0:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004ee2:	69b9      	ldr	r1, [r7, #24]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f8bc 	bl	8005062 <RTC_WriteAlarmCounter>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e006      	b.n	8004f0e <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	08005d70 	.word	0x08005d70
 8004f1c:	91a2b3c5 	.word	0x91a2b3c5
 8004f20:	aaaaaaab 	.word	0xaaaaaaab
 8004f24:	00015180 	.word	0x00015180

08004f28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e01d      	b.n	8004f7a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0208 	bic.w	r2, r2, #8
 8004f4c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004f4e:	f7fb fea3 	bl	8000c98 <HAL_GetTick>
 8004f52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f54:	e009      	b.n	8004f6a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f56:	f7fb fe9f 	bl	8000c98 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f64:	d901      	bls.n	8004f6a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e007      	b.n	8004f7a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0ee      	beq.n	8004f56 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	827b      	strh	r3, [r7, #18]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	823b      	strh	r3, [r7, #16]
 8004f92:	2300      	movs	r3, #0
 8004f94:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004fb2:	8a7a      	ldrh	r2, [r7, #18]
 8004fb4:	8a3b      	ldrh	r3, [r7, #16]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d008      	beq.n	8004fcc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004fba:	8a3b      	ldrh	r3, [r7, #16]
 8004fbc:	041a      	lsls	r2, r3, #16
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e004      	b.n	8004fd6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004fcc:	8a7b      	ldrh	r3, [r7, #18]
 8004fce:	041a      	lsls	r2, r3, #16
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004fd6:	697b      	ldr	r3, [r7, #20]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f85d 	bl	80050b0 <RTC_EnterInitMode>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e011      	b.n	8005026 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	0c12      	lsrs	r2, r2, #16
 800500a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	b292      	uxth	r2, r2
 8005014:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f872 	bl	8005100 <RTC_ExitInitMode>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005026:	7bfb      	ldrb	r3, [r7, #15]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	81fb      	strh	r3, [r7, #14]
 800503c:	2300      	movs	r3, #0
 800503e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005050:	89fb      	ldrh	r3, [r7, #14]
 8005052:	041a      	lsls	r2, r3, #16
 8005054:	89bb      	ldrh	r3, [r7, #12]
 8005056:	4313      	orrs	r3, r2
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f81d 	bl	80050b0 <RTC_EnterInitMode>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
 8005080:	e011      	b.n	80050a6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	0c12      	lsrs	r2, r2, #16
 800508a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	b292      	uxth	r2, r2
 8005094:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f832 	bl	8005100 <RTC_ExitInitMode>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80050bc:	f7fb fdec 	bl	8000c98 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050c2:	e009      	b.n	80050d8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80050c4:	f7fb fde8 	bl	8000c98 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d2:	d901      	bls.n	80050d8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e00f      	b.n	80050f8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ee      	beq.n	80050c4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0210 	orr.w	r2, r2, #16
 80050f4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0210 	bic.w	r2, r2, #16
 800511a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800511c:	f7fb fdbc 	bl	8000c98 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005122:	e009      	b.n	8005138 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005124:	f7fb fdb8 	bl	8000c98 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005132:	d901      	bls.n	8005138 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e007      	b.n	8005148 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ee      	beq.n	8005124 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	b2db      	uxtb	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	b2da      	uxtb	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	4413      	add	r3, r2
 800517e:	b2db      	uxtb	r3, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
	...

0800518c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
 8005198:	4613      	mov	r3, r2
 800519a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80051aa:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d82d      	bhi.n	800520e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80051b2:	78fa      	ldrb	r2, [r7, #3]
 80051b4:	4613      	mov	r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4413      	add	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	4a2c      	ldr	r2, [pc, #176]	; (8005270 <RTC_WeekDayNum+0xe4>)
 80051c0:	fba2 2303 	umull	r2, r3, r2, r3
 80051c4:	085a      	lsrs	r2, r3, #1
 80051c6:	78bb      	ldrb	r3, [r7, #2]
 80051c8:	441a      	add	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	441a      	add	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	089b      	lsrs	r3, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	3b01      	subs	r3, #1
 80051da:	4926      	ldr	r1, [pc, #152]	; (8005274 <RTC_WeekDayNum+0xe8>)
 80051dc:	fba1 1303 	umull	r1, r3, r1, r3
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	1ad2      	subs	r2, r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	4922      	ldr	r1, [pc, #136]	; (8005274 <RTC_WeekDayNum+0xe8>)
 80051ea:	fba1 1303 	umull	r1, r3, r1, r3
 80051ee:	09db      	lsrs	r3, r3, #7
 80051f0:	4413      	add	r3, r2
 80051f2:	1d1a      	adds	r2, r3, #4
 80051f4:	4b20      	ldr	r3, [pc, #128]	; (8005278 <RTC_WeekDayNum+0xec>)
 80051f6:	fba3 1302 	umull	r1, r3, r3, r2
 80051fa:	1ad1      	subs	r1, r2, r3
 80051fc:	0849      	lsrs	r1, r1, #1
 80051fe:	440b      	add	r3, r1
 8005200:	0899      	lsrs	r1, r3, #2
 8005202:	460b      	mov	r3, r1
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	1a5b      	subs	r3, r3, r1
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e029      	b.n	8005262 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800520e:	78fa      	ldrb	r2, [r7, #3]
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	4a15      	ldr	r2, [pc, #84]	; (8005270 <RTC_WeekDayNum+0xe4>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	085a      	lsrs	r2, r3, #1
 8005222:	78bb      	ldrb	r3, [r7, #2]
 8005224:	441a      	add	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	441a      	add	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4910      	ldr	r1, [pc, #64]	; (8005274 <RTC_WeekDayNum+0xe8>)
 8005234:	fba1 1303 	umull	r1, r3, r1, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	1ad2      	subs	r2, r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	490d      	ldr	r1, [pc, #52]	; (8005274 <RTC_WeekDayNum+0xe8>)
 8005240:	fba1 1303 	umull	r1, r3, r1, r3
 8005244:	09db      	lsrs	r3, r3, #7
 8005246:	4413      	add	r3, r2
 8005248:	1c9a      	adds	r2, r3, #2
 800524a:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <RTC_WeekDayNum+0xec>)
 800524c:	fba3 1302 	umull	r1, r3, r3, r2
 8005250:	1ad1      	subs	r1, r2, r3
 8005252:	0849      	lsrs	r1, r1, #1
 8005254:	440b      	add	r3, r1
 8005256:	0899      	lsrs	r1, r3, #2
 8005258:	460b      	mov	r3, r1
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	1a5b      	subs	r3, r3, r1
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	b2db      	uxtb	r3, r3
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr
 8005270:	38e38e39 	.word	0x38e38e39
 8005274:	51eb851f 	.word	0x51eb851f
 8005278:	24924925 	.word	0x24924925

0800527c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e06a      	b.n	8005364 <HAL_TIM_Base_Init+0xe8>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a36      	ldr	r2, [pc, #216]	; (800536c <HAL_TIM_Base_Init+0xf0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_TIM_Base_Init+0x3a>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a0:	d009      	beq.n	80052b6 <HAL_TIM_Base_Init+0x3a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a32      	ldr	r2, [pc, #200]	; (8005370 <HAL_TIM_Base_Init+0xf4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_TIM_Base_Init+0x3a>
 80052ac:	f44f 7189 	mov.w	r1, #274	; 0x112
 80052b0:	4830      	ldr	r0, [pc, #192]	; (8005374 <HAL_TIM_Base_Init+0xf8>)
 80052b2:	f7fb face 	bl	8000852 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d014      	beq.n	80052e8 <HAL_TIM_Base_Init+0x6c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d010      	beq.n	80052e8 <HAL_TIM_Base_Init+0x6c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d00c      	beq.n	80052e8 <HAL_TIM_Base_Init+0x6c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b40      	cmp	r3, #64	; 0x40
 80052d4:	d008      	beq.n	80052e8 <HAL_TIM_Base_Init+0x6c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b60      	cmp	r3, #96	; 0x60
 80052dc:	d004      	beq.n	80052e8 <HAL_TIM_Base_Init+0x6c>
 80052de:	f240 1113 	movw	r1, #275	; 0x113
 80052e2:	4824      	ldr	r0, [pc, #144]	; (8005374 <HAL_TIM_Base_Init+0xf8>)
 80052e4:	f7fb fab5 	bl	8000852 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00e      	beq.n	800530e <HAL_TIM_Base_Init+0x92>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f8:	d009      	beq.n	800530e <HAL_TIM_Base_Init+0x92>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005302:	d004      	beq.n	800530e <HAL_TIM_Base_Init+0x92>
 8005304:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005308:	481a      	ldr	r0, [pc, #104]	; (8005374 <HAL_TIM_Base_Init+0xf8>)
 800530a:	f7fb faa2 	bl	8000852 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_TIM_Base_Init+0xac>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b80      	cmp	r3, #128	; 0x80
 800531c:	d004      	beq.n	8005328 <HAL_TIM_Base_Init+0xac>
 800531e:	f240 1115 	movw	r1, #277	; 0x115
 8005322:	4814      	ldr	r0, [pc, #80]	; (8005374 <HAL_TIM_Base_Init+0xf8>)
 8005324:	f7fb fa95 	bl	8000852 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <HAL_TIM_Base_Init+0xc6>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fb fc11 	bl	8000b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f000 fa77 	bl	8005848 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40000400 	.word	0x40000400
 8005374:	08005da8 	.word	0x08005da8

08005378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_TIM_ConfigClockSource+0x18>
 800538c:	2302      	movs	r3, #2
 800538e:	e251      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x4bc>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a8:	d029      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x86>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b2:	d024      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x86>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d020      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x86>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d01c      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x86>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d018      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x86>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b30      	cmp	r3, #48	; 0x30
 80053d2:	d014      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x86>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d010      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x86>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b50      	cmp	r3, #80	; 0x50
 80053e2:	d00c      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x86>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b60      	cmp	r3, #96	; 0x60
 80053ea:	d008      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x86>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b70      	cmp	r3, #112	; 0x70
 80053f2:	d004      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x86>
 80053f4:	f241 118a 	movw	r1, #4490	; 0x118a
 80053f8:	488d      	ldr	r0, [pc, #564]	; (8005630 <HAL_TIM_ConfigClockSource+0x2b8>)
 80053fa:	f7fb fa2a 	bl	8000852 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800540c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005414:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	f000 8198 	beq.w	8005758 <HAL_TIM_ConfigClockSource+0x3e0>
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d80f      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0xd4>
 800542c:	2b10      	cmp	r3, #16
 800542e:	f000 81da 	beq.w	80057e6 <HAL_TIM_ConfigClockSource+0x46e>
 8005432:	2b10      	cmp	r3, #16
 8005434:	d803      	bhi.n	800543e <HAL_TIM_ConfigClockSource+0xc6>
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 81d5 	beq.w	80057e6 <HAL_TIM_ConfigClockSource+0x46e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800543c:	e1f1      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x4aa>
  switch (sClockSourceConfig->ClockSource)
 800543e:	2b20      	cmp	r3, #32
 8005440:	f000 81d1 	beq.w	80057e6 <HAL_TIM_ConfigClockSource+0x46e>
 8005444:	2b30      	cmp	r3, #48	; 0x30
 8005446:	f000 81ce 	beq.w	80057e6 <HAL_TIM_ConfigClockSource+0x46e>
      break;
 800544a:	e1ea      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x4aa>
  switch (sClockSourceConfig->ClockSource)
 800544c:	2b70      	cmp	r3, #112	; 0x70
 800544e:	d027      	beq.n	80054a0 <HAL_TIM_ConfigClockSource+0x128>
 8005450:	2b70      	cmp	r3, #112	; 0x70
 8005452:	d806      	bhi.n	8005462 <HAL_TIM_ConfigClockSource+0xea>
 8005454:	2b50      	cmp	r3, #80	; 0x50
 8005456:	f000 80f1 	beq.w	800563c <HAL_TIM_ConfigClockSource+0x2c4>
 800545a:	2b60      	cmp	r3, #96	; 0x60
 800545c:	f000 8135 	beq.w	80056ca <HAL_TIM_ConfigClockSource+0x352>
      break;
 8005460:	e1df      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x4aa>
  switch (sClockSourceConfig->ClockSource)
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005466:	d003      	beq.n	8005470 <HAL_TIM_ConfigClockSource+0xf8>
 8005468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546c:	d07e      	beq.n	800556c <HAL_TIM_ConfigClockSource+0x1f4>
      break;
 800546e:	e1d8      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x4aa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a6f      	ldr	r2, [pc, #444]	; (8005634 <HAL_TIM_ConfigClockSource+0x2bc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	f000 81d2 	beq.w	8005820 <HAL_TIM_ConfigClockSource+0x4a8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005484:	f000 81cc 	beq.w	8005820 <HAL_TIM_ConfigClockSource+0x4a8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a6a      	ldr	r2, [pc, #424]	; (8005638 <HAL_TIM_ConfigClockSource+0x2c0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	f000 81c6 	beq.w	8005820 <HAL_TIM_ConfigClockSource+0x4a8>
 8005494:	f241 1196 	movw	r1, #4502	; 0x1196
 8005498:	4865      	ldr	r0, [pc, #404]	; (8005630 <HAL_TIM_ConfigClockSource+0x2b8>)
 800549a:	f7fb f9da 	bl	8000852 <assert_failed>
      break;
 800549e:	e1bf      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x4a8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a63      	ldr	r2, [pc, #396]	; (8005634 <HAL_TIM_ConfigClockSource+0x2bc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x150>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b2:	d009      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x150>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a5f      	ldr	r2, [pc, #380]	; (8005638 <HAL_TIM_ConfigClockSource+0x2c0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x150>
 80054be:	f241 119d 	movw	r1, #4509	; 0x119d
 80054c2:	485b      	ldr	r0, [pc, #364]	; (8005630 <HAL_TIM_ConfigClockSource+0x2b8>)
 80054c4:	f7fb f9c5 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d013      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x180>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d8:	d00e      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x180>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d009      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x180>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054ec:	d004      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x180>
 80054ee:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 80054f2:	484f      	ldr	r0, [pc, #316]	; (8005630 <HAL_TIM_ConfigClockSource+0x2b8>)
 80054f4:	f7fb f9ad 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005500:	d014      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x1b4>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d010      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x1b4>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x1b4>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d008      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x1b4>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b0a      	cmp	r3, #10
 8005520:	d004      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x1b4>
 8005522:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8005526:	4842      	ldr	r0, [pc, #264]	; (8005630 <HAL_TIM_ConfigClockSource+0x2b8>)
 8005528:	f7fb f993 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b0f      	cmp	r3, #15
 8005532:	d904      	bls.n	800553e <HAL_TIM_ConfigClockSource+0x1c6>
 8005534:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8005538:	483d      	ldr	r0, [pc, #244]	; (8005630 <HAL_TIM_ConfigClockSource+0x2b8>)
 800553a:	f7fb f98a 	bl	8000852 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6899      	ldr	r1, [r3, #8]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f000 fa4a 	bl	80059e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005560:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	609a      	str	r2, [r3, #8]
      break;
 800556a:	e15a      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x4aa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a30      	ldr	r2, [pc, #192]	; (8005634 <HAL_TIM_ConfigClockSource+0x2bc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0x21c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557e:	d009      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0x21c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2c      	ldr	r2, [pc, #176]	; (8005638 <HAL_TIM_ConfigClockSource+0x2c0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0x21c>
 800558a:	f241 11b5 	movw	r1, #4533	; 0x11b5
 800558e:	4828      	ldr	r0, [pc, #160]	; (8005630 <HAL_TIM_ConfigClockSource+0x2b8>)
 8005590:	f7fb f95f 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d013      	beq.n	80055c4 <HAL_TIM_ConfigClockSource+0x24c>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a4:	d00e      	beq.n	80055c4 <HAL_TIM_ConfigClockSource+0x24c>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ae:	d009      	beq.n	80055c4 <HAL_TIM_ConfigClockSource+0x24c>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055b8:	d004      	beq.n	80055c4 <HAL_TIM_ConfigClockSource+0x24c>
 80055ba:	f241 11b8 	movw	r1, #4536	; 0x11b8
 80055be:	481c      	ldr	r0, [pc, #112]	; (8005630 <HAL_TIM_ConfigClockSource+0x2b8>)
 80055c0:	f7fb f947 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055cc:	d014      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0x280>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d010      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0x280>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00c      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0x280>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d008      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0x280>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b0a      	cmp	r3, #10
 80055ec:	d004      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0x280>
 80055ee:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80055f2:	480f      	ldr	r0, [pc, #60]	; (8005630 <HAL_TIM_ConfigClockSource+0x2b8>)
 80055f4:	f7fb f92d 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b0f      	cmp	r3, #15
 80055fe:	d904      	bls.n	800560a <HAL_TIM_ConfigClockSource+0x292>
 8005600:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8005604:	480a      	ldr	r0, [pc, #40]	; (8005630 <HAL_TIM_ConfigClockSource+0x2b8>)
 8005606:	f7fb f924 	bl	8000852 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6899      	ldr	r1, [r3, #8]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f000 f9e4 	bl	80059e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562c:	609a      	str	r2, [r3, #8]
      break;
 800562e:	e0f8      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x4aa>
 8005630:	08005da8 	.word	0x08005da8
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40000400 	.word	0x40000400
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a7e      	ldr	r2, [pc, #504]	; (800583c <HAL_TIM_ConfigClockSource+0x4c4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00e      	beq.n	8005664 <HAL_TIM_ConfigClockSource+0x2ec>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564e:	d009      	beq.n	8005664 <HAL_TIM_ConfigClockSource+0x2ec>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a7a      	ldr	r2, [pc, #488]	; (8005840 <HAL_TIM_ConfigClockSource+0x4c8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIM_ConfigClockSource+0x2ec>
 800565a:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800565e:	4879      	ldr	r0, [pc, #484]	; (8005844 <HAL_TIM_ConfigClockSource+0x4cc>)
 8005660:	f7fb f8f7 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566c:	d014      	beq.n	8005698 <HAL_TIM_ConfigClockSource+0x320>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d010      	beq.n	8005698 <HAL_TIM_ConfigClockSource+0x320>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00c      	beq.n	8005698 <HAL_TIM_ConfigClockSource+0x320>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d008      	beq.n	8005698 <HAL_TIM_ConfigClockSource+0x320>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b0a      	cmp	r3, #10
 800568c:	d004      	beq.n	8005698 <HAL_TIM_ConfigClockSource+0x320>
 800568e:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8005692:	486c      	ldr	r0, [pc, #432]	; (8005844 <HAL_TIM_ConfigClockSource+0x4cc>)
 8005694:	f7fb f8dd 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b0f      	cmp	r3, #15
 800569e:	d904      	bls.n	80056aa <HAL_TIM_ConfigClockSource+0x332>
 80056a0:	f241 11cd 	movw	r1, #4557	; 0x11cd
 80056a4:	4867      	ldr	r0, [pc, #412]	; (8005844 <HAL_TIM_ConfigClockSource+0x4cc>)
 80056a6:	f7fb f8d4 	bl	8000852 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f000 f91e 	bl	80058f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2150      	movs	r1, #80	; 0x50
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 f975 	bl	80059b2 <TIM_ITRx_SetConfig>
      break;
 80056c8:	e0ab      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x4aa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a5b      	ldr	r2, [pc, #364]	; (800583c <HAL_TIM_ConfigClockSource+0x4c4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00e      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x37a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d009      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x37a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a57      	ldr	r2, [pc, #348]	; (8005840 <HAL_TIM_ConfigClockSource+0x4c8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x37a>
 80056e8:	f241 11d9 	movw	r1, #4569	; 0x11d9
 80056ec:	4855      	ldr	r0, [pc, #340]	; (8005844 <HAL_TIM_ConfigClockSource+0x4cc>)
 80056ee:	f7fb f8b0 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fa:	d014      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x3ae>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x3ae>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x3ae>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d008      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x3ae>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b0a      	cmp	r3, #10
 800571a:	d004      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x3ae>
 800571c:	f241 11dc 	movw	r1, #4572	; 0x11dc
 8005720:	4848      	ldr	r0, [pc, #288]	; (8005844 <HAL_TIM_ConfigClockSource+0x4cc>)
 8005722:	f7fb f896 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2b0f      	cmp	r3, #15
 800572c:	d904      	bls.n	8005738 <HAL_TIM_ConfigClockSource+0x3c0>
 800572e:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8005732:	4844      	ldr	r0, [pc, #272]	; (8005844 <HAL_TIM_ConfigClockSource+0x4cc>)
 8005734:	f7fb f88d 	bl	8000852 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	6859      	ldr	r1, [r3, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	461a      	mov	r2, r3
 8005746:	f000 f905 	bl	8005954 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2160      	movs	r1, #96	; 0x60
 8005750:	4618      	mov	r0, r3
 8005752:	f000 f92e 	bl	80059b2 <TIM_ITRx_SetConfig>
      break;
 8005756:	e064      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x4aa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a37      	ldr	r2, [pc, #220]	; (800583c <HAL_TIM_ConfigClockSource+0x4c4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <HAL_TIM_ConfigClockSource+0x408>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576a:	d009      	beq.n	8005780 <HAL_TIM_ConfigClockSource+0x408>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a33      	ldr	r2, [pc, #204]	; (8005840 <HAL_TIM_ConfigClockSource+0x4c8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_TIM_ConfigClockSource+0x408>
 8005776:	f241 11e9 	movw	r1, #4585	; 0x11e9
 800577a:	4832      	ldr	r0, [pc, #200]	; (8005844 <HAL_TIM_ConfigClockSource+0x4cc>)
 800577c:	f7fb f869 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005788:	d014      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x43c>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d010      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x43c>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00c      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x43c>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d008      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x43c>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b0a      	cmp	r3, #10
 80057a8:	d004      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x43c>
 80057aa:	f241 11ec 	movw	r1, #4588	; 0x11ec
 80057ae:	4825      	ldr	r0, [pc, #148]	; (8005844 <HAL_TIM_ConfigClockSource+0x4cc>)
 80057b0:	f7fb f84f 	bl	8000852 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b0f      	cmp	r3, #15
 80057ba:	d904      	bls.n	80057c6 <HAL_TIM_ConfigClockSource+0x44e>
 80057bc:	f241 11ed 	movw	r1, #4589	; 0x11ed
 80057c0:	4820      	ldr	r0, [pc, #128]	; (8005844 <HAL_TIM_ConfigClockSource+0x4cc>)
 80057c2:	f7fb f846 	bl	8000852 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f000 f890 	bl	80058f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2140      	movs	r1, #64	; 0x40
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f8e7 	bl	80059b2 <TIM_ITRx_SetConfig>
      break;
 80057e4:	e01d      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x4aa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a14      	ldr	r2, [pc, #80]	; (800583c <HAL_TIM_ConfigClockSource+0x4c4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x496>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f8:	d009      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x496>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a10      	ldr	r2, [pc, #64]	; (8005840 <HAL_TIM_ConfigClockSource+0x4c8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x496>
 8005804:	f241 11fc 	movw	r1, #4604	; 0x11fc
 8005808:	480e      	ldr	r0, [pc, #56]	; (8005844 <HAL_TIM_ConfigClockSource+0x4cc>)
 800580a:	f7fb f822 	bl	8000852 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f000 f8ca 	bl	80059b2 <TIM_ITRx_SetConfig>
      break;
 800581e:	e000      	b.n	8005822 <HAL_TIM_ConfigClockSource+0x4aa>
      break;
 8005820:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40000400 	.word	0x40000400
 8005844:	08005da8 	.word	0x08005da8

08005848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a25      	ldr	r2, [pc, #148]	; (80058f0 <TIM_Base_SetConfig+0xa8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <TIM_Base_SetConfig+0x28>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005866:	d003      	beq.n	8005870 <TIM_Base_SetConfig+0x28>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <TIM_Base_SetConfig+0xac>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d108      	bne.n	8005882 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1a      	ldr	r2, [pc, #104]	; (80058f0 <TIM_Base_SetConfig+0xa8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <TIM_Base_SetConfig+0x52>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d003      	beq.n	800589a <TIM_Base_SetConfig+0x52>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <TIM_Base_SetConfig+0xac>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d108      	bne.n	80058ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <TIM_Base_SetConfig+0xa8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d103      	bne.n	80058e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	615a      	str	r2, [r3, #20]
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40000400 	.word	0x40000400

080058f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0201 	bic.w	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f023 030a 	bic.w	r3, r3, #10
 8005934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f023 0210 	bic.w	r2, r3, #16
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800597e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	031b      	lsls	r3, r3, #12
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005990:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr

080059b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f043 0307 	orr.w	r3, r3, #7
 80059d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	609a      	str	r2, [r3, #8]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b087      	sub	sp, #28
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	021a      	lsls	r2, r3, #8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	609a      	str	r2, [r3, #8]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a41      	ldr	r2, [pc, #260]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00e      	beq.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a40:	d009      	beq.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a3d      	ldr	r2, [pc, #244]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d004      	beq.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8005a4c:	f240 6164 	movw	r1, #1636	; 0x664
 8005a50:	483b      	ldr	r0, [pc, #236]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005a52:	f7fa fefe 	bl	8000852 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d020      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d01c      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d018      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b30      	cmp	r3, #48	; 0x30
 8005a74:	d014      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d010      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b50      	cmp	r3, #80	; 0x50
 8005a84:	d00c      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b60      	cmp	r3, #96	; 0x60
 8005a8c:	d008      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b70      	cmp	r3, #112	; 0x70
 8005a94:	d004      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a96:	f240 6165 	movw	r1, #1637	; 0x665
 8005a9a:	4829      	ldr	r0, [pc, #164]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005a9c:	f7fa fed9 	bl	8000852 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b80      	cmp	r3, #128	; 0x80
 8005aa6:	d008      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005ab0:	f240 6166 	movw	r1, #1638	; 0x666
 8005ab4:	4822      	ldr	r0, [pc, #136]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005ab6:	f7fa fecc 	bl	8000852 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e032      	b.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x10a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b00:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40012c00 	.word	0x40012c00
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	08005de0 	.word	0x08005de0

08005b44 <__libc_init_array>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	2500      	movs	r5, #0
 8005b48:	4e0c      	ldr	r6, [pc, #48]	; (8005b7c <__libc_init_array+0x38>)
 8005b4a:	4c0d      	ldr	r4, [pc, #52]	; (8005b80 <__libc_init_array+0x3c>)
 8005b4c:	1ba4      	subs	r4, r4, r6
 8005b4e:	10a4      	asrs	r4, r4, #2
 8005b50:	42a5      	cmp	r5, r4
 8005b52:	d109      	bne.n	8005b68 <__libc_init_array+0x24>
 8005b54:	f000 f822 	bl	8005b9c <_init>
 8005b58:	2500      	movs	r5, #0
 8005b5a:	4e0a      	ldr	r6, [pc, #40]	; (8005b84 <__libc_init_array+0x40>)
 8005b5c:	4c0a      	ldr	r4, [pc, #40]	; (8005b88 <__libc_init_array+0x44>)
 8005b5e:	1ba4      	subs	r4, r4, r6
 8005b60:	10a4      	asrs	r4, r4, #2
 8005b62:	42a5      	cmp	r5, r4
 8005b64:	d105      	bne.n	8005b72 <__libc_init_array+0x2e>
 8005b66:	bd70      	pop	{r4, r5, r6, pc}
 8005b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b6c:	4798      	blx	r3
 8005b6e:	3501      	adds	r5, #1
 8005b70:	e7ee      	b.n	8005b50 <__libc_init_array+0xc>
 8005b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b76:	4798      	blx	r3
 8005b78:	3501      	adds	r5, #1
 8005b7a:	e7f2      	b.n	8005b62 <__libc_init_array+0x1e>
 8005b7c:	08005e34 	.word	0x08005e34
 8005b80:	08005e34 	.word	0x08005e34
 8005b84:	08005e34 	.word	0x08005e34
 8005b88:	08005e38 	.word	0x08005e38

08005b8c <memset>:
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4402      	add	r2, r0
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d100      	bne.n	8005b96 <memset+0xa>
 8005b94:	4770      	bx	lr
 8005b96:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9a:	e7f9      	b.n	8005b90 <memset+0x4>

08005b9c <_init>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr

08005ba8 <_fini>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	bf00      	nop
 8005bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bae:	bc08      	pop	{r3}
 8005bb0:	469e      	mov	lr, r3
 8005bb2:	4770      	bx	lr
